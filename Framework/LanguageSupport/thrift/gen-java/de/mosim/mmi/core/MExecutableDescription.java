/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.core;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MExecutableDescription implements org.apache.thrift.TBase<MExecutableDescription, MExecutableDescription._Fields>, java.io.Serializable, Cloneable, Comparable<MExecutableDescription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MExecutableDescription");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("Language", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXECUTABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ExecutableName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("Author", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("Version", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DEPENDENCIES_FIELD_DESC = new org.apache.thrift.protocol.TField("Dependencies", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField VENDOR_FIELD_DESC = new org.apache.thrift.protocol.TField("Vendor", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField VENDOR_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("VendorDomain", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SERVICE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("ServiceUrl", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("UpdateUrl", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MExecutableDescriptionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MExecutableDescriptionTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String Name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String ID; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String Language; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String ExecutableName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String Author; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String Version; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> Dependencies; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String Vendor; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String VendorDomain; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String ServiceUrl; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String UpdateUrl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "Name"),
    ID((short)2, "ID"),
    LANGUAGE((short)3, "Language"),
    EXECUTABLE_NAME((short)4, "ExecutableName"),
    AUTHOR((short)5, "Author"),
    VERSION((short)6, "Version"),
    DEPENDENCIES((short)7, "Dependencies"),
    VENDOR((short)8, "Vendor"),
    VENDOR_DOMAIN((short)9, "VendorDomain"),
    SERVICE_URL((short)10, "ServiceUrl"),
    UPDATE_URL((short)11, "UpdateUrl");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // ID
          return ID;
        case 3: // LANGUAGE
          return LANGUAGE;
        case 4: // EXECUTABLE_NAME
          return EXECUTABLE_NAME;
        case 5: // AUTHOR
          return AUTHOR;
        case 6: // VERSION
          return VERSION;
        case 7: // DEPENDENCIES
          return DEPENDENCIES;
        case 8: // VENDOR
          return VENDOR;
        case 9: // VENDOR_DOMAIN
          return VENDOR_DOMAIN;
        case 10: // SERVICE_URL
          return SERVICE_URL;
        case 11: // UPDATE_URL
          return UPDATE_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.DEPENDENCIES,_Fields.VENDOR,_Fields.VENDOR_DOMAIN,_Fields.SERVICE_URL,_Fields.UPDATE_URL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("ID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("Language", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("ExecutableName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("Author", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("Version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPENDENCIES, new org.apache.thrift.meta_data.FieldMetaData("Dependencies", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.VENDOR, new org.apache.thrift.meta_data.FieldMetaData("Vendor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VENDOR_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("VendorDomain", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_URL, new org.apache.thrift.meta_data.FieldMetaData("ServiceUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_URL, new org.apache.thrift.meta_data.FieldMetaData("UpdateUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MExecutableDescription.class, metaDataMap);
  }

  public MExecutableDescription() {
  }

  public MExecutableDescription(
    java.lang.String Name,
    java.lang.String ID,
    java.lang.String Language,
    java.lang.String ExecutableName,
    java.lang.String Author,
    java.lang.String Version)
  {
    this();
    this.Name = Name;
    this.ID = ID;
    this.Language = Language;
    this.ExecutableName = ExecutableName;
    this.Author = Author;
    this.Version = Version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MExecutableDescription(MExecutableDescription other) {
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetID()) {
      this.ID = other.ID;
    }
    if (other.isSetLanguage()) {
      this.Language = other.Language;
    }
    if (other.isSetExecutableName()) {
      this.ExecutableName = other.ExecutableName;
    }
    if (other.isSetAuthor()) {
      this.Author = other.Author;
    }
    if (other.isSetVersion()) {
      this.Version = other.Version;
    }
    if (other.isSetDependencies()) {
      java.util.List<java.lang.String> __this__Dependencies = new java.util.ArrayList<java.lang.String>(other.Dependencies);
      this.Dependencies = __this__Dependencies;
    }
    if (other.isSetVendor()) {
      this.Vendor = other.Vendor;
    }
    if (other.isSetVendorDomain()) {
      this.VendorDomain = other.VendorDomain;
    }
    if (other.isSetServiceUrl()) {
      this.ServiceUrl = other.ServiceUrl;
    }
    if (other.isSetUpdateUrl()) {
      this.UpdateUrl = other.UpdateUrl;
    }
  }

  public MExecutableDescription deepCopy() {
    return new MExecutableDescription(this);
  }

  @Override
  public void clear() {
    this.Name = null;
    this.ID = null;
    this.Language = null;
    this.ExecutableName = null;
    this.Author = null;
    this.Version = null;
    this.Dependencies = null;
    this.Vendor = null;
    this.VendorDomain = null;
    this.ServiceUrl = null;
    this.UpdateUrl = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.Name;
  }

  public MExecutableDescription setName(@org.apache.thrift.annotation.Nullable java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getID() {
    return this.ID;
  }

  public MExecutableDescription setID(@org.apache.thrift.annotation.Nullable java.lang.String ID) {
    this.ID = ID;
    return this;
  }

  public void unsetID() {
    this.ID = null;
  }

  /** Returns true if field ID is set (has been assigned a value) and false otherwise */
  public boolean isSetID() {
    return this.ID != null;
  }

  public void setIDIsSet(boolean value) {
    if (!value) {
      this.ID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLanguage() {
    return this.Language;
  }

  public MExecutableDescription setLanguage(@org.apache.thrift.annotation.Nullable java.lang.String Language) {
    this.Language = Language;
    return this;
  }

  public void unsetLanguage() {
    this.Language = null;
  }

  /** Returns true if field Language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.Language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.Language = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getExecutableName() {
    return this.ExecutableName;
  }

  public MExecutableDescription setExecutableName(@org.apache.thrift.annotation.Nullable java.lang.String ExecutableName) {
    this.ExecutableName = ExecutableName;
    return this;
  }

  public void unsetExecutableName() {
    this.ExecutableName = null;
  }

  /** Returns true if field ExecutableName is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutableName() {
    return this.ExecutableName != null;
  }

  public void setExecutableNameIsSet(boolean value) {
    if (!value) {
      this.ExecutableName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAuthor() {
    return this.Author;
  }

  public MExecutableDescription setAuthor(@org.apache.thrift.annotation.Nullable java.lang.String Author) {
    this.Author = Author;
    return this;
  }

  public void unsetAuthor() {
    this.Author = null;
  }

  /** Returns true if field Author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.Author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.Author = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVersion() {
    return this.Version;
  }

  public MExecutableDescription setVersion(@org.apache.thrift.annotation.Nullable java.lang.String Version) {
    this.Version = Version;
    return this;
  }

  public void unsetVersion() {
    this.Version = null;
  }

  /** Returns true if field Version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.Version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.Version = null;
    }
  }

  public int getDependenciesSize() {
    return (this.Dependencies == null) ? 0 : this.Dependencies.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getDependenciesIterator() {
    return (this.Dependencies == null) ? null : this.Dependencies.iterator();
  }

  public void addToDependencies(java.lang.String elem) {
    if (this.Dependencies == null) {
      this.Dependencies = new java.util.ArrayList<java.lang.String>();
    }
    this.Dependencies.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getDependencies() {
    return this.Dependencies;
  }

  public MExecutableDescription setDependencies(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> Dependencies) {
    this.Dependencies = Dependencies;
    return this;
  }

  public void unsetDependencies() {
    this.Dependencies = null;
  }

  /** Returns true if field Dependencies is set (has been assigned a value) and false otherwise */
  public boolean isSetDependencies() {
    return this.Dependencies != null;
  }

  public void setDependenciesIsSet(boolean value) {
    if (!value) {
      this.Dependencies = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVendor() {
    return this.Vendor;
  }

  public MExecutableDescription setVendor(@org.apache.thrift.annotation.Nullable java.lang.String Vendor) {
    this.Vendor = Vendor;
    return this;
  }

  public void unsetVendor() {
    this.Vendor = null;
  }

  /** Returns true if field Vendor is set (has been assigned a value) and false otherwise */
  public boolean isSetVendor() {
    return this.Vendor != null;
  }

  public void setVendorIsSet(boolean value) {
    if (!value) {
      this.Vendor = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVendorDomain() {
    return this.VendorDomain;
  }

  public MExecutableDescription setVendorDomain(@org.apache.thrift.annotation.Nullable java.lang.String VendorDomain) {
    this.VendorDomain = VendorDomain;
    return this;
  }

  public void unsetVendorDomain() {
    this.VendorDomain = null;
  }

  /** Returns true if field VendorDomain is set (has been assigned a value) and false otherwise */
  public boolean isSetVendorDomain() {
    return this.VendorDomain != null;
  }

  public void setVendorDomainIsSet(boolean value) {
    if (!value) {
      this.VendorDomain = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getServiceUrl() {
    return this.ServiceUrl;
  }

  public MExecutableDescription setServiceUrl(@org.apache.thrift.annotation.Nullable java.lang.String ServiceUrl) {
    this.ServiceUrl = ServiceUrl;
    return this;
  }

  public void unsetServiceUrl() {
    this.ServiceUrl = null;
  }

  /** Returns true if field ServiceUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceUrl() {
    return this.ServiceUrl != null;
  }

  public void setServiceUrlIsSet(boolean value) {
    if (!value) {
      this.ServiceUrl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUpdateUrl() {
    return this.UpdateUrl;
  }

  public MExecutableDescription setUpdateUrl(@org.apache.thrift.annotation.Nullable java.lang.String UpdateUrl) {
    this.UpdateUrl = UpdateUrl;
    return this;
  }

  public void unsetUpdateUrl() {
    this.UpdateUrl = null;
  }

  /** Returns true if field UpdateUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateUrl() {
    return this.UpdateUrl != null;
  }

  public void setUpdateUrlIsSet(boolean value) {
    if (!value) {
      this.UpdateUrl = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetID();
      } else {
        setID((java.lang.String)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((java.lang.String)value);
      }
      break;

    case EXECUTABLE_NAME:
      if (value == null) {
        unsetExecutableName();
      } else {
        setExecutableName((java.lang.String)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((java.lang.String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.String)value);
      }
      break;

    case DEPENDENCIES:
      if (value == null) {
        unsetDependencies();
      } else {
        setDependencies((java.util.List<java.lang.String>)value);
      }
      break;

    case VENDOR:
      if (value == null) {
        unsetVendor();
      } else {
        setVendor((java.lang.String)value);
      }
      break;

    case VENDOR_DOMAIN:
      if (value == null) {
        unsetVendorDomain();
      } else {
        setVendorDomain((java.lang.String)value);
      }
      break;

    case SERVICE_URL:
      if (value == null) {
        unsetServiceUrl();
      } else {
        setServiceUrl((java.lang.String)value);
      }
      break;

    case UPDATE_URL:
      if (value == null) {
        unsetUpdateUrl();
      } else {
        setUpdateUrl((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case ID:
      return getID();

    case LANGUAGE:
      return getLanguage();

    case EXECUTABLE_NAME:
      return getExecutableName();

    case AUTHOR:
      return getAuthor();

    case VERSION:
      return getVersion();

    case DEPENDENCIES:
      return getDependencies();

    case VENDOR:
      return getVendor();

    case VENDOR_DOMAIN:
      return getVendorDomain();

    case SERVICE_URL:
      return getServiceUrl();

    case UPDATE_URL:
      return getUpdateUrl();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case ID:
      return isSetID();
    case LANGUAGE:
      return isSetLanguage();
    case EXECUTABLE_NAME:
      return isSetExecutableName();
    case AUTHOR:
      return isSetAuthor();
    case VERSION:
      return isSetVersion();
    case DEPENDENCIES:
      return isSetDependencies();
    case VENDOR:
      return isSetVendor();
    case VENDOR_DOMAIN:
      return isSetVendorDomain();
    case SERVICE_URL:
      return isSetServiceUrl();
    case UPDATE_URL:
      return isSetUpdateUrl();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MExecutableDescription)
      return this.equals((MExecutableDescription)that);
    return false;
  }

  public boolean equals(MExecutableDescription that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_ID = true && this.isSetID();
    boolean that_present_ID = true && that.isSetID();
    if (this_present_ID || that_present_ID) {
      if (!(this_present_ID && that_present_ID))
        return false;
      if (!this.ID.equals(that.ID))
        return false;
    }

    boolean this_present_Language = true && this.isSetLanguage();
    boolean that_present_Language = true && that.isSetLanguage();
    if (this_present_Language || that_present_Language) {
      if (!(this_present_Language && that_present_Language))
        return false;
      if (!this.Language.equals(that.Language))
        return false;
    }

    boolean this_present_ExecutableName = true && this.isSetExecutableName();
    boolean that_present_ExecutableName = true && that.isSetExecutableName();
    if (this_present_ExecutableName || that_present_ExecutableName) {
      if (!(this_present_ExecutableName && that_present_ExecutableName))
        return false;
      if (!this.ExecutableName.equals(that.ExecutableName))
        return false;
    }

    boolean this_present_Author = true && this.isSetAuthor();
    boolean that_present_Author = true && that.isSetAuthor();
    if (this_present_Author || that_present_Author) {
      if (!(this_present_Author && that_present_Author))
        return false;
      if (!this.Author.equals(that.Author))
        return false;
    }

    boolean this_present_Version = true && this.isSetVersion();
    boolean that_present_Version = true && that.isSetVersion();
    if (this_present_Version || that_present_Version) {
      if (!(this_present_Version && that_present_Version))
        return false;
      if (!this.Version.equals(that.Version))
        return false;
    }

    boolean this_present_Dependencies = true && this.isSetDependencies();
    boolean that_present_Dependencies = true && that.isSetDependencies();
    if (this_present_Dependencies || that_present_Dependencies) {
      if (!(this_present_Dependencies && that_present_Dependencies))
        return false;
      if (!this.Dependencies.equals(that.Dependencies))
        return false;
    }

    boolean this_present_Vendor = true && this.isSetVendor();
    boolean that_present_Vendor = true && that.isSetVendor();
    if (this_present_Vendor || that_present_Vendor) {
      if (!(this_present_Vendor && that_present_Vendor))
        return false;
      if (!this.Vendor.equals(that.Vendor))
        return false;
    }

    boolean this_present_VendorDomain = true && this.isSetVendorDomain();
    boolean that_present_VendorDomain = true && that.isSetVendorDomain();
    if (this_present_VendorDomain || that_present_VendorDomain) {
      if (!(this_present_VendorDomain && that_present_VendorDomain))
        return false;
      if (!this.VendorDomain.equals(that.VendorDomain))
        return false;
    }

    boolean this_present_ServiceUrl = true && this.isSetServiceUrl();
    boolean that_present_ServiceUrl = true && that.isSetServiceUrl();
    if (this_present_ServiceUrl || that_present_ServiceUrl) {
      if (!(this_present_ServiceUrl && that_present_ServiceUrl))
        return false;
      if (!this.ServiceUrl.equals(that.ServiceUrl))
        return false;
    }

    boolean this_present_UpdateUrl = true && this.isSetUpdateUrl();
    boolean that_present_UpdateUrl = true && that.isSetUpdateUrl();
    if (this_present_UpdateUrl || that_present_UpdateUrl) {
      if (!(this_present_UpdateUrl && that_present_UpdateUrl))
        return false;
      if (!this.UpdateUrl.equals(that.UpdateUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetID()) ? 131071 : 524287);
    if (isSetID())
      hashCode = hashCode * 8191 + ID.hashCode();

    hashCode = hashCode * 8191 + ((isSetLanguage()) ? 131071 : 524287);
    if (isSetLanguage())
      hashCode = hashCode * 8191 + Language.hashCode();

    hashCode = hashCode * 8191 + ((isSetExecutableName()) ? 131071 : 524287);
    if (isSetExecutableName())
      hashCode = hashCode * 8191 + ExecutableName.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthor()) ? 131071 : 524287);
    if (isSetAuthor())
      hashCode = hashCode * 8191 + Author.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + Version.hashCode();

    hashCode = hashCode * 8191 + ((isSetDependencies()) ? 131071 : 524287);
    if (isSetDependencies())
      hashCode = hashCode * 8191 + Dependencies.hashCode();

    hashCode = hashCode * 8191 + ((isSetVendor()) ? 131071 : 524287);
    if (isSetVendor())
      hashCode = hashCode * 8191 + Vendor.hashCode();

    hashCode = hashCode * 8191 + ((isSetVendorDomain()) ? 131071 : 524287);
    if (isSetVendorDomain())
      hashCode = hashCode * 8191 + VendorDomain.hashCode();

    hashCode = hashCode * 8191 + ((isSetServiceUrl()) ? 131071 : 524287);
    if (isSetServiceUrl())
      hashCode = hashCode * 8191 + ServiceUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateUrl()) ? 131071 : 524287);
    if (isSetUpdateUrl())
      hashCode = hashCode * 8191 + UpdateUrl.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MExecutableDescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetID()).compareTo(other.isSetID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, other.ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLanguage()).compareTo(other.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Language, other.Language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecutableName()).compareTo(other.isSetExecutableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ExecutableName, other.ExecutableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Author, other.Author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Version, other.Version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDependencies()).compareTo(other.isSetDependencies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependencies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Dependencies, other.Dependencies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVendor()).compareTo(other.isSetVendor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVendor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Vendor, other.Vendor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVendorDomain()).compareTo(other.isSetVendorDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVendorDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VendorDomain, other.VendorDomain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServiceUrl()).compareTo(other.isSetServiceUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ServiceUrl, other.ServiceUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateUrl()).compareTo(other.isSetUpdateUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UpdateUrl, other.UpdateUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MExecutableDescription(");
    boolean first = true;

    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ID:");
    if (this.ID == null) {
      sb.append("null");
    } else {
      sb.append(this.ID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Language:");
    if (this.Language == null) {
      sb.append("null");
    } else {
      sb.append(this.Language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ExecutableName:");
    if (this.ExecutableName == null) {
      sb.append("null");
    } else {
      sb.append(this.ExecutableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Author:");
    if (this.Author == null) {
      sb.append("null");
    } else {
      sb.append(this.Author);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Version:");
    if (this.Version == null) {
      sb.append("null");
    } else {
      sb.append(this.Version);
    }
    first = false;
    if (isSetDependencies()) {
      if (!first) sb.append(", ");
      sb.append("Dependencies:");
      if (this.Dependencies == null) {
        sb.append("null");
      } else {
        sb.append(this.Dependencies);
      }
      first = false;
    }
    if (isSetVendor()) {
      if (!first) sb.append(", ");
      sb.append("Vendor:");
      if (this.Vendor == null) {
        sb.append("null");
      } else {
        sb.append(this.Vendor);
      }
      first = false;
    }
    if (isSetVendorDomain()) {
      if (!first) sb.append(", ");
      sb.append("VendorDomain:");
      if (this.VendorDomain == null) {
        sb.append("null");
      } else {
        sb.append(this.VendorDomain);
      }
      first = false;
    }
    if (isSetServiceUrl()) {
      if (!first) sb.append(", ");
      sb.append("ServiceUrl:");
      if (this.ServiceUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.ServiceUrl);
      }
      first = false;
    }
    if (isSetUpdateUrl()) {
      if (!first) sb.append(", ");
      sb.append("UpdateUrl:");
      if (this.UpdateUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.UpdateUrl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (Name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Name' was not present! Struct: " + toString());
    }
    if (ID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID' was not present! Struct: " + toString());
    }
    if (Language == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Language' was not present! Struct: " + toString());
    }
    if (ExecutableName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ExecutableName' was not present! Struct: " + toString());
    }
    if (Author == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Author' was not present! Struct: " + toString());
    }
    if (Version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MExecutableDescriptionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MExecutableDescriptionStandardScheme getScheme() {
      return new MExecutableDescriptionStandardScheme();
    }
  }

  private static class MExecutableDescriptionStandardScheme extends org.apache.thrift.scheme.StandardScheme<MExecutableDescription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MExecutableDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ID = iprot.readString();
              struct.setIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXECUTABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ExecutableName = iprot.readString();
              struct.setExecutableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Author = iprot.readString();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEPENDENCIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.Dependencies = new java.util.ArrayList<java.lang.String>(_list8.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readString();
                  struct.Dependencies.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setDependenciesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VENDOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Vendor = iprot.readString();
              struct.setVendorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VENDOR_DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.VendorDomain = iprot.readString();
              struct.setVendorDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SERVICE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ServiceUrl = iprot.readString();
              struct.setServiceUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.UpdateUrl = iprot.readString();
              struct.setUpdateUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MExecutableDescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.ID != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.ID);
        oprot.writeFieldEnd();
      }
      if (struct.Language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(struct.Language);
        oprot.writeFieldEnd();
      }
      if (struct.ExecutableName != null) {
        oprot.writeFieldBegin(EXECUTABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.ExecutableName);
        oprot.writeFieldEnd();
      }
      if (struct.Author != null) {
        oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
        oprot.writeString(struct.Author);
        oprot.writeFieldEnd();
      }
      if (struct.Version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.Version);
        oprot.writeFieldEnd();
      }
      if (struct.Dependencies != null) {
        if (struct.isSetDependencies()) {
          oprot.writeFieldBegin(DEPENDENCIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.Dependencies.size()));
            for (java.lang.String _iter11 : struct.Dependencies)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.Vendor != null) {
        if (struct.isSetVendor()) {
          oprot.writeFieldBegin(VENDOR_FIELD_DESC);
          oprot.writeString(struct.Vendor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.VendorDomain != null) {
        if (struct.isSetVendorDomain()) {
          oprot.writeFieldBegin(VENDOR_DOMAIN_FIELD_DESC);
          oprot.writeString(struct.VendorDomain);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ServiceUrl != null) {
        if (struct.isSetServiceUrl()) {
          oprot.writeFieldBegin(SERVICE_URL_FIELD_DESC);
          oprot.writeString(struct.ServiceUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.UpdateUrl != null) {
        if (struct.isSetUpdateUrl()) {
          oprot.writeFieldBegin(UPDATE_URL_FIELD_DESC);
          oprot.writeString(struct.UpdateUrl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MExecutableDescriptionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MExecutableDescriptionTupleScheme getScheme() {
      return new MExecutableDescriptionTupleScheme();
    }
  }

  private static class MExecutableDescriptionTupleScheme extends org.apache.thrift.scheme.TupleScheme<MExecutableDescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MExecutableDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.Name);
      oprot.writeString(struct.ID);
      oprot.writeString(struct.Language);
      oprot.writeString(struct.ExecutableName);
      oprot.writeString(struct.Author);
      oprot.writeString(struct.Version);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDependencies()) {
        optionals.set(0);
      }
      if (struct.isSetVendor()) {
        optionals.set(1);
      }
      if (struct.isSetVendorDomain()) {
        optionals.set(2);
      }
      if (struct.isSetServiceUrl()) {
        optionals.set(3);
      }
      if (struct.isSetUpdateUrl()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDependencies()) {
        {
          oprot.writeI32(struct.Dependencies.size());
          for (java.lang.String _iter12 : struct.Dependencies)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetVendor()) {
        oprot.writeString(struct.Vendor);
      }
      if (struct.isSetVendorDomain()) {
        oprot.writeString(struct.VendorDomain);
      }
      if (struct.isSetServiceUrl()) {
        oprot.writeString(struct.ServiceUrl);
      }
      if (struct.isSetUpdateUrl()) {
        oprot.writeString(struct.UpdateUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MExecutableDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.Name = iprot.readString();
      struct.setNameIsSet(true);
      struct.ID = iprot.readString();
      struct.setIDIsSet(true);
      struct.Language = iprot.readString();
      struct.setLanguageIsSet(true);
      struct.ExecutableName = iprot.readString();
      struct.setExecutableNameIsSet(true);
      struct.Author = iprot.readString();
      struct.setAuthorIsSet(true);
      struct.Version = iprot.readString();
      struct.setVersionIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.Dependencies = new java.util.ArrayList<java.lang.String>(_list13.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.Dependencies.add(_elem14);
          }
        }
        struct.setDependenciesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Vendor = iprot.readString();
        struct.setVendorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.VendorDomain = iprot.readString();
        struct.setVendorDomainIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ServiceUrl = iprot.readString();
        struct.setServiceUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.UpdateUrl = iprot.readString();
        struct.setUpdateUrlIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

