/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.register;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MMIAdapter {

  public interface Iface {

    public de.mosim.mmi.core.MBoolResponse Initialize(de.mosim.mmi.avatar.MAvatarDescription avatarDescription, java.util.Map<java.lang.String,java.lang.String> properties, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException;

    public de.mosim.mmi.core.MBoolResponse AssignInstruction(de.mosim.mmi.mmu.MInstruction instruction, de.mosim.mmi.mmu.MSimulationState simulationState, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException;

    public de.mosim.mmi.mmu.MSimulationResult DoStep(double time, de.mosim.mmi.mmu.MSimulationState simulationState, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException;

    public java.util.List<de.mosim.mmi.constraints.MConstraint> GetBoundaryConstraints(de.mosim.mmi.mmu.MInstruction instruction, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException;

    public de.mosim.mmi.core.MBoolResponse CheckPrerequisites(de.mosim.mmi.mmu.MInstruction instruction, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException;

    public de.mosim.mmi.core.MBoolResponse Abort(java.lang.String instructionID, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException;

    public de.mosim.mmi.core.MBoolResponse Dispose(java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException;

    public java.util.Map<java.lang.String,java.lang.String> ExecuteFunction(java.lang.String name, java.util.Map<java.lang.String,java.lang.String> parameters, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException;

    public java.util.Map<java.lang.String,java.lang.String> GetStatus() throws org.apache.thrift.TException;

    public MAdapterDescription GetAdapterDescription() throws org.apache.thrift.TException;

    public de.mosim.mmi.core.MBoolResponse CreateSession(java.lang.String sessionID) throws org.apache.thrift.TException;

    public de.mosim.mmi.core.MBoolResponse CloseSession(java.lang.String sessionID) throws org.apache.thrift.TException;

    public de.mosim.mmi.core.MBoolResponse PushScene(de.mosim.mmi.scene.MSceneUpdate sceneUpdates, java.lang.String sessionID) throws org.apache.thrift.TException;

    public java.util.List<de.mosim.mmi.mmu.MMUDescription> GetLoadableMMUs() throws org.apache.thrift.TException;

    public java.util.List<de.mosim.mmi.mmu.MMUDescription> GetMMus(java.lang.String sessionID) throws org.apache.thrift.TException;

    public de.mosim.mmi.mmu.MMUDescription GetDescription(java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException;

    public java.util.List<de.mosim.mmi.scene.MSceneObject> GetScene(java.lang.String sessionID) throws org.apache.thrift.TException;

    public de.mosim.mmi.scene.MSceneUpdate GetSceneChanges(java.lang.String sessionID) throws org.apache.thrift.TException;

    public java.util.Map<java.lang.String,java.lang.String> LoadMMUs(java.util.List<java.lang.String> mmus, java.lang.String sessionID) throws org.apache.thrift.TException;

    public java.nio.ByteBuffer CreateCheckpoint(java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException;

    public de.mosim.mmi.core.MBoolResponse RestoreCheckpoint(java.lang.String mmuID, java.lang.String sessionID, java.nio.ByteBuffer checkpointData) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void Initialize(de.mosim.mmi.avatar.MAvatarDescription avatarDescription, java.util.Map<java.lang.String,java.lang.String> properties, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

    public void AssignInstruction(de.mosim.mmi.mmu.MInstruction instruction, de.mosim.mmi.mmu.MSimulationState simulationState, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

    public void DoStep(double time, de.mosim.mmi.mmu.MSimulationState simulationState, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.mmu.MSimulationResult> resultHandler) throws org.apache.thrift.TException;

    public void GetBoundaryConstraints(de.mosim.mmi.mmu.MInstruction instruction, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.constraints.MConstraint>> resultHandler) throws org.apache.thrift.TException;

    public void CheckPrerequisites(de.mosim.mmi.mmu.MInstruction instruction, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

    public void Abort(java.lang.String instructionID, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

    public void Dispose(java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

    public void ExecuteFunction(java.lang.String name, java.util.Map<java.lang.String,java.lang.String> parameters, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void GetStatus(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void GetAdapterDescription(org.apache.thrift.async.AsyncMethodCallback<MAdapterDescription> resultHandler) throws org.apache.thrift.TException;

    public void CreateSession(java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

    public void CloseSession(java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

    public void PushScene(de.mosim.mmi.scene.MSceneUpdate sceneUpdates, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

    public void GetLoadableMMUs(org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.mmu.MMUDescription>> resultHandler) throws org.apache.thrift.TException;

    public void GetMMus(java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.mmu.MMUDescription>> resultHandler) throws org.apache.thrift.TException;

    public void GetDescription(java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.mmu.MMUDescription> resultHandler) throws org.apache.thrift.TException;

    public void GetScene(java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.scene.MSceneObject>> resultHandler) throws org.apache.thrift.TException;

    public void GetSceneChanges(java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.scene.MSceneUpdate> resultHandler) throws org.apache.thrift.TException;

    public void LoadMMUs(java.util.List<java.lang.String> mmus, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void CreateCheckpoint(java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException;

    public void RestoreCheckpoint(java.lang.String mmuID, java.lang.String sessionID, java.nio.ByteBuffer checkpointData, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public de.mosim.mmi.core.MBoolResponse Initialize(de.mosim.mmi.avatar.MAvatarDescription avatarDescription, java.util.Map<java.lang.String,java.lang.String> properties, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_Initialize(avatarDescription, properties, mmuID, sessionID);
      return recv_Initialize();
    }

    public void send_Initialize(de.mosim.mmi.avatar.MAvatarDescription avatarDescription, java.util.Map<java.lang.String,java.lang.String> properties, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      Initialize_args args = new Initialize_args();
      args.setAvatarDescription(avatarDescription);
      args.setProperties(properties);
      args.setMmuID(mmuID);
      args.setSessionID(sessionID);
      sendBase("Initialize", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_Initialize() throws org.apache.thrift.TException
    {
      Initialize_result result = new Initialize_result();
      receiveBase(result, "Initialize");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Initialize failed: unknown result");
    }

    public de.mosim.mmi.core.MBoolResponse AssignInstruction(de.mosim.mmi.mmu.MInstruction instruction, de.mosim.mmi.mmu.MSimulationState simulationState, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_AssignInstruction(instruction, simulationState, mmuID, sessionID);
      return recv_AssignInstruction();
    }

    public void send_AssignInstruction(de.mosim.mmi.mmu.MInstruction instruction, de.mosim.mmi.mmu.MSimulationState simulationState, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      AssignInstruction_args args = new AssignInstruction_args();
      args.setInstruction(instruction);
      args.setSimulationState(simulationState);
      args.setMmuID(mmuID);
      args.setSessionID(sessionID);
      sendBase("AssignInstruction", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_AssignInstruction() throws org.apache.thrift.TException
    {
      AssignInstruction_result result = new AssignInstruction_result();
      receiveBase(result, "AssignInstruction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AssignInstruction failed: unknown result");
    }

    public de.mosim.mmi.mmu.MSimulationResult DoStep(double time, de.mosim.mmi.mmu.MSimulationState simulationState, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_DoStep(time, simulationState, mmuID, sessionID);
      return recv_DoStep();
    }

    public void send_DoStep(double time, de.mosim.mmi.mmu.MSimulationState simulationState, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      DoStep_args args = new DoStep_args();
      args.setTime(time);
      args.setSimulationState(simulationState);
      args.setMmuID(mmuID);
      args.setSessionID(sessionID);
      sendBase("DoStep", args);
    }

    public de.mosim.mmi.mmu.MSimulationResult recv_DoStep() throws org.apache.thrift.TException
    {
      DoStep_result result = new DoStep_result();
      receiveBase(result, "DoStep");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DoStep failed: unknown result");
    }

    public java.util.List<de.mosim.mmi.constraints.MConstraint> GetBoundaryConstraints(de.mosim.mmi.mmu.MInstruction instruction, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_GetBoundaryConstraints(instruction, mmuID, sessionID);
      return recv_GetBoundaryConstraints();
    }

    public void send_GetBoundaryConstraints(de.mosim.mmi.mmu.MInstruction instruction, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      GetBoundaryConstraints_args args = new GetBoundaryConstraints_args();
      args.setInstruction(instruction);
      args.setMmuID(mmuID);
      args.setSessionID(sessionID);
      sendBase("GetBoundaryConstraints", args);
    }

    public java.util.List<de.mosim.mmi.constraints.MConstraint> recv_GetBoundaryConstraints() throws org.apache.thrift.TException
    {
      GetBoundaryConstraints_result result = new GetBoundaryConstraints_result();
      receiveBase(result, "GetBoundaryConstraints");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetBoundaryConstraints failed: unknown result");
    }

    public de.mosim.mmi.core.MBoolResponse CheckPrerequisites(de.mosim.mmi.mmu.MInstruction instruction, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_CheckPrerequisites(instruction, mmuID, sessionID);
      return recv_CheckPrerequisites();
    }

    public void send_CheckPrerequisites(de.mosim.mmi.mmu.MInstruction instruction, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      CheckPrerequisites_args args = new CheckPrerequisites_args();
      args.setInstruction(instruction);
      args.setMmuID(mmuID);
      args.setSessionID(sessionID);
      sendBase("CheckPrerequisites", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_CheckPrerequisites() throws org.apache.thrift.TException
    {
      CheckPrerequisites_result result = new CheckPrerequisites_result();
      receiveBase(result, "CheckPrerequisites");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CheckPrerequisites failed: unknown result");
    }

    public de.mosim.mmi.core.MBoolResponse Abort(java.lang.String instructionID, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_Abort(instructionID, mmuID, sessionID);
      return recv_Abort();
    }

    public void send_Abort(java.lang.String instructionID, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      Abort_args args = new Abort_args();
      args.setInstructionID(instructionID);
      args.setMmuID(mmuID);
      args.setSessionID(sessionID);
      sendBase("Abort", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_Abort() throws org.apache.thrift.TException
    {
      Abort_result result = new Abort_result();
      receiveBase(result, "Abort");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Abort failed: unknown result");
    }

    public de.mosim.mmi.core.MBoolResponse Dispose(java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_Dispose(mmuID, sessionID);
      return recv_Dispose();
    }

    public void send_Dispose(java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      Dispose_args args = new Dispose_args();
      args.setMmuID(mmuID);
      args.setSessionID(sessionID);
      sendBase("Dispose", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_Dispose() throws org.apache.thrift.TException
    {
      Dispose_result result = new Dispose_result();
      receiveBase(result, "Dispose");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Dispose failed: unknown result");
    }

    public java.util.Map<java.lang.String,java.lang.String> ExecuteFunction(java.lang.String name, java.util.Map<java.lang.String,java.lang.String> parameters, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_ExecuteFunction(name, parameters, mmuID, sessionID);
      return recv_ExecuteFunction();
    }

    public void send_ExecuteFunction(java.lang.String name, java.util.Map<java.lang.String,java.lang.String> parameters, java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      ExecuteFunction_args args = new ExecuteFunction_args();
      args.setName(name);
      args.setParameters(parameters);
      args.setMmuID(mmuID);
      args.setSessionID(sessionID);
      sendBase("ExecuteFunction", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_ExecuteFunction() throws org.apache.thrift.TException
    {
      ExecuteFunction_result result = new ExecuteFunction_result();
      receiveBase(result, "ExecuteFunction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ExecuteFunction failed: unknown result");
    }

    public java.util.Map<java.lang.String,java.lang.String> GetStatus() throws org.apache.thrift.TException
    {
      send_GetStatus();
      return recv_GetStatus();
    }

    public void send_GetStatus() throws org.apache.thrift.TException
    {
      GetStatus_args args = new GetStatus_args();
      sendBase("GetStatus", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_GetStatus() throws org.apache.thrift.TException
    {
      GetStatus_result result = new GetStatus_result();
      receiveBase(result, "GetStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetStatus failed: unknown result");
    }

    public MAdapterDescription GetAdapterDescription() throws org.apache.thrift.TException
    {
      send_GetAdapterDescription();
      return recv_GetAdapterDescription();
    }

    public void send_GetAdapterDescription() throws org.apache.thrift.TException
    {
      GetAdapterDescription_args args = new GetAdapterDescription_args();
      sendBase("GetAdapterDescription", args);
    }

    public MAdapterDescription recv_GetAdapterDescription() throws org.apache.thrift.TException
    {
      GetAdapterDescription_result result = new GetAdapterDescription_result();
      receiveBase(result, "GetAdapterDescription");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAdapterDescription failed: unknown result");
    }

    public de.mosim.mmi.core.MBoolResponse CreateSession(java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_CreateSession(sessionID);
      return recv_CreateSession();
    }

    public void send_CreateSession(java.lang.String sessionID) throws org.apache.thrift.TException
    {
      CreateSession_args args = new CreateSession_args();
      args.setSessionID(sessionID);
      sendBase("CreateSession", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_CreateSession() throws org.apache.thrift.TException
    {
      CreateSession_result result = new CreateSession_result();
      receiveBase(result, "CreateSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CreateSession failed: unknown result");
    }

    public de.mosim.mmi.core.MBoolResponse CloseSession(java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_CloseSession(sessionID);
      return recv_CloseSession();
    }

    public void send_CloseSession(java.lang.String sessionID) throws org.apache.thrift.TException
    {
      CloseSession_args args = new CloseSession_args();
      args.setSessionID(sessionID);
      sendBase("CloseSession", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_CloseSession() throws org.apache.thrift.TException
    {
      CloseSession_result result = new CloseSession_result();
      receiveBase(result, "CloseSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CloseSession failed: unknown result");
    }

    public de.mosim.mmi.core.MBoolResponse PushScene(de.mosim.mmi.scene.MSceneUpdate sceneUpdates, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_PushScene(sceneUpdates, sessionID);
      return recv_PushScene();
    }

    public void send_PushScene(de.mosim.mmi.scene.MSceneUpdate sceneUpdates, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      PushScene_args args = new PushScene_args();
      args.setSceneUpdates(sceneUpdates);
      args.setSessionID(sessionID);
      sendBase("PushScene", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_PushScene() throws org.apache.thrift.TException
    {
      PushScene_result result = new PushScene_result();
      receiveBase(result, "PushScene");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "PushScene failed: unknown result");
    }

    public java.util.List<de.mosim.mmi.mmu.MMUDescription> GetLoadableMMUs() throws org.apache.thrift.TException
    {
      send_GetLoadableMMUs();
      return recv_GetLoadableMMUs();
    }

    public void send_GetLoadableMMUs() throws org.apache.thrift.TException
    {
      GetLoadableMMUs_args args = new GetLoadableMMUs_args();
      sendBase("GetLoadableMMUs", args);
    }

    public java.util.List<de.mosim.mmi.mmu.MMUDescription> recv_GetLoadableMMUs() throws org.apache.thrift.TException
    {
      GetLoadableMMUs_result result = new GetLoadableMMUs_result();
      receiveBase(result, "GetLoadableMMUs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetLoadableMMUs failed: unknown result");
    }

    public java.util.List<de.mosim.mmi.mmu.MMUDescription> GetMMus(java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_GetMMus(sessionID);
      return recv_GetMMus();
    }

    public void send_GetMMus(java.lang.String sessionID) throws org.apache.thrift.TException
    {
      GetMMus_args args = new GetMMus_args();
      args.setSessionID(sessionID);
      sendBase("GetMMus", args);
    }

    public java.util.List<de.mosim.mmi.mmu.MMUDescription> recv_GetMMus() throws org.apache.thrift.TException
    {
      GetMMus_result result = new GetMMus_result();
      receiveBase(result, "GetMMus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetMMus failed: unknown result");
    }

    public de.mosim.mmi.mmu.MMUDescription GetDescription(java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_GetDescription(mmuID, sessionID);
      return recv_GetDescription();
    }

    public void send_GetDescription(java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      GetDescription_args args = new GetDescription_args();
      args.setMmuID(mmuID);
      args.setSessionID(sessionID);
      sendBase("GetDescription", args);
    }

    public de.mosim.mmi.mmu.MMUDescription recv_GetDescription() throws org.apache.thrift.TException
    {
      GetDescription_result result = new GetDescription_result();
      receiveBase(result, "GetDescription");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetDescription failed: unknown result");
    }

    public java.util.List<de.mosim.mmi.scene.MSceneObject> GetScene(java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_GetScene(sessionID);
      return recv_GetScene();
    }

    public void send_GetScene(java.lang.String sessionID) throws org.apache.thrift.TException
    {
      GetScene_args args = new GetScene_args();
      args.setSessionID(sessionID);
      sendBase("GetScene", args);
    }

    public java.util.List<de.mosim.mmi.scene.MSceneObject> recv_GetScene() throws org.apache.thrift.TException
    {
      GetScene_result result = new GetScene_result();
      receiveBase(result, "GetScene");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetScene failed: unknown result");
    }

    public de.mosim.mmi.scene.MSceneUpdate GetSceneChanges(java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_GetSceneChanges(sessionID);
      return recv_GetSceneChanges();
    }

    public void send_GetSceneChanges(java.lang.String sessionID) throws org.apache.thrift.TException
    {
      GetSceneChanges_args args = new GetSceneChanges_args();
      args.setSessionID(sessionID);
      sendBase("GetSceneChanges", args);
    }

    public de.mosim.mmi.scene.MSceneUpdate recv_GetSceneChanges() throws org.apache.thrift.TException
    {
      GetSceneChanges_result result = new GetSceneChanges_result();
      receiveBase(result, "GetSceneChanges");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetSceneChanges failed: unknown result");
    }

    public java.util.Map<java.lang.String,java.lang.String> LoadMMUs(java.util.List<java.lang.String> mmus, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_LoadMMUs(mmus, sessionID);
      return recv_LoadMMUs();
    }

    public void send_LoadMMUs(java.util.List<java.lang.String> mmus, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      LoadMMUs_args args = new LoadMMUs_args();
      args.setMmus(mmus);
      args.setSessionID(sessionID);
      sendBase("LoadMMUs", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_LoadMMUs() throws org.apache.thrift.TException
    {
      LoadMMUs_result result = new LoadMMUs_result();
      receiveBase(result, "LoadMMUs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "LoadMMUs failed: unknown result");
    }

    public java.nio.ByteBuffer CreateCheckpoint(java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      send_CreateCheckpoint(mmuID, sessionID);
      return recv_CreateCheckpoint();
    }

    public void send_CreateCheckpoint(java.lang.String mmuID, java.lang.String sessionID) throws org.apache.thrift.TException
    {
      CreateCheckpoint_args args = new CreateCheckpoint_args();
      args.setMmuID(mmuID);
      args.setSessionID(sessionID);
      sendBase("CreateCheckpoint", args);
    }

    public java.nio.ByteBuffer recv_CreateCheckpoint() throws org.apache.thrift.TException
    {
      CreateCheckpoint_result result = new CreateCheckpoint_result();
      receiveBase(result, "CreateCheckpoint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CreateCheckpoint failed: unknown result");
    }

    public de.mosim.mmi.core.MBoolResponse RestoreCheckpoint(java.lang.String mmuID, java.lang.String sessionID, java.nio.ByteBuffer checkpointData) throws org.apache.thrift.TException
    {
      send_RestoreCheckpoint(mmuID, sessionID, checkpointData);
      return recv_RestoreCheckpoint();
    }

    public void send_RestoreCheckpoint(java.lang.String mmuID, java.lang.String sessionID, java.nio.ByteBuffer checkpointData) throws org.apache.thrift.TException
    {
      RestoreCheckpoint_args args = new RestoreCheckpoint_args();
      args.setMmuID(mmuID);
      args.setSessionID(sessionID);
      args.setCheckpointData(checkpointData);
      sendBase("RestoreCheckpoint", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_RestoreCheckpoint() throws org.apache.thrift.TException
    {
      RestoreCheckpoint_result result = new RestoreCheckpoint_result();
      receiveBase(result, "RestoreCheckpoint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RestoreCheckpoint failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void Initialize(de.mosim.mmi.avatar.MAvatarDescription avatarDescription, java.util.Map<java.lang.String,java.lang.String> properties, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Initialize_call method_call = new Initialize_call(avatarDescription, properties, mmuID, sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Initialize_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private de.mosim.mmi.avatar.MAvatarDescription avatarDescription;
      private java.util.Map<java.lang.String,java.lang.String> properties;
      private java.lang.String mmuID;
      private java.lang.String sessionID;
      public Initialize_call(de.mosim.mmi.avatar.MAvatarDescription avatarDescription, java.util.Map<java.lang.String,java.lang.String> properties, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.avatarDescription = avatarDescription;
        this.properties = properties;
        this.mmuID = mmuID;
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Initialize", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Initialize_args args = new Initialize_args();
        args.setAvatarDescription(avatarDescription);
        args.setProperties(properties);
        args.setMmuID(mmuID);
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Initialize();
      }
    }

    public void AssignInstruction(de.mosim.mmi.mmu.MInstruction instruction, de.mosim.mmi.mmu.MSimulationState simulationState, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AssignInstruction_call method_call = new AssignInstruction_call(instruction, simulationState, mmuID, sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AssignInstruction_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private de.mosim.mmi.mmu.MInstruction instruction;
      private de.mosim.mmi.mmu.MSimulationState simulationState;
      private java.lang.String mmuID;
      private java.lang.String sessionID;
      public AssignInstruction_call(de.mosim.mmi.mmu.MInstruction instruction, de.mosim.mmi.mmu.MSimulationState simulationState, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instruction = instruction;
        this.simulationState = simulationState;
        this.mmuID = mmuID;
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AssignInstruction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AssignInstruction_args args = new AssignInstruction_args();
        args.setInstruction(instruction);
        args.setSimulationState(simulationState);
        args.setMmuID(mmuID);
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AssignInstruction();
      }
    }

    public void DoStep(double time, de.mosim.mmi.mmu.MSimulationState simulationState, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.mmu.MSimulationResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DoStep_call method_call = new DoStep_call(time, simulationState, mmuID, sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DoStep_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.mmu.MSimulationResult> {
      private double time;
      private de.mosim.mmi.mmu.MSimulationState simulationState;
      private java.lang.String mmuID;
      private java.lang.String sessionID;
      public DoStep_call(double time, de.mosim.mmi.mmu.MSimulationState simulationState, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.mmu.MSimulationResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.time = time;
        this.simulationState = simulationState;
        this.mmuID = mmuID;
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DoStep", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DoStep_args args = new DoStep_args();
        args.setTime(time);
        args.setSimulationState(simulationState);
        args.setMmuID(mmuID);
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.mmu.MSimulationResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DoStep();
      }
    }

    public void GetBoundaryConstraints(de.mosim.mmi.mmu.MInstruction instruction, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.constraints.MConstraint>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetBoundaryConstraints_call method_call = new GetBoundaryConstraints_call(instruction, mmuID, sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetBoundaryConstraints_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<de.mosim.mmi.constraints.MConstraint>> {
      private de.mosim.mmi.mmu.MInstruction instruction;
      private java.lang.String mmuID;
      private java.lang.String sessionID;
      public GetBoundaryConstraints_call(de.mosim.mmi.mmu.MInstruction instruction, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.constraints.MConstraint>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instruction = instruction;
        this.mmuID = mmuID;
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetBoundaryConstraints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetBoundaryConstraints_args args = new GetBoundaryConstraints_args();
        args.setInstruction(instruction);
        args.setMmuID(mmuID);
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<de.mosim.mmi.constraints.MConstraint> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetBoundaryConstraints();
      }
    }

    public void CheckPrerequisites(de.mosim.mmi.mmu.MInstruction instruction, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CheckPrerequisites_call method_call = new CheckPrerequisites_call(instruction, mmuID, sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CheckPrerequisites_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private de.mosim.mmi.mmu.MInstruction instruction;
      private java.lang.String mmuID;
      private java.lang.String sessionID;
      public CheckPrerequisites_call(de.mosim.mmi.mmu.MInstruction instruction, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instruction = instruction;
        this.mmuID = mmuID;
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CheckPrerequisites", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CheckPrerequisites_args args = new CheckPrerequisites_args();
        args.setInstruction(instruction);
        args.setMmuID(mmuID);
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CheckPrerequisites();
      }
    }

    public void Abort(java.lang.String instructionID, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Abort_call method_call = new Abort_call(instructionID, mmuID, sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Abort_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private java.lang.String instructionID;
      private java.lang.String mmuID;
      private java.lang.String sessionID;
      public Abort_call(java.lang.String instructionID, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instructionID = instructionID;
        this.mmuID = mmuID;
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Abort", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Abort_args args = new Abort_args();
        args.setInstructionID(instructionID);
        args.setMmuID(mmuID);
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Abort();
      }
    }

    public void Dispose(java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Dispose_call method_call = new Dispose_call(mmuID, sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Dispose_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private java.lang.String mmuID;
      private java.lang.String sessionID;
      public Dispose_call(java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mmuID = mmuID;
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Dispose", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Dispose_args args = new Dispose_args();
        args.setMmuID(mmuID);
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Dispose();
      }
    }

    public void ExecuteFunction(java.lang.String name, java.util.Map<java.lang.String,java.lang.String> parameters, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ExecuteFunction_call method_call = new ExecuteFunction_call(name, parameters, mmuID, sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ExecuteFunction_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      private java.lang.String name;
      private java.util.Map<java.lang.String,java.lang.String> parameters;
      private java.lang.String mmuID;
      private java.lang.String sessionID;
      public ExecuteFunction_call(java.lang.String name, java.util.Map<java.lang.String,java.lang.String> parameters, java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.parameters = parameters;
        this.mmuID = mmuID;
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ExecuteFunction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ExecuteFunction_args args = new ExecuteFunction_args();
        args.setName(name);
        args.setParameters(parameters);
        args.setMmuID(mmuID);
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ExecuteFunction();
      }
    }

    public void GetStatus(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetStatus_call method_call = new GetStatus_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetStatus_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      public GetStatus_call(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetStatus_args args = new GetStatus_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetStatus();
      }
    }

    public void GetAdapterDescription(org.apache.thrift.async.AsyncMethodCallback<MAdapterDescription> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAdapterDescription_call method_call = new GetAdapterDescription_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAdapterDescription_call extends org.apache.thrift.async.TAsyncMethodCall<MAdapterDescription> {
      public GetAdapterDescription_call(org.apache.thrift.async.AsyncMethodCallback<MAdapterDescription> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAdapterDescription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAdapterDescription_args args = new GetAdapterDescription_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MAdapterDescription getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAdapterDescription();
      }
    }

    public void CreateSession(java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateSession_call method_call = new CreateSession_call(sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateSession_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private java.lang.String sessionID;
      public CreateSession_call(java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateSession_args args = new CreateSession_args();
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CreateSession();
      }
    }

    public void CloseSession(java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CloseSession_call method_call = new CloseSession_call(sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CloseSession_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private java.lang.String sessionID;
      public CloseSession_call(java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CloseSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CloseSession_args args = new CloseSession_args();
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CloseSession();
      }
    }

    public void PushScene(de.mosim.mmi.scene.MSceneUpdate sceneUpdates, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      PushScene_call method_call = new PushScene_call(sceneUpdates, sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class PushScene_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private de.mosim.mmi.scene.MSceneUpdate sceneUpdates;
      private java.lang.String sessionID;
      public PushScene_call(de.mosim.mmi.scene.MSceneUpdate sceneUpdates, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sceneUpdates = sceneUpdates;
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("PushScene", org.apache.thrift.protocol.TMessageType.CALL, 0));
        PushScene_args args = new PushScene_args();
        args.setSceneUpdates(sceneUpdates);
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_PushScene();
      }
    }

    public void GetLoadableMMUs(org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.mmu.MMUDescription>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetLoadableMMUs_call method_call = new GetLoadableMMUs_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetLoadableMMUs_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<de.mosim.mmi.mmu.MMUDescription>> {
      public GetLoadableMMUs_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.mmu.MMUDescription>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetLoadableMMUs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetLoadableMMUs_args args = new GetLoadableMMUs_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<de.mosim.mmi.mmu.MMUDescription> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetLoadableMMUs();
      }
    }

    public void GetMMus(java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.mmu.MMUDescription>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetMMus_call method_call = new GetMMus_call(sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetMMus_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<de.mosim.mmi.mmu.MMUDescription>> {
      private java.lang.String sessionID;
      public GetMMus_call(java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.mmu.MMUDescription>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetMMus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetMMus_args args = new GetMMus_args();
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<de.mosim.mmi.mmu.MMUDescription> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetMMus();
      }
    }

    public void GetDescription(java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.mmu.MMUDescription> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetDescription_call method_call = new GetDescription_call(mmuID, sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetDescription_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.mmu.MMUDescription> {
      private java.lang.String mmuID;
      private java.lang.String sessionID;
      public GetDescription_call(java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.mmu.MMUDescription> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mmuID = mmuID;
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetDescription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetDescription_args args = new GetDescription_args();
        args.setMmuID(mmuID);
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.mmu.MMUDescription getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetDescription();
      }
    }

    public void GetScene(java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.scene.MSceneObject>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetScene_call method_call = new GetScene_call(sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetScene_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<de.mosim.mmi.scene.MSceneObject>> {
      private java.lang.String sessionID;
      public GetScene_call(java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.scene.MSceneObject>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetScene", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetScene_args args = new GetScene_args();
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<de.mosim.mmi.scene.MSceneObject> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetScene();
      }
    }

    public void GetSceneChanges(java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.scene.MSceneUpdate> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetSceneChanges_call method_call = new GetSceneChanges_call(sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetSceneChanges_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.scene.MSceneUpdate> {
      private java.lang.String sessionID;
      public GetSceneChanges_call(java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.scene.MSceneUpdate> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetSceneChanges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetSceneChanges_args args = new GetSceneChanges_args();
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.scene.MSceneUpdate getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetSceneChanges();
      }
    }

    public void LoadMMUs(java.util.List<java.lang.String> mmus, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      LoadMMUs_call method_call = new LoadMMUs_call(mmus, sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class LoadMMUs_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      private java.util.List<java.lang.String> mmus;
      private java.lang.String sessionID;
      public LoadMMUs_call(java.util.List<java.lang.String> mmus, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mmus = mmus;
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("LoadMMUs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        LoadMMUs_args args = new LoadMMUs_args();
        args.setMmus(mmus);
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_LoadMMUs();
      }
    }

    public void CreateCheckpoint(java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateCheckpoint_call method_call = new CreateCheckpoint_call(mmuID, sessionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateCheckpoint_call extends org.apache.thrift.async.TAsyncMethodCall<java.nio.ByteBuffer> {
      private java.lang.String mmuID;
      private java.lang.String sessionID;
      public CreateCheckpoint_call(java.lang.String mmuID, java.lang.String sessionID, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mmuID = mmuID;
        this.sessionID = sessionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateCheckpoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateCheckpoint_args args = new CreateCheckpoint_args();
        args.setMmuID(mmuID);
        args.setSessionID(sessionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.nio.ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CreateCheckpoint();
      }
    }

    public void RestoreCheckpoint(java.lang.String mmuID, java.lang.String sessionID, java.nio.ByteBuffer checkpointData, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RestoreCheckpoint_call method_call = new RestoreCheckpoint_call(mmuID, sessionID, checkpointData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RestoreCheckpoint_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private java.lang.String mmuID;
      private java.lang.String sessionID;
      private java.nio.ByteBuffer checkpointData;
      public RestoreCheckpoint_call(java.lang.String mmuID, java.lang.String sessionID, java.nio.ByteBuffer checkpointData, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mmuID = mmuID;
        this.sessionID = sessionID;
        this.checkpointData = checkpointData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RestoreCheckpoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RestoreCheckpoint_args args = new RestoreCheckpoint_args();
        args.setMmuID(mmuID);
        args.setSessionID(sessionID);
        args.setCheckpointData(checkpointData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RestoreCheckpoint();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("Initialize", new Initialize());
      processMap.put("AssignInstruction", new AssignInstruction());
      processMap.put("DoStep", new DoStep());
      processMap.put("GetBoundaryConstraints", new GetBoundaryConstraints());
      processMap.put("CheckPrerequisites", new CheckPrerequisites());
      processMap.put("Abort", new Abort());
      processMap.put("Dispose", new Dispose());
      processMap.put("ExecuteFunction", new ExecuteFunction());
      processMap.put("GetStatus", new GetStatus());
      processMap.put("GetAdapterDescription", new GetAdapterDescription());
      processMap.put("CreateSession", new CreateSession());
      processMap.put("CloseSession", new CloseSession());
      processMap.put("PushScene", new PushScene());
      processMap.put("GetLoadableMMUs", new GetLoadableMMUs());
      processMap.put("GetMMus", new GetMMus());
      processMap.put("GetDescription", new GetDescription());
      processMap.put("GetScene", new GetScene());
      processMap.put("GetSceneChanges", new GetSceneChanges());
      processMap.put("LoadMMUs", new LoadMMUs());
      processMap.put("CreateCheckpoint", new CreateCheckpoint());
      processMap.put("RestoreCheckpoint", new RestoreCheckpoint());
      return processMap;
    }

    public static class Initialize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Initialize_args> {
      public Initialize() {
        super("Initialize");
      }

      public Initialize_args getEmptyArgsInstance() {
        return new Initialize_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public Initialize_result getResult(I iface, Initialize_args args) throws org.apache.thrift.TException {
        Initialize_result result = new Initialize_result();
        result.success = iface.Initialize(args.avatarDescription, args.properties, args.mmuID, args.sessionID);
        return result;
      }
    }

    public static class AssignInstruction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AssignInstruction_args> {
      public AssignInstruction() {
        super("AssignInstruction");
      }

      public AssignInstruction_args getEmptyArgsInstance() {
        return new AssignInstruction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public AssignInstruction_result getResult(I iface, AssignInstruction_args args) throws org.apache.thrift.TException {
        AssignInstruction_result result = new AssignInstruction_result();
        result.success = iface.AssignInstruction(args.instruction, args.simulationState, args.mmuID, args.sessionID);
        return result;
      }
    }

    public static class DoStep<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DoStep_args> {
      public DoStep() {
        super("DoStep");
      }

      public DoStep_args getEmptyArgsInstance() {
        return new DoStep_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public DoStep_result getResult(I iface, DoStep_args args) throws org.apache.thrift.TException {
        DoStep_result result = new DoStep_result();
        result.success = iface.DoStep(args.time, args.simulationState, args.mmuID, args.sessionID);
        return result;
      }
    }

    public static class GetBoundaryConstraints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetBoundaryConstraints_args> {
      public GetBoundaryConstraints() {
        super("GetBoundaryConstraints");
      }

      public GetBoundaryConstraints_args getEmptyArgsInstance() {
        return new GetBoundaryConstraints_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetBoundaryConstraints_result getResult(I iface, GetBoundaryConstraints_args args) throws org.apache.thrift.TException {
        GetBoundaryConstraints_result result = new GetBoundaryConstraints_result();
        result.success = iface.GetBoundaryConstraints(args.instruction, args.mmuID, args.sessionID);
        return result;
      }
    }

    public static class CheckPrerequisites<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CheckPrerequisites_args> {
      public CheckPrerequisites() {
        super("CheckPrerequisites");
      }

      public CheckPrerequisites_args getEmptyArgsInstance() {
        return new CheckPrerequisites_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public CheckPrerequisites_result getResult(I iface, CheckPrerequisites_args args) throws org.apache.thrift.TException {
        CheckPrerequisites_result result = new CheckPrerequisites_result();
        result.success = iface.CheckPrerequisites(args.instruction, args.mmuID, args.sessionID);
        return result;
      }
    }

    public static class Abort<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Abort_args> {
      public Abort() {
        super("Abort");
      }

      public Abort_args getEmptyArgsInstance() {
        return new Abort_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public Abort_result getResult(I iface, Abort_args args) throws org.apache.thrift.TException {
        Abort_result result = new Abort_result();
        result.success = iface.Abort(args.instructionID, args.mmuID, args.sessionID);
        return result;
      }
    }

    public static class Dispose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Dispose_args> {
      public Dispose() {
        super("Dispose");
      }

      public Dispose_args getEmptyArgsInstance() {
        return new Dispose_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public Dispose_result getResult(I iface, Dispose_args args) throws org.apache.thrift.TException {
        Dispose_result result = new Dispose_result();
        result.success = iface.Dispose(args.mmuID, args.sessionID);
        return result;
      }
    }

    public static class ExecuteFunction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ExecuteFunction_args> {
      public ExecuteFunction() {
        super("ExecuteFunction");
      }

      public ExecuteFunction_args getEmptyArgsInstance() {
        return new ExecuteFunction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ExecuteFunction_result getResult(I iface, ExecuteFunction_args args) throws org.apache.thrift.TException {
        ExecuteFunction_result result = new ExecuteFunction_result();
        result.success = iface.ExecuteFunction(args.name, args.parameters, args.mmuID, args.sessionID);
        return result;
      }
    }

    public static class GetStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetStatus_args> {
      public GetStatus() {
        super("GetStatus");
      }

      public GetStatus_args getEmptyArgsInstance() {
        return new GetStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetStatus_result getResult(I iface, GetStatus_args args) throws org.apache.thrift.TException {
        GetStatus_result result = new GetStatus_result();
        result.success = iface.GetStatus();
        return result;
      }
    }

    public static class GetAdapterDescription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAdapterDescription_args> {
      public GetAdapterDescription() {
        super("GetAdapterDescription");
      }

      public GetAdapterDescription_args getEmptyArgsInstance() {
        return new GetAdapterDescription_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetAdapterDescription_result getResult(I iface, GetAdapterDescription_args args) throws org.apache.thrift.TException {
        GetAdapterDescription_result result = new GetAdapterDescription_result();
        result.success = iface.GetAdapterDescription();
        return result;
      }
    }

    public static class CreateSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateSession_args> {
      public CreateSession() {
        super("CreateSession");
      }

      public CreateSession_args getEmptyArgsInstance() {
        return new CreateSession_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public CreateSession_result getResult(I iface, CreateSession_args args) throws org.apache.thrift.TException {
        CreateSession_result result = new CreateSession_result();
        result.success = iface.CreateSession(args.sessionID);
        return result;
      }
    }

    public static class CloseSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CloseSession_args> {
      public CloseSession() {
        super("CloseSession");
      }

      public CloseSession_args getEmptyArgsInstance() {
        return new CloseSession_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public CloseSession_result getResult(I iface, CloseSession_args args) throws org.apache.thrift.TException {
        CloseSession_result result = new CloseSession_result();
        result.success = iface.CloseSession(args.sessionID);
        return result;
      }
    }

    public static class PushScene<I extends Iface> extends org.apache.thrift.ProcessFunction<I, PushScene_args> {
      public PushScene() {
        super("PushScene");
      }

      public PushScene_args getEmptyArgsInstance() {
        return new PushScene_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public PushScene_result getResult(I iface, PushScene_args args) throws org.apache.thrift.TException {
        PushScene_result result = new PushScene_result();
        result.success = iface.PushScene(args.sceneUpdates, args.sessionID);
        return result;
      }
    }

    public static class GetLoadableMMUs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetLoadableMMUs_args> {
      public GetLoadableMMUs() {
        super("GetLoadableMMUs");
      }

      public GetLoadableMMUs_args getEmptyArgsInstance() {
        return new GetLoadableMMUs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetLoadableMMUs_result getResult(I iface, GetLoadableMMUs_args args) throws org.apache.thrift.TException {
        GetLoadableMMUs_result result = new GetLoadableMMUs_result();
        result.success = iface.GetLoadableMMUs();
        return result;
      }
    }

    public static class GetMMus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetMMus_args> {
      public GetMMus() {
        super("GetMMus");
      }

      public GetMMus_args getEmptyArgsInstance() {
        return new GetMMus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetMMus_result getResult(I iface, GetMMus_args args) throws org.apache.thrift.TException {
        GetMMus_result result = new GetMMus_result();
        result.success = iface.GetMMus(args.sessionID);
        return result;
      }
    }

    public static class GetDescription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetDescription_args> {
      public GetDescription() {
        super("GetDescription");
      }

      public GetDescription_args getEmptyArgsInstance() {
        return new GetDescription_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetDescription_result getResult(I iface, GetDescription_args args) throws org.apache.thrift.TException {
        GetDescription_result result = new GetDescription_result();
        result.success = iface.GetDescription(args.mmuID, args.sessionID);
        return result;
      }
    }

    public static class GetScene<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetScene_args> {
      public GetScene() {
        super("GetScene");
      }

      public GetScene_args getEmptyArgsInstance() {
        return new GetScene_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetScene_result getResult(I iface, GetScene_args args) throws org.apache.thrift.TException {
        GetScene_result result = new GetScene_result();
        result.success = iface.GetScene(args.sessionID);
        return result;
      }
    }

    public static class GetSceneChanges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetSceneChanges_args> {
      public GetSceneChanges() {
        super("GetSceneChanges");
      }

      public GetSceneChanges_args getEmptyArgsInstance() {
        return new GetSceneChanges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetSceneChanges_result getResult(I iface, GetSceneChanges_args args) throws org.apache.thrift.TException {
        GetSceneChanges_result result = new GetSceneChanges_result();
        result.success = iface.GetSceneChanges(args.sessionID);
        return result;
      }
    }

    public static class LoadMMUs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, LoadMMUs_args> {
      public LoadMMUs() {
        super("LoadMMUs");
      }

      public LoadMMUs_args getEmptyArgsInstance() {
        return new LoadMMUs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public LoadMMUs_result getResult(I iface, LoadMMUs_args args) throws org.apache.thrift.TException {
        LoadMMUs_result result = new LoadMMUs_result();
        result.success = iface.LoadMMUs(args.mmus, args.sessionID);
        return result;
      }
    }

    public static class CreateCheckpoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateCheckpoint_args> {
      public CreateCheckpoint() {
        super("CreateCheckpoint");
      }

      public CreateCheckpoint_args getEmptyArgsInstance() {
        return new CreateCheckpoint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public CreateCheckpoint_result getResult(I iface, CreateCheckpoint_args args) throws org.apache.thrift.TException {
        CreateCheckpoint_result result = new CreateCheckpoint_result();
        result.success = iface.CreateCheckpoint(args.mmuID, args.sessionID);
        return result;
      }
    }

    public static class RestoreCheckpoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RestoreCheckpoint_args> {
      public RestoreCheckpoint() {
        super("RestoreCheckpoint");
      }

      public RestoreCheckpoint_args getEmptyArgsInstance() {
        return new RestoreCheckpoint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public RestoreCheckpoint_result getResult(I iface, RestoreCheckpoint_args args) throws org.apache.thrift.TException {
        RestoreCheckpoint_result result = new RestoreCheckpoint_result();
        result.success = iface.RestoreCheckpoint(args.mmuID, args.sessionID, args.checkpointData);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("Initialize", new Initialize());
      processMap.put("AssignInstruction", new AssignInstruction());
      processMap.put("DoStep", new DoStep());
      processMap.put("GetBoundaryConstraints", new GetBoundaryConstraints());
      processMap.put("CheckPrerequisites", new CheckPrerequisites());
      processMap.put("Abort", new Abort());
      processMap.put("Dispose", new Dispose());
      processMap.put("ExecuteFunction", new ExecuteFunction());
      processMap.put("GetStatus", new GetStatus());
      processMap.put("GetAdapterDescription", new GetAdapterDescription());
      processMap.put("CreateSession", new CreateSession());
      processMap.put("CloseSession", new CloseSession());
      processMap.put("PushScene", new PushScene());
      processMap.put("GetLoadableMMUs", new GetLoadableMMUs());
      processMap.put("GetMMus", new GetMMus());
      processMap.put("GetDescription", new GetDescription());
      processMap.put("GetScene", new GetScene());
      processMap.put("GetSceneChanges", new GetSceneChanges());
      processMap.put("LoadMMUs", new LoadMMUs());
      processMap.put("CreateCheckpoint", new CreateCheckpoint());
      processMap.put("RestoreCheckpoint", new RestoreCheckpoint());
      return processMap;
    }

    public static class Initialize<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Initialize_args, de.mosim.mmi.core.MBoolResponse> {
      public Initialize() {
        super("Initialize");
      }

      public Initialize_args getEmptyArgsInstance() {
        return new Initialize_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            Initialize_result result = new Initialize_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Initialize_result result = new Initialize_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Initialize_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.Initialize(args.avatarDescription, args.properties, args.mmuID, args.sessionID,resultHandler);
      }
    }

    public static class AssignInstruction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AssignInstruction_args, de.mosim.mmi.core.MBoolResponse> {
      public AssignInstruction() {
        super("AssignInstruction");
      }

      public AssignInstruction_args getEmptyArgsInstance() {
        return new AssignInstruction_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            AssignInstruction_result result = new AssignInstruction_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            AssignInstruction_result result = new AssignInstruction_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AssignInstruction_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.AssignInstruction(args.instruction, args.simulationState, args.mmuID, args.sessionID,resultHandler);
      }
    }

    public static class DoStep<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DoStep_args, de.mosim.mmi.mmu.MSimulationResult> {
      public DoStep() {
        super("DoStep");
      }

      public DoStep_args getEmptyArgsInstance() {
        return new DoStep_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.mmu.MSimulationResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.mmu.MSimulationResult>() { 
          public void onComplete(de.mosim.mmi.mmu.MSimulationResult o) {
            DoStep_result result = new DoStep_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            DoStep_result result = new DoStep_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DoStep_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.mmu.MSimulationResult> resultHandler) throws org.apache.thrift.TException {
        iface.DoStep(args.time, args.simulationState, args.mmuID, args.sessionID,resultHandler);
      }
    }

    public static class GetBoundaryConstraints<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetBoundaryConstraints_args, java.util.List<de.mosim.mmi.constraints.MConstraint>> {
      public GetBoundaryConstraints() {
        super("GetBoundaryConstraints");
      }

      public GetBoundaryConstraints_args getEmptyArgsInstance() {
        return new GetBoundaryConstraints_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.constraints.MConstraint>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.constraints.MConstraint>>() { 
          public void onComplete(java.util.List<de.mosim.mmi.constraints.MConstraint> o) {
            GetBoundaryConstraints_result result = new GetBoundaryConstraints_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetBoundaryConstraints_result result = new GetBoundaryConstraints_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetBoundaryConstraints_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.constraints.MConstraint>> resultHandler) throws org.apache.thrift.TException {
        iface.GetBoundaryConstraints(args.instruction, args.mmuID, args.sessionID,resultHandler);
      }
    }

    public static class CheckPrerequisites<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CheckPrerequisites_args, de.mosim.mmi.core.MBoolResponse> {
      public CheckPrerequisites() {
        super("CheckPrerequisites");
      }

      public CheckPrerequisites_args getEmptyArgsInstance() {
        return new CheckPrerequisites_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            CheckPrerequisites_result result = new CheckPrerequisites_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CheckPrerequisites_result result = new CheckPrerequisites_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CheckPrerequisites_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.CheckPrerequisites(args.instruction, args.mmuID, args.sessionID,resultHandler);
      }
    }

    public static class Abort<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Abort_args, de.mosim.mmi.core.MBoolResponse> {
      public Abort() {
        super("Abort");
      }

      public Abort_args getEmptyArgsInstance() {
        return new Abort_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            Abort_result result = new Abort_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Abort_result result = new Abort_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Abort_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.Abort(args.instructionID, args.mmuID, args.sessionID,resultHandler);
      }
    }

    public static class Dispose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Dispose_args, de.mosim.mmi.core.MBoolResponse> {
      public Dispose() {
        super("Dispose");
      }

      public Dispose_args getEmptyArgsInstance() {
        return new Dispose_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            Dispose_result result = new Dispose_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Dispose_result result = new Dispose_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Dispose_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.Dispose(args.mmuID, args.sessionID,resultHandler);
      }
    }

    public static class ExecuteFunction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ExecuteFunction_args, java.util.Map<java.lang.String,java.lang.String>> {
      public ExecuteFunction() {
        super("ExecuteFunction");
      }

      public ExecuteFunction_args getEmptyArgsInstance() {
        return new ExecuteFunction_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() { 
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            ExecuteFunction_result result = new ExecuteFunction_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ExecuteFunction_result result = new ExecuteFunction_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ExecuteFunction_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.ExecuteFunction(args.name, args.parameters, args.mmuID, args.sessionID,resultHandler);
      }
    }

    public static class GetStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetStatus_args, java.util.Map<java.lang.String,java.lang.String>> {
      public GetStatus() {
        super("GetStatus");
      }

      public GetStatus_args getEmptyArgsInstance() {
        return new GetStatus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() { 
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            GetStatus_result result = new GetStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetStatus_result result = new GetStatus_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetStatus_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.GetStatus(resultHandler);
      }
    }

    public static class GetAdapterDescription<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAdapterDescription_args, MAdapterDescription> {
      public GetAdapterDescription() {
        super("GetAdapterDescription");
      }

      public GetAdapterDescription_args getEmptyArgsInstance() {
        return new GetAdapterDescription_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MAdapterDescription> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MAdapterDescription>() { 
          public void onComplete(MAdapterDescription o) {
            GetAdapterDescription_result result = new GetAdapterDescription_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetAdapterDescription_result result = new GetAdapterDescription_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetAdapterDescription_args args, org.apache.thrift.async.AsyncMethodCallback<MAdapterDescription> resultHandler) throws org.apache.thrift.TException {
        iface.GetAdapterDescription(resultHandler);
      }
    }

    public static class CreateSession<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateSession_args, de.mosim.mmi.core.MBoolResponse> {
      public CreateSession() {
        super("CreateSession");
      }

      public CreateSession_args getEmptyArgsInstance() {
        return new CreateSession_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            CreateSession_result result = new CreateSession_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CreateSession_result result = new CreateSession_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateSession_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.CreateSession(args.sessionID,resultHandler);
      }
    }

    public static class CloseSession<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CloseSession_args, de.mosim.mmi.core.MBoolResponse> {
      public CloseSession() {
        super("CloseSession");
      }

      public CloseSession_args getEmptyArgsInstance() {
        return new CloseSession_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            CloseSession_result result = new CloseSession_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CloseSession_result result = new CloseSession_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CloseSession_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.CloseSession(args.sessionID,resultHandler);
      }
    }

    public static class PushScene<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, PushScene_args, de.mosim.mmi.core.MBoolResponse> {
      public PushScene() {
        super("PushScene");
      }

      public PushScene_args getEmptyArgsInstance() {
        return new PushScene_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            PushScene_result result = new PushScene_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            PushScene_result result = new PushScene_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, PushScene_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.PushScene(args.sceneUpdates, args.sessionID,resultHandler);
      }
    }

    public static class GetLoadableMMUs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetLoadableMMUs_args, java.util.List<de.mosim.mmi.mmu.MMUDescription>> {
      public GetLoadableMMUs() {
        super("GetLoadableMMUs");
      }

      public GetLoadableMMUs_args getEmptyArgsInstance() {
        return new GetLoadableMMUs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.mmu.MMUDescription>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.mmu.MMUDescription>>() { 
          public void onComplete(java.util.List<de.mosim.mmi.mmu.MMUDescription> o) {
            GetLoadableMMUs_result result = new GetLoadableMMUs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetLoadableMMUs_result result = new GetLoadableMMUs_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetLoadableMMUs_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.mmu.MMUDescription>> resultHandler) throws org.apache.thrift.TException {
        iface.GetLoadableMMUs(resultHandler);
      }
    }

    public static class GetMMus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetMMus_args, java.util.List<de.mosim.mmi.mmu.MMUDescription>> {
      public GetMMus() {
        super("GetMMus");
      }

      public GetMMus_args getEmptyArgsInstance() {
        return new GetMMus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.mmu.MMUDescription>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.mmu.MMUDescription>>() { 
          public void onComplete(java.util.List<de.mosim.mmi.mmu.MMUDescription> o) {
            GetMMus_result result = new GetMMus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetMMus_result result = new GetMMus_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetMMus_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.mmu.MMUDescription>> resultHandler) throws org.apache.thrift.TException {
        iface.GetMMus(args.sessionID,resultHandler);
      }
    }

    public static class GetDescription<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetDescription_args, de.mosim.mmi.mmu.MMUDescription> {
      public GetDescription() {
        super("GetDescription");
      }

      public GetDescription_args getEmptyArgsInstance() {
        return new GetDescription_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.mmu.MMUDescription> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.mmu.MMUDescription>() { 
          public void onComplete(de.mosim.mmi.mmu.MMUDescription o) {
            GetDescription_result result = new GetDescription_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetDescription_result result = new GetDescription_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetDescription_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.mmu.MMUDescription> resultHandler) throws org.apache.thrift.TException {
        iface.GetDescription(args.mmuID, args.sessionID,resultHandler);
      }
    }

    public static class GetScene<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetScene_args, java.util.List<de.mosim.mmi.scene.MSceneObject>> {
      public GetScene() {
        super("GetScene");
      }

      public GetScene_args getEmptyArgsInstance() {
        return new GetScene_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.scene.MSceneObject>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.scene.MSceneObject>>() { 
          public void onComplete(java.util.List<de.mosim.mmi.scene.MSceneObject> o) {
            GetScene_result result = new GetScene_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetScene_result result = new GetScene_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetScene_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.scene.MSceneObject>> resultHandler) throws org.apache.thrift.TException {
        iface.GetScene(args.sessionID,resultHandler);
      }
    }

    public static class GetSceneChanges<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetSceneChanges_args, de.mosim.mmi.scene.MSceneUpdate> {
      public GetSceneChanges() {
        super("GetSceneChanges");
      }

      public GetSceneChanges_args getEmptyArgsInstance() {
        return new GetSceneChanges_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.scene.MSceneUpdate> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.scene.MSceneUpdate>() { 
          public void onComplete(de.mosim.mmi.scene.MSceneUpdate o) {
            GetSceneChanges_result result = new GetSceneChanges_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetSceneChanges_result result = new GetSceneChanges_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetSceneChanges_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.scene.MSceneUpdate> resultHandler) throws org.apache.thrift.TException {
        iface.GetSceneChanges(args.sessionID,resultHandler);
      }
    }

    public static class LoadMMUs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, LoadMMUs_args, java.util.Map<java.lang.String,java.lang.String>> {
      public LoadMMUs() {
        super("LoadMMUs");
      }

      public LoadMMUs_args getEmptyArgsInstance() {
        return new LoadMMUs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() { 
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            LoadMMUs_result result = new LoadMMUs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            LoadMMUs_result result = new LoadMMUs_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, LoadMMUs_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.LoadMMUs(args.mmus, args.sessionID,resultHandler);
      }
    }

    public static class CreateCheckpoint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateCheckpoint_args, java.nio.ByteBuffer> {
      public CreateCheckpoint() {
        super("CreateCheckpoint");
      }

      public CreateCheckpoint_args getEmptyArgsInstance() {
        return new CreateCheckpoint_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer>() { 
          public void onComplete(java.nio.ByteBuffer o) {
            CreateCheckpoint_result result = new CreateCheckpoint_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CreateCheckpoint_result result = new CreateCheckpoint_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateCheckpoint_args args, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
        iface.CreateCheckpoint(args.mmuID, args.sessionID,resultHandler);
      }
    }

    public static class RestoreCheckpoint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RestoreCheckpoint_args, de.mosim.mmi.core.MBoolResponse> {
      public RestoreCheckpoint() {
        super("RestoreCheckpoint");
      }

      public RestoreCheckpoint_args getEmptyArgsInstance() {
        return new RestoreCheckpoint_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            RestoreCheckpoint_result result = new RestoreCheckpoint_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            RestoreCheckpoint_result result = new RestoreCheckpoint_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, RestoreCheckpoint_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.RestoreCheckpoint(args.mmuID, args.sessionID, args.checkpointData,resultHandler);
      }
    }

  }

  public static class Initialize_args implements org.apache.thrift.TBase<Initialize_args, Initialize_args._Fields>, java.io.Serializable, Cloneable, Comparable<Initialize_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Initialize_args");

    private static final org.apache.thrift.protocol.TField AVATAR_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarDescription", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField MMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mmuID", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Initialize_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Initialize_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MAvatarDescription avatarDescription; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String mmuID; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AVATAR_DESCRIPTION((short)1, "avatarDescription"),
      PROPERTIES((short)2, "properties"),
      MMU_ID((short)3, "mmuID"),
      SESSION_ID((short)4, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AVATAR_DESCRIPTION
            return AVATAR_DESCRIPTION;
          case 2: // PROPERTIES
            return PROPERTIES;
          case 3: // MMU_ID
            return MMU_ID;
          case 4: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AVATAR_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("avatarDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.avatar.MAvatarDescription.class)));
      tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MMU_ID, new org.apache.thrift.meta_data.FieldMetaData("mmuID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Initialize_args.class, metaDataMap);
    }

    public Initialize_args() {
    }

    public Initialize_args(
      de.mosim.mmi.avatar.MAvatarDescription avatarDescription,
      java.util.Map<java.lang.String,java.lang.String> properties,
      java.lang.String mmuID,
      java.lang.String sessionID)
    {
      this();
      this.avatarDescription = avatarDescription;
      this.properties = properties;
      this.mmuID = mmuID;
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Initialize_args(Initialize_args other) {
      if (other.isSetAvatarDescription()) {
        this.avatarDescription = new de.mosim.mmi.avatar.MAvatarDescription(other.avatarDescription);
      }
      if (other.isSetProperties()) {
        java.util.Map<java.lang.String,java.lang.String> __this__properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.properties);
        this.properties = __this__properties;
      }
      if (other.isSetMmuID()) {
        this.mmuID = other.mmuID;
      }
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public Initialize_args deepCopy() {
      return new Initialize_args(this);
    }

    @Override
    public void clear() {
      this.avatarDescription = null;
      this.properties = null;
      this.mmuID = null;
      this.sessionID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.avatar.MAvatarDescription getAvatarDescription() {
      return this.avatarDescription;
    }

    public Initialize_args setAvatarDescription(@org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MAvatarDescription avatarDescription) {
      this.avatarDescription = avatarDescription;
      return this;
    }

    public void unsetAvatarDescription() {
      this.avatarDescription = null;
    }

    /** Returns true if field avatarDescription is set (has been assigned a value) and false otherwise */
    public boolean isSetAvatarDescription() {
      return this.avatarDescription != null;
    }

    public void setAvatarDescriptionIsSet(boolean value) {
      if (!value) {
        this.avatarDescription = null;
      }
    }

    public int getPropertiesSize() {
      return (this.properties == null) ? 0 : this.properties.size();
    }

    public void putToProperties(java.lang.String key, java.lang.String val) {
      if (this.properties == null) {
        this.properties = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.properties.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getProperties() {
      return this.properties;
    }

    public Initialize_args setProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties) {
      this.properties = properties;
      return this;
    }

    public void unsetProperties() {
      this.properties = null;
    }

    /** Returns true if field properties is set (has been assigned a value) and false otherwise */
    public boolean isSetProperties() {
      return this.properties != null;
    }

    public void setPropertiesIsSet(boolean value) {
      if (!value) {
        this.properties = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMmuID() {
      return this.mmuID;
    }

    public Initialize_args setMmuID(@org.apache.thrift.annotation.Nullable java.lang.String mmuID) {
      this.mmuID = mmuID;
      return this;
    }

    public void unsetMmuID() {
      this.mmuID = null;
    }

    /** Returns true if field mmuID is set (has been assigned a value) and false otherwise */
    public boolean isSetMmuID() {
      return this.mmuID != null;
    }

    public void setMmuIDIsSet(boolean value) {
      if (!value) {
        this.mmuID = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public Initialize_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AVATAR_DESCRIPTION:
        if (value == null) {
          unsetAvatarDescription();
        } else {
          setAvatarDescription((de.mosim.mmi.avatar.MAvatarDescription)value);
        }
        break;

      case PROPERTIES:
        if (value == null) {
          unsetProperties();
        } else {
          setProperties((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      case MMU_ID:
        if (value == null) {
          unsetMmuID();
        } else {
          setMmuID((java.lang.String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AVATAR_DESCRIPTION:
        return getAvatarDescription();

      case PROPERTIES:
        return getProperties();

      case MMU_ID:
        return getMmuID();

      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AVATAR_DESCRIPTION:
        return isSetAvatarDescription();
      case PROPERTIES:
        return isSetProperties();
      case MMU_ID:
        return isSetMmuID();
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Initialize_args)
        return this.equals((Initialize_args)that);
      return false;
    }

    public boolean equals(Initialize_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_avatarDescription = true && this.isSetAvatarDescription();
      boolean that_present_avatarDescription = true && that.isSetAvatarDescription();
      if (this_present_avatarDescription || that_present_avatarDescription) {
        if (!(this_present_avatarDescription && that_present_avatarDescription))
          return false;
        if (!this.avatarDescription.equals(that.avatarDescription))
          return false;
      }

      boolean this_present_properties = true && this.isSetProperties();
      boolean that_present_properties = true && that.isSetProperties();
      if (this_present_properties || that_present_properties) {
        if (!(this_present_properties && that_present_properties))
          return false;
        if (!this.properties.equals(that.properties))
          return false;
      }

      boolean this_present_mmuID = true && this.isSetMmuID();
      boolean that_present_mmuID = true && that.isSetMmuID();
      if (this_present_mmuID || that_present_mmuID) {
        if (!(this_present_mmuID && that_present_mmuID))
          return false;
        if (!this.mmuID.equals(that.mmuID))
          return false;
      }

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAvatarDescription()) ? 131071 : 524287);
      if (isSetAvatarDescription())
        hashCode = hashCode * 8191 + avatarDescription.hashCode();

      hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
      if (isSetProperties())
        hashCode = hashCode * 8191 + properties.hashCode();

      hashCode = hashCode * 8191 + ((isSetMmuID()) ? 131071 : 524287);
      if (isSetMmuID())
        hashCode = hashCode * 8191 + mmuID.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Initialize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAvatarDescription()).compareTo(other.isSetAvatarDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvatarDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarDescription, other.avatarDescription);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperties()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMmuID()).compareTo(other.isSetMmuID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMmuID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mmuID, other.mmuID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Initialize_args(");
      boolean first = true;

      sb.append("avatarDescription:");
      if (this.avatarDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.avatarDescription);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mmuID:");
      if (this.mmuID == null) {
        sb.append("null");
      } else {
        sb.append(this.mmuID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (avatarDescription != null) {
        avatarDescription.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Initialize_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Initialize_argsStandardScheme getScheme() {
        return new Initialize_argsStandardScheme();
      }
    }

    private static class Initialize_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Initialize_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Initialize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AVATAR_DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.avatarDescription = new de.mosim.mmi.avatar.MAvatarDescription();
                struct.avatarDescription.read(iprot);
                struct.setAvatarDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTIES
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                  struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map26.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key27;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val28;
                  for (int _i29 = 0; _i29 < _map26.size; ++_i29)
                  {
                    _key27 = iprot.readString();
                    _val28 = iprot.readString();
                    struct.properties.put(_key27, _val28);
                  }
                  iprot.readMapEnd();
                }
                struct.setPropertiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mmuID = iprot.readString();
                struct.setMmuIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Initialize_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.avatarDescription != null) {
          oprot.writeFieldBegin(AVATAR_DESCRIPTION_FIELD_DESC);
          struct.avatarDescription.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.properties != null) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter30 : struct.properties.entrySet())
            {
              oprot.writeString(_iter30.getKey());
              oprot.writeString(_iter30.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.mmuID != null) {
          oprot.writeFieldBegin(MMU_ID_FIELD_DESC);
          oprot.writeString(struct.mmuID);
          oprot.writeFieldEnd();
        }
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Initialize_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Initialize_argsTupleScheme getScheme() {
        return new Initialize_argsTupleScheme();
      }
    }

    private static class Initialize_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Initialize_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Initialize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAvatarDescription()) {
          optionals.set(0);
        }
        if (struct.isSetProperties()) {
          optionals.set(1);
        }
        if (struct.isSetMmuID()) {
          optionals.set(2);
        }
        if (struct.isSetSessionID()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAvatarDescription()) {
          struct.avatarDescription.write(oprot);
        }
        if (struct.isSetProperties()) {
          {
            oprot.writeI32(struct.properties.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter31 : struct.properties.entrySet())
            {
              oprot.writeString(_iter31.getKey());
              oprot.writeString(_iter31.getValue());
            }
          }
        }
        if (struct.isSetMmuID()) {
          oprot.writeString(struct.mmuID);
        }
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Initialize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.avatarDescription = new de.mosim.mmi.avatar.MAvatarDescription();
          struct.avatarDescription.read(iprot);
          struct.setAvatarDescriptionIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map32.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key33;
            @org.apache.thrift.annotation.Nullable java.lang.String _val34;
            for (int _i35 = 0; _i35 < _map32.size; ++_i35)
            {
              _key33 = iprot.readString();
              _val34 = iprot.readString();
              struct.properties.put(_key33, _val34);
            }
          }
          struct.setPropertiesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mmuID = iprot.readString();
          struct.setMmuIDIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Initialize_result implements org.apache.thrift.TBase<Initialize_result, Initialize_result._Fields>, java.io.Serializable, Cloneable, Comparable<Initialize_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Initialize_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Initialize_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Initialize_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Initialize_result.class, metaDataMap);
    }

    public Initialize_result() {
    }

    public Initialize_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Initialize_result(Initialize_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public Initialize_result deepCopy() {
      return new Initialize_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public Initialize_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Initialize_result)
        return this.equals((Initialize_result)that);
      return false;
    }

    public boolean equals(Initialize_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Initialize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Initialize_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Initialize_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Initialize_resultStandardScheme getScheme() {
        return new Initialize_resultStandardScheme();
      }
    }

    private static class Initialize_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Initialize_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Initialize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Initialize_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Initialize_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Initialize_resultTupleScheme getScheme() {
        return new Initialize_resultTupleScheme();
      }
    }

    private static class Initialize_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Initialize_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Initialize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Initialize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class AssignInstruction_args implements org.apache.thrift.TBase<AssignInstruction_args, AssignInstruction_args._Fields>, java.io.Serializable, Cloneable, Comparable<AssignInstruction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AssignInstruction_args");

    private static final org.apache.thrift.protocol.TField INSTRUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("instruction", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SIMULATION_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationState", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField MMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mmuID", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AssignInstruction_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AssignInstruction_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MInstruction instruction; // required
    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MSimulationState simulationState; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String mmuID; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTRUCTION((short)1, "instruction"),
      SIMULATION_STATE((short)2, "simulationState"),
      MMU_ID((short)3, "mmuID"),
      SESSION_ID((short)4, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTRUCTION
            return INSTRUCTION;
          case 2: // SIMULATION_STATE
            return SIMULATION_STATE;
          case 3: // MMU_ID
            return MMU_ID;
          case 4: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTRUCTION, new org.apache.thrift.meta_data.FieldMetaData("instruction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.mmu.MInstruction.class)));
      tmpMap.put(_Fields.SIMULATION_STATE, new org.apache.thrift.meta_data.FieldMetaData("simulationState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.mmu.MSimulationState.class)));
      tmpMap.put(_Fields.MMU_ID, new org.apache.thrift.meta_data.FieldMetaData("mmuID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AssignInstruction_args.class, metaDataMap);
    }

    public AssignInstruction_args() {
    }

    public AssignInstruction_args(
      de.mosim.mmi.mmu.MInstruction instruction,
      de.mosim.mmi.mmu.MSimulationState simulationState,
      java.lang.String mmuID,
      java.lang.String sessionID)
    {
      this();
      this.instruction = instruction;
      this.simulationState = simulationState;
      this.mmuID = mmuID;
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AssignInstruction_args(AssignInstruction_args other) {
      if (other.isSetInstruction()) {
        this.instruction = new de.mosim.mmi.mmu.MInstruction(other.instruction);
      }
      if (other.isSetSimulationState()) {
        this.simulationState = new de.mosim.mmi.mmu.MSimulationState(other.simulationState);
      }
      if (other.isSetMmuID()) {
        this.mmuID = other.mmuID;
      }
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public AssignInstruction_args deepCopy() {
      return new AssignInstruction_args(this);
    }

    @Override
    public void clear() {
      this.instruction = null;
      this.simulationState = null;
      this.mmuID = null;
      this.sessionID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.mmu.MInstruction getInstruction() {
      return this.instruction;
    }

    public AssignInstruction_args setInstruction(@org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MInstruction instruction) {
      this.instruction = instruction;
      return this;
    }

    public void unsetInstruction() {
      this.instruction = null;
    }

    /** Returns true if field instruction is set (has been assigned a value) and false otherwise */
    public boolean isSetInstruction() {
      return this.instruction != null;
    }

    public void setInstructionIsSet(boolean value) {
      if (!value) {
        this.instruction = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.mmu.MSimulationState getSimulationState() {
      return this.simulationState;
    }

    public AssignInstruction_args setSimulationState(@org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MSimulationState simulationState) {
      this.simulationState = simulationState;
      return this;
    }

    public void unsetSimulationState() {
      this.simulationState = null;
    }

    /** Returns true if field simulationState is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationState() {
      return this.simulationState != null;
    }

    public void setSimulationStateIsSet(boolean value) {
      if (!value) {
        this.simulationState = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMmuID() {
      return this.mmuID;
    }

    public AssignInstruction_args setMmuID(@org.apache.thrift.annotation.Nullable java.lang.String mmuID) {
      this.mmuID = mmuID;
      return this;
    }

    public void unsetMmuID() {
      this.mmuID = null;
    }

    /** Returns true if field mmuID is set (has been assigned a value) and false otherwise */
    public boolean isSetMmuID() {
      return this.mmuID != null;
    }

    public void setMmuIDIsSet(boolean value) {
      if (!value) {
        this.mmuID = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public AssignInstruction_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTRUCTION:
        if (value == null) {
          unsetInstruction();
        } else {
          setInstruction((de.mosim.mmi.mmu.MInstruction)value);
        }
        break;

      case SIMULATION_STATE:
        if (value == null) {
          unsetSimulationState();
        } else {
          setSimulationState((de.mosim.mmi.mmu.MSimulationState)value);
        }
        break;

      case MMU_ID:
        if (value == null) {
          unsetMmuID();
        } else {
          setMmuID((java.lang.String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTRUCTION:
        return getInstruction();

      case SIMULATION_STATE:
        return getSimulationState();

      case MMU_ID:
        return getMmuID();

      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTRUCTION:
        return isSetInstruction();
      case SIMULATION_STATE:
        return isSetSimulationState();
      case MMU_ID:
        return isSetMmuID();
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof AssignInstruction_args)
        return this.equals((AssignInstruction_args)that);
      return false;
    }

    public boolean equals(AssignInstruction_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instruction = true && this.isSetInstruction();
      boolean that_present_instruction = true && that.isSetInstruction();
      if (this_present_instruction || that_present_instruction) {
        if (!(this_present_instruction && that_present_instruction))
          return false;
        if (!this.instruction.equals(that.instruction))
          return false;
      }

      boolean this_present_simulationState = true && this.isSetSimulationState();
      boolean that_present_simulationState = true && that.isSetSimulationState();
      if (this_present_simulationState || that_present_simulationState) {
        if (!(this_present_simulationState && that_present_simulationState))
          return false;
        if (!this.simulationState.equals(that.simulationState))
          return false;
      }

      boolean this_present_mmuID = true && this.isSetMmuID();
      boolean that_present_mmuID = true && that.isSetMmuID();
      if (this_present_mmuID || that_present_mmuID) {
        if (!(this_present_mmuID && that_present_mmuID))
          return false;
        if (!this.mmuID.equals(that.mmuID))
          return false;
      }

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstruction()) ? 131071 : 524287);
      if (isSetInstruction())
        hashCode = hashCode * 8191 + instruction.hashCode();

      hashCode = hashCode * 8191 + ((isSetSimulationState()) ? 131071 : 524287);
      if (isSetSimulationState())
        hashCode = hashCode * 8191 + simulationState.hashCode();

      hashCode = hashCode * 8191 + ((isSetMmuID()) ? 131071 : 524287);
      if (isSetMmuID())
        hashCode = hashCode * 8191 + mmuID.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AssignInstruction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstruction()).compareTo(other.isSetInstruction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstruction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instruction, other.instruction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSimulationState()).compareTo(other.isSetSimulationState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationState, other.simulationState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMmuID()).compareTo(other.isSetMmuID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMmuID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mmuID, other.mmuID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AssignInstruction_args(");
      boolean first = true;

      sb.append("instruction:");
      if (this.instruction == null) {
        sb.append("null");
      } else {
        sb.append(this.instruction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("simulationState:");
      if (this.simulationState == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationState);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mmuID:");
      if (this.mmuID == null) {
        sb.append("null");
      } else {
        sb.append(this.mmuID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (instruction != null) {
        instruction.validate();
      }
      if (simulationState != null) {
        simulationState.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AssignInstruction_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AssignInstruction_argsStandardScheme getScheme() {
        return new AssignInstruction_argsStandardScheme();
      }
    }

    private static class AssignInstruction_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<AssignInstruction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AssignInstruction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTRUCTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.instruction = new de.mosim.mmi.mmu.MInstruction();
                struct.instruction.read(iprot);
                struct.setInstructionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SIMULATION_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationState = new de.mosim.mmi.mmu.MSimulationState();
                struct.simulationState.read(iprot);
                struct.setSimulationStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mmuID = iprot.readString();
                struct.setMmuIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AssignInstruction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instruction != null) {
          oprot.writeFieldBegin(INSTRUCTION_FIELD_DESC);
          struct.instruction.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.simulationState != null) {
          oprot.writeFieldBegin(SIMULATION_STATE_FIELD_DESC);
          struct.simulationState.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mmuID != null) {
          oprot.writeFieldBegin(MMU_ID_FIELD_DESC);
          oprot.writeString(struct.mmuID);
          oprot.writeFieldEnd();
        }
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AssignInstruction_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AssignInstruction_argsTupleScheme getScheme() {
        return new AssignInstruction_argsTupleScheme();
      }
    }

    private static class AssignInstruction_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<AssignInstruction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AssignInstruction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstruction()) {
          optionals.set(0);
        }
        if (struct.isSetSimulationState()) {
          optionals.set(1);
        }
        if (struct.isSetMmuID()) {
          optionals.set(2);
        }
        if (struct.isSetSessionID()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetInstruction()) {
          struct.instruction.write(oprot);
        }
        if (struct.isSetSimulationState()) {
          struct.simulationState.write(oprot);
        }
        if (struct.isSetMmuID()) {
          oprot.writeString(struct.mmuID);
        }
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AssignInstruction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.instruction = new de.mosim.mmi.mmu.MInstruction();
          struct.instruction.read(iprot);
          struct.setInstructionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.simulationState = new de.mosim.mmi.mmu.MSimulationState();
          struct.simulationState.read(iprot);
          struct.setSimulationStateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mmuID = iprot.readString();
          struct.setMmuIDIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class AssignInstruction_result implements org.apache.thrift.TBase<AssignInstruction_result, AssignInstruction_result._Fields>, java.io.Serializable, Cloneable, Comparable<AssignInstruction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AssignInstruction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AssignInstruction_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AssignInstruction_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AssignInstruction_result.class, metaDataMap);
    }

    public AssignInstruction_result() {
    }

    public AssignInstruction_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AssignInstruction_result(AssignInstruction_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public AssignInstruction_result deepCopy() {
      return new AssignInstruction_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public AssignInstruction_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof AssignInstruction_result)
        return this.equals((AssignInstruction_result)that);
      return false;
    }

    public boolean equals(AssignInstruction_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AssignInstruction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AssignInstruction_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AssignInstruction_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AssignInstruction_resultStandardScheme getScheme() {
        return new AssignInstruction_resultStandardScheme();
      }
    }

    private static class AssignInstruction_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<AssignInstruction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AssignInstruction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AssignInstruction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AssignInstruction_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AssignInstruction_resultTupleScheme getScheme() {
        return new AssignInstruction_resultTupleScheme();
      }
    }

    private static class AssignInstruction_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<AssignInstruction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AssignInstruction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AssignInstruction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DoStep_args implements org.apache.thrift.TBase<DoStep_args, DoStep_args._Fields>, java.io.Serializable, Cloneable, Comparable<DoStep_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DoStep_args");

    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField SIMULATION_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationState", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField MMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mmuID", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DoStep_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DoStep_argsTupleSchemeFactory();

    public double time; // required
    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MSimulationState simulationState; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String mmuID; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TIME((short)1, "time"),
      SIMULATION_STATE((short)2, "simulationState"),
      MMU_ID((short)3, "mmuID"),
      SESSION_ID((short)4, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TIME
            return TIME;
          case 2: // SIMULATION_STATE
            return SIMULATION_STATE;
          case 3: // MMU_ID
            return MMU_ID;
          case 4: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.SIMULATION_STATE, new org.apache.thrift.meta_data.FieldMetaData("simulationState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.mmu.MSimulationState.class)));
      tmpMap.put(_Fields.MMU_ID, new org.apache.thrift.meta_data.FieldMetaData("mmuID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DoStep_args.class, metaDataMap);
    }

    public DoStep_args() {
    }

    public DoStep_args(
      double time,
      de.mosim.mmi.mmu.MSimulationState simulationState,
      java.lang.String mmuID,
      java.lang.String sessionID)
    {
      this();
      this.time = time;
      setTimeIsSet(true);
      this.simulationState = simulationState;
      this.mmuID = mmuID;
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DoStep_args(DoStep_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.time = other.time;
      if (other.isSetSimulationState()) {
        this.simulationState = new de.mosim.mmi.mmu.MSimulationState(other.simulationState);
      }
      if (other.isSetMmuID()) {
        this.mmuID = other.mmuID;
      }
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public DoStep_args deepCopy() {
      return new DoStep_args(this);
    }

    @Override
    public void clear() {
      setTimeIsSet(false);
      this.time = 0.0;
      this.simulationState = null;
      this.mmuID = null;
      this.sessionID = null;
    }

    public double getTime() {
      return this.time;
    }

    public DoStep_args setTime(double time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.mmu.MSimulationState getSimulationState() {
      return this.simulationState;
    }

    public DoStep_args setSimulationState(@org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MSimulationState simulationState) {
      this.simulationState = simulationState;
      return this;
    }

    public void unsetSimulationState() {
      this.simulationState = null;
    }

    /** Returns true if field simulationState is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationState() {
      return this.simulationState != null;
    }

    public void setSimulationStateIsSet(boolean value) {
      if (!value) {
        this.simulationState = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMmuID() {
      return this.mmuID;
    }

    public DoStep_args setMmuID(@org.apache.thrift.annotation.Nullable java.lang.String mmuID) {
      this.mmuID = mmuID;
      return this;
    }

    public void unsetMmuID() {
      this.mmuID = null;
    }

    /** Returns true if field mmuID is set (has been assigned a value) and false otherwise */
    public boolean isSetMmuID() {
      return this.mmuID != null;
    }

    public void setMmuIDIsSet(boolean value) {
      if (!value) {
        this.mmuID = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public DoStep_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((java.lang.Double)value);
        }
        break;

      case SIMULATION_STATE:
        if (value == null) {
          unsetSimulationState();
        } else {
          setSimulationState((de.mosim.mmi.mmu.MSimulationState)value);
        }
        break;

      case MMU_ID:
        if (value == null) {
          unsetMmuID();
        } else {
          setMmuID((java.lang.String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TIME:
        return getTime();

      case SIMULATION_STATE:
        return getSimulationState();

      case MMU_ID:
        return getMmuID();

      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TIME:
        return isSetTime();
      case SIMULATION_STATE:
        return isSetSimulationState();
      case MMU_ID:
        return isSetMmuID();
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DoStep_args)
        return this.equals((DoStep_args)that);
      return false;
    }

    public boolean equals(DoStep_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      boolean this_present_simulationState = true && this.isSetSimulationState();
      boolean that_present_simulationState = true && that.isSetSimulationState();
      if (this_present_simulationState || that_present_simulationState) {
        if (!(this_present_simulationState && that_present_simulationState))
          return false;
        if (!this.simulationState.equals(that.simulationState))
          return false;
      }

      boolean this_present_mmuID = true && this.isSetMmuID();
      boolean that_present_mmuID = true && that.isSetMmuID();
      if (this_present_mmuID || that_present_mmuID) {
        if (!(this_present_mmuID && that_present_mmuID))
          return false;
        if (!this.mmuID.equals(that.mmuID))
          return false;
      }

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(time);

      hashCode = hashCode * 8191 + ((isSetSimulationState()) ? 131071 : 524287);
      if (isSetSimulationState())
        hashCode = hashCode * 8191 + simulationState.hashCode();

      hashCode = hashCode * 8191 + ((isSetMmuID()) ? 131071 : 524287);
      if (isSetMmuID())
        hashCode = hashCode * 8191 + mmuID.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DoStep_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSimulationState()).compareTo(other.isSetSimulationState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationState, other.simulationState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMmuID()).compareTo(other.isSetMmuID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMmuID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mmuID, other.mmuID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DoStep_args(");
      boolean first = true;

      sb.append("time:");
      sb.append(this.time);
      first = false;
      if (!first) sb.append(", ");
      sb.append("simulationState:");
      if (this.simulationState == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationState);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mmuID:");
      if (this.mmuID == null) {
        sb.append("null");
      } else {
        sb.append(this.mmuID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simulationState != null) {
        simulationState.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DoStep_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DoStep_argsStandardScheme getScheme() {
        return new DoStep_argsStandardScheme();
      }
    }

    private static class DoStep_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<DoStep_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DoStep_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.time = iprot.readDouble();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SIMULATION_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationState = new de.mosim.mmi.mmu.MSimulationState();
                struct.simulationState.read(iprot);
                struct.setSimulationStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mmuID = iprot.readString();
                struct.setMmuIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DoStep_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeDouble(struct.time);
        oprot.writeFieldEnd();
        if (struct.simulationState != null) {
          oprot.writeFieldBegin(SIMULATION_STATE_FIELD_DESC);
          struct.simulationState.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mmuID != null) {
          oprot.writeFieldBegin(MMU_ID_FIELD_DESC);
          oprot.writeString(struct.mmuID);
          oprot.writeFieldEnd();
        }
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DoStep_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DoStep_argsTupleScheme getScheme() {
        return new DoStep_argsTupleScheme();
      }
    }

    private static class DoStep_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<DoStep_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DoStep_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTime()) {
          optionals.set(0);
        }
        if (struct.isSetSimulationState()) {
          optionals.set(1);
        }
        if (struct.isSetMmuID()) {
          optionals.set(2);
        }
        if (struct.isSetSessionID()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTime()) {
          oprot.writeDouble(struct.time);
        }
        if (struct.isSetSimulationState()) {
          struct.simulationState.write(oprot);
        }
        if (struct.isSetMmuID()) {
          oprot.writeString(struct.mmuID);
        }
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DoStep_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.time = iprot.readDouble();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.simulationState = new de.mosim.mmi.mmu.MSimulationState();
          struct.simulationState.read(iprot);
          struct.setSimulationStateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mmuID = iprot.readString();
          struct.setMmuIDIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DoStep_result implements org.apache.thrift.TBase<DoStep_result, DoStep_result._Fields>, java.io.Serializable, Cloneable, Comparable<DoStep_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DoStep_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DoStep_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DoStep_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MSimulationResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.mmu.MSimulationResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DoStep_result.class, metaDataMap);
    }

    public DoStep_result() {
    }

    public DoStep_result(
      de.mosim.mmi.mmu.MSimulationResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DoStep_result(DoStep_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.mmu.MSimulationResult(other.success);
      }
    }

    public DoStep_result deepCopy() {
      return new DoStep_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.mmu.MSimulationResult getSuccess() {
      return this.success;
    }

    public DoStep_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MSimulationResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.mmu.MSimulationResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DoStep_result)
        return this.equals((DoStep_result)that);
      return false;
    }

    public boolean equals(DoStep_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DoStep_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DoStep_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DoStep_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DoStep_resultStandardScheme getScheme() {
        return new DoStep_resultStandardScheme();
      }
    }

    private static class DoStep_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<DoStep_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DoStep_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.mmu.MSimulationResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DoStep_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DoStep_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DoStep_resultTupleScheme getScheme() {
        return new DoStep_resultTupleScheme();
      }
    }

    private static class DoStep_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<DoStep_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DoStep_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DoStep_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.mmu.MSimulationResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetBoundaryConstraints_args implements org.apache.thrift.TBase<GetBoundaryConstraints_args, GetBoundaryConstraints_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetBoundaryConstraints_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetBoundaryConstraints_args");

    private static final org.apache.thrift.protocol.TField INSTRUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("instruction", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mmuID", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetBoundaryConstraints_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetBoundaryConstraints_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MInstruction instruction; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String mmuID; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTRUCTION((short)1, "instruction"),
      MMU_ID((short)2, "mmuID"),
      SESSION_ID((short)3, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTRUCTION
            return INSTRUCTION;
          case 2: // MMU_ID
            return MMU_ID;
          case 3: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTRUCTION, new org.apache.thrift.meta_data.FieldMetaData("instruction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.mmu.MInstruction.class)));
      tmpMap.put(_Fields.MMU_ID, new org.apache.thrift.meta_data.FieldMetaData("mmuID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetBoundaryConstraints_args.class, metaDataMap);
    }

    public GetBoundaryConstraints_args() {
    }

    public GetBoundaryConstraints_args(
      de.mosim.mmi.mmu.MInstruction instruction,
      java.lang.String mmuID,
      java.lang.String sessionID)
    {
      this();
      this.instruction = instruction;
      this.mmuID = mmuID;
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetBoundaryConstraints_args(GetBoundaryConstraints_args other) {
      if (other.isSetInstruction()) {
        this.instruction = new de.mosim.mmi.mmu.MInstruction(other.instruction);
      }
      if (other.isSetMmuID()) {
        this.mmuID = other.mmuID;
      }
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public GetBoundaryConstraints_args deepCopy() {
      return new GetBoundaryConstraints_args(this);
    }

    @Override
    public void clear() {
      this.instruction = null;
      this.mmuID = null;
      this.sessionID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.mmu.MInstruction getInstruction() {
      return this.instruction;
    }

    public GetBoundaryConstraints_args setInstruction(@org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MInstruction instruction) {
      this.instruction = instruction;
      return this;
    }

    public void unsetInstruction() {
      this.instruction = null;
    }

    /** Returns true if field instruction is set (has been assigned a value) and false otherwise */
    public boolean isSetInstruction() {
      return this.instruction != null;
    }

    public void setInstructionIsSet(boolean value) {
      if (!value) {
        this.instruction = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMmuID() {
      return this.mmuID;
    }

    public GetBoundaryConstraints_args setMmuID(@org.apache.thrift.annotation.Nullable java.lang.String mmuID) {
      this.mmuID = mmuID;
      return this;
    }

    public void unsetMmuID() {
      this.mmuID = null;
    }

    /** Returns true if field mmuID is set (has been assigned a value) and false otherwise */
    public boolean isSetMmuID() {
      return this.mmuID != null;
    }

    public void setMmuIDIsSet(boolean value) {
      if (!value) {
        this.mmuID = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public GetBoundaryConstraints_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTRUCTION:
        if (value == null) {
          unsetInstruction();
        } else {
          setInstruction((de.mosim.mmi.mmu.MInstruction)value);
        }
        break;

      case MMU_ID:
        if (value == null) {
          unsetMmuID();
        } else {
          setMmuID((java.lang.String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTRUCTION:
        return getInstruction();

      case MMU_ID:
        return getMmuID();

      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTRUCTION:
        return isSetInstruction();
      case MMU_ID:
        return isSetMmuID();
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetBoundaryConstraints_args)
        return this.equals((GetBoundaryConstraints_args)that);
      return false;
    }

    public boolean equals(GetBoundaryConstraints_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instruction = true && this.isSetInstruction();
      boolean that_present_instruction = true && that.isSetInstruction();
      if (this_present_instruction || that_present_instruction) {
        if (!(this_present_instruction && that_present_instruction))
          return false;
        if (!this.instruction.equals(that.instruction))
          return false;
      }

      boolean this_present_mmuID = true && this.isSetMmuID();
      boolean that_present_mmuID = true && that.isSetMmuID();
      if (this_present_mmuID || that_present_mmuID) {
        if (!(this_present_mmuID && that_present_mmuID))
          return false;
        if (!this.mmuID.equals(that.mmuID))
          return false;
      }

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstruction()) ? 131071 : 524287);
      if (isSetInstruction())
        hashCode = hashCode * 8191 + instruction.hashCode();

      hashCode = hashCode * 8191 + ((isSetMmuID()) ? 131071 : 524287);
      if (isSetMmuID())
        hashCode = hashCode * 8191 + mmuID.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetBoundaryConstraints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstruction()).compareTo(other.isSetInstruction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstruction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instruction, other.instruction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMmuID()).compareTo(other.isSetMmuID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMmuID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mmuID, other.mmuID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetBoundaryConstraints_args(");
      boolean first = true;

      sb.append("instruction:");
      if (this.instruction == null) {
        sb.append("null");
      } else {
        sb.append(this.instruction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mmuID:");
      if (this.mmuID == null) {
        sb.append("null");
      } else {
        sb.append(this.mmuID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (instruction != null) {
        instruction.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetBoundaryConstraints_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetBoundaryConstraints_argsStandardScheme getScheme() {
        return new GetBoundaryConstraints_argsStandardScheme();
      }
    }

    private static class GetBoundaryConstraints_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetBoundaryConstraints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetBoundaryConstraints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTRUCTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.instruction = new de.mosim.mmi.mmu.MInstruction();
                struct.instruction.read(iprot);
                struct.setInstructionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mmuID = iprot.readString();
                struct.setMmuIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetBoundaryConstraints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instruction != null) {
          oprot.writeFieldBegin(INSTRUCTION_FIELD_DESC);
          struct.instruction.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mmuID != null) {
          oprot.writeFieldBegin(MMU_ID_FIELD_DESC);
          oprot.writeString(struct.mmuID);
          oprot.writeFieldEnd();
        }
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetBoundaryConstraints_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetBoundaryConstraints_argsTupleScheme getScheme() {
        return new GetBoundaryConstraints_argsTupleScheme();
      }
    }

    private static class GetBoundaryConstraints_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetBoundaryConstraints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetBoundaryConstraints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstruction()) {
          optionals.set(0);
        }
        if (struct.isSetMmuID()) {
          optionals.set(1);
        }
        if (struct.isSetSessionID()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetInstruction()) {
          struct.instruction.write(oprot);
        }
        if (struct.isSetMmuID()) {
          oprot.writeString(struct.mmuID);
        }
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetBoundaryConstraints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.instruction = new de.mosim.mmi.mmu.MInstruction();
          struct.instruction.read(iprot);
          struct.setInstructionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mmuID = iprot.readString();
          struct.setMmuIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetBoundaryConstraints_result implements org.apache.thrift.TBase<GetBoundaryConstraints_result, GetBoundaryConstraints_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetBoundaryConstraints_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetBoundaryConstraints_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetBoundaryConstraints_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetBoundaryConstraints_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.constraints.MConstraint> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.constraints.MConstraint.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetBoundaryConstraints_result.class, metaDataMap);
    }

    public GetBoundaryConstraints_result() {
    }

    public GetBoundaryConstraints_result(
      java.util.List<de.mosim.mmi.constraints.MConstraint> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetBoundaryConstraints_result(GetBoundaryConstraints_result other) {
      if (other.isSetSuccess()) {
        java.util.List<de.mosim.mmi.constraints.MConstraint> __this__success = new java.util.ArrayList<de.mosim.mmi.constraints.MConstraint>(other.success.size());
        for (de.mosim.mmi.constraints.MConstraint other_element : other.success) {
          __this__success.add(new de.mosim.mmi.constraints.MConstraint(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetBoundaryConstraints_result deepCopy() {
      return new GetBoundaryConstraints_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<de.mosim.mmi.constraints.MConstraint> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(de.mosim.mmi.constraints.MConstraint elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<de.mosim.mmi.constraints.MConstraint>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<de.mosim.mmi.constraints.MConstraint> getSuccess() {
      return this.success;
    }

    public GetBoundaryConstraints_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.constraints.MConstraint> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<de.mosim.mmi.constraints.MConstraint>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetBoundaryConstraints_result)
        return this.equals((GetBoundaryConstraints_result)that);
      return false;
    }

    public boolean equals(GetBoundaryConstraints_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetBoundaryConstraints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetBoundaryConstraints_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetBoundaryConstraints_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetBoundaryConstraints_resultStandardScheme getScheme() {
        return new GetBoundaryConstraints_resultStandardScheme();
      }
    }

    private static class GetBoundaryConstraints_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetBoundaryConstraints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetBoundaryConstraints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<de.mosim.mmi.constraints.MConstraint>(_list36.size);
                  @org.apache.thrift.annotation.Nullable de.mosim.mmi.constraints.MConstraint _elem37;
                  for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                  {
                    _elem37 = new de.mosim.mmi.constraints.MConstraint();
                    _elem37.read(iprot);
                    struct.success.add(_elem37);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetBoundaryConstraints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (de.mosim.mmi.constraints.MConstraint _iter39 : struct.success)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetBoundaryConstraints_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetBoundaryConstraints_resultTupleScheme getScheme() {
        return new GetBoundaryConstraints_resultTupleScheme();
      }
    }

    private static class GetBoundaryConstraints_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetBoundaryConstraints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetBoundaryConstraints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (de.mosim.mmi.constraints.MConstraint _iter40 : struct.success)
            {
              _iter40.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetBoundaryConstraints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<de.mosim.mmi.constraints.MConstraint>(_list41.size);
            @org.apache.thrift.annotation.Nullable de.mosim.mmi.constraints.MConstraint _elem42;
            for (int _i43 = 0; _i43 < _list41.size; ++_i43)
            {
              _elem42 = new de.mosim.mmi.constraints.MConstraint();
              _elem42.read(iprot);
              struct.success.add(_elem42);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CheckPrerequisites_args implements org.apache.thrift.TBase<CheckPrerequisites_args, CheckPrerequisites_args._Fields>, java.io.Serializable, Cloneable, Comparable<CheckPrerequisites_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CheckPrerequisites_args");

    private static final org.apache.thrift.protocol.TField INSTRUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("instruction", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mmuID", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CheckPrerequisites_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CheckPrerequisites_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MInstruction instruction; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String mmuID; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTRUCTION((short)1, "instruction"),
      MMU_ID((short)2, "mmuID"),
      SESSION_ID((short)3, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTRUCTION
            return INSTRUCTION;
          case 2: // MMU_ID
            return MMU_ID;
          case 3: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTRUCTION, new org.apache.thrift.meta_data.FieldMetaData("instruction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.mmu.MInstruction.class)));
      tmpMap.put(_Fields.MMU_ID, new org.apache.thrift.meta_data.FieldMetaData("mmuID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CheckPrerequisites_args.class, metaDataMap);
    }

    public CheckPrerequisites_args() {
    }

    public CheckPrerequisites_args(
      de.mosim.mmi.mmu.MInstruction instruction,
      java.lang.String mmuID,
      java.lang.String sessionID)
    {
      this();
      this.instruction = instruction;
      this.mmuID = mmuID;
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CheckPrerequisites_args(CheckPrerequisites_args other) {
      if (other.isSetInstruction()) {
        this.instruction = new de.mosim.mmi.mmu.MInstruction(other.instruction);
      }
      if (other.isSetMmuID()) {
        this.mmuID = other.mmuID;
      }
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public CheckPrerequisites_args deepCopy() {
      return new CheckPrerequisites_args(this);
    }

    @Override
    public void clear() {
      this.instruction = null;
      this.mmuID = null;
      this.sessionID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.mmu.MInstruction getInstruction() {
      return this.instruction;
    }

    public CheckPrerequisites_args setInstruction(@org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MInstruction instruction) {
      this.instruction = instruction;
      return this;
    }

    public void unsetInstruction() {
      this.instruction = null;
    }

    /** Returns true if field instruction is set (has been assigned a value) and false otherwise */
    public boolean isSetInstruction() {
      return this.instruction != null;
    }

    public void setInstructionIsSet(boolean value) {
      if (!value) {
        this.instruction = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMmuID() {
      return this.mmuID;
    }

    public CheckPrerequisites_args setMmuID(@org.apache.thrift.annotation.Nullable java.lang.String mmuID) {
      this.mmuID = mmuID;
      return this;
    }

    public void unsetMmuID() {
      this.mmuID = null;
    }

    /** Returns true if field mmuID is set (has been assigned a value) and false otherwise */
    public boolean isSetMmuID() {
      return this.mmuID != null;
    }

    public void setMmuIDIsSet(boolean value) {
      if (!value) {
        this.mmuID = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public CheckPrerequisites_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTRUCTION:
        if (value == null) {
          unsetInstruction();
        } else {
          setInstruction((de.mosim.mmi.mmu.MInstruction)value);
        }
        break;

      case MMU_ID:
        if (value == null) {
          unsetMmuID();
        } else {
          setMmuID((java.lang.String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTRUCTION:
        return getInstruction();

      case MMU_ID:
        return getMmuID();

      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTRUCTION:
        return isSetInstruction();
      case MMU_ID:
        return isSetMmuID();
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CheckPrerequisites_args)
        return this.equals((CheckPrerequisites_args)that);
      return false;
    }

    public boolean equals(CheckPrerequisites_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instruction = true && this.isSetInstruction();
      boolean that_present_instruction = true && that.isSetInstruction();
      if (this_present_instruction || that_present_instruction) {
        if (!(this_present_instruction && that_present_instruction))
          return false;
        if (!this.instruction.equals(that.instruction))
          return false;
      }

      boolean this_present_mmuID = true && this.isSetMmuID();
      boolean that_present_mmuID = true && that.isSetMmuID();
      if (this_present_mmuID || that_present_mmuID) {
        if (!(this_present_mmuID && that_present_mmuID))
          return false;
        if (!this.mmuID.equals(that.mmuID))
          return false;
      }

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstruction()) ? 131071 : 524287);
      if (isSetInstruction())
        hashCode = hashCode * 8191 + instruction.hashCode();

      hashCode = hashCode * 8191 + ((isSetMmuID()) ? 131071 : 524287);
      if (isSetMmuID())
        hashCode = hashCode * 8191 + mmuID.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CheckPrerequisites_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstruction()).compareTo(other.isSetInstruction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstruction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instruction, other.instruction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMmuID()).compareTo(other.isSetMmuID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMmuID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mmuID, other.mmuID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CheckPrerequisites_args(");
      boolean first = true;

      sb.append("instruction:");
      if (this.instruction == null) {
        sb.append("null");
      } else {
        sb.append(this.instruction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mmuID:");
      if (this.mmuID == null) {
        sb.append("null");
      } else {
        sb.append(this.mmuID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (instruction != null) {
        instruction.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CheckPrerequisites_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CheckPrerequisites_argsStandardScheme getScheme() {
        return new CheckPrerequisites_argsStandardScheme();
      }
    }

    private static class CheckPrerequisites_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CheckPrerequisites_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CheckPrerequisites_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTRUCTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.instruction = new de.mosim.mmi.mmu.MInstruction();
                struct.instruction.read(iprot);
                struct.setInstructionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mmuID = iprot.readString();
                struct.setMmuIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CheckPrerequisites_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instruction != null) {
          oprot.writeFieldBegin(INSTRUCTION_FIELD_DESC);
          struct.instruction.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mmuID != null) {
          oprot.writeFieldBegin(MMU_ID_FIELD_DESC);
          oprot.writeString(struct.mmuID);
          oprot.writeFieldEnd();
        }
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CheckPrerequisites_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CheckPrerequisites_argsTupleScheme getScheme() {
        return new CheckPrerequisites_argsTupleScheme();
      }
    }

    private static class CheckPrerequisites_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CheckPrerequisites_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CheckPrerequisites_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstruction()) {
          optionals.set(0);
        }
        if (struct.isSetMmuID()) {
          optionals.set(1);
        }
        if (struct.isSetSessionID()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetInstruction()) {
          struct.instruction.write(oprot);
        }
        if (struct.isSetMmuID()) {
          oprot.writeString(struct.mmuID);
        }
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CheckPrerequisites_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.instruction = new de.mosim.mmi.mmu.MInstruction();
          struct.instruction.read(iprot);
          struct.setInstructionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mmuID = iprot.readString();
          struct.setMmuIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CheckPrerequisites_result implements org.apache.thrift.TBase<CheckPrerequisites_result, CheckPrerequisites_result._Fields>, java.io.Serializable, Cloneable, Comparable<CheckPrerequisites_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CheckPrerequisites_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CheckPrerequisites_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CheckPrerequisites_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CheckPrerequisites_result.class, metaDataMap);
    }

    public CheckPrerequisites_result() {
    }

    public CheckPrerequisites_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CheckPrerequisites_result(CheckPrerequisites_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public CheckPrerequisites_result deepCopy() {
      return new CheckPrerequisites_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public CheckPrerequisites_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CheckPrerequisites_result)
        return this.equals((CheckPrerequisites_result)that);
      return false;
    }

    public boolean equals(CheckPrerequisites_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CheckPrerequisites_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CheckPrerequisites_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CheckPrerequisites_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CheckPrerequisites_resultStandardScheme getScheme() {
        return new CheckPrerequisites_resultStandardScheme();
      }
    }

    private static class CheckPrerequisites_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CheckPrerequisites_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CheckPrerequisites_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CheckPrerequisites_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CheckPrerequisites_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CheckPrerequisites_resultTupleScheme getScheme() {
        return new CheckPrerequisites_resultTupleScheme();
      }
    }

    private static class CheckPrerequisites_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CheckPrerequisites_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CheckPrerequisites_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CheckPrerequisites_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Abort_args implements org.apache.thrift.TBase<Abort_args, Abort_args._Fields>, java.io.Serializable, Cloneable, Comparable<Abort_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Abort_args");

    private static final org.apache.thrift.protocol.TField INSTRUCTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instructionID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mmuID", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Abort_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Abort_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instructionID; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String mmuID; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTRUCTION_ID((short)1, "instructionID"),
      MMU_ID((short)2, "mmuID"),
      SESSION_ID((short)3, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTRUCTION_ID
            return INSTRUCTION_ID;
          case 2: // MMU_ID
            return MMU_ID;
          case 3: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTRUCTION_ID, new org.apache.thrift.meta_data.FieldMetaData("instructionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MMU_ID, new org.apache.thrift.meta_data.FieldMetaData("mmuID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Abort_args.class, metaDataMap);
    }

    public Abort_args() {
    }

    public Abort_args(
      java.lang.String instructionID,
      java.lang.String mmuID,
      java.lang.String sessionID)
    {
      this();
      this.instructionID = instructionID;
      this.mmuID = mmuID;
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Abort_args(Abort_args other) {
      if (other.isSetInstructionID()) {
        this.instructionID = other.instructionID;
      }
      if (other.isSetMmuID()) {
        this.mmuID = other.mmuID;
      }
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public Abort_args deepCopy() {
      return new Abort_args(this);
    }

    @Override
    public void clear() {
      this.instructionID = null;
      this.mmuID = null;
      this.sessionID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstructionID() {
      return this.instructionID;
    }

    public Abort_args setInstructionID(@org.apache.thrift.annotation.Nullable java.lang.String instructionID) {
      this.instructionID = instructionID;
      return this;
    }

    public void unsetInstructionID() {
      this.instructionID = null;
    }

    /** Returns true if field instructionID is set (has been assigned a value) and false otherwise */
    public boolean isSetInstructionID() {
      return this.instructionID != null;
    }

    public void setInstructionIDIsSet(boolean value) {
      if (!value) {
        this.instructionID = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMmuID() {
      return this.mmuID;
    }

    public Abort_args setMmuID(@org.apache.thrift.annotation.Nullable java.lang.String mmuID) {
      this.mmuID = mmuID;
      return this;
    }

    public void unsetMmuID() {
      this.mmuID = null;
    }

    /** Returns true if field mmuID is set (has been assigned a value) and false otherwise */
    public boolean isSetMmuID() {
      return this.mmuID != null;
    }

    public void setMmuIDIsSet(boolean value) {
      if (!value) {
        this.mmuID = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public Abort_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTRUCTION_ID:
        if (value == null) {
          unsetInstructionID();
        } else {
          setInstructionID((java.lang.String)value);
        }
        break;

      case MMU_ID:
        if (value == null) {
          unsetMmuID();
        } else {
          setMmuID((java.lang.String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTRUCTION_ID:
        return getInstructionID();

      case MMU_ID:
        return getMmuID();

      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTRUCTION_ID:
        return isSetInstructionID();
      case MMU_ID:
        return isSetMmuID();
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Abort_args)
        return this.equals((Abort_args)that);
      return false;
    }

    public boolean equals(Abort_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instructionID = true && this.isSetInstructionID();
      boolean that_present_instructionID = true && that.isSetInstructionID();
      if (this_present_instructionID || that_present_instructionID) {
        if (!(this_present_instructionID && that_present_instructionID))
          return false;
        if (!this.instructionID.equals(that.instructionID))
          return false;
      }

      boolean this_present_mmuID = true && this.isSetMmuID();
      boolean that_present_mmuID = true && that.isSetMmuID();
      if (this_present_mmuID || that_present_mmuID) {
        if (!(this_present_mmuID && that_present_mmuID))
          return false;
        if (!this.mmuID.equals(that.mmuID))
          return false;
      }

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstructionID()) ? 131071 : 524287);
      if (isSetInstructionID())
        hashCode = hashCode * 8191 + instructionID.hashCode();

      hashCode = hashCode * 8191 + ((isSetMmuID()) ? 131071 : 524287);
      if (isSetMmuID())
        hashCode = hashCode * 8191 + mmuID.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Abort_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstructionID()).compareTo(other.isSetInstructionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstructionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instructionID, other.instructionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMmuID()).compareTo(other.isSetMmuID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMmuID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mmuID, other.mmuID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Abort_args(");
      boolean first = true;

      sb.append("instructionID:");
      if (this.instructionID == null) {
        sb.append("null");
      } else {
        sb.append(this.instructionID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mmuID:");
      if (this.mmuID == null) {
        sb.append("null");
      } else {
        sb.append(this.mmuID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Abort_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Abort_argsStandardScheme getScheme() {
        return new Abort_argsStandardScheme();
      }
    }

    private static class Abort_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Abort_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Abort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTRUCTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instructionID = iprot.readString();
                struct.setInstructionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mmuID = iprot.readString();
                struct.setMmuIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Abort_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instructionID != null) {
          oprot.writeFieldBegin(INSTRUCTION_ID_FIELD_DESC);
          oprot.writeString(struct.instructionID);
          oprot.writeFieldEnd();
        }
        if (struct.mmuID != null) {
          oprot.writeFieldBegin(MMU_ID_FIELD_DESC);
          oprot.writeString(struct.mmuID);
          oprot.writeFieldEnd();
        }
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Abort_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Abort_argsTupleScheme getScheme() {
        return new Abort_argsTupleScheme();
      }
    }

    private static class Abort_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Abort_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Abort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstructionID()) {
          optionals.set(0);
        }
        if (struct.isSetMmuID()) {
          optionals.set(1);
        }
        if (struct.isSetSessionID()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetInstructionID()) {
          oprot.writeString(struct.instructionID);
        }
        if (struct.isSetMmuID()) {
          oprot.writeString(struct.mmuID);
        }
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Abort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.instructionID = iprot.readString();
          struct.setInstructionIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mmuID = iprot.readString();
          struct.setMmuIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Abort_result implements org.apache.thrift.TBase<Abort_result, Abort_result._Fields>, java.io.Serializable, Cloneable, Comparable<Abort_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Abort_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Abort_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Abort_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Abort_result.class, metaDataMap);
    }

    public Abort_result() {
    }

    public Abort_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Abort_result(Abort_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public Abort_result deepCopy() {
      return new Abort_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public Abort_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Abort_result)
        return this.equals((Abort_result)that);
      return false;
    }

    public boolean equals(Abort_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Abort_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Abort_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Abort_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Abort_resultStandardScheme getScheme() {
        return new Abort_resultStandardScheme();
      }
    }

    private static class Abort_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Abort_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Abort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Abort_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Abort_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Abort_resultTupleScheme getScheme() {
        return new Abort_resultTupleScheme();
      }
    }

    private static class Abort_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Abort_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Abort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Abort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Dispose_args implements org.apache.thrift.TBase<Dispose_args, Dispose_args._Fields>, java.io.Serializable, Cloneable, Comparable<Dispose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dispose_args");

    private static final org.apache.thrift.protocol.TField MMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mmuID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Dispose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Dispose_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String mmuID; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MMU_ID((short)1, "mmuID"),
      SESSION_ID((short)2, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MMU_ID
            return MMU_ID;
          case 2: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MMU_ID, new org.apache.thrift.meta_data.FieldMetaData("mmuID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dispose_args.class, metaDataMap);
    }

    public Dispose_args() {
    }

    public Dispose_args(
      java.lang.String mmuID,
      java.lang.String sessionID)
    {
      this();
      this.mmuID = mmuID;
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Dispose_args(Dispose_args other) {
      if (other.isSetMmuID()) {
        this.mmuID = other.mmuID;
      }
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public Dispose_args deepCopy() {
      return new Dispose_args(this);
    }

    @Override
    public void clear() {
      this.mmuID = null;
      this.sessionID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMmuID() {
      return this.mmuID;
    }

    public Dispose_args setMmuID(@org.apache.thrift.annotation.Nullable java.lang.String mmuID) {
      this.mmuID = mmuID;
      return this;
    }

    public void unsetMmuID() {
      this.mmuID = null;
    }

    /** Returns true if field mmuID is set (has been assigned a value) and false otherwise */
    public boolean isSetMmuID() {
      return this.mmuID != null;
    }

    public void setMmuIDIsSet(boolean value) {
      if (!value) {
        this.mmuID = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public Dispose_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MMU_ID:
        if (value == null) {
          unsetMmuID();
        } else {
          setMmuID((java.lang.String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MMU_ID:
        return getMmuID();

      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MMU_ID:
        return isSetMmuID();
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Dispose_args)
        return this.equals((Dispose_args)that);
      return false;
    }

    public boolean equals(Dispose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mmuID = true && this.isSetMmuID();
      boolean that_present_mmuID = true && that.isSetMmuID();
      if (this_present_mmuID || that_present_mmuID) {
        if (!(this_present_mmuID && that_present_mmuID))
          return false;
        if (!this.mmuID.equals(that.mmuID))
          return false;
      }

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMmuID()) ? 131071 : 524287);
      if (isSetMmuID())
        hashCode = hashCode * 8191 + mmuID.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Dispose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMmuID()).compareTo(other.isSetMmuID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMmuID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mmuID, other.mmuID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Dispose_args(");
      boolean first = true;

      sb.append("mmuID:");
      if (this.mmuID == null) {
        sb.append("null");
      } else {
        sb.append(this.mmuID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Dispose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Dispose_argsStandardScheme getScheme() {
        return new Dispose_argsStandardScheme();
      }
    }

    private static class Dispose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Dispose_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mmuID = iprot.readString();
                struct.setMmuIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Dispose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mmuID != null) {
          oprot.writeFieldBegin(MMU_ID_FIELD_DESC);
          oprot.writeString(struct.mmuID);
          oprot.writeFieldEnd();
        }
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Dispose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Dispose_argsTupleScheme getScheme() {
        return new Dispose_argsTupleScheme();
      }
    }

    private static class Dispose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Dispose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMmuID()) {
          optionals.set(0);
        }
        if (struct.isSetSessionID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMmuID()) {
          oprot.writeString(struct.mmuID);
        }
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mmuID = iprot.readString();
          struct.setMmuIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Dispose_result implements org.apache.thrift.TBase<Dispose_result, Dispose_result._Fields>, java.io.Serializable, Cloneable, Comparable<Dispose_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dispose_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Dispose_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Dispose_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dispose_result.class, metaDataMap);
    }

    public Dispose_result() {
    }

    public Dispose_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Dispose_result(Dispose_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public Dispose_result deepCopy() {
      return new Dispose_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public Dispose_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Dispose_result)
        return this.equals((Dispose_result)that);
      return false;
    }

    public boolean equals(Dispose_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Dispose_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Dispose_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Dispose_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Dispose_resultStandardScheme getScheme() {
        return new Dispose_resultStandardScheme();
      }
    }

    private static class Dispose_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Dispose_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Dispose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Dispose_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Dispose_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Dispose_resultTupleScheme getScheme() {
        return new Dispose_resultTupleScheme();
      }
    }

    private static class Dispose_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Dispose_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Dispose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Dispose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ExecuteFunction_args implements org.apache.thrift.TBase<ExecuteFunction_args, ExecuteFunction_args._Fields>, java.io.Serializable, Cloneable, Comparable<ExecuteFunction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExecuteFunction_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("parameters", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField MMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mmuID", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExecuteFunction_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExecuteFunction_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> parameters; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String mmuID; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      PARAMETERS((short)2, "parameters"),
      MMU_ID((short)3, "mmuID"),
      SESSION_ID((short)4, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // PARAMETERS
            return PARAMETERS;
          case 3: // MMU_ID
            return MMU_ID;
          case 4: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("parameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MMU_ID, new org.apache.thrift.meta_data.FieldMetaData("mmuID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExecuteFunction_args.class, metaDataMap);
    }

    public ExecuteFunction_args() {
    }

    public ExecuteFunction_args(
      java.lang.String name,
      java.util.Map<java.lang.String,java.lang.String> parameters,
      java.lang.String mmuID,
      java.lang.String sessionID)
    {
      this();
      this.name = name;
      this.parameters = parameters;
      this.mmuID = mmuID;
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ExecuteFunction_args(ExecuteFunction_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetParameters()) {
        java.util.Map<java.lang.String,java.lang.String> __this__parameters = new java.util.HashMap<java.lang.String,java.lang.String>(other.parameters);
        this.parameters = __this__parameters;
      }
      if (other.isSetMmuID()) {
        this.mmuID = other.mmuID;
      }
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public ExecuteFunction_args deepCopy() {
      return new ExecuteFunction_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.parameters = null;
      this.mmuID = null;
      this.sessionID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public ExecuteFunction_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public int getParametersSize() {
      return (this.parameters == null) ? 0 : this.parameters.size();
    }

    public void putToParameters(java.lang.String key, java.lang.String val) {
      if (this.parameters == null) {
        this.parameters = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.parameters.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getParameters() {
      return this.parameters;
    }

    public ExecuteFunction_args setParameters(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> parameters) {
      this.parameters = parameters;
      return this;
    }

    public void unsetParameters() {
      this.parameters = null;
    }

    /** Returns true if field parameters is set (has been assigned a value) and false otherwise */
    public boolean isSetParameters() {
      return this.parameters != null;
    }

    public void setParametersIsSet(boolean value) {
      if (!value) {
        this.parameters = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMmuID() {
      return this.mmuID;
    }

    public ExecuteFunction_args setMmuID(@org.apache.thrift.annotation.Nullable java.lang.String mmuID) {
      this.mmuID = mmuID;
      return this;
    }

    public void unsetMmuID() {
      this.mmuID = null;
    }

    /** Returns true if field mmuID is set (has been assigned a value) and false otherwise */
    public boolean isSetMmuID() {
      return this.mmuID != null;
    }

    public void setMmuIDIsSet(boolean value) {
      if (!value) {
        this.mmuID = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public ExecuteFunction_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      case PARAMETERS:
        if (value == null) {
          unsetParameters();
        } else {
          setParameters((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      case MMU_ID:
        if (value == null) {
          unsetMmuID();
        } else {
          setMmuID((java.lang.String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case PARAMETERS:
        return getParameters();

      case MMU_ID:
        return getMmuID();

      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case PARAMETERS:
        return isSetParameters();
      case MMU_ID:
        return isSetMmuID();
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ExecuteFunction_args)
        return this.equals((ExecuteFunction_args)that);
      return false;
    }

    public boolean equals(ExecuteFunction_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_parameters = true && this.isSetParameters();
      boolean that_present_parameters = true && that.isSetParameters();
      if (this_present_parameters || that_present_parameters) {
        if (!(this_present_parameters && that_present_parameters))
          return false;
        if (!this.parameters.equals(that.parameters))
          return false;
      }

      boolean this_present_mmuID = true && this.isSetMmuID();
      boolean that_present_mmuID = true && that.isSetMmuID();
      if (this_present_mmuID || that_present_mmuID) {
        if (!(this_present_mmuID && that_present_mmuID))
          return false;
        if (!this.mmuID.equals(that.mmuID))
          return false;
      }

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetParameters()) ? 131071 : 524287);
      if (isSetParameters())
        hashCode = hashCode * 8191 + parameters.hashCode();

      hashCode = hashCode * 8191 + ((isSetMmuID()) ? 131071 : 524287);
      if (isSetMmuID())
        hashCode = hashCode * 8191 + mmuID.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ExecuteFunction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParameters()).compareTo(other.isSetParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameters()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameters, other.parameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMmuID()).compareTo(other.isSetMmuID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMmuID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mmuID, other.mmuID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ExecuteFunction_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameters:");
      if (this.parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.parameters);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mmuID:");
      if (this.mmuID == null) {
        sb.append("null");
      } else {
        sb.append(this.mmuID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ExecuteFunction_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExecuteFunction_argsStandardScheme getScheme() {
        return new ExecuteFunction_argsStandardScheme();
      }
    }

    private static class ExecuteFunction_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExecuteFunction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ExecuteFunction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMETERS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map44 = iprot.readMapBegin();
                  struct.parameters = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map44.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key45;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val46;
                  for (int _i47 = 0; _i47 < _map44.size; ++_i47)
                  {
                    _key45 = iprot.readString();
                    _val46 = iprot.readString();
                    struct.parameters.put(_key45, _val46);
                  }
                  iprot.readMapEnd();
                }
                struct.setParametersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mmuID = iprot.readString();
                struct.setMmuIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ExecuteFunction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.parameters != null) {
          oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.parameters.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter48 : struct.parameters.entrySet())
            {
              oprot.writeString(_iter48.getKey());
              oprot.writeString(_iter48.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.mmuID != null) {
          oprot.writeFieldBegin(MMU_ID_FIELD_DESC);
          oprot.writeString(struct.mmuID);
          oprot.writeFieldEnd();
        }
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ExecuteFunction_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExecuteFunction_argsTupleScheme getScheme() {
        return new ExecuteFunction_argsTupleScheme();
      }
    }

    private static class ExecuteFunction_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExecuteFunction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ExecuteFunction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        if (struct.isSetParameters()) {
          optionals.set(1);
        }
        if (struct.isSetMmuID()) {
          optionals.set(2);
        }
        if (struct.isSetSessionID()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetParameters()) {
          {
            oprot.writeI32(struct.parameters.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter49 : struct.parameters.entrySet())
            {
              oprot.writeString(_iter49.getKey());
              oprot.writeString(_iter49.getValue());
            }
          }
        }
        if (struct.isSetMmuID()) {
          oprot.writeString(struct.mmuID);
        }
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ExecuteFunction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.parameters = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map50.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key51;
            @org.apache.thrift.annotation.Nullable java.lang.String _val52;
            for (int _i53 = 0; _i53 < _map50.size; ++_i53)
            {
              _key51 = iprot.readString();
              _val52 = iprot.readString();
              struct.parameters.put(_key51, _val52);
            }
          }
          struct.setParametersIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mmuID = iprot.readString();
          struct.setMmuIDIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ExecuteFunction_result implements org.apache.thrift.TBase<ExecuteFunction_result, ExecuteFunction_result._Fields>, java.io.Serializable, Cloneable, Comparable<ExecuteFunction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExecuteFunction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExecuteFunction_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExecuteFunction_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExecuteFunction_result.class, metaDataMap);
    }

    public ExecuteFunction_result() {
    }

    public ExecuteFunction_result(
      java.util.Map<java.lang.String,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ExecuteFunction_result(ExecuteFunction_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public ExecuteFunction_result deepCopy() {
      return new ExecuteFunction_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public ExecuteFunction_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ExecuteFunction_result)
        return this.equals((ExecuteFunction_result)that);
      return false;
    }

    public boolean equals(ExecuteFunction_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ExecuteFunction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ExecuteFunction_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ExecuteFunction_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExecuteFunction_resultStandardScheme getScheme() {
        return new ExecuteFunction_resultStandardScheme();
      }
    }

    private static class ExecuteFunction_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExecuteFunction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ExecuteFunction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map54 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map54.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key55;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val56;
                  for (int _i57 = 0; _i57 < _map54.size; ++_i57)
                  {
                    _key55 = iprot.readString();
                    _val56 = iprot.readString();
                    struct.success.put(_key55, _val56);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ExecuteFunction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter58 : struct.success.entrySet())
            {
              oprot.writeString(_iter58.getKey());
              oprot.writeString(_iter58.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ExecuteFunction_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExecuteFunction_resultTupleScheme getScheme() {
        return new ExecuteFunction_resultTupleScheme();
      }
    }

    private static class ExecuteFunction_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExecuteFunction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ExecuteFunction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter59 : struct.success.entrySet())
            {
              oprot.writeString(_iter59.getKey());
              oprot.writeString(_iter59.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ExecuteFunction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map60 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map60.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key61;
            @org.apache.thrift.annotation.Nullable java.lang.String _val62;
            for (int _i63 = 0; _i63 < _map60.size; ++_i63)
            {
              _key61 = iprot.readString();
              _val62 = iprot.readString();
              struct.success.put(_key61, _val62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetStatus_args implements org.apache.thrift.TBase<GetStatus_args, GetStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetStatus_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetStatus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetStatus_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetStatus_args.class, metaDataMap);
    }

    public GetStatus_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetStatus_args(GetStatus_args other) {
    }

    public GetStatus_args deepCopy() {
      return new GetStatus_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetStatus_args)
        return this.equals((GetStatus_args)that);
      return false;
    }

    public boolean equals(GetStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(GetStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetStatus_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetStatus_argsStandardScheme getScheme() {
        return new GetStatus_argsStandardScheme();
      }
    }

    private static class GetStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetStatus_argsTupleScheme getScheme() {
        return new GetStatus_argsTupleScheme();
      }
    }

    private static class GetStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetStatus_result implements org.apache.thrift.TBase<GetStatus_result, GetStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetStatus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetStatus_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetStatus_result.class, metaDataMap);
    }

    public GetStatus_result() {
    }

    public GetStatus_result(
      java.util.Map<java.lang.String,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetStatus_result(GetStatus_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public GetStatus_result deepCopy() {
      return new GetStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public GetStatus_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetStatus_result)
        return this.equals((GetStatus_result)that);
      return false;
    }

    public boolean equals(GetStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetStatus_resultStandardScheme getScheme() {
        return new GetStatus_resultStandardScheme();
      }
    }

    private static class GetStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map64.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key65;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val66;
                  for (int _i67 = 0; _i67 < _map64.size; ++_i67)
                  {
                    _key65 = iprot.readString();
                    _val66 = iprot.readString();
                    struct.success.put(_key65, _val66);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter68 : struct.success.entrySet())
            {
              oprot.writeString(_iter68.getKey());
              oprot.writeString(_iter68.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetStatus_resultTupleScheme getScheme() {
        return new GetStatus_resultTupleScheme();
      }
    }

    private static class GetStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter69 : struct.success.entrySet())
            {
              oprot.writeString(_iter69.getKey());
              oprot.writeString(_iter69.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map70 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map70.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key71;
            @org.apache.thrift.annotation.Nullable java.lang.String _val72;
            for (int _i73 = 0; _i73 < _map70.size; ++_i73)
            {
              _key71 = iprot.readString();
              _val72 = iprot.readString();
              struct.success.put(_key71, _val72);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetAdapterDescription_args implements org.apache.thrift.TBase<GetAdapterDescription_args, GetAdapterDescription_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAdapterDescription_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAdapterDescription_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetAdapterDescription_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetAdapterDescription_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAdapterDescription_args.class, metaDataMap);
    }

    public GetAdapterDescription_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAdapterDescription_args(GetAdapterDescription_args other) {
    }

    public GetAdapterDescription_args deepCopy() {
      return new GetAdapterDescription_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAdapterDescription_args)
        return this.equals((GetAdapterDescription_args)that);
      return false;
    }

    public boolean equals(GetAdapterDescription_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(GetAdapterDescription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetAdapterDescription_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAdapterDescription_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetAdapterDescription_argsStandardScheme getScheme() {
        return new GetAdapterDescription_argsStandardScheme();
      }
    }

    private static class GetAdapterDescription_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetAdapterDescription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAdapterDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAdapterDescription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAdapterDescription_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetAdapterDescription_argsTupleScheme getScheme() {
        return new GetAdapterDescription_argsTupleScheme();
      }
    }

    private static class GetAdapterDescription_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetAdapterDescription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAdapterDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAdapterDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetAdapterDescription_result implements org.apache.thrift.TBase<GetAdapterDescription_result, GetAdapterDescription_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAdapterDescription_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAdapterDescription_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetAdapterDescription_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetAdapterDescription_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MAdapterDescription success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "MAdapterDescription")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAdapterDescription_result.class, metaDataMap);
    }

    public GetAdapterDescription_result() {
    }

    public GetAdapterDescription_result(
      MAdapterDescription success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAdapterDescription_result(GetAdapterDescription_result other) {
      if (other.isSetSuccess()) {
        this.success = new MAdapterDescription(other.success);
      }
    }

    public GetAdapterDescription_result deepCopy() {
      return new GetAdapterDescription_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MAdapterDescription getSuccess() {
      return this.success;
    }

    public GetAdapterDescription_result setSuccess(@org.apache.thrift.annotation.Nullable MAdapterDescription success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MAdapterDescription)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAdapterDescription_result)
        return this.equals((GetAdapterDescription_result)that);
      return false;
    }

    public boolean equals(GetAdapterDescription_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetAdapterDescription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetAdapterDescription_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAdapterDescription_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetAdapterDescription_resultStandardScheme getScheme() {
        return new GetAdapterDescription_resultStandardScheme();
      }
    }

    private static class GetAdapterDescription_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetAdapterDescription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAdapterDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MAdapterDescription();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAdapterDescription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAdapterDescription_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetAdapterDescription_resultTupleScheme getScheme() {
        return new GetAdapterDescription_resultTupleScheme();
      }
    }

    private static class GetAdapterDescription_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetAdapterDescription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAdapterDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAdapterDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MAdapterDescription();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CreateSession_args implements org.apache.thrift.TBase<CreateSession_args, CreateSession_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateSession_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateSession_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CreateSession_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CreateSession_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateSession_args.class, metaDataMap);
    }

    public CreateSession_args() {
    }

    public CreateSession_args(
      java.lang.String sessionID)
    {
      this();
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateSession_args(CreateSession_args other) {
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public CreateSession_args deepCopy() {
      return new CreateSession_args(this);
    }

    @Override
    public void clear() {
      this.sessionID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public CreateSession_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateSession_args)
        return this.equals((CreateSession_args)that);
      return false;
    }

    public boolean equals(CreateSession_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CreateSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CreateSession_args(");
      boolean first = true;

      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateSession_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateSession_argsStandardScheme getScheme() {
        return new CreateSession_argsStandardScheme();
      }
    }

    private static class CreateSession_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CreateSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateSession_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateSession_argsTupleScheme getScheme() {
        return new CreateSession_argsTupleScheme();
      }
    }

    private static class CreateSession_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CreateSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSessionID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CreateSession_result implements org.apache.thrift.TBase<CreateSession_result, CreateSession_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateSession_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CreateSession_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CreateSession_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateSession_result.class, metaDataMap);
    }

    public CreateSession_result() {
    }

    public CreateSession_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateSession_result(CreateSession_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public CreateSession_result deepCopy() {
      return new CreateSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public CreateSession_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateSession_result)
        return this.equals((CreateSession_result)that);
      return false;
    }

    public boolean equals(CreateSession_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CreateSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CreateSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateSession_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateSession_resultStandardScheme getScheme() {
        return new CreateSession_resultStandardScheme();
      }
    }

    private static class CreateSession_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CreateSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateSession_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateSession_resultTupleScheme getScheme() {
        return new CreateSession_resultTupleScheme();
      }
    }

    private static class CreateSession_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CreateSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CloseSession_args implements org.apache.thrift.TBase<CloseSession_args, CloseSession_args._Fields>, java.io.Serializable, Cloneable, Comparable<CloseSession_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CloseSession_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CloseSession_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CloseSession_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CloseSession_args.class, metaDataMap);
    }

    public CloseSession_args() {
    }

    public CloseSession_args(
      java.lang.String sessionID)
    {
      this();
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CloseSession_args(CloseSession_args other) {
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public CloseSession_args deepCopy() {
      return new CloseSession_args(this);
    }

    @Override
    public void clear() {
      this.sessionID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public CloseSession_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CloseSession_args)
        return this.equals((CloseSession_args)that);
      return false;
    }

    public boolean equals(CloseSession_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CloseSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CloseSession_args(");
      boolean first = true;

      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CloseSession_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CloseSession_argsStandardScheme getScheme() {
        return new CloseSession_argsStandardScheme();
      }
    }

    private static class CloseSession_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CloseSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CloseSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CloseSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CloseSession_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CloseSession_argsTupleScheme getScheme() {
        return new CloseSession_argsTupleScheme();
      }
    }

    private static class CloseSession_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CloseSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CloseSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSessionID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CloseSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CloseSession_result implements org.apache.thrift.TBase<CloseSession_result, CloseSession_result._Fields>, java.io.Serializable, Cloneable, Comparable<CloseSession_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CloseSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CloseSession_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CloseSession_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CloseSession_result.class, metaDataMap);
    }

    public CloseSession_result() {
    }

    public CloseSession_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CloseSession_result(CloseSession_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public CloseSession_result deepCopy() {
      return new CloseSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public CloseSession_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CloseSession_result)
        return this.equals((CloseSession_result)that);
      return false;
    }

    public boolean equals(CloseSession_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CloseSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CloseSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CloseSession_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CloseSession_resultStandardScheme getScheme() {
        return new CloseSession_resultStandardScheme();
      }
    }

    private static class CloseSession_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CloseSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CloseSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CloseSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CloseSession_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CloseSession_resultTupleScheme getScheme() {
        return new CloseSession_resultTupleScheme();
      }
    }

    private static class CloseSession_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CloseSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CloseSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CloseSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class PushScene_args implements org.apache.thrift.TBase<PushScene_args, PushScene_args._Fields>, java.io.Serializable, Cloneable, Comparable<PushScene_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PushScene_args");

    private static final org.apache.thrift.protocol.TField SCENE_UPDATES_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneUpdates", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PushScene_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PushScene_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MSceneUpdate sceneUpdates; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCENE_UPDATES((short)1, "sceneUpdates"),
      SESSION_ID((short)2, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCENE_UPDATES
            return SCENE_UPDATES;
          case 2: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCENE_UPDATES, new org.apache.thrift.meta_data.FieldMetaData("sceneUpdates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.scene.MSceneUpdate.class)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PushScene_args.class, metaDataMap);
    }

    public PushScene_args() {
    }

    public PushScene_args(
      de.mosim.mmi.scene.MSceneUpdate sceneUpdates,
      java.lang.String sessionID)
    {
      this();
      this.sceneUpdates = sceneUpdates;
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PushScene_args(PushScene_args other) {
      if (other.isSetSceneUpdates()) {
        this.sceneUpdates = new de.mosim.mmi.scene.MSceneUpdate(other.sceneUpdates);
      }
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public PushScene_args deepCopy() {
      return new PushScene_args(this);
    }

    @Override
    public void clear() {
      this.sceneUpdates = null;
      this.sessionID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.scene.MSceneUpdate getSceneUpdates() {
      return this.sceneUpdates;
    }

    public PushScene_args setSceneUpdates(@org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MSceneUpdate sceneUpdates) {
      this.sceneUpdates = sceneUpdates;
      return this;
    }

    public void unsetSceneUpdates() {
      this.sceneUpdates = null;
    }

    /** Returns true if field sceneUpdates is set (has been assigned a value) and false otherwise */
    public boolean isSetSceneUpdates() {
      return this.sceneUpdates != null;
    }

    public void setSceneUpdatesIsSet(boolean value) {
      if (!value) {
        this.sceneUpdates = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public PushScene_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SCENE_UPDATES:
        if (value == null) {
          unsetSceneUpdates();
        } else {
          setSceneUpdates((de.mosim.mmi.scene.MSceneUpdate)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCENE_UPDATES:
        return getSceneUpdates();

      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCENE_UPDATES:
        return isSetSceneUpdates();
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof PushScene_args)
        return this.equals((PushScene_args)that);
      return false;
    }

    public boolean equals(PushScene_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sceneUpdates = true && this.isSetSceneUpdates();
      boolean that_present_sceneUpdates = true && that.isSetSceneUpdates();
      if (this_present_sceneUpdates || that_present_sceneUpdates) {
        if (!(this_present_sceneUpdates && that_present_sceneUpdates))
          return false;
        if (!this.sceneUpdates.equals(that.sceneUpdates))
          return false;
      }

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSceneUpdates()) ? 131071 : 524287);
      if (isSetSceneUpdates())
        hashCode = hashCode * 8191 + sceneUpdates.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(PushScene_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSceneUpdates()).compareTo(other.isSetSceneUpdates());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSceneUpdates()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneUpdates, other.sceneUpdates);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("PushScene_args(");
      boolean first = true;

      sb.append("sceneUpdates:");
      if (this.sceneUpdates == null) {
        sb.append("null");
      } else {
        sb.append(this.sceneUpdates);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sceneUpdates != null) {
        sceneUpdates.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PushScene_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public PushScene_argsStandardScheme getScheme() {
        return new PushScene_argsStandardScheme();
      }
    }

    private static class PushScene_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<PushScene_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PushScene_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCENE_UPDATES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sceneUpdates = new de.mosim.mmi.scene.MSceneUpdate();
                struct.sceneUpdates.read(iprot);
                struct.setSceneUpdatesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PushScene_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sceneUpdates != null) {
          oprot.writeFieldBegin(SCENE_UPDATES_FIELD_DESC);
          struct.sceneUpdates.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PushScene_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public PushScene_argsTupleScheme getScheme() {
        return new PushScene_argsTupleScheme();
      }
    }

    private static class PushScene_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<PushScene_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PushScene_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSceneUpdates()) {
          optionals.set(0);
        }
        if (struct.isSetSessionID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSceneUpdates()) {
          struct.sceneUpdates.write(oprot);
        }
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PushScene_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sceneUpdates = new de.mosim.mmi.scene.MSceneUpdate();
          struct.sceneUpdates.read(iprot);
          struct.setSceneUpdatesIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class PushScene_result implements org.apache.thrift.TBase<PushScene_result, PushScene_result._Fields>, java.io.Serializable, Cloneable, Comparable<PushScene_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PushScene_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PushScene_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PushScene_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PushScene_result.class, metaDataMap);
    }

    public PushScene_result() {
    }

    public PushScene_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PushScene_result(PushScene_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public PushScene_result deepCopy() {
      return new PushScene_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public PushScene_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof PushScene_result)
        return this.equals((PushScene_result)that);
      return false;
    }

    public boolean equals(PushScene_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(PushScene_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("PushScene_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PushScene_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public PushScene_resultStandardScheme getScheme() {
        return new PushScene_resultStandardScheme();
      }
    }

    private static class PushScene_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<PushScene_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PushScene_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PushScene_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PushScene_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public PushScene_resultTupleScheme getScheme() {
        return new PushScene_resultTupleScheme();
      }
    }

    private static class PushScene_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<PushScene_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PushScene_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PushScene_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetLoadableMMUs_args implements org.apache.thrift.TBase<GetLoadableMMUs_args, GetLoadableMMUs_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetLoadableMMUs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetLoadableMMUs_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetLoadableMMUs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetLoadableMMUs_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetLoadableMMUs_args.class, metaDataMap);
    }

    public GetLoadableMMUs_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetLoadableMMUs_args(GetLoadableMMUs_args other) {
    }

    public GetLoadableMMUs_args deepCopy() {
      return new GetLoadableMMUs_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetLoadableMMUs_args)
        return this.equals((GetLoadableMMUs_args)that);
      return false;
    }

    public boolean equals(GetLoadableMMUs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(GetLoadableMMUs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetLoadableMMUs_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetLoadableMMUs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetLoadableMMUs_argsStandardScheme getScheme() {
        return new GetLoadableMMUs_argsStandardScheme();
      }
    }

    private static class GetLoadableMMUs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetLoadableMMUs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetLoadableMMUs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetLoadableMMUs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetLoadableMMUs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetLoadableMMUs_argsTupleScheme getScheme() {
        return new GetLoadableMMUs_argsTupleScheme();
      }
    }

    private static class GetLoadableMMUs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetLoadableMMUs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetLoadableMMUs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetLoadableMMUs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetLoadableMMUs_result implements org.apache.thrift.TBase<GetLoadableMMUs_result, GetLoadableMMUs_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetLoadableMMUs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetLoadableMMUs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetLoadableMMUs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetLoadableMMUs_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.mmu.MMUDescription> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.mmu.MMUDescription.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetLoadableMMUs_result.class, metaDataMap);
    }

    public GetLoadableMMUs_result() {
    }

    public GetLoadableMMUs_result(
      java.util.List<de.mosim.mmi.mmu.MMUDescription> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetLoadableMMUs_result(GetLoadableMMUs_result other) {
      if (other.isSetSuccess()) {
        java.util.List<de.mosim.mmi.mmu.MMUDescription> __this__success = new java.util.ArrayList<de.mosim.mmi.mmu.MMUDescription>(other.success.size());
        for (de.mosim.mmi.mmu.MMUDescription other_element : other.success) {
          __this__success.add(new de.mosim.mmi.mmu.MMUDescription(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetLoadableMMUs_result deepCopy() {
      return new GetLoadableMMUs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<de.mosim.mmi.mmu.MMUDescription> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(de.mosim.mmi.mmu.MMUDescription elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<de.mosim.mmi.mmu.MMUDescription>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<de.mosim.mmi.mmu.MMUDescription> getSuccess() {
      return this.success;
    }

    public GetLoadableMMUs_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.mmu.MMUDescription> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<de.mosim.mmi.mmu.MMUDescription>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetLoadableMMUs_result)
        return this.equals((GetLoadableMMUs_result)that);
      return false;
    }

    public boolean equals(GetLoadableMMUs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetLoadableMMUs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetLoadableMMUs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetLoadableMMUs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetLoadableMMUs_resultStandardScheme getScheme() {
        return new GetLoadableMMUs_resultStandardScheme();
      }
    }

    private static class GetLoadableMMUs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetLoadableMMUs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetLoadableMMUs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<de.mosim.mmi.mmu.MMUDescription>(_list74.size);
                  @org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MMUDescription _elem75;
                  for (int _i76 = 0; _i76 < _list74.size; ++_i76)
                  {
                    _elem75 = new de.mosim.mmi.mmu.MMUDescription();
                    _elem75.read(iprot);
                    struct.success.add(_elem75);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetLoadableMMUs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (de.mosim.mmi.mmu.MMUDescription _iter77 : struct.success)
            {
              _iter77.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetLoadableMMUs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetLoadableMMUs_resultTupleScheme getScheme() {
        return new GetLoadableMMUs_resultTupleScheme();
      }
    }

    private static class GetLoadableMMUs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetLoadableMMUs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetLoadableMMUs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (de.mosim.mmi.mmu.MMUDescription _iter78 : struct.success)
            {
              _iter78.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetLoadableMMUs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<de.mosim.mmi.mmu.MMUDescription>(_list79.size);
            @org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MMUDescription _elem80;
            for (int _i81 = 0; _i81 < _list79.size; ++_i81)
            {
              _elem80 = new de.mosim.mmi.mmu.MMUDescription();
              _elem80.read(iprot);
              struct.success.add(_elem80);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetMMus_args implements org.apache.thrift.TBase<GetMMus_args, GetMMus_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetMMus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMMus_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetMMus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetMMus_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMMus_args.class, metaDataMap);
    }

    public GetMMus_args() {
    }

    public GetMMus_args(
      java.lang.String sessionID)
    {
      this();
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetMMus_args(GetMMus_args other) {
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public GetMMus_args deepCopy() {
      return new GetMMus_args(this);
    }

    @Override
    public void clear() {
      this.sessionID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public GetMMus_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetMMus_args)
        return this.equals((GetMMus_args)that);
      return false;
    }

    public boolean equals(GetMMus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetMMus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetMMus_args(");
      boolean first = true;

      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetMMus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetMMus_argsStandardScheme getScheme() {
        return new GetMMus_argsStandardScheme();
      }
    }

    private static class GetMMus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetMMus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetMMus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetMMus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetMMus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetMMus_argsTupleScheme getScheme() {
        return new GetMMus_argsTupleScheme();
      }
    }

    private static class GetMMus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetMMus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetMMus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSessionID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetMMus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetMMus_result implements org.apache.thrift.TBase<GetMMus_result, GetMMus_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetMMus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMMus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetMMus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetMMus_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.mmu.MMUDescription> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.mmu.MMUDescription.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMMus_result.class, metaDataMap);
    }

    public GetMMus_result() {
    }

    public GetMMus_result(
      java.util.List<de.mosim.mmi.mmu.MMUDescription> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetMMus_result(GetMMus_result other) {
      if (other.isSetSuccess()) {
        java.util.List<de.mosim.mmi.mmu.MMUDescription> __this__success = new java.util.ArrayList<de.mosim.mmi.mmu.MMUDescription>(other.success.size());
        for (de.mosim.mmi.mmu.MMUDescription other_element : other.success) {
          __this__success.add(new de.mosim.mmi.mmu.MMUDescription(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetMMus_result deepCopy() {
      return new GetMMus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<de.mosim.mmi.mmu.MMUDescription> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(de.mosim.mmi.mmu.MMUDescription elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<de.mosim.mmi.mmu.MMUDescription>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<de.mosim.mmi.mmu.MMUDescription> getSuccess() {
      return this.success;
    }

    public GetMMus_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.mmu.MMUDescription> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<de.mosim.mmi.mmu.MMUDescription>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetMMus_result)
        return this.equals((GetMMus_result)that);
      return false;
    }

    public boolean equals(GetMMus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetMMus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetMMus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetMMus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetMMus_resultStandardScheme getScheme() {
        return new GetMMus_resultStandardScheme();
      }
    }

    private static class GetMMus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetMMus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetMMus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<de.mosim.mmi.mmu.MMUDescription>(_list82.size);
                  @org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MMUDescription _elem83;
                  for (int _i84 = 0; _i84 < _list82.size; ++_i84)
                  {
                    _elem83 = new de.mosim.mmi.mmu.MMUDescription();
                    _elem83.read(iprot);
                    struct.success.add(_elem83);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetMMus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (de.mosim.mmi.mmu.MMUDescription _iter85 : struct.success)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetMMus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetMMus_resultTupleScheme getScheme() {
        return new GetMMus_resultTupleScheme();
      }
    }

    private static class GetMMus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetMMus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetMMus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (de.mosim.mmi.mmu.MMUDescription _iter86 : struct.success)
            {
              _iter86.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetMMus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<de.mosim.mmi.mmu.MMUDescription>(_list87.size);
            @org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MMUDescription _elem88;
            for (int _i89 = 0; _i89 < _list87.size; ++_i89)
            {
              _elem88 = new de.mosim.mmi.mmu.MMUDescription();
              _elem88.read(iprot);
              struct.success.add(_elem88);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetDescription_args implements org.apache.thrift.TBase<GetDescription_args, GetDescription_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetDescription_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetDescription_args");

    private static final org.apache.thrift.protocol.TField MMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mmuID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetDescription_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetDescription_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String mmuID; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MMU_ID((short)1, "mmuID"),
      SESSION_ID((short)2, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MMU_ID
            return MMU_ID;
          case 2: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MMU_ID, new org.apache.thrift.meta_data.FieldMetaData("mmuID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetDescription_args.class, metaDataMap);
    }

    public GetDescription_args() {
    }

    public GetDescription_args(
      java.lang.String mmuID,
      java.lang.String sessionID)
    {
      this();
      this.mmuID = mmuID;
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetDescription_args(GetDescription_args other) {
      if (other.isSetMmuID()) {
        this.mmuID = other.mmuID;
      }
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public GetDescription_args deepCopy() {
      return new GetDescription_args(this);
    }

    @Override
    public void clear() {
      this.mmuID = null;
      this.sessionID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMmuID() {
      return this.mmuID;
    }

    public GetDescription_args setMmuID(@org.apache.thrift.annotation.Nullable java.lang.String mmuID) {
      this.mmuID = mmuID;
      return this;
    }

    public void unsetMmuID() {
      this.mmuID = null;
    }

    /** Returns true if field mmuID is set (has been assigned a value) and false otherwise */
    public boolean isSetMmuID() {
      return this.mmuID != null;
    }

    public void setMmuIDIsSet(boolean value) {
      if (!value) {
        this.mmuID = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public GetDescription_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MMU_ID:
        if (value == null) {
          unsetMmuID();
        } else {
          setMmuID((java.lang.String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MMU_ID:
        return getMmuID();

      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MMU_ID:
        return isSetMmuID();
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetDescription_args)
        return this.equals((GetDescription_args)that);
      return false;
    }

    public boolean equals(GetDescription_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mmuID = true && this.isSetMmuID();
      boolean that_present_mmuID = true && that.isSetMmuID();
      if (this_present_mmuID || that_present_mmuID) {
        if (!(this_present_mmuID && that_present_mmuID))
          return false;
        if (!this.mmuID.equals(that.mmuID))
          return false;
      }

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMmuID()) ? 131071 : 524287);
      if (isSetMmuID())
        hashCode = hashCode * 8191 + mmuID.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetDescription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMmuID()).compareTo(other.isSetMmuID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMmuID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mmuID, other.mmuID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetDescription_args(");
      boolean first = true;

      sb.append("mmuID:");
      if (this.mmuID == null) {
        sb.append("null");
      } else {
        sb.append(this.mmuID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetDescription_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetDescription_argsStandardScheme getScheme() {
        return new GetDescription_argsStandardScheme();
      }
    }

    private static class GetDescription_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetDescription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mmuID = iprot.readString();
                struct.setMmuIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetDescription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mmuID != null) {
          oprot.writeFieldBegin(MMU_ID_FIELD_DESC);
          oprot.writeString(struct.mmuID);
          oprot.writeFieldEnd();
        }
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetDescription_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetDescription_argsTupleScheme getScheme() {
        return new GetDescription_argsTupleScheme();
      }
    }

    private static class GetDescription_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetDescription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMmuID()) {
          optionals.set(0);
        }
        if (struct.isSetSessionID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMmuID()) {
          oprot.writeString(struct.mmuID);
        }
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mmuID = iprot.readString();
          struct.setMmuIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetDescription_result implements org.apache.thrift.TBase<GetDescription_result, GetDescription_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetDescription_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetDescription_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetDescription_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetDescription_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MMUDescription success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.mmu.MMUDescription.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetDescription_result.class, metaDataMap);
    }

    public GetDescription_result() {
    }

    public GetDescription_result(
      de.mosim.mmi.mmu.MMUDescription success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetDescription_result(GetDescription_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.mmu.MMUDescription(other.success);
      }
    }

    public GetDescription_result deepCopy() {
      return new GetDescription_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.mmu.MMUDescription getSuccess() {
      return this.success;
    }

    public GetDescription_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.mmu.MMUDescription success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.mmu.MMUDescription)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetDescription_result)
        return this.equals((GetDescription_result)that);
      return false;
    }

    public boolean equals(GetDescription_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetDescription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetDescription_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetDescription_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetDescription_resultStandardScheme getScheme() {
        return new GetDescription_resultStandardScheme();
      }
    }

    private static class GetDescription_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetDescription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.mmu.MMUDescription();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetDescription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetDescription_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetDescription_resultTupleScheme getScheme() {
        return new GetDescription_resultTupleScheme();
      }
    }

    private static class GetDescription_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetDescription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.mmu.MMUDescription();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetScene_args implements org.apache.thrift.TBase<GetScene_args, GetScene_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetScene_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetScene_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetScene_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetScene_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetScene_args.class, metaDataMap);
    }

    public GetScene_args() {
    }

    public GetScene_args(
      java.lang.String sessionID)
    {
      this();
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetScene_args(GetScene_args other) {
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public GetScene_args deepCopy() {
      return new GetScene_args(this);
    }

    @Override
    public void clear() {
      this.sessionID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public GetScene_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetScene_args)
        return this.equals((GetScene_args)that);
      return false;
    }

    public boolean equals(GetScene_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetScene_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetScene_args(");
      boolean first = true;

      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetScene_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetScene_argsStandardScheme getScheme() {
        return new GetScene_argsStandardScheme();
      }
    }

    private static class GetScene_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetScene_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetScene_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetScene_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetScene_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetScene_argsTupleScheme getScheme() {
        return new GetScene_argsTupleScheme();
      }
    }

    private static class GetScene_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetScene_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetScene_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSessionID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetScene_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetScene_result implements org.apache.thrift.TBase<GetScene_result, GetScene_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetScene_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetScene_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetScene_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetScene_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.scene.MSceneObject> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.scene.MSceneObject.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetScene_result.class, metaDataMap);
    }

    public GetScene_result() {
    }

    public GetScene_result(
      java.util.List<de.mosim.mmi.scene.MSceneObject> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetScene_result(GetScene_result other) {
      if (other.isSetSuccess()) {
        java.util.List<de.mosim.mmi.scene.MSceneObject> __this__success = new java.util.ArrayList<de.mosim.mmi.scene.MSceneObject>(other.success.size());
        for (de.mosim.mmi.scene.MSceneObject other_element : other.success) {
          __this__success.add(new de.mosim.mmi.scene.MSceneObject(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetScene_result deepCopy() {
      return new GetScene_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<de.mosim.mmi.scene.MSceneObject> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(de.mosim.mmi.scene.MSceneObject elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<de.mosim.mmi.scene.MSceneObject>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<de.mosim.mmi.scene.MSceneObject> getSuccess() {
      return this.success;
    }

    public GetScene_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.scene.MSceneObject> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<de.mosim.mmi.scene.MSceneObject>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetScene_result)
        return this.equals((GetScene_result)that);
      return false;
    }

    public boolean equals(GetScene_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetScene_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetScene_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetScene_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetScene_resultStandardScheme getScheme() {
        return new GetScene_resultStandardScheme();
      }
    }

    private static class GetScene_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetScene_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetScene_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<de.mosim.mmi.scene.MSceneObject>(_list90.size);
                  @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MSceneObject _elem91;
                  for (int _i92 = 0; _i92 < _list90.size; ++_i92)
                  {
                    _elem91 = new de.mosim.mmi.scene.MSceneObject();
                    _elem91.read(iprot);
                    struct.success.add(_elem91);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetScene_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (de.mosim.mmi.scene.MSceneObject _iter93 : struct.success)
            {
              _iter93.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetScene_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetScene_resultTupleScheme getScheme() {
        return new GetScene_resultTupleScheme();
      }
    }

    private static class GetScene_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetScene_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetScene_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (de.mosim.mmi.scene.MSceneObject _iter94 : struct.success)
            {
              _iter94.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetScene_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<de.mosim.mmi.scene.MSceneObject>(_list95.size);
            @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MSceneObject _elem96;
            for (int _i97 = 0; _i97 < _list95.size; ++_i97)
            {
              _elem96 = new de.mosim.mmi.scene.MSceneObject();
              _elem96.read(iprot);
              struct.success.add(_elem96);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetSceneChanges_args implements org.apache.thrift.TBase<GetSceneChanges_args, GetSceneChanges_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetSceneChanges_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSceneChanges_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetSceneChanges_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetSceneChanges_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSceneChanges_args.class, metaDataMap);
    }

    public GetSceneChanges_args() {
    }

    public GetSceneChanges_args(
      java.lang.String sessionID)
    {
      this();
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSceneChanges_args(GetSceneChanges_args other) {
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public GetSceneChanges_args deepCopy() {
      return new GetSceneChanges_args(this);
    }

    @Override
    public void clear() {
      this.sessionID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public GetSceneChanges_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSceneChanges_args)
        return this.equals((GetSceneChanges_args)that);
      return false;
    }

    public boolean equals(GetSceneChanges_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetSceneChanges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetSceneChanges_args(");
      boolean first = true;

      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSceneChanges_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetSceneChanges_argsStandardScheme getScheme() {
        return new GetSceneChanges_argsStandardScheme();
      }
    }

    private static class GetSceneChanges_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetSceneChanges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSceneChanges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSceneChanges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSceneChanges_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetSceneChanges_argsTupleScheme getScheme() {
        return new GetSceneChanges_argsTupleScheme();
      }
    }

    private static class GetSceneChanges_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetSceneChanges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSceneChanges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSessionID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSceneChanges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetSceneChanges_result implements org.apache.thrift.TBase<GetSceneChanges_result, GetSceneChanges_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetSceneChanges_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSceneChanges_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetSceneChanges_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetSceneChanges_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MSceneUpdate success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.scene.MSceneUpdate.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSceneChanges_result.class, metaDataMap);
    }

    public GetSceneChanges_result() {
    }

    public GetSceneChanges_result(
      de.mosim.mmi.scene.MSceneUpdate success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSceneChanges_result(GetSceneChanges_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.scene.MSceneUpdate(other.success);
      }
    }

    public GetSceneChanges_result deepCopy() {
      return new GetSceneChanges_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.scene.MSceneUpdate getSuccess() {
      return this.success;
    }

    public GetSceneChanges_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MSceneUpdate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.scene.MSceneUpdate)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSceneChanges_result)
        return this.equals((GetSceneChanges_result)that);
      return false;
    }

    public boolean equals(GetSceneChanges_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetSceneChanges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetSceneChanges_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSceneChanges_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetSceneChanges_resultStandardScheme getScheme() {
        return new GetSceneChanges_resultStandardScheme();
      }
    }

    private static class GetSceneChanges_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetSceneChanges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSceneChanges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.scene.MSceneUpdate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSceneChanges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSceneChanges_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetSceneChanges_resultTupleScheme getScheme() {
        return new GetSceneChanges_resultTupleScheme();
      }
    }

    private static class GetSceneChanges_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetSceneChanges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSceneChanges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSceneChanges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.scene.MSceneUpdate();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class LoadMMUs_args implements org.apache.thrift.TBase<LoadMMUs_args, LoadMMUs_args._Fields>, java.io.Serializable, Cloneable, Comparable<LoadMMUs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoadMMUs_args");

    private static final org.apache.thrift.protocol.TField MMUS_FIELD_DESC = new org.apache.thrift.protocol.TField("mmus", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LoadMMUs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LoadMMUs_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> mmus; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MMUS((short)1, "mmus"),
      SESSION_ID((short)2, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MMUS
            return MMUS;
          case 2: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MMUS, new org.apache.thrift.meta_data.FieldMetaData("mmus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoadMMUs_args.class, metaDataMap);
    }

    public LoadMMUs_args() {
    }

    public LoadMMUs_args(
      java.util.List<java.lang.String> mmus,
      java.lang.String sessionID)
    {
      this();
      this.mmus = mmus;
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LoadMMUs_args(LoadMMUs_args other) {
      if (other.isSetMmus()) {
        java.util.List<java.lang.String> __this__mmus = new java.util.ArrayList<java.lang.String>(other.mmus);
        this.mmus = __this__mmus;
      }
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public LoadMMUs_args deepCopy() {
      return new LoadMMUs_args(this);
    }

    @Override
    public void clear() {
      this.mmus = null;
      this.sessionID = null;
    }

    public int getMmusSize() {
      return (this.mmus == null) ? 0 : this.mmus.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getMmusIterator() {
      return (this.mmus == null) ? null : this.mmus.iterator();
    }

    public void addToMmus(java.lang.String elem) {
      if (this.mmus == null) {
        this.mmus = new java.util.ArrayList<java.lang.String>();
      }
      this.mmus.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getMmus() {
      return this.mmus;
    }

    public LoadMMUs_args setMmus(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> mmus) {
      this.mmus = mmus;
      return this;
    }

    public void unsetMmus() {
      this.mmus = null;
    }

    /** Returns true if field mmus is set (has been assigned a value) and false otherwise */
    public boolean isSetMmus() {
      return this.mmus != null;
    }

    public void setMmusIsSet(boolean value) {
      if (!value) {
        this.mmus = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public LoadMMUs_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MMUS:
        if (value == null) {
          unsetMmus();
        } else {
          setMmus((java.util.List<java.lang.String>)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MMUS:
        return getMmus();

      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MMUS:
        return isSetMmus();
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof LoadMMUs_args)
        return this.equals((LoadMMUs_args)that);
      return false;
    }

    public boolean equals(LoadMMUs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mmus = true && this.isSetMmus();
      boolean that_present_mmus = true && that.isSetMmus();
      if (this_present_mmus || that_present_mmus) {
        if (!(this_present_mmus && that_present_mmus))
          return false;
        if (!this.mmus.equals(that.mmus))
          return false;
      }

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMmus()) ? 131071 : 524287);
      if (isSetMmus())
        hashCode = hashCode * 8191 + mmus.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(LoadMMUs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMmus()).compareTo(other.isSetMmus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMmus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mmus, other.mmus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("LoadMMUs_args(");
      boolean first = true;

      sb.append("mmus:");
      if (this.mmus == null) {
        sb.append("null");
      } else {
        sb.append(this.mmus);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class LoadMMUs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public LoadMMUs_argsStandardScheme getScheme() {
        return new LoadMMUs_argsStandardScheme();
      }
    }

    private static class LoadMMUs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<LoadMMUs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, LoadMMUs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MMUS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                  struct.mmus = new java.util.ArrayList<java.lang.String>(_list98.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem99;
                  for (int _i100 = 0; _i100 < _list98.size; ++_i100)
                  {
                    _elem99 = iprot.readString();
                    struct.mmus.add(_elem99);
                  }
                  iprot.readListEnd();
                }
                struct.setMmusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, LoadMMUs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mmus != null) {
          oprot.writeFieldBegin(MMUS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mmus.size()));
            for (java.lang.String _iter101 : struct.mmus)
            {
              oprot.writeString(_iter101);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class LoadMMUs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public LoadMMUs_argsTupleScheme getScheme() {
        return new LoadMMUs_argsTupleScheme();
      }
    }

    private static class LoadMMUs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<LoadMMUs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, LoadMMUs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMmus()) {
          optionals.set(0);
        }
        if (struct.isSetSessionID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMmus()) {
          {
            oprot.writeI32(struct.mmus.size());
            for (java.lang.String _iter102 : struct.mmus)
            {
              oprot.writeString(_iter102);
            }
          }
        }
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, LoadMMUs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mmus = new java.util.ArrayList<java.lang.String>(_list103.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem104;
            for (int _i105 = 0; _i105 < _list103.size; ++_i105)
            {
              _elem104 = iprot.readString();
              struct.mmus.add(_elem104);
            }
          }
          struct.setMmusIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class LoadMMUs_result implements org.apache.thrift.TBase<LoadMMUs_result, LoadMMUs_result._Fields>, java.io.Serializable, Cloneable, Comparable<LoadMMUs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoadMMUs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LoadMMUs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LoadMMUs_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoadMMUs_result.class, metaDataMap);
    }

    public LoadMMUs_result() {
    }

    public LoadMMUs_result(
      java.util.Map<java.lang.String,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LoadMMUs_result(LoadMMUs_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public LoadMMUs_result deepCopy() {
      return new LoadMMUs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public LoadMMUs_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof LoadMMUs_result)
        return this.equals((LoadMMUs_result)that);
      return false;
    }

    public boolean equals(LoadMMUs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(LoadMMUs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("LoadMMUs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class LoadMMUs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public LoadMMUs_resultStandardScheme getScheme() {
        return new LoadMMUs_resultStandardScheme();
      }
    }

    private static class LoadMMUs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<LoadMMUs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, LoadMMUs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map106 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map106.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key107;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val108;
                  for (int _i109 = 0; _i109 < _map106.size; ++_i109)
                  {
                    _key107 = iprot.readString();
                    _val108 = iprot.readString();
                    struct.success.put(_key107, _val108);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, LoadMMUs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter110 : struct.success.entrySet())
            {
              oprot.writeString(_iter110.getKey());
              oprot.writeString(_iter110.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class LoadMMUs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public LoadMMUs_resultTupleScheme getScheme() {
        return new LoadMMUs_resultTupleScheme();
      }
    }

    private static class LoadMMUs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<LoadMMUs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, LoadMMUs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter111 : struct.success.entrySet())
            {
              oprot.writeString(_iter111.getKey());
              oprot.writeString(_iter111.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, LoadMMUs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map112 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map112.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key113;
            @org.apache.thrift.annotation.Nullable java.lang.String _val114;
            for (int _i115 = 0; _i115 < _map112.size; ++_i115)
            {
              _key113 = iprot.readString();
              _val114 = iprot.readString();
              struct.success.put(_key113, _val114);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CreateCheckpoint_args implements org.apache.thrift.TBase<CreateCheckpoint_args, CreateCheckpoint_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateCheckpoint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateCheckpoint_args");

    private static final org.apache.thrift.protocol.TField MMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mmuID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CreateCheckpoint_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CreateCheckpoint_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String mmuID; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MMU_ID((short)1, "mmuID"),
      SESSION_ID((short)2, "sessionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MMU_ID
            return MMU_ID;
          case 2: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MMU_ID, new org.apache.thrift.meta_data.FieldMetaData("mmuID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateCheckpoint_args.class, metaDataMap);
    }

    public CreateCheckpoint_args() {
    }

    public CreateCheckpoint_args(
      java.lang.String mmuID,
      java.lang.String sessionID)
    {
      this();
      this.mmuID = mmuID;
      this.sessionID = sessionID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateCheckpoint_args(CreateCheckpoint_args other) {
      if (other.isSetMmuID()) {
        this.mmuID = other.mmuID;
      }
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
    }

    public CreateCheckpoint_args deepCopy() {
      return new CreateCheckpoint_args(this);
    }

    @Override
    public void clear() {
      this.mmuID = null;
      this.sessionID = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMmuID() {
      return this.mmuID;
    }

    public CreateCheckpoint_args setMmuID(@org.apache.thrift.annotation.Nullable java.lang.String mmuID) {
      this.mmuID = mmuID;
      return this;
    }

    public void unsetMmuID() {
      this.mmuID = null;
    }

    /** Returns true if field mmuID is set (has been assigned a value) and false otherwise */
    public boolean isSetMmuID() {
      return this.mmuID != null;
    }

    public void setMmuIDIsSet(boolean value) {
      if (!value) {
        this.mmuID = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public CreateCheckpoint_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MMU_ID:
        if (value == null) {
          unsetMmuID();
        } else {
          setMmuID((java.lang.String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MMU_ID:
        return getMmuID();

      case SESSION_ID:
        return getSessionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MMU_ID:
        return isSetMmuID();
      case SESSION_ID:
        return isSetSessionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateCheckpoint_args)
        return this.equals((CreateCheckpoint_args)that);
      return false;
    }

    public boolean equals(CreateCheckpoint_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mmuID = true && this.isSetMmuID();
      boolean that_present_mmuID = true && that.isSetMmuID();
      if (this_present_mmuID || that_present_mmuID) {
        if (!(this_present_mmuID && that_present_mmuID))
          return false;
        if (!this.mmuID.equals(that.mmuID))
          return false;
      }

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMmuID()) ? 131071 : 524287);
      if (isSetMmuID())
        hashCode = hashCode * 8191 + mmuID.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CreateCheckpoint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMmuID()).compareTo(other.isSetMmuID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMmuID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mmuID, other.mmuID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CreateCheckpoint_args(");
      boolean first = true;

      sb.append("mmuID:");
      if (this.mmuID == null) {
        sb.append("null");
      } else {
        sb.append(this.mmuID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateCheckpoint_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateCheckpoint_argsStandardScheme getScheme() {
        return new CreateCheckpoint_argsStandardScheme();
      }
    }

    private static class CreateCheckpoint_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CreateCheckpoint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateCheckpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mmuID = iprot.readString();
                struct.setMmuIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateCheckpoint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mmuID != null) {
          oprot.writeFieldBegin(MMU_ID_FIELD_DESC);
          oprot.writeString(struct.mmuID);
          oprot.writeFieldEnd();
        }
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateCheckpoint_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateCheckpoint_argsTupleScheme getScheme() {
        return new CreateCheckpoint_argsTupleScheme();
      }
    }

    private static class CreateCheckpoint_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CreateCheckpoint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateCheckpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMmuID()) {
          optionals.set(0);
        }
        if (struct.isSetSessionID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMmuID()) {
          oprot.writeString(struct.mmuID);
        }
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateCheckpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mmuID = iprot.readString();
          struct.setMmuIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CreateCheckpoint_result implements org.apache.thrift.TBase<CreateCheckpoint_result, CreateCheckpoint_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateCheckpoint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateCheckpoint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CreateCheckpoint_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CreateCheckpoint_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateCheckpoint_result.class, metaDataMap);
    }

    public CreateCheckpoint_result() {
    }

    public CreateCheckpoint_result(
      java.nio.ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateCheckpoint_result(CreateCheckpoint_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    public CreateCheckpoint_result deepCopy() {
      return new CreateCheckpoint_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public java.nio.ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public CreateCheckpoint_result setSuccess(byte[] success) {
      this.success = success == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(success.clone());
      return this;
    }

    public CreateCheckpoint_result setSuccess(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          if (value instanceof byte[]) {
            setSuccess((byte[])value);
          } else {
            setSuccess((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateCheckpoint_result)
        return this.equals((CreateCheckpoint_result)that);
      return false;
    }

    public boolean equals(CreateCheckpoint_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CreateCheckpoint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CreateCheckpoint_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateCheckpoint_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateCheckpoint_resultStandardScheme getScheme() {
        return new CreateCheckpoint_resultStandardScheme();
      }
    }

    private static class CreateCheckpoint_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CreateCheckpoint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateCheckpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateCheckpoint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateCheckpoint_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateCheckpoint_resultTupleScheme getScheme() {
        return new CreateCheckpoint_resultTupleScheme();
      }
    }

    private static class CreateCheckpoint_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CreateCheckpoint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateCheckpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateCheckpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class RestoreCheckpoint_args implements org.apache.thrift.TBase<RestoreCheckpoint_args, RestoreCheckpoint_args._Fields>, java.io.Serializable, Cloneable, Comparable<RestoreCheckpoint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RestoreCheckpoint_args");

    private static final org.apache.thrift.protocol.TField MMU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mmuID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CHECKPOINT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("checkpointData", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RestoreCheckpoint_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RestoreCheckpoint_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String mmuID; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sessionID; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer checkpointData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MMU_ID((short)1, "mmuID"),
      SESSION_ID((short)2, "sessionID"),
      CHECKPOINT_DATA((short)3, "checkpointData");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MMU_ID
            return MMU_ID;
          case 2: // SESSION_ID
            return SESSION_ID;
          case 3: // CHECKPOINT_DATA
            return CHECKPOINT_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MMU_ID, new org.apache.thrift.meta_data.FieldMetaData("mmuID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHECKPOINT_DATA, new org.apache.thrift.meta_data.FieldMetaData("checkpointData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RestoreCheckpoint_args.class, metaDataMap);
    }

    public RestoreCheckpoint_args() {
    }

    public RestoreCheckpoint_args(
      java.lang.String mmuID,
      java.lang.String sessionID,
      java.nio.ByteBuffer checkpointData)
    {
      this();
      this.mmuID = mmuID;
      this.sessionID = sessionID;
      this.checkpointData = org.apache.thrift.TBaseHelper.copyBinary(checkpointData);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RestoreCheckpoint_args(RestoreCheckpoint_args other) {
      if (other.isSetMmuID()) {
        this.mmuID = other.mmuID;
      }
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
      if (other.isSetCheckpointData()) {
        this.checkpointData = org.apache.thrift.TBaseHelper.copyBinary(other.checkpointData);
      }
    }

    public RestoreCheckpoint_args deepCopy() {
      return new RestoreCheckpoint_args(this);
    }

    @Override
    public void clear() {
      this.mmuID = null;
      this.sessionID = null;
      this.checkpointData = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMmuID() {
      return this.mmuID;
    }

    public RestoreCheckpoint_args setMmuID(@org.apache.thrift.annotation.Nullable java.lang.String mmuID) {
      this.mmuID = mmuID;
      return this;
    }

    public void unsetMmuID() {
      this.mmuID = null;
    }

    /** Returns true if field mmuID is set (has been assigned a value) and false otherwise */
    public boolean isSetMmuID() {
      return this.mmuID != null;
    }

    public void setMmuIDIsSet(boolean value) {
      if (!value) {
        this.mmuID = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionID() {
      return this.sessionID;
    }

    public RestoreCheckpoint_args setSessionID(@org.apache.thrift.annotation.Nullable java.lang.String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public byte[] getCheckpointData() {
      setCheckpointData(org.apache.thrift.TBaseHelper.rightSize(checkpointData));
      return checkpointData == null ? null : checkpointData.array();
    }

    public java.nio.ByteBuffer bufferForCheckpointData() {
      return org.apache.thrift.TBaseHelper.copyBinary(checkpointData);
    }

    public RestoreCheckpoint_args setCheckpointData(byte[] checkpointData) {
      this.checkpointData = checkpointData == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(checkpointData.clone());
      return this;
    }

    public RestoreCheckpoint_args setCheckpointData(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer checkpointData) {
      this.checkpointData = org.apache.thrift.TBaseHelper.copyBinary(checkpointData);
      return this;
    }

    public void unsetCheckpointData() {
      this.checkpointData = null;
    }

    /** Returns true if field checkpointData is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckpointData() {
      return this.checkpointData != null;
    }

    public void setCheckpointDataIsSet(boolean value) {
      if (!value) {
        this.checkpointData = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MMU_ID:
        if (value == null) {
          unsetMmuID();
        } else {
          setMmuID((java.lang.String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((java.lang.String)value);
        }
        break;

      case CHECKPOINT_DATA:
        if (value == null) {
          unsetCheckpointData();
        } else {
          if (value instanceof byte[]) {
            setCheckpointData((byte[])value);
          } else {
            setCheckpointData((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MMU_ID:
        return getMmuID();

      case SESSION_ID:
        return getSessionID();

      case CHECKPOINT_DATA:
        return getCheckpointData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MMU_ID:
        return isSetMmuID();
      case SESSION_ID:
        return isSetSessionID();
      case CHECKPOINT_DATA:
        return isSetCheckpointData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof RestoreCheckpoint_args)
        return this.equals((RestoreCheckpoint_args)that);
      return false;
    }

    public boolean equals(RestoreCheckpoint_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mmuID = true && this.isSetMmuID();
      boolean that_present_mmuID = true && that.isSetMmuID();
      if (this_present_mmuID || that_present_mmuID) {
        if (!(this_present_mmuID && that_present_mmuID))
          return false;
        if (!this.mmuID.equals(that.mmuID))
          return false;
      }

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      boolean this_present_checkpointData = true && this.isSetCheckpointData();
      boolean that_present_checkpointData = true && that.isSetCheckpointData();
      if (this_present_checkpointData || that_present_checkpointData) {
        if (!(this_present_checkpointData && that_present_checkpointData))
          return false;
        if (!this.checkpointData.equals(that.checkpointData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMmuID()) ? 131071 : 524287);
      if (isSetMmuID())
        hashCode = hashCode * 8191 + mmuID.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionID()) ? 131071 : 524287);
      if (isSetSessionID())
        hashCode = hashCode * 8191 + sessionID.hashCode();

      hashCode = hashCode * 8191 + ((isSetCheckpointData()) ? 131071 : 524287);
      if (isSetCheckpointData())
        hashCode = hashCode * 8191 + checkpointData.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RestoreCheckpoint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMmuID()).compareTo(other.isSetMmuID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMmuID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mmuID, other.mmuID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCheckpointData()).compareTo(other.isSetCheckpointData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckpointData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkpointData, other.checkpointData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RestoreCheckpoint_args(");
      boolean first = true;

      sb.append("mmuID:");
      if (this.mmuID == null) {
        sb.append("null");
      } else {
        sb.append(this.mmuID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkpointData:");
      if (this.checkpointData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.checkpointData, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RestoreCheckpoint_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RestoreCheckpoint_argsStandardScheme getScheme() {
        return new RestoreCheckpoint_argsStandardScheme();
      }
    }

    private static class RestoreCheckpoint_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RestoreCheckpoint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RestoreCheckpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MMU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mmuID = iprot.readString();
                struct.setMmuIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHECKPOINT_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.checkpointData = iprot.readBinary();
                struct.setCheckpointDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RestoreCheckpoint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mmuID != null) {
          oprot.writeFieldBegin(MMU_ID_FIELD_DESC);
          oprot.writeString(struct.mmuID);
          oprot.writeFieldEnd();
        }
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        if (struct.checkpointData != null) {
          oprot.writeFieldBegin(CHECKPOINT_DATA_FIELD_DESC);
          oprot.writeBinary(struct.checkpointData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RestoreCheckpoint_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RestoreCheckpoint_argsTupleScheme getScheme() {
        return new RestoreCheckpoint_argsTupleScheme();
      }
    }

    private static class RestoreCheckpoint_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RestoreCheckpoint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RestoreCheckpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMmuID()) {
          optionals.set(0);
        }
        if (struct.isSetSessionID()) {
          optionals.set(1);
        }
        if (struct.isSetCheckpointData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMmuID()) {
          oprot.writeString(struct.mmuID);
        }
        if (struct.isSetSessionID()) {
          oprot.writeString(struct.sessionID);
        }
        if (struct.isSetCheckpointData()) {
          oprot.writeBinary(struct.checkpointData);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RestoreCheckpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.mmuID = iprot.readString();
          struct.setMmuIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sessionID = iprot.readString();
          struct.setSessionIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.checkpointData = iprot.readBinary();
          struct.setCheckpointDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class RestoreCheckpoint_result implements org.apache.thrift.TBase<RestoreCheckpoint_result, RestoreCheckpoint_result._Fields>, java.io.Serializable, Cloneable, Comparable<RestoreCheckpoint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RestoreCheckpoint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RestoreCheckpoint_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RestoreCheckpoint_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RestoreCheckpoint_result.class, metaDataMap);
    }

    public RestoreCheckpoint_result() {
    }

    public RestoreCheckpoint_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RestoreCheckpoint_result(RestoreCheckpoint_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public RestoreCheckpoint_result deepCopy() {
      return new RestoreCheckpoint_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public RestoreCheckpoint_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof RestoreCheckpoint_result)
        return this.equals((RestoreCheckpoint_result)that);
      return false;
    }

    public boolean equals(RestoreCheckpoint_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RestoreCheckpoint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RestoreCheckpoint_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RestoreCheckpoint_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RestoreCheckpoint_resultStandardScheme getScheme() {
        return new RestoreCheckpoint_resultStandardScheme();
      }
    }

    private static class RestoreCheckpoint_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RestoreCheckpoint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RestoreCheckpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RestoreCheckpoint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RestoreCheckpoint_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RestoreCheckpoint_resultTupleScheme getScheme() {
        return new RestoreCheckpoint_resultTupleScheme();
      }
    }

    private static class RestoreCheckpoint_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RestoreCheckpoint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RestoreCheckpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RestoreCheckpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
