/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.mmu;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MSimulationResult implements org.apache.thrift.TBase<MSimulationResult, MSimulationResult._Fields>, java.io.Serializable, Cloneable, Comparable<MSimulationResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MSimulationResult");

  private static final org.apache.thrift.protocol.TField POSTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("Posture", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CONSTRAINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("Constraints", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("Events", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SCENE_MANIPULATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("SceneManipulations", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DRAWING_CALLS_FIELD_DESC = new org.apache.thrift.protocol.TField("DrawingCalls", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField LOG_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("LogData", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MSimulationResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MSimulationResultTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MAvatarPostureValues Posture; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.constraints.MConstraint> Constraints; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<MSimulationEvent> Events; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.scene.MSceneManipulation> SceneManipulations; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.scene.MDrawingCall> DrawingCalls; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> LogData; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POSTURE((short)1, "Posture"),
    CONSTRAINTS((short)2, "Constraints"),
    EVENTS((short)3, "Events"),
    SCENE_MANIPULATIONS((short)4, "SceneManipulations"),
    DRAWING_CALLS((short)5, "DrawingCalls"),
    LOG_DATA((short)6, "LogData");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POSTURE
          return POSTURE;
        case 2: // CONSTRAINTS
          return CONSTRAINTS;
        case 3: // EVENTS
          return EVENTS;
        case 4: // SCENE_MANIPULATIONS
          return SCENE_MANIPULATIONS;
        case 5: // DRAWING_CALLS
          return DRAWING_CALLS;
        case 6: // LOG_DATA
          return LOG_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CONSTRAINTS,_Fields.EVENTS,_Fields.SCENE_MANIPULATIONS,_Fields.DRAWING_CALLS,_Fields.LOG_DATA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POSTURE, new org.apache.thrift.meta_data.FieldMetaData("Posture", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.avatar.MAvatarPostureValues.class)));
    tmpMap.put(_Fields.CONSTRAINTS, new org.apache.thrift.meta_data.FieldMetaData("Constraints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.constraints.MConstraint.class))));
    tmpMap.put(_Fields.EVENTS, new org.apache.thrift.meta_data.FieldMetaData("Events", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "MSimulationEvent"))));
    tmpMap.put(_Fields.SCENE_MANIPULATIONS, new org.apache.thrift.meta_data.FieldMetaData("SceneManipulations", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.scene.MSceneManipulation.class))));
    tmpMap.put(_Fields.DRAWING_CALLS, new org.apache.thrift.meta_data.FieldMetaData("DrawingCalls", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.scene.MDrawingCall.class))));
    tmpMap.put(_Fields.LOG_DATA, new org.apache.thrift.meta_data.FieldMetaData("LogData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MSimulationResult.class, metaDataMap);
  }

  public MSimulationResult() {
  }

  public MSimulationResult(
    de.mosim.mmi.avatar.MAvatarPostureValues Posture)
  {
    this();
    this.Posture = Posture;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MSimulationResult(MSimulationResult other) {
    if (other.isSetPosture()) {
      this.Posture = new de.mosim.mmi.avatar.MAvatarPostureValues(other.Posture);
    }
    if (other.isSetConstraints()) {
      java.util.List<de.mosim.mmi.constraints.MConstraint> __this__Constraints = new java.util.ArrayList<de.mosim.mmi.constraints.MConstraint>(other.Constraints.size());
      for (de.mosim.mmi.constraints.MConstraint other_element : other.Constraints) {
        __this__Constraints.add(new de.mosim.mmi.constraints.MConstraint(other_element));
      }
      this.Constraints = __this__Constraints;
    }
    if (other.isSetEvents()) {
      java.util.List<MSimulationEvent> __this__Events = new java.util.ArrayList<MSimulationEvent>(other.Events.size());
      for (MSimulationEvent other_element : other.Events) {
        __this__Events.add(new MSimulationEvent(other_element));
      }
      this.Events = __this__Events;
    }
    if (other.isSetSceneManipulations()) {
      java.util.List<de.mosim.mmi.scene.MSceneManipulation> __this__SceneManipulations = new java.util.ArrayList<de.mosim.mmi.scene.MSceneManipulation>(other.SceneManipulations.size());
      for (de.mosim.mmi.scene.MSceneManipulation other_element : other.SceneManipulations) {
        __this__SceneManipulations.add(new de.mosim.mmi.scene.MSceneManipulation(other_element));
      }
      this.SceneManipulations = __this__SceneManipulations;
    }
    if (other.isSetDrawingCalls()) {
      java.util.List<de.mosim.mmi.scene.MDrawingCall> __this__DrawingCalls = new java.util.ArrayList<de.mosim.mmi.scene.MDrawingCall>(other.DrawingCalls.size());
      for (de.mosim.mmi.scene.MDrawingCall other_element : other.DrawingCalls) {
        __this__DrawingCalls.add(new de.mosim.mmi.scene.MDrawingCall(other_element));
      }
      this.DrawingCalls = __this__DrawingCalls;
    }
    if (other.isSetLogData()) {
      java.util.List<java.lang.String> __this__LogData = new java.util.ArrayList<java.lang.String>(other.LogData);
      this.LogData = __this__LogData;
    }
  }

  public MSimulationResult deepCopy() {
    return new MSimulationResult(this);
  }

  @Override
  public void clear() {
    this.Posture = null;
    this.Constraints = null;
    this.Events = null;
    this.SceneManipulations = null;
    this.DrawingCalls = null;
    this.LogData = null;
  }

  @org.apache.thrift.annotation.Nullable
  public de.mosim.mmi.avatar.MAvatarPostureValues getPosture() {
    return this.Posture;
  }

  public MSimulationResult setPosture(@org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MAvatarPostureValues Posture) {
    this.Posture = Posture;
    return this;
  }

  public void unsetPosture() {
    this.Posture = null;
  }

  /** Returns true if field Posture is set (has been assigned a value) and false otherwise */
  public boolean isSetPosture() {
    return this.Posture != null;
  }

  public void setPostureIsSet(boolean value) {
    if (!value) {
      this.Posture = null;
    }
  }

  public int getConstraintsSize() {
    return (this.Constraints == null) ? 0 : this.Constraints.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<de.mosim.mmi.constraints.MConstraint> getConstraintsIterator() {
    return (this.Constraints == null) ? null : this.Constraints.iterator();
  }

  public void addToConstraints(de.mosim.mmi.constraints.MConstraint elem) {
    if (this.Constraints == null) {
      this.Constraints = new java.util.ArrayList<de.mosim.mmi.constraints.MConstraint>();
    }
    this.Constraints.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<de.mosim.mmi.constraints.MConstraint> getConstraints() {
    return this.Constraints;
  }

  public MSimulationResult setConstraints(@org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.constraints.MConstraint> Constraints) {
    this.Constraints = Constraints;
    return this;
  }

  public void unsetConstraints() {
    this.Constraints = null;
  }

  /** Returns true if field Constraints is set (has been assigned a value) and false otherwise */
  public boolean isSetConstraints() {
    return this.Constraints != null;
  }

  public void setConstraintsIsSet(boolean value) {
    if (!value) {
      this.Constraints = null;
    }
  }

  public int getEventsSize() {
    return (this.Events == null) ? 0 : this.Events.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MSimulationEvent> getEventsIterator() {
    return (this.Events == null) ? null : this.Events.iterator();
  }

  public void addToEvents(MSimulationEvent elem) {
    if (this.Events == null) {
      this.Events = new java.util.ArrayList<MSimulationEvent>();
    }
    this.Events.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MSimulationEvent> getEvents() {
    return this.Events;
  }

  public MSimulationResult setEvents(@org.apache.thrift.annotation.Nullable java.util.List<MSimulationEvent> Events) {
    this.Events = Events;
    return this;
  }

  public void unsetEvents() {
    this.Events = null;
  }

  /** Returns true if field Events is set (has been assigned a value) and false otherwise */
  public boolean isSetEvents() {
    return this.Events != null;
  }

  public void setEventsIsSet(boolean value) {
    if (!value) {
      this.Events = null;
    }
  }

  public int getSceneManipulationsSize() {
    return (this.SceneManipulations == null) ? 0 : this.SceneManipulations.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<de.mosim.mmi.scene.MSceneManipulation> getSceneManipulationsIterator() {
    return (this.SceneManipulations == null) ? null : this.SceneManipulations.iterator();
  }

  public void addToSceneManipulations(de.mosim.mmi.scene.MSceneManipulation elem) {
    if (this.SceneManipulations == null) {
      this.SceneManipulations = new java.util.ArrayList<de.mosim.mmi.scene.MSceneManipulation>();
    }
    this.SceneManipulations.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<de.mosim.mmi.scene.MSceneManipulation> getSceneManipulations() {
    return this.SceneManipulations;
  }

  public MSimulationResult setSceneManipulations(@org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.scene.MSceneManipulation> SceneManipulations) {
    this.SceneManipulations = SceneManipulations;
    return this;
  }

  public void unsetSceneManipulations() {
    this.SceneManipulations = null;
  }

  /** Returns true if field SceneManipulations is set (has been assigned a value) and false otherwise */
  public boolean isSetSceneManipulations() {
    return this.SceneManipulations != null;
  }

  public void setSceneManipulationsIsSet(boolean value) {
    if (!value) {
      this.SceneManipulations = null;
    }
  }

  public int getDrawingCallsSize() {
    return (this.DrawingCalls == null) ? 0 : this.DrawingCalls.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<de.mosim.mmi.scene.MDrawingCall> getDrawingCallsIterator() {
    return (this.DrawingCalls == null) ? null : this.DrawingCalls.iterator();
  }

  public void addToDrawingCalls(de.mosim.mmi.scene.MDrawingCall elem) {
    if (this.DrawingCalls == null) {
      this.DrawingCalls = new java.util.ArrayList<de.mosim.mmi.scene.MDrawingCall>();
    }
    this.DrawingCalls.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<de.mosim.mmi.scene.MDrawingCall> getDrawingCalls() {
    return this.DrawingCalls;
  }

  public MSimulationResult setDrawingCalls(@org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.scene.MDrawingCall> DrawingCalls) {
    this.DrawingCalls = DrawingCalls;
    return this;
  }

  public void unsetDrawingCalls() {
    this.DrawingCalls = null;
  }

  /** Returns true if field DrawingCalls is set (has been assigned a value) and false otherwise */
  public boolean isSetDrawingCalls() {
    return this.DrawingCalls != null;
  }

  public void setDrawingCallsIsSet(boolean value) {
    if (!value) {
      this.DrawingCalls = null;
    }
  }

  public int getLogDataSize() {
    return (this.LogData == null) ? 0 : this.LogData.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getLogDataIterator() {
    return (this.LogData == null) ? null : this.LogData.iterator();
  }

  public void addToLogData(java.lang.String elem) {
    if (this.LogData == null) {
      this.LogData = new java.util.ArrayList<java.lang.String>();
    }
    this.LogData.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getLogData() {
    return this.LogData;
  }

  public MSimulationResult setLogData(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> LogData) {
    this.LogData = LogData;
    return this;
  }

  public void unsetLogData() {
    this.LogData = null;
  }

  /** Returns true if field LogData is set (has been assigned a value) and false otherwise */
  public boolean isSetLogData() {
    return this.LogData != null;
  }

  public void setLogDataIsSet(boolean value) {
    if (!value) {
      this.LogData = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case POSTURE:
      if (value == null) {
        unsetPosture();
      } else {
        setPosture((de.mosim.mmi.avatar.MAvatarPostureValues)value);
      }
      break;

    case CONSTRAINTS:
      if (value == null) {
        unsetConstraints();
      } else {
        setConstraints((java.util.List<de.mosim.mmi.constraints.MConstraint>)value);
      }
      break;

    case EVENTS:
      if (value == null) {
        unsetEvents();
      } else {
        setEvents((java.util.List<MSimulationEvent>)value);
      }
      break;

    case SCENE_MANIPULATIONS:
      if (value == null) {
        unsetSceneManipulations();
      } else {
        setSceneManipulations((java.util.List<de.mosim.mmi.scene.MSceneManipulation>)value);
      }
      break;

    case DRAWING_CALLS:
      if (value == null) {
        unsetDrawingCalls();
      } else {
        setDrawingCalls((java.util.List<de.mosim.mmi.scene.MDrawingCall>)value);
      }
      break;

    case LOG_DATA:
      if (value == null) {
        unsetLogData();
      } else {
        setLogData((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case POSTURE:
      return getPosture();

    case CONSTRAINTS:
      return getConstraints();

    case EVENTS:
      return getEvents();

    case SCENE_MANIPULATIONS:
      return getSceneManipulations();

    case DRAWING_CALLS:
      return getDrawingCalls();

    case LOG_DATA:
      return getLogData();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case POSTURE:
      return isSetPosture();
    case CONSTRAINTS:
      return isSetConstraints();
    case EVENTS:
      return isSetEvents();
    case SCENE_MANIPULATIONS:
      return isSetSceneManipulations();
    case DRAWING_CALLS:
      return isSetDrawingCalls();
    case LOG_DATA:
      return isSetLogData();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MSimulationResult)
      return this.equals((MSimulationResult)that);
    return false;
  }

  public boolean equals(MSimulationResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Posture = true && this.isSetPosture();
    boolean that_present_Posture = true && that.isSetPosture();
    if (this_present_Posture || that_present_Posture) {
      if (!(this_present_Posture && that_present_Posture))
        return false;
      if (!this.Posture.equals(that.Posture))
        return false;
    }

    boolean this_present_Constraints = true && this.isSetConstraints();
    boolean that_present_Constraints = true && that.isSetConstraints();
    if (this_present_Constraints || that_present_Constraints) {
      if (!(this_present_Constraints && that_present_Constraints))
        return false;
      if (!this.Constraints.equals(that.Constraints))
        return false;
    }

    boolean this_present_Events = true && this.isSetEvents();
    boolean that_present_Events = true && that.isSetEvents();
    if (this_present_Events || that_present_Events) {
      if (!(this_present_Events && that_present_Events))
        return false;
      if (!this.Events.equals(that.Events))
        return false;
    }

    boolean this_present_SceneManipulations = true && this.isSetSceneManipulations();
    boolean that_present_SceneManipulations = true && that.isSetSceneManipulations();
    if (this_present_SceneManipulations || that_present_SceneManipulations) {
      if (!(this_present_SceneManipulations && that_present_SceneManipulations))
        return false;
      if (!this.SceneManipulations.equals(that.SceneManipulations))
        return false;
    }

    boolean this_present_DrawingCalls = true && this.isSetDrawingCalls();
    boolean that_present_DrawingCalls = true && that.isSetDrawingCalls();
    if (this_present_DrawingCalls || that_present_DrawingCalls) {
      if (!(this_present_DrawingCalls && that_present_DrawingCalls))
        return false;
      if (!this.DrawingCalls.equals(that.DrawingCalls))
        return false;
    }

    boolean this_present_LogData = true && this.isSetLogData();
    boolean that_present_LogData = true && that.isSetLogData();
    if (this_present_LogData || that_present_LogData) {
      if (!(this_present_LogData && that_present_LogData))
        return false;
      if (!this.LogData.equals(that.LogData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPosture()) ? 131071 : 524287);
    if (isSetPosture())
      hashCode = hashCode * 8191 + Posture.hashCode();

    hashCode = hashCode * 8191 + ((isSetConstraints()) ? 131071 : 524287);
    if (isSetConstraints())
      hashCode = hashCode * 8191 + Constraints.hashCode();

    hashCode = hashCode * 8191 + ((isSetEvents()) ? 131071 : 524287);
    if (isSetEvents())
      hashCode = hashCode * 8191 + Events.hashCode();

    hashCode = hashCode * 8191 + ((isSetSceneManipulations()) ? 131071 : 524287);
    if (isSetSceneManipulations())
      hashCode = hashCode * 8191 + SceneManipulations.hashCode();

    hashCode = hashCode * 8191 + ((isSetDrawingCalls()) ? 131071 : 524287);
    if (isSetDrawingCalls())
      hashCode = hashCode * 8191 + DrawingCalls.hashCode();

    hashCode = hashCode * 8191 + ((isSetLogData()) ? 131071 : 524287);
    if (isSetLogData())
      hashCode = hashCode * 8191 + LogData.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MSimulationResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPosture()).compareTo(other.isSetPosture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Posture, other.Posture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConstraints()).compareTo(other.isSetConstraints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstraints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Constraints, other.Constraints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEvents()).compareTo(other.isSetEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Events, other.Events);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSceneManipulations()).compareTo(other.isSetSceneManipulations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSceneManipulations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SceneManipulations, other.SceneManipulations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDrawingCalls()).compareTo(other.isSetDrawingCalls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrawingCalls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DrawingCalls, other.DrawingCalls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLogData()).compareTo(other.isSetLogData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LogData, other.LogData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MSimulationResult(");
    boolean first = true;

    sb.append("Posture:");
    if (this.Posture == null) {
      sb.append("null");
    } else {
      sb.append(this.Posture);
    }
    first = false;
    if (isSetConstraints()) {
      if (!first) sb.append(", ");
      sb.append("Constraints:");
      if (this.Constraints == null) {
        sb.append("null");
      } else {
        sb.append(this.Constraints);
      }
      first = false;
    }
    if (isSetEvents()) {
      if (!first) sb.append(", ");
      sb.append("Events:");
      if (this.Events == null) {
        sb.append("null");
      } else {
        sb.append(this.Events);
      }
      first = false;
    }
    if (isSetSceneManipulations()) {
      if (!first) sb.append(", ");
      sb.append("SceneManipulations:");
      if (this.SceneManipulations == null) {
        sb.append("null");
      } else {
        sb.append(this.SceneManipulations);
      }
      first = false;
    }
    if (isSetDrawingCalls()) {
      if (!first) sb.append(", ");
      sb.append("DrawingCalls:");
      if (this.DrawingCalls == null) {
        sb.append("null");
      } else {
        sb.append(this.DrawingCalls);
      }
      first = false;
    }
    if (isSetLogData()) {
      if (!first) sb.append(", ");
      sb.append("LogData:");
      if (this.LogData == null) {
        sb.append("null");
      } else {
        sb.append(this.LogData);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (Posture == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Posture' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (Posture != null) {
      Posture.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MSimulationResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MSimulationResultStandardScheme getScheme() {
      return new MSimulationResultStandardScheme();
    }
  }

  private static class MSimulationResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MSimulationResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MSimulationResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POSTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Posture = new de.mosim.mmi.avatar.MAvatarPostureValues();
              struct.Posture.read(iprot);
              struct.setPostureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONSTRAINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.Constraints = new java.util.ArrayList<de.mosim.mmi.constraints.MConstraint>(_list24.size);
                @org.apache.thrift.annotation.Nullable de.mosim.mmi.constraints.MConstraint _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new de.mosim.mmi.constraints.MConstraint();
                  _elem25.read(iprot);
                  struct.Constraints.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setConstraintsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.Events = new java.util.ArrayList<MSimulationEvent>(_list27.size);
                @org.apache.thrift.annotation.Nullable MSimulationEvent _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = new MSimulationEvent();
                  _elem28.read(iprot);
                  struct.Events.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCENE_MANIPULATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.SceneManipulations = new java.util.ArrayList<de.mosim.mmi.scene.MSceneManipulation>(_list30.size);
                @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MSceneManipulation _elem31;
                for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                {
                  _elem31 = new de.mosim.mmi.scene.MSceneManipulation();
                  _elem31.read(iprot);
                  struct.SceneManipulations.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setSceneManipulationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DRAWING_CALLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.DrawingCalls = new java.util.ArrayList<de.mosim.mmi.scene.MDrawingCall>(_list33.size);
                @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MDrawingCall _elem34;
                for (int _i35 = 0; _i35 < _list33.size; ++_i35)
                {
                  _elem34 = new de.mosim.mmi.scene.MDrawingCall();
                  _elem34.read(iprot);
                  struct.DrawingCalls.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setDrawingCallsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOG_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.LogData = new java.util.ArrayList<java.lang.String>(_list36.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = iprot.readString();
                  struct.LogData.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setLogDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MSimulationResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Posture != null) {
        oprot.writeFieldBegin(POSTURE_FIELD_DESC);
        struct.Posture.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.Constraints != null) {
        if (struct.isSetConstraints()) {
          oprot.writeFieldBegin(CONSTRAINTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Constraints.size()));
            for (de.mosim.mmi.constraints.MConstraint _iter39 : struct.Constraints)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.Events != null) {
        if (struct.isSetEvents()) {
          oprot.writeFieldBegin(EVENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Events.size()));
            for (MSimulationEvent _iter40 : struct.Events)
            {
              _iter40.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.SceneManipulations != null) {
        if (struct.isSetSceneManipulations()) {
          oprot.writeFieldBegin(SCENE_MANIPULATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.SceneManipulations.size()));
            for (de.mosim.mmi.scene.MSceneManipulation _iter41 : struct.SceneManipulations)
            {
              _iter41.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.DrawingCalls != null) {
        if (struct.isSetDrawingCalls()) {
          oprot.writeFieldBegin(DRAWING_CALLS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.DrawingCalls.size()));
            for (de.mosim.mmi.scene.MDrawingCall _iter42 : struct.DrawingCalls)
            {
              _iter42.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.LogData != null) {
        if (struct.isSetLogData()) {
          oprot.writeFieldBegin(LOG_DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.LogData.size()));
            for (java.lang.String _iter43 : struct.LogData)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MSimulationResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MSimulationResultTupleScheme getScheme() {
      return new MSimulationResultTupleScheme();
    }
  }

  private static class MSimulationResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MSimulationResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MSimulationResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.Posture.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetConstraints()) {
        optionals.set(0);
      }
      if (struct.isSetEvents()) {
        optionals.set(1);
      }
      if (struct.isSetSceneManipulations()) {
        optionals.set(2);
      }
      if (struct.isSetDrawingCalls()) {
        optionals.set(3);
      }
      if (struct.isSetLogData()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetConstraints()) {
        {
          oprot.writeI32(struct.Constraints.size());
          for (de.mosim.mmi.constraints.MConstraint _iter44 : struct.Constraints)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetEvents()) {
        {
          oprot.writeI32(struct.Events.size());
          for (MSimulationEvent _iter45 : struct.Events)
          {
            _iter45.write(oprot);
          }
        }
      }
      if (struct.isSetSceneManipulations()) {
        {
          oprot.writeI32(struct.SceneManipulations.size());
          for (de.mosim.mmi.scene.MSceneManipulation _iter46 : struct.SceneManipulations)
          {
            _iter46.write(oprot);
          }
        }
      }
      if (struct.isSetDrawingCalls()) {
        {
          oprot.writeI32(struct.DrawingCalls.size());
          for (de.mosim.mmi.scene.MDrawingCall _iter47 : struct.DrawingCalls)
          {
            _iter47.write(oprot);
          }
        }
      }
      if (struct.isSetLogData()) {
        {
          oprot.writeI32(struct.LogData.size());
          for (java.lang.String _iter48 : struct.LogData)
          {
            oprot.writeString(_iter48);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MSimulationResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.Posture = new de.mosim.mmi.avatar.MAvatarPostureValues();
      struct.Posture.read(iprot);
      struct.setPostureIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Constraints = new java.util.ArrayList<de.mosim.mmi.constraints.MConstraint>(_list49.size);
          @org.apache.thrift.annotation.Nullable de.mosim.mmi.constraints.MConstraint _elem50;
          for (int _i51 = 0; _i51 < _list49.size; ++_i51)
          {
            _elem50 = new de.mosim.mmi.constraints.MConstraint();
            _elem50.read(iprot);
            struct.Constraints.add(_elem50);
          }
        }
        struct.setConstraintsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Events = new java.util.ArrayList<MSimulationEvent>(_list52.size);
          @org.apache.thrift.annotation.Nullable MSimulationEvent _elem53;
          for (int _i54 = 0; _i54 < _list52.size; ++_i54)
          {
            _elem53 = new MSimulationEvent();
            _elem53.read(iprot);
            struct.Events.add(_elem53);
          }
        }
        struct.setEventsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.SceneManipulations = new java.util.ArrayList<de.mosim.mmi.scene.MSceneManipulation>(_list55.size);
          @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MSceneManipulation _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = new de.mosim.mmi.scene.MSceneManipulation();
            _elem56.read(iprot);
            struct.SceneManipulations.add(_elem56);
          }
        }
        struct.setSceneManipulationsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.DrawingCalls = new java.util.ArrayList<de.mosim.mmi.scene.MDrawingCall>(_list58.size);
          @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MDrawingCall _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            _elem59 = new de.mosim.mmi.scene.MDrawingCall();
            _elem59.read(iprot);
            struct.DrawingCalls.add(_elem59);
          }
        }
        struct.setDrawingCallsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.LogData = new java.util.ArrayList<java.lang.String>(_list61.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = iprot.readString();
            struct.LogData.add(_elem62);
          }
        }
        struct.setLogDataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

