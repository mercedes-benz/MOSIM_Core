/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.mmu;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MotionModelUnit {

  public interface Iface {

    public de.mosim.mmi.core.MBoolResponse Initialize(de.mosim.mmi.avatar.MAvatarDescription avatarDescription, java.util.Map<java.lang.String,java.lang.String> properties) throws org.apache.thrift.TException;

    public de.mosim.mmi.core.MBoolResponse AssignInstruction(MInstruction motionInstruction, MSimulationState simulationState) throws org.apache.thrift.TException;

    public MSimulationResult DoStep(double time, MSimulationState simulationState) throws org.apache.thrift.TException;

    public java.util.List<de.mosim.mmi.constraints.MConstraint> GetBoundaryConstraints(MInstruction instruction) throws org.apache.thrift.TException;

    public de.mosim.mmi.core.MBoolResponse CheckPrerequisites(MInstruction instruction) throws org.apache.thrift.TException;

    public de.mosim.mmi.core.MBoolResponse Abort(java.lang.String instructionId) throws org.apache.thrift.TException;

    public de.mosim.mmi.core.MBoolResponse Dispose(java.util.Map<java.lang.String,java.lang.String> parameters) throws org.apache.thrift.TException;

    public java.nio.ByteBuffer CreateCheckpoint() throws org.apache.thrift.TException;

    public de.mosim.mmi.core.MBoolResponse RestoreCheckpoint(java.nio.ByteBuffer data) throws org.apache.thrift.TException;

    public java.util.Map<java.lang.String,java.lang.String> ExecuteFunction(java.lang.String name, java.util.Map<java.lang.String,java.lang.String> parameters) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void Initialize(de.mosim.mmi.avatar.MAvatarDescription avatarDescription, java.util.Map<java.lang.String,java.lang.String> properties, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

    public void AssignInstruction(MInstruction motionInstruction, MSimulationState simulationState, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

    public void DoStep(double time, MSimulationState simulationState, org.apache.thrift.async.AsyncMethodCallback<MSimulationResult> resultHandler) throws org.apache.thrift.TException;

    public void GetBoundaryConstraints(MInstruction instruction, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.constraints.MConstraint>> resultHandler) throws org.apache.thrift.TException;

    public void CheckPrerequisites(MInstruction instruction, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

    public void Abort(java.lang.String instructionId, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

    public void Dispose(java.util.Map<java.lang.String,java.lang.String> parameters, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

    public void CreateCheckpoint(org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException;

    public void RestoreCheckpoint(java.nio.ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

    public void ExecuteFunction(java.lang.String name, java.util.Map<java.lang.String,java.lang.String> parameters, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public de.mosim.mmi.core.MBoolResponse Initialize(de.mosim.mmi.avatar.MAvatarDescription avatarDescription, java.util.Map<java.lang.String,java.lang.String> properties) throws org.apache.thrift.TException
    {
      send_Initialize(avatarDescription, properties);
      return recv_Initialize();
    }

    public void send_Initialize(de.mosim.mmi.avatar.MAvatarDescription avatarDescription, java.util.Map<java.lang.String,java.lang.String> properties) throws org.apache.thrift.TException
    {
      Initialize_args args = new Initialize_args();
      args.setAvatarDescription(avatarDescription);
      args.setProperties(properties);
      sendBase("Initialize", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_Initialize() throws org.apache.thrift.TException
    {
      Initialize_result result = new Initialize_result();
      receiveBase(result, "Initialize");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Initialize failed: unknown result");
    }

    public de.mosim.mmi.core.MBoolResponse AssignInstruction(MInstruction motionInstruction, MSimulationState simulationState) throws org.apache.thrift.TException
    {
      send_AssignInstruction(motionInstruction, simulationState);
      return recv_AssignInstruction();
    }

    public void send_AssignInstruction(MInstruction motionInstruction, MSimulationState simulationState) throws org.apache.thrift.TException
    {
      AssignInstruction_args args = new AssignInstruction_args();
      args.setMotionInstruction(motionInstruction);
      args.setSimulationState(simulationState);
      sendBase("AssignInstruction", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_AssignInstruction() throws org.apache.thrift.TException
    {
      AssignInstruction_result result = new AssignInstruction_result();
      receiveBase(result, "AssignInstruction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AssignInstruction failed: unknown result");
    }

    public MSimulationResult DoStep(double time, MSimulationState simulationState) throws org.apache.thrift.TException
    {
      send_DoStep(time, simulationState);
      return recv_DoStep();
    }

    public void send_DoStep(double time, MSimulationState simulationState) throws org.apache.thrift.TException
    {
      DoStep_args args = new DoStep_args();
      args.setTime(time);
      args.setSimulationState(simulationState);
      sendBase("DoStep", args);
    }

    public MSimulationResult recv_DoStep() throws org.apache.thrift.TException
    {
      DoStep_result result = new DoStep_result();
      receiveBase(result, "DoStep");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DoStep failed: unknown result");
    }

    public java.util.List<de.mosim.mmi.constraints.MConstraint> GetBoundaryConstraints(MInstruction instruction) throws org.apache.thrift.TException
    {
      send_GetBoundaryConstraints(instruction);
      return recv_GetBoundaryConstraints();
    }

    public void send_GetBoundaryConstraints(MInstruction instruction) throws org.apache.thrift.TException
    {
      GetBoundaryConstraints_args args = new GetBoundaryConstraints_args();
      args.setInstruction(instruction);
      sendBase("GetBoundaryConstraints", args);
    }

    public java.util.List<de.mosim.mmi.constraints.MConstraint> recv_GetBoundaryConstraints() throws org.apache.thrift.TException
    {
      GetBoundaryConstraints_result result = new GetBoundaryConstraints_result();
      receiveBase(result, "GetBoundaryConstraints");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetBoundaryConstraints failed: unknown result");
    }

    public de.mosim.mmi.core.MBoolResponse CheckPrerequisites(MInstruction instruction) throws org.apache.thrift.TException
    {
      send_CheckPrerequisites(instruction);
      return recv_CheckPrerequisites();
    }

    public void send_CheckPrerequisites(MInstruction instruction) throws org.apache.thrift.TException
    {
      CheckPrerequisites_args args = new CheckPrerequisites_args();
      args.setInstruction(instruction);
      sendBase("CheckPrerequisites", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_CheckPrerequisites() throws org.apache.thrift.TException
    {
      CheckPrerequisites_result result = new CheckPrerequisites_result();
      receiveBase(result, "CheckPrerequisites");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CheckPrerequisites failed: unknown result");
    }

    public de.mosim.mmi.core.MBoolResponse Abort(java.lang.String instructionId) throws org.apache.thrift.TException
    {
      send_Abort(instructionId);
      return recv_Abort();
    }

    public void send_Abort(java.lang.String instructionId) throws org.apache.thrift.TException
    {
      Abort_args args = new Abort_args();
      args.setInstructionId(instructionId);
      sendBase("Abort", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_Abort() throws org.apache.thrift.TException
    {
      Abort_result result = new Abort_result();
      receiveBase(result, "Abort");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Abort failed: unknown result");
    }

    public de.mosim.mmi.core.MBoolResponse Dispose(java.util.Map<java.lang.String,java.lang.String> parameters) throws org.apache.thrift.TException
    {
      send_Dispose(parameters);
      return recv_Dispose();
    }

    public void send_Dispose(java.util.Map<java.lang.String,java.lang.String> parameters) throws org.apache.thrift.TException
    {
      Dispose_args args = new Dispose_args();
      args.setParameters(parameters);
      sendBase("Dispose", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_Dispose() throws org.apache.thrift.TException
    {
      Dispose_result result = new Dispose_result();
      receiveBase(result, "Dispose");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Dispose failed: unknown result");
    }

    public java.nio.ByteBuffer CreateCheckpoint() throws org.apache.thrift.TException
    {
      send_CreateCheckpoint();
      return recv_CreateCheckpoint();
    }

    public void send_CreateCheckpoint() throws org.apache.thrift.TException
    {
      CreateCheckpoint_args args = new CreateCheckpoint_args();
      sendBase("CreateCheckpoint", args);
    }

    public java.nio.ByteBuffer recv_CreateCheckpoint() throws org.apache.thrift.TException
    {
      CreateCheckpoint_result result = new CreateCheckpoint_result();
      receiveBase(result, "CreateCheckpoint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CreateCheckpoint failed: unknown result");
    }

    public de.mosim.mmi.core.MBoolResponse RestoreCheckpoint(java.nio.ByteBuffer data) throws org.apache.thrift.TException
    {
      send_RestoreCheckpoint(data);
      return recv_RestoreCheckpoint();
    }

    public void send_RestoreCheckpoint(java.nio.ByteBuffer data) throws org.apache.thrift.TException
    {
      RestoreCheckpoint_args args = new RestoreCheckpoint_args();
      args.setData(data);
      sendBase("RestoreCheckpoint", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_RestoreCheckpoint() throws org.apache.thrift.TException
    {
      RestoreCheckpoint_result result = new RestoreCheckpoint_result();
      receiveBase(result, "RestoreCheckpoint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RestoreCheckpoint failed: unknown result");
    }

    public java.util.Map<java.lang.String,java.lang.String> ExecuteFunction(java.lang.String name, java.util.Map<java.lang.String,java.lang.String> parameters) throws org.apache.thrift.TException
    {
      send_ExecuteFunction(name, parameters);
      return recv_ExecuteFunction();
    }

    public void send_ExecuteFunction(java.lang.String name, java.util.Map<java.lang.String,java.lang.String> parameters) throws org.apache.thrift.TException
    {
      ExecuteFunction_args args = new ExecuteFunction_args();
      args.setName(name);
      args.setParameters(parameters);
      sendBase("ExecuteFunction", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_ExecuteFunction() throws org.apache.thrift.TException
    {
      ExecuteFunction_result result = new ExecuteFunction_result();
      receiveBase(result, "ExecuteFunction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ExecuteFunction failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void Initialize(de.mosim.mmi.avatar.MAvatarDescription avatarDescription, java.util.Map<java.lang.String,java.lang.String> properties, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Initialize_call method_call = new Initialize_call(avatarDescription, properties, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Initialize_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private de.mosim.mmi.avatar.MAvatarDescription avatarDescription;
      private java.util.Map<java.lang.String,java.lang.String> properties;
      public Initialize_call(de.mosim.mmi.avatar.MAvatarDescription avatarDescription, java.util.Map<java.lang.String,java.lang.String> properties, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.avatarDescription = avatarDescription;
        this.properties = properties;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Initialize", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Initialize_args args = new Initialize_args();
        args.setAvatarDescription(avatarDescription);
        args.setProperties(properties);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Initialize();
      }
    }

    public void AssignInstruction(MInstruction motionInstruction, MSimulationState simulationState, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AssignInstruction_call method_call = new AssignInstruction_call(motionInstruction, simulationState, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AssignInstruction_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private MInstruction motionInstruction;
      private MSimulationState simulationState;
      public AssignInstruction_call(MInstruction motionInstruction, MSimulationState simulationState, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.motionInstruction = motionInstruction;
        this.simulationState = simulationState;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AssignInstruction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AssignInstruction_args args = new AssignInstruction_args();
        args.setMotionInstruction(motionInstruction);
        args.setSimulationState(simulationState);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AssignInstruction();
      }
    }

    public void DoStep(double time, MSimulationState simulationState, org.apache.thrift.async.AsyncMethodCallback<MSimulationResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DoStep_call method_call = new DoStep_call(time, simulationState, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DoStep_call extends org.apache.thrift.async.TAsyncMethodCall<MSimulationResult> {
      private double time;
      private MSimulationState simulationState;
      public DoStep_call(double time, MSimulationState simulationState, org.apache.thrift.async.AsyncMethodCallback<MSimulationResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.time = time;
        this.simulationState = simulationState;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DoStep", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DoStep_args args = new DoStep_args();
        args.setTime(time);
        args.setSimulationState(simulationState);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MSimulationResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DoStep();
      }
    }

    public void GetBoundaryConstraints(MInstruction instruction, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.constraints.MConstraint>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetBoundaryConstraints_call method_call = new GetBoundaryConstraints_call(instruction, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetBoundaryConstraints_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<de.mosim.mmi.constraints.MConstraint>> {
      private MInstruction instruction;
      public GetBoundaryConstraints_call(MInstruction instruction, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.constraints.MConstraint>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instruction = instruction;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetBoundaryConstraints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetBoundaryConstraints_args args = new GetBoundaryConstraints_args();
        args.setInstruction(instruction);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<de.mosim.mmi.constraints.MConstraint> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetBoundaryConstraints();
      }
    }

    public void CheckPrerequisites(MInstruction instruction, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CheckPrerequisites_call method_call = new CheckPrerequisites_call(instruction, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CheckPrerequisites_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private MInstruction instruction;
      public CheckPrerequisites_call(MInstruction instruction, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instruction = instruction;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CheckPrerequisites", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CheckPrerequisites_args args = new CheckPrerequisites_args();
        args.setInstruction(instruction);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CheckPrerequisites();
      }
    }

    public void Abort(java.lang.String instructionId, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Abort_call method_call = new Abort_call(instructionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Abort_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private java.lang.String instructionId;
      public Abort_call(java.lang.String instructionId, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instructionId = instructionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Abort", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Abort_args args = new Abort_args();
        args.setInstructionId(instructionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Abort();
      }
    }

    public void Dispose(java.util.Map<java.lang.String,java.lang.String> parameters, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Dispose_call method_call = new Dispose_call(parameters, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Dispose_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private java.util.Map<java.lang.String,java.lang.String> parameters;
      public Dispose_call(java.util.Map<java.lang.String,java.lang.String> parameters, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.parameters = parameters;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Dispose", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Dispose_args args = new Dispose_args();
        args.setParameters(parameters);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Dispose();
      }
    }

    public void CreateCheckpoint(org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateCheckpoint_call method_call = new CreateCheckpoint_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateCheckpoint_call extends org.apache.thrift.async.TAsyncMethodCall<java.nio.ByteBuffer> {
      public CreateCheckpoint_call(org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateCheckpoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateCheckpoint_args args = new CreateCheckpoint_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.nio.ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CreateCheckpoint();
      }
    }

    public void RestoreCheckpoint(java.nio.ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RestoreCheckpoint_call method_call = new RestoreCheckpoint_call(data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RestoreCheckpoint_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private java.nio.ByteBuffer data;
      public RestoreCheckpoint_call(java.nio.ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RestoreCheckpoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RestoreCheckpoint_args args = new RestoreCheckpoint_args();
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RestoreCheckpoint();
      }
    }

    public void ExecuteFunction(java.lang.String name, java.util.Map<java.lang.String,java.lang.String> parameters, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ExecuteFunction_call method_call = new ExecuteFunction_call(name, parameters, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ExecuteFunction_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      private java.lang.String name;
      private java.util.Map<java.lang.String,java.lang.String> parameters;
      public ExecuteFunction_call(java.lang.String name, java.util.Map<java.lang.String,java.lang.String> parameters, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.parameters = parameters;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ExecuteFunction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ExecuteFunction_args args = new ExecuteFunction_args();
        args.setName(name);
        args.setParameters(parameters);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ExecuteFunction();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("Initialize", new Initialize());
      processMap.put("AssignInstruction", new AssignInstruction());
      processMap.put("DoStep", new DoStep());
      processMap.put("GetBoundaryConstraints", new GetBoundaryConstraints());
      processMap.put("CheckPrerequisites", new CheckPrerequisites());
      processMap.put("Abort", new Abort());
      processMap.put("Dispose", new Dispose());
      processMap.put("CreateCheckpoint", new CreateCheckpoint());
      processMap.put("RestoreCheckpoint", new RestoreCheckpoint());
      processMap.put("ExecuteFunction", new ExecuteFunction());
      return processMap;
    }

    public static class Initialize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Initialize_args> {
      public Initialize() {
        super("Initialize");
      }

      public Initialize_args getEmptyArgsInstance() {
        return new Initialize_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public Initialize_result getResult(I iface, Initialize_args args) throws org.apache.thrift.TException {
        Initialize_result result = new Initialize_result();
        result.success = iface.Initialize(args.avatarDescription, args.properties);
        return result;
      }
    }

    public static class AssignInstruction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AssignInstruction_args> {
      public AssignInstruction() {
        super("AssignInstruction");
      }

      public AssignInstruction_args getEmptyArgsInstance() {
        return new AssignInstruction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public AssignInstruction_result getResult(I iface, AssignInstruction_args args) throws org.apache.thrift.TException {
        AssignInstruction_result result = new AssignInstruction_result();
        result.success = iface.AssignInstruction(args.motionInstruction, args.simulationState);
        return result;
      }
    }

    public static class DoStep<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DoStep_args> {
      public DoStep() {
        super("DoStep");
      }

      public DoStep_args getEmptyArgsInstance() {
        return new DoStep_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public DoStep_result getResult(I iface, DoStep_args args) throws org.apache.thrift.TException {
        DoStep_result result = new DoStep_result();
        result.success = iface.DoStep(args.time, args.simulationState);
        return result;
      }
    }

    public static class GetBoundaryConstraints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetBoundaryConstraints_args> {
      public GetBoundaryConstraints() {
        super("GetBoundaryConstraints");
      }

      public GetBoundaryConstraints_args getEmptyArgsInstance() {
        return new GetBoundaryConstraints_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public GetBoundaryConstraints_result getResult(I iface, GetBoundaryConstraints_args args) throws org.apache.thrift.TException {
        GetBoundaryConstraints_result result = new GetBoundaryConstraints_result();
        result.success = iface.GetBoundaryConstraints(args.instruction);
        return result;
      }
    }

    public static class CheckPrerequisites<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CheckPrerequisites_args> {
      public CheckPrerequisites() {
        super("CheckPrerequisites");
      }

      public CheckPrerequisites_args getEmptyArgsInstance() {
        return new CheckPrerequisites_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public CheckPrerequisites_result getResult(I iface, CheckPrerequisites_args args) throws org.apache.thrift.TException {
        CheckPrerequisites_result result = new CheckPrerequisites_result();
        result.success = iface.CheckPrerequisites(args.instruction);
        return result;
      }
    }

    public static class Abort<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Abort_args> {
      public Abort() {
        super("Abort");
      }

      public Abort_args getEmptyArgsInstance() {
        return new Abort_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public Abort_result getResult(I iface, Abort_args args) throws org.apache.thrift.TException {
        Abort_result result = new Abort_result();
        result.success = iface.Abort(args.instructionId);
        return result;
      }
    }

    public static class Dispose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Dispose_args> {
      public Dispose() {
        super("Dispose");
      }

      public Dispose_args getEmptyArgsInstance() {
        return new Dispose_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public Dispose_result getResult(I iface, Dispose_args args) throws org.apache.thrift.TException {
        Dispose_result result = new Dispose_result();
        result.success = iface.Dispose(args.parameters);
        return result;
      }
    }

    public static class CreateCheckpoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateCheckpoint_args> {
      public CreateCheckpoint() {
        super("CreateCheckpoint");
      }

      public CreateCheckpoint_args getEmptyArgsInstance() {
        return new CreateCheckpoint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public CreateCheckpoint_result getResult(I iface, CreateCheckpoint_args args) throws org.apache.thrift.TException {
        CreateCheckpoint_result result = new CreateCheckpoint_result();
        result.success = iface.CreateCheckpoint();
        return result;
      }
    }

    public static class RestoreCheckpoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RestoreCheckpoint_args> {
      public RestoreCheckpoint() {
        super("RestoreCheckpoint");
      }

      public RestoreCheckpoint_args getEmptyArgsInstance() {
        return new RestoreCheckpoint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public RestoreCheckpoint_result getResult(I iface, RestoreCheckpoint_args args) throws org.apache.thrift.TException {
        RestoreCheckpoint_result result = new RestoreCheckpoint_result();
        result.success = iface.RestoreCheckpoint(args.data);
        return result;
      }
    }

    public static class ExecuteFunction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ExecuteFunction_args> {
      public ExecuteFunction() {
        super("ExecuteFunction");
      }

      public ExecuteFunction_args getEmptyArgsInstance() {
        return new ExecuteFunction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ExecuteFunction_result getResult(I iface, ExecuteFunction_args args) throws org.apache.thrift.TException {
        ExecuteFunction_result result = new ExecuteFunction_result();
        result.success = iface.ExecuteFunction(args.name, args.parameters);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("Initialize", new Initialize());
      processMap.put("AssignInstruction", new AssignInstruction());
      processMap.put("DoStep", new DoStep());
      processMap.put("GetBoundaryConstraints", new GetBoundaryConstraints());
      processMap.put("CheckPrerequisites", new CheckPrerequisites());
      processMap.put("Abort", new Abort());
      processMap.put("Dispose", new Dispose());
      processMap.put("CreateCheckpoint", new CreateCheckpoint());
      processMap.put("RestoreCheckpoint", new RestoreCheckpoint());
      processMap.put("ExecuteFunction", new ExecuteFunction());
      return processMap;
    }

    public static class Initialize<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Initialize_args, de.mosim.mmi.core.MBoolResponse> {
      public Initialize() {
        super("Initialize");
      }

      public Initialize_args getEmptyArgsInstance() {
        return new Initialize_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            Initialize_result result = new Initialize_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Initialize_result result = new Initialize_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Initialize_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.Initialize(args.avatarDescription, args.properties,resultHandler);
      }
    }

    public static class AssignInstruction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AssignInstruction_args, de.mosim.mmi.core.MBoolResponse> {
      public AssignInstruction() {
        super("AssignInstruction");
      }

      public AssignInstruction_args getEmptyArgsInstance() {
        return new AssignInstruction_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            AssignInstruction_result result = new AssignInstruction_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            AssignInstruction_result result = new AssignInstruction_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AssignInstruction_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.AssignInstruction(args.motionInstruction, args.simulationState,resultHandler);
      }
    }

    public static class DoStep<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DoStep_args, MSimulationResult> {
      public DoStep() {
        super("DoStep");
      }

      public DoStep_args getEmptyArgsInstance() {
        return new DoStep_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MSimulationResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MSimulationResult>() { 
          public void onComplete(MSimulationResult o) {
            DoStep_result result = new DoStep_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            DoStep_result result = new DoStep_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DoStep_args args, org.apache.thrift.async.AsyncMethodCallback<MSimulationResult> resultHandler) throws org.apache.thrift.TException {
        iface.DoStep(args.time, args.simulationState,resultHandler);
      }
    }

    public static class GetBoundaryConstraints<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetBoundaryConstraints_args, java.util.List<de.mosim.mmi.constraints.MConstraint>> {
      public GetBoundaryConstraints() {
        super("GetBoundaryConstraints");
      }

      public GetBoundaryConstraints_args getEmptyArgsInstance() {
        return new GetBoundaryConstraints_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.constraints.MConstraint>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.constraints.MConstraint>>() { 
          public void onComplete(java.util.List<de.mosim.mmi.constraints.MConstraint> o) {
            GetBoundaryConstraints_result result = new GetBoundaryConstraints_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetBoundaryConstraints_result result = new GetBoundaryConstraints_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetBoundaryConstraints_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<de.mosim.mmi.constraints.MConstraint>> resultHandler) throws org.apache.thrift.TException {
        iface.GetBoundaryConstraints(args.instruction,resultHandler);
      }
    }

    public static class CheckPrerequisites<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CheckPrerequisites_args, de.mosim.mmi.core.MBoolResponse> {
      public CheckPrerequisites() {
        super("CheckPrerequisites");
      }

      public CheckPrerequisites_args getEmptyArgsInstance() {
        return new CheckPrerequisites_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            CheckPrerequisites_result result = new CheckPrerequisites_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CheckPrerequisites_result result = new CheckPrerequisites_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CheckPrerequisites_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.CheckPrerequisites(args.instruction,resultHandler);
      }
    }

    public static class Abort<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Abort_args, de.mosim.mmi.core.MBoolResponse> {
      public Abort() {
        super("Abort");
      }

      public Abort_args getEmptyArgsInstance() {
        return new Abort_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            Abort_result result = new Abort_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Abort_result result = new Abort_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Abort_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.Abort(args.instructionId,resultHandler);
      }
    }

    public static class Dispose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Dispose_args, de.mosim.mmi.core.MBoolResponse> {
      public Dispose() {
        super("Dispose");
      }

      public Dispose_args getEmptyArgsInstance() {
        return new Dispose_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            Dispose_result result = new Dispose_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Dispose_result result = new Dispose_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Dispose_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.Dispose(args.parameters,resultHandler);
      }
    }

    public static class CreateCheckpoint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateCheckpoint_args, java.nio.ByteBuffer> {
      public CreateCheckpoint() {
        super("CreateCheckpoint");
      }

      public CreateCheckpoint_args getEmptyArgsInstance() {
        return new CreateCheckpoint_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer>() { 
          public void onComplete(java.nio.ByteBuffer o) {
            CreateCheckpoint_result result = new CreateCheckpoint_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CreateCheckpoint_result result = new CreateCheckpoint_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateCheckpoint_args args, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
        iface.CreateCheckpoint(resultHandler);
      }
    }

    public static class RestoreCheckpoint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RestoreCheckpoint_args, de.mosim.mmi.core.MBoolResponse> {
      public RestoreCheckpoint() {
        super("RestoreCheckpoint");
      }

      public RestoreCheckpoint_args getEmptyArgsInstance() {
        return new RestoreCheckpoint_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            RestoreCheckpoint_result result = new RestoreCheckpoint_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            RestoreCheckpoint_result result = new RestoreCheckpoint_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, RestoreCheckpoint_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.RestoreCheckpoint(args.data,resultHandler);
      }
    }

    public static class ExecuteFunction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ExecuteFunction_args, java.util.Map<java.lang.String,java.lang.String>> {
      public ExecuteFunction() {
        super("ExecuteFunction");
      }

      public ExecuteFunction_args getEmptyArgsInstance() {
        return new ExecuteFunction_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() { 
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            ExecuteFunction_result result = new ExecuteFunction_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ExecuteFunction_result result = new ExecuteFunction_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ExecuteFunction_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.ExecuteFunction(args.name, args.parameters,resultHandler);
      }
    }

  }

  public static class Initialize_args implements org.apache.thrift.TBase<Initialize_args, Initialize_args._Fields>, java.io.Serializable, Cloneable, Comparable<Initialize_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Initialize_args");

    private static final org.apache.thrift.protocol.TField AVATAR_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarDescription", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Initialize_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Initialize_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MAvatarDescription avatarDescription; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AVATAR_DESCRIPTION((short)1, "avatarDescription"),
      PROPERTIES((short)2, "properties");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AVATAR_DESCRIPTION
            return AVATAR_DESCRIPTION;
          case 2: // PROPERTIES
            return PROPERTIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AVATAR_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("avatarDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.avatar.MAvatarDescription.class)));
      tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Initialize_args.class, metaDataMap);
    }

    public Initialize_args() {
    }

    public Initialize_args(
      de.mosim.mmi.avatar.MAvatarDescription avatarDescription,
      java.util.Map<java.lang.String,java.lang.String> properties)
    {
      this();
      this.avatarDescription = avatarDescription;
      this.properties = properties;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Initialize_args(Initialize_args other) {
      if (other.isSetAvatarDescription()) {
        this.avatarDescription = new de.mosim.mmi.avatar.MAvatarDescription(other.avatarDescription);
      }
      if (other.isSetProperties()) {
        java.util.Map<java.lang.String,java.lang.String> __this__properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.properties);
        this.properties = __this__properties;
      }
    }

    public Initialize_args deepCopy() {
      return new Initialize_args(this);
    }

    @Override
    public void clear() {
      this.avatarDescription = null;
      this.properties = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.avatar.MAvatarDescription getAvatarDescription() {
      return this.avatarDescription;
    }

    public Initialize_args setAvatarDescription(@org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MAvatarDescription avatarDescription) {
      this.avatarDescription = avatarDescription;
      return this;
    }

    public void unsetAvatarDescription() {
      this.avatarDescription = null;
    }

    /** Returns true if field avatarDescription is set (has been assigned a value) and false otherwise */
    public boolean isSetAvatarDescription() {
      return this.avatarDescription != null;
    }

    public void setAvatarDescriptionIsSet(boolean value) {
      if (!value) {
        this.avatarDescription = null;
      }
    }

    public int getPropertiesSize() {
      return (this.properties == null) ? 0 : this.properties.size();
    }

    public void putToProperties(java.lang.String key, java.lang.String val) {
      if (this.properties == null) {
        this.properties = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.properties.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getProperties() {
      return this.properties;
    }

    public Initialize_args setProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties) {
      this.properties = properties;
      return this;
    }

    public void unsetProperties() {
      this.properties = null;
    }

    /** Returns true if field properties is set (has been assigned a value) and false otherwise */
    public boolean isSetProperties() {
      return this.properties != null;
    }

    public void setPropertiesIsSet(boolean value) {
      if (!value) {
        this.properties = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AVATAR_DESCRIPTION:
        if (value == null) {
          unsetAvatarDescription();
        } else {
          setAvatarDescription((de.mosim.mmi.avatar.MAvatarDescription)value);
        }
        break;

      case PROPERTIES:
        if (value == null) {
          unsetProperties();
        } else {
          setProperties((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AVATAR_DESCRIPTION:
        return getAvatarDescription();

      case PROPERTIES:
        return getProperties();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AVATAR_DESCRIPTION:
        return isSetAvatarDescription();
      case PROPERTIES:
        return isSetProperties();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Initialize_args)
        return this.equals((Initialize_args)that);
      return false;
    }

    public boolean equals(Initialize_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_avatarDescription = true && this.isSetAvatarDescription();
      boolean that_present_avatarDescription = true && that.isSetAvatarDescription();
      if (this_present_avatarDescription || that_present_avatarDescription) {
        if (!(this_present_avatarDescription && that_present_avatarDescription))
          return false;
        if (!this.avatarDescription.equals(that.avatarDescription))
          return false;
      }

      boolean this_present_properties = true && this.isSetProperties();
      boolean that_present_properties = true && that.isSetProperties();
      if (this_present_properties || that_present_properties) {
        if (!(this_present_properties && that_present_properties))
          return false;
        if (!this.properties.equals(that.properties))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAvatarDescription()) ? 131071 : 524287);
      if (isSetAvatarDescription())
        hashCode = hashCode * 8191 + avatarDescription.hashCode();

      hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
      if (isSetProperties())
        hashCode = hashCode * 8191 + properties.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Initialize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAvatarDescription()).compareTo(other.isSetAvatarDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvatarDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarDescription, other.avatarDescription);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperties()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Initialize_args(");
      boolean first = true;

      sb.append("avatarDescription:");
      if (this.avatarDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.avatarDescription);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (avatarDescription != null) {
        avatarDescription.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Initialize_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Initialize_argsStandardScheme getScheme() {
        return new Initialize_argsStandardScheme();
      }
    }

    private static class Initialize_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Initialize_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Initialize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AVATAR_DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.avatarDescription = new de.mosim.mmi.avatar.MAvatarDescription();
                struct.avatarDescription.read(iprot);
                struct.setAvatarDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTIES
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map158 = iprot.readMapBegin();
                  struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map158.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key159;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val160;
                  for (int _i161 = 0; _i161 < _map158.size; ++_i161)
                  {
                    _key159 = iprot.readString();
                    _val160 = iprot.readString();
                    struct.properties.put(_key159, _val160);
                  }
                  iprot.readMapEnd();
                }
                struct.setPropertiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Initialize_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.avatarDescription != null) {
          oprot.writeFieldBegin(AVATAR_DESCRIPTION_FIELD_DESC);
          struct.avatarDescription.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.properties != null) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter162 : struct.properties.entrySet())
            {
              oprot.writeString(_iter162.getKey());
              oprot.writeString(_iter162.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Initialize_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Initialize_argsTupleScheme getScheme() {
        return new Initialize_argsTupleScheme();
      }
    }

    private static class Initialize_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Initialize_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Initialize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAvatarDescription()) {
          optionals.set(0);
        }
        if (struct.isSetProperties()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAvatarDescription()) {
          struct.avatarDescription.write(oprot);
        }
        if (struct.isSetProperties()) {
          {
            oprot.writeI32(struct.properties.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter163 : struct.properties.entrySet())
            {
              oprot.writeString(_iter163.getKey());
              oprot.writeString(_iter163.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Initialize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.avatarDescription = new de.mosim.mmi.avatar.MAvatarDescription();
          struct.avatarDescription.read(iprot);
          struct.setAvatarDescriptionIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map164 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map164.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key165;
            @org.apache.thrift.annotation.Nullable java.lang.String _val166;
            for (int _i167 = 0; _i167 < _map164.size; ++_i167)
            {
              _key165 = iprot.readString();
              _val166 = iprot.readString();
              struct.properties.put(_key165, _val166);
            }
          }
          struct.setPropertiesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Initialize_result implements org.apache.thrift.TBase<Initialize_result, Initialize_result._Fields>, java.io.Serializable, Cloneable, Comparable<Initialize_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Initialize_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Initialize_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Initialize_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Initialize_result.class, metaDataMap);
    }

    public Initialize_result() {
    }

    public Initialize_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Initialize_result(Initialize_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public Initialize_result deepCopy() {
      return new Initialize_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public Initialize_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Initialize_result)
        return this.equals((Initialize_result)that);
      return false;
    }

    public boolean equals(Initialize_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Initialize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Initialize_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Initialize_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Initialize_resultStandardScheme getScheme() {
        return new Initialize_resultStandardScheme();
      }
    }

    private static class Initialize_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Initialize_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Initialize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Initialize_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Initialize_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Initialize_resultTupleScheme getScheme() {
        return new Initialize_resultTupleScheme();
      }
    }

    private static class Initialize_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Initialize_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Initialize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Initialize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class AssignInstruction_args implements org.apache.thrift.TBase<AssignInstruction_args, AssignInstruction_args._Fields>, java.io.Serializable, Cloneable, Comparable<AssignInstruction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AssignInstruction_args");

    private static final org.apache.thrift.protocol.TField MOTION_INSTRUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("motionInstruction", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SIMULATION_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationState", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AssignInstruction_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AssignInstruction_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MInstruction motionInstruction; // required
    public @org.apache.thrift.annotation.Nullable MSimulationState simulationState; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MOTION_INSTRUCTION((short)1, "motionInstruction"),
      SIMULATION_STATE((short)2, "simulationState");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MOTION_INSTRUCTION
            return MOTION_INSTRUCTION;
          case 2: // SIMULATION_STATE
            return SIMULATION_STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MOTION_INSTRUCTION, new org.apache.thrift.meta_data.FieldMetaData("motionInstruction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "MInstruction")));
      tmpMap.put(_Fields.SIMULATION_STATE, new org.apache.thrift.meta_data.FieldMetaData("simulationState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "MSimulationState")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AssignInstruction_args.class, metaDataMap);
    }

    public AssignInstruction_args() {
    }

    public AssignInstruction_args(
      MInstruction motionInstruction,
      MSimulationState simulationState)
    {
      this();
      this.motionInstruction = motionInstruction;
      this.simulationState = simulationState;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AssignInstruction_args(AssignInstruction_args other) {
      if (other.isSetMotionInstruction()) {
        this.motionInstruction = new MInstruction(other.motionInstruction);
      }
      if (other.isSetSimulationState()) {
        this.simulationState = new MSimulationState(other.simulationState);
      }
    }

    public AssignInstruction_args deepCopy() {
      return new AssignInstruction_args(this);
    }

    @Override
    public void clear() {
      this.motionInstruction = null;
      this.simulationState = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MInstruction getMotionInstruction() {
      return this.motionInstruction;
    }

    public AssignInstruction_args setMotionInstruction(@org.apache.thrift.annotation.Nullable MInstruction motionInstruction) {
      this.motionInstruction = motionInstruction;
      return this;
    }

    public void unsetMotionInstruction() {
      this.motionInstruction = null;
    }

    /** Returns true if field motionInstruction is set (has been assigned a value) and false otherwise */
    public boolean isSetMotionInstruction() {
      return this.motionInstruction != null;
    }

    public void setMotionInstructionIsSet(boolean value) {
      if (!value) {
        this.motionInstruction = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public MSimulationState getSimulationState() {
      return this.simulationState;
    }

    public AssignInstruction_args setSimulationState(@org.apache.thrift.annotation.Nullable MSimulationState simulationState) {
      this.simulationState = simulationState;
      return this;
    }

    public void unsetSimulationState() {
      this.simulationState = null;
    }

    /** Returns true if field simulationState is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationState() {
      return this.simulationState != null;
    }

    public void setSimulationStateIsSet(boolean value) {
      if (!value) {
        this.simulationState = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MOTION_INSTRUCTION:
        if (value == null) {
          unsetMotionInstruction();
        } else {
          setMotionInstruction((MInstruction)value);
        }
        break;

      case SIMULATION_STATE:
        if (value == null) {
          unsetSimulationState();
        } else {
          setSimulationState((MSimulationState)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MOTION_INSTRUCTION:
        return getMotionInstruction();

      case SIMULATION_STATE:
        return getSimulationState();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MOTION_INSTRUCTION:
        return isSetMotionInstruction();
      case SIMULATION_STATE:
        return isSetSimulationState();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof AssignInstruction_args)
        return this.equals((AssignInstruction_args)that);
      return false;
    }

    public boolean equals(AssignInstruction_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_motionInstruction = true && this.isSetMotionInstruction();
      boolean that_present_motionInstruction = true && that.isSetMotionInstruction();
      if (this_present_motionInstruction || that_present_motionInstruction) {
        if (!(this_present_motionInstruction && that_present_motionInstruction))
          return false;
        if (!this.motionInstruction.equals(that.motionInstruction))
          return false;
      }

      boolean this_present_simulationState = true && this.isSetSimulationState();
      boolean that_present_simulationState = true && that.isSetSimulationState();
      if (this_present_simulationState || that_present_simulationState) {
        if (!(this_present_simulationState && that_present_simulationState))
          return false;
        if (!this.simulationState.equals(that.simulationState))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMotionInstruction()) ? 131071 : 524287);
      if (isSetMotionInstruction())
        hashCode = hashCode * 8191 + motionInstruction.hashCode();

      hashCode = hashCode * 8191 + ((isSetSimulationState()) ? 131071 : 524287);
      if (isSetSimulationState())
        hashCode = hashCode * 8191 + simulationState.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AssignInstruction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMotionInstruction()).compareTo(other.isSetMotionInstruction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMotionInstruction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.motionInstruction, other.motionInstruction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSimulationState()).compareTo(other.isSetSimulationState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationState, other.simulationState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AssignInstruction_args(");
      boolean first = true;

      sb.append("motionInstruction:");
      if (this.motionInstruction == null) {
        sb.append("null");
      } else {
        sb.append(this.motionInstruction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("simulationState:");
      if (this.simulationState == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationState);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AssignInstruction_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AssignInstruction_argsStandardScheme getScheme() {
        return new AssignInstruction_argsStandardScheme();
      }
    }

    private static class AssignInstruction_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<AssignInstruction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AssignInstruction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MOTION_INSTRUCTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.motionInstruction = new MInstruction();
                struct.motionInstruction.read(iprot);
                struct.setMotionInstructionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SIMULATION_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationState = new MSimulationState();
                struct.simulationState.read(iprot);
                struct.setSimulationStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AssignInstruction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.motionInstruction != null) {
          oprot.writeFieldBegin(MOTION_INSTRUCTION_FIELD_DESC);
          struct.motionInstruction.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.simulationState != null) {
          oprot.writeFieldBegin(SIMULATION_STATE_FIELD_DESC);
          struct.simulationState.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AssignInstruction_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AssignInstruction_argsTupleScheme getScheme() {
        return new AssignInstruction_argsTupleScheme();
      }
    }

    private static class AssignInstruction_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<AssignInstruction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AssignInstruction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMotionInstruction()) {
          optionals.set(0);
        }
        if (struct.isSetSimulationState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMotionInstruction()) {
          struct.motionInstruction.write(oprot);
        }
        if (struct.isSetSimulationState()) {
          struct.simulationState.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AssignInstruction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.motionInstruction = new MInstruction();
          struct.motionInstruction.read(iprot);
          struct.setMotionInstructionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.simulationState = new MSimulationState();
          struct.simulationState.read(iprot);
          struct.setSimulationStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class AssignInstruction_result implements org.apache.thrift.TBase<AssignInstruction_result, AssignInstruction_result._Fields>, java.io.Serializable, Cloneable, Comparable<AssignInstruction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AssignInstruction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AssignInstruction_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AssignInstruction_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AssignInstruction_result.class, metaDataMap);
    }

    public AssignInstruction_result() {
    }

    public AssignInstruction_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AssignInstruction_result(AssignInstruction_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public AssignInstruction_result deepCopy() {
      return new AssignInstruction_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public AssignInstruction_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof AssignInstruction_result)
        return this.equals((AssignInstruction_result)that);
      return false;
    }

    public boolean equals(AssignInstruction_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AssignInstruction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AssignInstruction_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AssignInstruction_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AssignInstruction_resultStandardScheme getScheme() {
        return new AssignInstruction_resultStandardScheme();
      }
    }

    private static class AssignInstruction_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<AssignInstruction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AssignInstruction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AssignInstruction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AssignInstruction_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AssignInstruction_resultTupleScheme getScheme() {
        return new AssignInstruction_resultTupleScheme();
      }
    }

    private static class AssignInstruction_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<AssignInstruction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AssignInstruction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AssignInstruction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DoStep_args implements org.apache.thrift.TBase<DoStep_args, DoStep_args._Fields>, java.io.Serializable, Cloneable, Comparable<DoStep_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DoStep_args");

    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField SIMULATION_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationState", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DoStep_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DoStep_argsTupleSchemeFactory();

    public double time; // required
    public @org.apache.thrift.annotation.Nullable MSimulationState simulationState; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TIME((short)1, "time"),
      SIMULATION_STATE((short)2, "simulationState");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TIME
            return TIME;
          case 2: // SIMULATION_STATE
            return SIMULATION_STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.SIMULATION_STATE, new org.apache.thrift.meta_data.FieldMetaData("simulationState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "MSimulationState")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DoStep_args.class, metaDataMap);
    }

    public DoStep_args() {
    }

    public DoStep_args(
      double time,
      MSimulationState simulationState)
    {
      this();
      this.time = time;
      setTimeIsSet(true);
      this.simulationState = simulationState;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DoStep_args(DoStep_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.time = other.time;
      if (other.isSetSimulationState()) {
        this.simulationState = new MSimulationState(other.simulationState);
      }
    }

    public DoStep_args deepCopy() {
      return new DoStep_args(this);
    }

    @Override
    public void clear() {
      setTimeIsSet(false);
      this.time = 0.0;
      this.simulationState = null;
    }

    public double getTime() {
      return this.time;
    }

    public DoStep_args setTime(double time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public MSimulationState getSimulationState() {
      return this.simulationState;
    }

    public DoStep_args setSimulationState(@org.apache.thrift.annotation.Nullable MSimulationState simulationState) {
      this.simulationState = simulationState;
      return this;
    }

    public void unsetSimulationState() {
      this.simulationState = null;
    }

    /** Returns true if field simulationState is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationState() {
      return this.simulationState != null;
    }

    public void setSimulationStateIsSet(boolean value) {
      if (!value) {
        this.simulationState = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((java.lang.Double)value);
        }
        break;

      case SIMULATION_STATE:
        if (value == null) {
          unsetSimulationState();
        } else {
          setSimulationState((MSimulationState)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TIME:
        return getTime();

      case SIMULATION_STATE:
        return getSimulationState();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TIME:
        return isSetTime();
      case SIMULATION_STATE:
        return isSetSimulationState();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DoStep_args)
        return this.equals((DoStep_args)that);
      return false;
    }

    public boolean equals(DoStep_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      boolean this_present_simulationState = true && this.isSetSimulationState();
      boolean that_present_simulationState = true && that.isSetSimulationState();
      if (this_present_simulationState || that_present_simulationState) {
        if (!(this_present_simulationState && that_present_simulationState))
          return false;
        if (!this.simulationState.equals(that.simulationState))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(time);

      hashCode = hashCode * 8191 + ((isSetSimulationState()) ? 131071 : 524287);
      if (isSetSimulationState())
        hashCode = hashCode * 8191 + simulationState.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DoStep_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSimulationState()).compareTo(other.isSetSimulationState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationState, other.simulationState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DoStep_args(");
      boolean first = true;

      sb.append("time:");
      sb.append(this.time);
      first = false;
      if (!first) sb.append(", ");
      sb.append("simulationState:");
      if (this.simulationState == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationState);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DoStep_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DoStep_argsStandardScheme getScheme() {
        return new DoStep_argsStandardScheme();
      }
    }

    private static class DoStep_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<DoStep_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DoStep_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.time = iprot.readDouble();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SIMULATION_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationState = new MSimulationState();
                struct.simulationState.read(iprot);
                struct.setSimulationStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DoStep_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeDouble(struct.time);
        oprot.writeFieldEnd();
        if (struct.simulationState != null) {
          oprot.writeFieldBegin(SIMULATION_STATE_FIELD_DESC);
          struct.simulationState.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DoStep_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DoStep_argsTupleScheme getScheme() {
        return new DoStep_argsTupleScheme();
      }
    }

    private static class DoStep_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<DoStep_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DoStep_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTime()) {
          optionals.set(0);
        }
        if (struct.isSetSimulationState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTime()) {
          oprot.writeDouble(struct.time);
        }
        if (struct.isSetSimulationState()) {
          struct.simulationState.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DoStep_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.time = iprot.readDouble();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.simulationState = new MSimulationState();
          struct.simulationState.read(iprot);
          struct.setSimulationStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DoStep_result implements org.apache.thrift.TBase<DoStep_result, DoStep_result._Fields>, java.io.Serializable, Cloneable, Comparable<DoStep_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DoStep_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DoStep_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DoStep_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MSimulationResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "MSimulationResult")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DoStep_result.class, metaDataMap);
    }

    public DoStep_result() {
    }

    public DoStep_result(
      MSimulationResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DoStep_result(DoStep_result other) {
      if (other.isSetSuccess()) {
        this.success = new MSimulationResult(other.success);
      }
    }

    public DoStep_result deepCopy() {
      return new DoStep_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MSimulationResult getSuccess() {
      return this.success;
    }

    public DoStep_result setSuccess(@org.apache.thrift.annotation.Nullable MSimulationResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MSimulationResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DoStep_result)
        return this.equals((DoStep_result)that);
      return false;
    }

    public boolean equals(DoStep_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DoStep_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DoStep_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DoStep_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DoStep_resultStandardScheme getScheme() {
        return new DoStep_resultStandardScheme();
      }
    }

    private static class DoStep_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<DoStep_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DoStep_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MSimulationResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DoStep_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DoStep_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DoStep_resultTupleScheme getScheme() {
        return new DoStep_resultTupleScheme();
      }
    }

    private static class DoStep_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<DoStep_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DoStep_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DoStep_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MSimulationResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetBoundaryConstraints_args implements org.apache.thrift.TBase<GetBoundaryConstraints_args, GetBoundaryConstraints_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetBoundaryConstraints_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetBoundaryConstraints_args");

    private static final org.apache.thrift.protocol.TField INSTRUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("instruction", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetBoundaryConstraints_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetBoundaryConstraints_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MInstruction instruction; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTRUCTION((short)1, "instruction");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTRUCTION
            return INSTRUCTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTRUCTION, new org.apache.thrift.meta_data.FieldMetaData("instruction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "MInstruction")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetBoundaryConstraints_args.class, metaDataMap);
    }

    public GetBoundaryConstraints_args() {
    }

    public GetBoundaryConstraints_args(
      MInstruction instruction)
    {
      this();
      this.instruction = instruction;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetBoundaryConstraints_args(GetBoundaryConstraints_args other) {
      if (other.isSetInstruction()) {
        this.instruction = new MInstruction(other.instruction);
      }
    }

    public GetBoundaryConstraints_args deepCopy() {
      return new GetBoundaryConstraints_args(this);
    }

    @Override
    public void clear() {
      this.instruction = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MInstruction getInstruction() {
      return this.instruction;
    }

    public GetBoundaryConstraints_args setInstruction(@org.apache.thrift.annotation.Nullable MInstruction instruction) {
      this.instruction = instruction;
      return this;
    }

    public void unsetInstruction() {
      this.instruction = null;
    }

    /** Returns true if field instruction is set (has been assigned a value) and false otherwise */
    public boolean isSetInstruction() {
      return this.instruction != null;
    }

    public void setInstructionIsSet(boolean value) {
      if (!value) {
        this.instruction = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTRUCTION:
        if (value == null) {
          unsetInstruction();
        } else {
          setInstruction((MInstruction)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTRUCTION:
        return getInstruction();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTRUCTION:
        return isSetInstruction();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetBoundaryConstraints_args)
        return this.equals((GetBoundaryConstraints_args)that);
      return false;
    }

    public boolean equals(GetBoundaryConstraints_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instruction = true && this.isSetInstruction();
      boolean that_present_instruction = true && that.isSetInstruction();
      if (this_present_instruction || that_present_instruction) {
        if (!(this_present_instruction && that_present_instruction))
          return false;
        if (!this.instruction.equals(that.instruction))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstruction()) ? 131071 : 524287);
      if (isSetInstruction())
        hashCode = hashCode * 8191 + instruction.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetBoundaryConstraints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstruction()).compareTo(other.isSetInstruction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstruction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instruction, other.instruction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetBoundaryConstraints_args(");
      boolean first = true;

      sb.append("instruction:");
      if (this.instruction == null) {
        sb.append("null");
      } else {
        sb.append(this.instruction);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetBoundaryConstraints_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetBoundaryConstraints_argsStandardScheme getScheme() {
        return new GetBoundaryConstraints_argsStandardScheme();
      }
    }

    private static class GetBoundaryConstraints_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetBoundaryConstraints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetBoundaryConstraints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTRUCTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.instruction = new MInstruction();
                struct.instruction.read(iprot);
                struct.setInstructionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetBoundaryConstraints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instruction != null) {
          oprot.writeFieldBegin(INSTRUCTION_FIELD_DESC);
          struct.instruction.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetBoundaryConstraints_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetBoundaryConstraints_argsTupleScheme getScheme() {
        return new GetBoundaryConstraints_argsTupleScheme();
      }
    }

    private static class GetBoundaryConstraints_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetBoundaryConstraints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetBoundaryConstraints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstruction()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstruction()) {
          struct.instruction.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetBoundaryConstraints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.instruction = new MInstruction();
          struct.instruction.read(iprot);
          struct.setInstructionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetBoundaryConstraints_result implements org.apache.thrift.TBase<GetBoundaryConstraints_result, GetBoundaryConstraints_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetBoundaryConstraints_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetBoundaryConstraints_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetBoundaryConstraints_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetBoundaryConstraints_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.constraints.MConstraint> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.constraints.MConstraint.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetBoundaryConstraints_result.class, metaDataMap);
    }

    public GetBoundaryConstraints_result() {
    }

    public GetBoundaryConstraints_result(
      java.util.List<de.mosim.mmi.constraints.MConstraint> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetBoundaryConstraints_result(GetBoundaryConstraints_result other) {
      if (other.isSetSuccess()) {
        java.util.List<de.mosim.mmi.constraints.MConstraint> __this__success = new java.util.ArrayList<de.mosim.mmi.constraints.MConstraint>(other.success.size());
        for (de.mosim.mmi.constraints.MConstraint other_element : other.success) {
          __this__success.add(new de.mosim.mmi.constraints.MConstraint(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetBoundaryConstraints_result deepCopy() {
      return new GetBoundaryConstraints_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<de.mosim.mmi.constraints.MConstraint> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(de.mosim.mmi.constraints.MConstraint elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<de.mosim.mmi.constraints.MConstraint>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<de.mosim.mmi.constraints.MConstraint> getSuccess() {
      return this.success;
    }

    public GetBoundaryConstraints_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.constraints.MConstraint> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<de.mosim.mmi.constraints.MConstraint>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetBoundaryConstraints_result)
        return this.equals((GetBoundaryConstraints_result)that);
      return false;
    }

    public boolean equals(GetBoundaryConstraints_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetBoundaryConstraints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetBoundaryConstraints_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetBoundaryConstraints_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetBoundaryConstraints_resultStandardScheme getScheme() {
        return new GetBoundaryConstraints_resultStandardScheme();
      }
    }

    private static class GetBoundaryConstraints_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetBoundaryConstraints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetBoundaryConstraints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<de.mosim.mmi.constraints.MConstraint>(_list168.size);
                  @org.apache.thrift.annotation.Nullable de.mosim.mmi.constraints.MConstraint _elem169;
                  for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                  {
                    _elem169 = new de.mosim.mmi.constraints.MConstraint();
                    _elem169.read(iprot);
                    struct.success.add(_elem169);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetBoundaryConstraints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (de.mosim.mmi.constraints.MConstraint _iter171 : struct.success)
            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetBoundaryConstraints_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetBoundaryConstraints_resultTupleScheme getScheme() {
        return new GetBoundaryConstraints_resultTupleScheme();
      }
    }

    private static class GetBoundaryConstraints_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetBoundaryConstraints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetBoundaryConstraints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (de.mosim.mmi.constraints.MConstraint _iter172 : struct.success)
            {
              _iter172.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetBoundaryConstraints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<de.mosim.mmi.constraints.MConstraint>(_list173.size);
            @org.apache.thrift.annotation.Nullable de.mosim.mmi.constraints.MConstraint _elem174;
            for (int _i175 = 0; _i175 < _list173.size; ++_i175)
            {
              _elem174 = new de.mosim.mmi.constraints.MConstraint();
              _elem174.read(iprot);
              struct.success.add(_elem174);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CheckPrerequisites_args implements org.apache.thrift.TBase<CheckPrerequisites_args, CheckPrerequisites_args._Fields>, java.io.Serializable, Cloneable, Comparable<CheckPrerequisites_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CheckPrerequisites_args");

    private static final org.apache.thrift.protocol.TField INSTRUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("instruction", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CheckPrerequisites_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CheckPrerequisites_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MInstruction instruction; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTRUCTION((short)1, "instruction");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTRUCTION
            return INSTRUCTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTRUCTION, new org.apache.thrift.meta_data.FieldMetaData("instruction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "MInstruction")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CheckPrerequisites_args.class, metaDataMap);
    }

    public CheckPrerequisites_args() {
    }

    public CheckPrerequisites_args(
      MInstruction instruction)
    {
      this();
      this.instruction = instruction;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CheckPrerequisites_args(CheckPrerequisites_args other) {
      if (other.isSetInstruction()) {
        this.instruction = new MInstruction(other.instruction);
      }
    }

    public CheckPrerequisites_args deepCopy() {
      return new CheckPrerequisites_args(this);
    }

    @Override
    public void clear() {
      this.instruction = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MInstruction getInstruction() {
      return this.instruction;
    }

    public CheckPrerequisites_args setInstruction(@org.apache.thrift.annotation.Nullable MInstruction instruction) {
      this.instruction = instruction;
      return this;
    }

    public void unsetInstruction() {
      this.instruction = null;
    }

    /** Returns true if field instruction is set (has been assigned a value) and false otherwise */
    public boolean isSetInstruction() {
      return this.instruction != null;
    }

    public void setInstructionIsSet(boolean value) {
      if (!value) {
        this.instruction = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTRUCTION:
        if (value == null) {
          unsetInstruction();
        } else {
          setInstruction((MInstruction)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTRUCTION:
        return getInstruction();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTRUCTION:
        return isSetInstruction();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CheckPrerequisites_args)
        return this.equals((CheckPrerequisites_args)that);
      return false;
    }

    public boolean equals(CheckPrerequisites_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instruction = true && this.isSetInstruction();
      boolean that_present_instruction = true && that.isSetInstruction();
      if (this_present_instruction || that_present_instruction) {
        if (!(this_present_instruction && that_present_instruction))
          return false;
        if (!this.instruction.equals(that.instruction))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstruction()) ? 131071 : 524287);
      if (isSetInstruction())
        hashCode = hashCode * 8191 + instruction.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CheckPrerequisites_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstruction()).compareTo(other.isSetInstruction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstruction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instruction, other.instruction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CheckPrerequisites_args(");
      boolean first = true;

      sb.append("instruction:");
      if (this.instruction == null) {
        sb.append("null");
      } else {
        sb.append(this.instruction);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CheckPrerequisites_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CheckPrerequisites_argsStandardScheme getScheme() {
        return new CheckPrerequisites_argsStandardScheme();
      }
    }

    private static class CheckPrerequisites_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CheckPrerequisites_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CheckPrerequisites_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTRUCTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.instruction = new MInstruction();
                struct.instruction.read(iprot);
                struct.setInstructionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CheckPrerequisites_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instruction != null) {
          oprot.writeFieldBegin(INSTRUCTION_FIELD_DESC);
          struct.instruction.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CheckPrerequisites_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CheckPrerequisites_argsTupleScheme getScheme() {
        return new CheckPrerequisites_argsTupleScheme();
      }
    }

    private static class CheckPrerequisites_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CheckPrerequisites_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CheckPrerequisites_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstruction()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstruction()) {
          struct.instruction.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CheckPrerequisites_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.instruction = new MInstruction();
          struct.instruction.read(iprot);
          struct.setInstructionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CheckPrerequisites_result implements org.apache.thrift.TBase<CheckPrerequisites_result, CheckPrerequisites_result._Fields>, java.io.Serializable, Cloneable, Comparable<CheckPrerequisites_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CheckPrerequisites_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CheckPrerequisites_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CheckPrerequisites_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CheckPrerequisites_result.class, metaDataMap);
    }

    public CheckPrerequisites_result() {
    }

    public CheckPrerequisites_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CheckPrerequisites_result(CheckPrerequisites_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public CheckPrerequisites_result deepCopy() {
      return new CheckPrerequisites_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public CheckPrerequisites_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CheckPrerequisites_result)
        return this.equals((CheckPrerequisites_result)that);
      return false;
    }

    public boolean equals(CheckPrerequisites_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CheckPrerequisites_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CheckPrerequisites_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CheckPrerequisites_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CheckPrerequisites_resultStandardScheme getScheme() {
        return new CheckPrerequisites_resultStandardScheme();
      }
    }

    private static class CheckPrerequisites_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CheckPrerequisites_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CheckPrerequisites_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CheckPrerequisites_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CheckPrerequisites_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CheckPrerequisites_resultTupleScheme getScheme() {
        return new CheckPrerequisites_resultTupleScheme();
      }
    }

    private static class CheckPrerequisites_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CheckPrerequisites_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CheckPrerequisites_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CheckPrerequisites_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Abort_args implements org.apache.thrift.TBase<Abort_args, Abort_args._Fields>, java.io.Serializable, Cloneable, Comparable<Abort_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Abort_args");

    private static final org.apache.thrift.protocol.TField INSTRUCTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instructionId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Abort_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Abort_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String instructionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTRUCTION_ID((short)1, "instructionId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTRUCTION_ID
            return INSTRUCTION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTRUCTION_ID, new org.apache.thrift.meta_data.FieldMetaData("instructionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Abort_args.class, metaDataMap);
    }

    public Abort_args() {
    }

    public Abort_args(
      java.lang.String instructionId)
    {
      this();
      this.instructionId = instructionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Abort_args(Abort_args other) {
      if (other.isSetInstructionId()) {
        this.instructionId = other.instructionId;
      }
    }

    public Abort_args deepCopy() {
      return new Abort_args(this);
    }

    @Override
    public void clear() {
      this.instructionId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstructionId() {
      return this.instructionId;
    }

    public Abort_args setInstructionId(@org.apache.thrift.annotation.Nullable java.lang.String instructionId) {
      this.instructionId = instructionId;
      return this;
    }

    public void unsetInstructionId() {
      this.instructionId = null;
    }

    /** Returns true if field instructionId is set (has been assigned a value) and false otherwise */
    public boolean isSetInstructionId() {
      return this.instructionId != null;
    }

    public void setInstructionIdIsSet(boolean value) {
      if (!value) {
        this.instructionId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INSTRUCTION_ID:
        if (value == null) {
          unsetInstructionId();
        } else {
          setInstructionId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTRUCTION_ID:
        return getInstructionId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INSTRUCTION_ID:
        return isSetInstructionId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Abort_args)
        return this.equals((Abort_args)that);
      return false;
    }

    public boolean equals(Abort_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_instructionId = true && this.isSetInstructionId();
      boolean that_present_instructionId = true && that.isSetInstructionId();
      if (this_present_instructionId || that_present_instructionId) {
        if (!(this_present_instructionId && that_present_instructionId))
          return false;
        if (!this.instructionId.equals(that.instructionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstructionId()) ? 131071 : 524287);
      if (isSetInstructionId())
        hashCode = hashCode * 8191 + instructionId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Abort_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInstructionId()).compareTo(other.isSetInstructionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstructionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instructionId, other.instructionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Abort_args(");
      boolean first = true;

      sb.append("instructionId:");
      if (this.instructionId == null) {
        sb.append("null");
      } else {
        sb.append(this.instructionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Abort_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Abort_argsStandardScheme getScheme() {
        return new Abort_argsStandardScheme();
      }
    }

    private static class Abort_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Abort_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Abort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTRUCTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instructionId = iprot.readString();
                struct.setInstructionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Abort_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instructionId != null) {
          oprot.writeFieldBegin(INSTRUCTION_ID_FIELD_DESC);
          oprot.writeString(struct.instructionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Abort_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Abort_argsTupleScheme getScheme() {
        return new Abort_argsTupleScheme();
      }
    }

    private static class Abort_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Abort_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Abort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInstructionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstructionId()) {
          oprot.writeString(struct.instructionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Abort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.instructionId = iprot.readString();
          struct.setInstructionIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Abort_result implements org.apache.thrift.TBase<Abort_result, Abort_result._Fields>, java.io.Serializable, Cloneable, Comparable<Abort_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Abort_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Abort_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Abort_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Abort_result.class, metaDataMap);
    }

    public Abort_result() {
    }

    public Abort_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Abort_result(Abort_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public Abort_result deepCopy() {
      return new Abort_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public Abort_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Abort_result)
        return this.equals((Abort_result)that);
      return false;
    }

    public boolean equals(Abort_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Abort_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Abort_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Abort_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Abort_resultStandardScheme getScheme() {
        return new Abort_resultStandardScheme();
      }
    }

    private static class Abort_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Abort_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Abort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Abort_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Abort_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Abort_resultTupleScheme getScheme() {
        return new Abort_resultTupleScheme();
      }
    }

    private static class Abort_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Abort_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Abort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Abort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Dispose_args implements org.apache.thrift.TBase<Dispose_args, Dispose_args._Fields>, java.io.Serializable, Cloneable, Comparable<Dispose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dispose_args");

    private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("parameters", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Dispose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Dispose_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> parameters; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMETERS((short)1, "parameters");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMETERS
            return PARAMETERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("parameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dispose_args.class, metaDataMap);
    }

    public Dispose_args() {
    }

    public Dispose_args(
      java.util.Map<java.lang.String,java.lang.String> parameters)
    {
      this();
      this.parameters = parameters;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Dispose_args(Dispose_args other) {
      if (other.isSetParameters()) {
        java.util.Map<java.lang.String,java.lang.String> __this__parameters = new java.util.HashMap<java.lang.String,java.lang.String>(other.parameters);
        this.parameters = __this__parameters;
      }
    }

    public Dispose_args deepCopy() {
      return new Dispose_args(this);
    }

    @Override
    public void clear() {
      this.parameters = null;
    }

    public int getParametersSize() {
      return (this.parameters == null) ? 0 : this.parameters.size();
    }

    public void putToParameters(java.lang.String key, java.lang.String val) {
      if (this.parameters == null) {
        this.parameters = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.parameters.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getParameters() {
      return this.parameters;
    }

    public Dispose_args setParameters(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> parameters) {
      this.parameters = parameters;
      return this;
    }

    public void unsetParameters() {
      this.parameters = null;
    }

    /** Returns true if field parameters is set (has been assigned a value) and false otherwise */
    public boolean isSetParameters() {
      return this.parameters != null;
    }

    public void setParametersIsSet(boolean value) {
      if (!value) {
        this.parameters = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case PARAMETERS:
        if (value == null) {
          unsetParameters();
        } else {
          setParameters((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMETERS:
        return getParameters();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PARAMETERS:
        return isSetParameters();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Dispose_args)
        return this.equals((Dispose_args)that);
      return false;
    }

    public boolean equals(Dispose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_parameters = true && this.isSetParameters();
      boolean that_present_parameters = true && that.isSetParameters();
      if (this_present_parameters || that_present_parameters) {
        if (!(this_present_parameters && that_present_parameters))
          return false;
        if (!this.parameters.equals(that.parameters))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetParameters()) ? 131071 : 524287);
      if (isSetParameters())
        hashCode = hashCode * 8191 + parameters.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Dispose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetParameters()).compareTo(other.isSetParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameters()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameters, other.parameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Dispose_args(");
      boolean first = true;

      sb.append("parameters:");
      if (this.parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.parameters);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Dispose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Dispose_argsStandardScheme getScheme() {
        return new Dispose_argsStandardScheme();
      }
    }

    private static class Dispose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Dispose_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMETERS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map176 = iprot.readMapBegin();
                  struct.parameters = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map176.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key177;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val178;
                  for (int _i179 = 0; _i179 < _map176.size; ++_i179)
                  {
                    _key177 = iprot.readString();
                    _val178 = iprot.readString();
                    struct.parameters.put(_key177, _val178);
                  }
                  iprot.readMapEnd();
                }
                struct.setParametersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Dispose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.parameters != null) {
          oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.parameters.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter180 : struct.parameters.entrySet())
            {
              oprot.writeString(_iter180.getKey());
              oprot.writeString(_iter180.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Dispose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Dispose_argsTupleScheme getScheme() {
        return new Dispose_argsTupleScheme();
      }
    }

    private static class Dispose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Dispose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetParameters()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParameters()) {
          {
            oprot.writeI32(struct.parameters.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter181 : struct.parameters.entrySet())
            {
              oprot.writeString(_iter181.getKey());
              oprot.writeString(_iter181.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map182 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.parameters = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map182.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key183;
            @org.apache.thrift.annotation.Nullable java.lang.String _val184;
            for (int _i185 = 0; _i185 < _map182.size; ++_i185)
            {
              _key183 = iprot.readString();
              _val184 = iprot.readString();
              struct.parameters.put(_key183, _val184);
            }
          }
          struct.setParametersIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Dispose_result implements org.apache.thrift.TBase<Dispose_result, Dispose_result._Fields>, java.io.Serializable, Cloneable, Comparable<Dispose_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dispose_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Dispose_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Dispose_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dispose_result.class, metaDataMap);
    }

    public Dispose_result() {
    }

    public Dispose_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Dispose_result(Dispose_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public Dispose_result deepCopy() {
      return new Dispose_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public Dispose_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Dispose_result)
        return this.equals((Dispose_result)that);
      return false;
    }

    public boolean equals(Dispose_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Dispose_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Dispose_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Dispose_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Dispose_resultStandardScheme getScheme() {
        return new Dispose_resultStandardScheme();
      }
    }

    private static class Dispose_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Dispose_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Dispose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Dispose_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Dispose_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Dispose_resultTupleScheme getScheme() {
        return new Dispose_resultTupleScheme();
      }
    }

    private static class Dispose_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Dispose_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Dispose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Dispose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CreateCheckpoint_args implements org.apache.thrift.TBase<CreateCheckpoint_args, CreateCheckpoint_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateCheckpoint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateCheckpoint_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CreateCheckpoint_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CreateCheckpoint_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateCheckpoint_args.class, metaDataMap);
    }

    public CreateCheckpoint_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateCheckpoint_args(CreateCheckpoint_args other) {
    }

    public CreateCheckpoint_args deepCopy() {
      return new CreateCheckpoint_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateCheckpoint_args)
        return this.equals((CreateCheckpoint_args)that);
      return false;
    }

    public boolean equals(CreateCheckpoint_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(CreateCheckpoint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CreateCheckpoint_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateCheckpoint_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateCheckpoint_argsStandardScheme getScheme() {
        return new CreateCheckpoint_argsStandardScheme();
      }
    }

    private static class CreateCheckpoint_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CreateCheckpoint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateCheckpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateCheckpoint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateCheckpoint_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateCheckpoint_argsTupleScheme getScheme() {
        return new CreateCheckpoint_argsTupleScheme();
      }
    }

    private static class CreateCheckpoint_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CreateCheckpoint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateCheckpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateCheckpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CreateCheckpoint_result implements org.apache.thrift.TBase<CreateCheckpoint_result, CreateCheckpoint_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateCheckpoint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateCheckpoint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CreateCheckpoint_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CreateCheckpoint_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateCheckpoint_result.class, metaDataMap);
    }

    public CreateCheckpoint_result() {
    }

    public CreateCheckpoint_result(
      java.nio.ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateCheckpoint_result(CreateCheckpoint_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    public CreateCheckpoint_result deepCopy() {
      return new CreateCheckpoint_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public java.nio.ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public CreateCheckpoint_result setSuccess(byte[] success) {
      this.success = success == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(success.clone());
      return this;
    }

    public CreateCheckpoint_result setSuccess(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          if (value instanceof byte[]) {
            setSuccess((byte[])value);
          } else {
            setSuccess((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateCheckpoint_result)
        return this.equals((CreateCheckpoint_result)that);
      return false;
    }

    public boolean equals(CreateCheckpoint_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CreateCheckpoint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CreateCheckpoint_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateCheckpoint_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateCheckpoint_resultStandardScheme getScheme() {
        return new CreateCheckpoint_resultStandardScheme();
      }
    }

    private static class CreateCheckpoint_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CreateCheckpoint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateCheckpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateCheckpoint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateCheckpoint_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateCheckpoint_resultTupleScheme getScheme() {
        return new CreateCheckpoint_resultTupleScheme();
      }
    }

    private static class CreateCheckpoint_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CreateCheckpoint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateCheckpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateCheckpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class RestoreCheckpoint_args implements org.apache.thrift.TBase<RestoreCheckpoint_args, RestoreCheckpoint_args._Fields>, java.io.Serializable, Cloneable, Comparable<RestoreCheckpoint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RestoreCheckpoint_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RestoreCheckpoint_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RestoreCheckpoint_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RestoreCheckpoint_args.class, metaDataMap);
    }

    public RestoreCheckpoint_args() {
    }

    public RestoreCheckpoint_args(
      java.nio.ByteBuffer data)
    {
      this();
      this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RestoreCheckpoint_args(RestoreCheckpoint_args other) {
      if (other.isSetData()) {
        this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
      }
    }

    public RestoreCheckpoint_args deepCopy() {
      return new RestoreCheckpoint_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
    }

    public byte[] getData() {
      setData(org.apache.thrift.TBaseHelper.rightSize(data));
      return data == null ? null : data.array();
    }

    public java.nio.ByteBuffer bufferForData() {
      return org.apache.thrift.TBaseHelper.copyBinary(data);
    }

    public RestoreCheckpoint_args setData(byte[] data) {
      this.data = data == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(data.clone());
      return this;
    }

    public RestoreCheckpoint_args setData(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer data) {
      this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          if (value instanceof byte[]) {
            setData((byte[])value);
          } else {
            setData((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof RestoreCheckpoint_args)
        return this.equals((RestoreCheckpoint_args)that);
      return false;
    }

    public boolean equals(RestoreCheckpoint_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RestoreCheckpoint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RestoreCheckpoint_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.data, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RestoreCheckpoint_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RestoreCheckpoint_argsStandardScheme getScheme() {
        return new RestoreCheckpoint_argsStandardScheme();
      }
    }

    private static class RestoreCheckpoint_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RestoreCheckpoint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RestoreCheckpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readBinary();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RestoreCheckpoint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeBinary(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RestoreCheckpoint_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RestoreCheckpoint_argsTupleScheme getScheme() {
        return new RestoreCheckpoint_argsTupleScheme();
      }
    }

    private static class RestoreCheckpoint_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RestoreCheckpoint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RestoreCheckpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetData()) {
          oprot.writeBinary(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RestoreCheckpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.data = iprot.readBinary();
          struct.setDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class RestoreCheckpoint_result implements org.apache.thrift.TBase<RestoreCheckpoint_result, RestoreCheckpoint_result._Fields>, java.io.Serializable, Cloneable, Comparable<RestoreCheckpoint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RestoreCheckpoint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RestoreCheckpoint_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RestoreCheckpoint_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RestoreCheckpoint_result.class, metaDataMap);
    }

    public RestoreCheckpoint_result() {
    }

    public RestoreCheckpoint_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RestoreCheckpoint_result(RestoreCheckpoint_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public RestoreCheckpoint_result deepCopy() {
      return new RestoreCheckpoint_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public RestoreCheckpoint_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof RestoreCheckpoint_result)
        return this.equals((RestoreCheckpoint_result)that);
      return false;
    }

    public boolean equals(RestoreCheckpoint_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RestoreCheckpoint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RestoreCheckpoint_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RestoreCheckpoint_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RestoreCheckpoint_resultStandardScheme getScheme() {
        return new RestoreCheckpoint_resultStandardScheme();
      }
    }

    private static class RestoreCheckpoint_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RestoreCheckpoint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RestoreCheckpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RestoreCheckpoint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RestoreCheckpoint_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RestoreCheckpoint_resultTupleScheme getScheme() {
        return new RestoreCheckpoint_resultTupleScheme();
      }
    }

    private static class RestoreCheckpoint_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RestoreCheckpoint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RestoreCheckpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RestoreCheckpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ExecuteFunction_args implements org.apache.thrift.TBase<ExecuteFunction_args, ExecuteFunction_args._Fields>, java.io.Serializable, Cloneable, Comparable<ExecuteFunction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExecuteFunction_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("parameters", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExecuteFunction_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExecuteFunction_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> parameters; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      PARAMETERS((short)2, "parameters");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // PARAMETERS
            return PARAMETERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("parameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExecuteFunction_args.class, metaDataMap);
    }

    public ExecuteFunction_args() {
    }

    public ExecuteFunction_args(
      java.lang.String name,
      java.util.Map<java.lang.String,java.lang.String> parameters)
    {
      this();
      this.name = name;
      this.parameters = parameters;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ExecuteFunction_args(ExecuteFunction_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetParameters()) {
        java.util.Map<java.lang.String,java.lang.String> __this__parameters = new java.util.HashMap<java.lang.String,java.lang.String>(other.parameters);
        this.parameters = __this__parameters;
      }
    }

    public ExecuteFunction_args deepCopy() {
      return new ExecuteFunction_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.parameters = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public ExecuteFunction_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public int getParametersSize() {
      return (this.parameters == null) ? 0 : this.parameters.size();
    }

    public void putToParameters(java.lang.String key, java.lang.String val) {
      if (this.parameters == null) {
        this.parameters = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.parameters.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getParameters() {
      return this.parameters;
    }

    public ExecuteFunction_args setParameters(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> parameters) {
      this.parameters = parameters;
      return this;
    }

    public void unsetParameters() {
      this.parameters = null;
    }

    /** Returns true if field parameters is set (has been assigned a value) and false otherwise */
    public boolean isSetParameters() {
      return this.parameters != null;
    }

    public void setParametersIsSet(boolean value) {
      if (!value) {
        this.parameters = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      case PARAMETERS:
        if (value == null) {
          unsetParameters();
        } else {
          setParameters((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case PARAMETERS:
        return getParameters();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case PARAMETERS:
        return isSetParameters();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ExecuteFunction_args)
        return this.equals((ExecuteFunction_args)that);
      return false;
    }

    public boolean equals(ExecuteFunction_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_parameters = true && this.isSetParameters();
      boolean that_present_parameters = true && that.isSetParameters();
      if (this_present_parameters || that_present_parameters) {
        if (!(this_present_parameters && that_present_parameters))
          return false;
        if (!this.parameters.equals(that.parameters))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetParameters()) ? 131071 : 524287);
      if (isSetParameters())
        hashCode = hashCode * 8191 + parameters.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ExecuteFunction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParameters()).compareTo(other.isSetParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameters()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameters, other.parameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ExecuteFunction_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameters:");
      if (this.parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.parameters);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ExecuteFunction_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExecuteFunction_argsStandardScheme getScheme() {
        return new ExecuteFunction_argsStandardScheme();
      }
    }

    private static class ExecuteFunction_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExecuteFunction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ExecuteFunction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMETERS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map186 = iprot.readMapBegin();
                  struct.parameters = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map186.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key187;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val188;
                  for (int _i189 = 0; _i189 < _map186.size; ++_i189)
                  {
                    _key187 = iprot.readString();
                    _val188 = iprot.readString();
                    struct.parameters.put(_key187, _val188);
                  }
                  iprot.readMapEnd();
                }
                struct.setParametersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ExecuteFunction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.parameters != null) {
          oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.parameters.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter190 : struct.parameters.entrySet())
            {
              oprot.writeString(_iter190.getKey());
              oprot.writeString(_iter190.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ExecuteFunction_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExecuteFunction_argsTupleScheme getScheme() {
        return new ExecuteFunction_argsTupleScheme();
      }
    }

    private static class ExecuteFunction_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExecuteFunction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ExecuteFunction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        if (struct.isSetParameters()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetParameters()) {
          {
            oprot.writeI32(struct.parameters.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter191 : struct.parameters.entrySet())
            {
              oprot.writeString(_iter191.getKey());
              oprot.writeString(_iter191.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ExecuteFunction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map192 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.parameters = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map192.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key193;
            @org.apache.thrift.annotation.Nullable java.lang.String _val194;
            for (int _i195 = 0; _i195 < _map192.size; ++_i195)
            {
              _key193 = iprot.readString();
              _val194 = iprot.readString();
              struct.parameters.put(_key193, _val194);
            }
          }
          struct.setParametersIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ExecuteFunction_result implements org.apache.thrift.TBase<ExecuteFunction_result, ExecuteFunction_result._Fields>, java.io.Serializable, Cloneable, Comparable<ExecuteFunction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExecuteFunction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExecuteFunction_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExecuteFunction_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExecuteFunction_result.class, metaDataMap);
    }

    public ExecuteFunction_result() {
    }

    public ExecuteFunction_result(
      java.util.Map<java.lang.String,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ExecuteFunction_result(ExecuteFunction_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public ExecuteFunction_result deepCopy() {
      return new ExecuteFunction_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public ExecuteFunction_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ExecuteFunction_result)
        return this.equals((ExecuteFunction_result)that);
      return false;
    }

    public boolean equals(ExecuteFunction_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ExecuteFunction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ExecuteFunction_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ExecuteFunction_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExecuteFunction_resultStandardScheme getScheme() {
        return new ExecuteFunction_resultStandardScheme();
      }
    }

    private static class ExecuteFunction_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExecuteFunction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ExecuteFunction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map196 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map196.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key197;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val198;
                  for (int _i199 = 0; _i199 < _map196.size; ++_i199)
                  {
                    _key197 = iprot.readString();
                    _val198 = iprot.readString();
                    struct.success.put(_key197, _val198);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ExecuteFunction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter200 : struct.success.entrySet())
            {
              oprot.writeString(_iter200.getKey());
              oprot.writeString(_iter200.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ExecuteFunction_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExecuteFunction_resultTupleScheme getScheme() {
        return new ExecuteFunction_resultTupleScheme();
      }
    }

    private static class ExecuteFunction_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExecuteFunction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ExecuteFunction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter201 : struct.success.entrySet())
            {
              oprot.writeString(_iter201.getKey());
              oprot.writeString(_iter201.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ExecuteFunction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map202 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map202.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key203;
            @org.apache.thrift.annotation.Nullable java.lang.String _val204;
            for (int _i205 = 0; _i205 < _map202.size; ++_i205)
            {
              _key203 = iprot.readString();
              _val204 = iprot.readString();
              struct.success.put(_key203, _val204);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
