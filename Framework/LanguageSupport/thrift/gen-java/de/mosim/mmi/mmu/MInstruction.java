/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.mmu;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MInstruction implements org.apache.thrift.TBase<MInstruction, MInstruction._Fields>, java.io.Serializable, Cloneable, Comparable<MInstruction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MInstruction");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MOTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("MotionType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("Properties", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField CONSTRAINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("Constraints", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField START_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("StartCondition", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField END_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("EndCondition", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Action", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField INSTRUCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("Instructions", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MInstructionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MInstructionTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String ID; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String Name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String MotionType; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> Properties; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.constraints.MConstraint> Constraints; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String StartCondition; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String EndCondition; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String Action; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<MInstruction> Instructions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "ID"),
    NAME((short)2, "Name"),
    MOTION_TYPE((short)3, "MotionType"),
    PROPERTIES((short)4, "Properties"),
    CONSTRAINTS((short)5, "Constraints"),
    START_CONDITION((short)6, "StartCondition"),
    END_CONDITION((short)7, "EndCondition"),
    ACTION((short)8, "Action"),
    INSTRUCTIONS((short)9, "Instructions");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // MOTION_TYPE
          return MOTION_TYPE;
        case 4: // PROPERTIES
          return PROPERTIES;
        case 5: // CONSTRAINTS
          return CONSTRAINTS;
        case 6: // START_CONDITION
          return START_CONDITION;
        case 7: // END_CONDITION
          return END_CONDITION;
        case 8: // ACTION
          return ACTION;
        case 9: // INSTRUCTIONS
          return INSTRUCTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PROPERTIES,_Fields.CONSTRAINTS,_Fields.START_CONDITION,_Fields.END_CONDITION,_Fields.ACTION,_Fields.INSTRUCTIONS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("ID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("MotionType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("Properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CONSTRAINTS, new org.apache.thrift.meta_data.FieldMetaData("Constraints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.constraints.MConstraint.class))));
    tmpMap.put(_Fields.START_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("StartCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("EndCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("Action", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTRUCTIONS, new org.apache.thrift.meta_data.FieldMetaData("Instructions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "MInstruction"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MInstruction.class, metaDataMap);
  }

  public MInstruction() {
  }

  public MInstruction(
    java.lang.String ID,
    java.lang.String Name,
    java.lang.String MotionType)
  {
    this();
    this.ID = ID;
    this.Name = Name;
    this.MotionType = MotionType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MInstruction(MInstruction other) {
    if (other.isSetID()) {
      this.ID = other.ID;
    }
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetMotionType()) {
      this.MotionType = other.MotionType;
    }
    if (other.isSetProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__Properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.Properties);
      this.Properties = __this__Properties;
    }
    if (other.isSetConstraints()) {
      java.util.List<de.mosim.mmi.constraints.MConstraint> __this__Constraints = new java.util.ArrayList<de.mosim.mmi.constraints.MConstraint>(other.Constraints.size());
      for (de.mosim.mmi.constraints.MConstraint other_element : other.Constraints) {
        __this__Constraints.add(new de.mosim.mmi.constraints.MConstraint(other_element));
      }
      this.Constraints = __this__Constraints;
    }
    if (other.isSetStartCondition()) {
      this.StartCondition = other.StartCondition;
    }
    if (other.isSetEndCondition()) {
      this.EndCondition = other.EndCondition;
    }
    if (other.isSetAction()) {
      this.Action = other.Action;
    }
    if (other.isSetInstructions()) {
      java.util.List<MInstruction> __this__Instructions = new java.util.ArrayList<MInstruction>(other.Instructions.size());
      for (MInstruction other_element : other.Instructions) {
        __this__Instructions.add(new MInstruction(other_element));
      }
      this.Instructions = __this__Instructions;
    }
  }

  public MInstruction deepCopy() {
    return new MInstruction(this);
  }

  @Override
  public void clear() {
    this.ID = null;
    this.Name = null;
    this.MotionType = null;
    this.Properties = null;
    this.Constraints = null;
    this.StartCondition = null;
    this.EndCondition = null;
    this.Action = null;
    this.Instructions = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getID() {
    return this.ID;
  }

  public MInstruction setID(@org.apache.thrift.annotation.Nullable java.lang.String ID) {
    this.ID = ID;
    return this;
  }

  public void unsetID() {
    this.ID = null;
  }

  /** Returns true if field ID is set (has been assigned a value) and false otherwise */
  public boolean isSetID() {
    return this.ID != null;
  }

  public void setIDIsSet(boolean value) {
    if (!value) {
      this.ID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.Name;
  }

  public MInstruction setName(@org.apache.thrift.annotation.Nullable java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMotionType() {
    return this.MotionType;
  }

  public MInstruction setMotionType(@org.apache.thrift.annotation.Nullable java.lang.String MotionType) {
    this.MotionType = MotionType;
    return this;
  }

  public void unsetMotionType() {
    this.MotionType = null;
  }

  /** Returns true if field MotionType is set (has been assigned a value) and false otherwise */
  public boolean isSetMotionType() {
    return this.MotionType != null;
  }

  public void setMotionTypeIsSet(boolean value) {
    if (!value) {
      this.MotionType = null;
    }
  }

  public int getPropertiesSize() {
    return (this.Properties == null) ? 0 : this.Properties.size();
  }

  public void putToProperties(java.lang.String key, java.lang.String val) {
    if (this.Properties == null) {
      this.Properties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.Properties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getProperties() {
    return this.Properties;
  }

  public MInstruction setProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> Properties) {
    this.Properties = Properties;
    return this;
  }

  public void unsetProperties() {
    this.Properties = null;
  }

  /** Returns true if field Properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.Properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.Properties = null;
    }
  }

  public int getConstraintsSize() {
    return (this.Constraints == null) ? 0 : this.Constraints.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<de.mosim.mmi.constraints.MConstraint> getConstraintsIterator() {
    return (this.Constraints == null) ? null : this.Constraints.iterator();
  }

  public void addToConstraints(de.mosim.mmi.constraints.MConstraint elem) {
    if (this.Constraints == null) {
      this.Constraints = new java.util.ArrayList<de.mosim.mmi.constraints.MConstraint>();
    }
    this.Constraints.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<de.mosim.mmi.constraints.MConstraint> getConstraints() {
    return this.Constraints;
  }

  public MInstruction setConstraints(@org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.constraints.MConstraint> Constraints) {
    this.Constraints = Constraints;
    return this;
  }

  public void unsetConstraints() {
    this.Constraints = null;
  }

  /** Returns true if field Constraints is set (has been assigned a value) and false otherwise */
  public boolean isSetConstraints() {
    return this.Constraints != null;
  }

  public void setConstraintsIsSet(boolean value) {
    if (!value) {
      this.Constraints = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStartCondition() {
    return this.StartCondition;
  }

  public MInstruction setStartCondition(@org.apache.thrift.annotation.Nullable java.lang.String StartCondition) {
    this.StartCondition = StartCondition;
    return this;
  }

  public void unsetStartCondition() {
    this.StartCondition = null;
  }

  /** Returns true if field StartCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetStartCondition() {
    return this.StartCondition != null;
  }

  public void setStartConditionIsSet(boolean value) {
    if (!value) {
      this.StartCondition = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEndCondition() {
    return this.EndCondition;
  }

  public MInstruction setEndCondition(@org.apache.thrift.annotation.Nullable java.lang.String EndCondition) {
    this.EndCondition = EndCondition;
    return this;
  }

  public void unsetEndCondition() {
    this.EndCondition = null;
  }

  /** Returns true if field EndCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetEndCondition() {
    return this.EndCondition != null;
  }

  public void setEndConditionIsSet(boolean value) {
    if (!value) {
      this.EndCondition = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAction() {
    return this.Action;
  }

  public MInstruction setAction(@org.apache.thrift.annotation.Nullable java.lang.String Action) {
    this.Action = Action;
    return this;
  }

  public void unsetAction() {
    this.Action = null;
  }

  /** Returns true if field Action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.Action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.Action = null;
    }
  }

  public int getInstructionsSize() {
    return (this.Instructions == null) ? 0 : this.Instructions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MInstruction> getInstructionsIterator() {
    return (this.Instructions == null) ? null : this.Instructions.iterator();
  }

  public void addToInstructions(MInstruction elem) {
    if (this.Instructions == null) {
      this.Instructions = new java.util.ArrayList<MInstruction>();
    }
    this.Instructions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MInstruction> getInstructions() {
    return this.Instructions;
  }

  public MInstruction setInstructions(@org.apache.thrift.annotation.Nullable java.util.List<MInstruction> Instructions) {
    this.Instructions = Instructions;
    return this;
  }

  public void unsetInstructions() {
    this.Instructions = null;
  }

  /** Returns true if field Instructions is set (has been assigned a value) and false otherwise */
  public boolean isSetInstructions() {
    return this.Instructions != null;
  }

  public void setInstructionsIsSet(boolean value) {
    if (!value) {
      this.Instructions = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetID();
      } else {
        setID((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case MOTION_TYPE:
      if (value == null) {
        unsetMotionType();
      } else {
        setMotionType((java.lang.String)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case CONSTRAINTS:
      if (value == null) {
        unsetConstraints();
      } else {
        setConstraints((java.util.List<de.mosim.mmi.constraints.MConstraint>)value);
      }
      break;

    case START_CONDITION:
      if (value == null) {
        unsetStartCondition();
      } else {
        setStartCondition((java.lang.String)value);
      }
      break;

    case END_CONDITION:
      if (value == null) {
        unsetEndCondition();
      } else {
        setEndCondition((java.lang.String)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((java.lang.String)value);
      }
      break;

    case INSTRUCTIONS:
      if (value == null) {
        unsetInstructions();
      } else {
        setInstructions((java.util.List<MInstruction>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getID();

    case NAME:
      return getName();

    case MOTION_TYPE:
      return getMotionType();

    case PROPERTIES:
      return getProperties();

    case CONSTRAINTS:
      return getConstraints();

    case START_CONDITION:
      return getStartCondition();

    case END_CONDITION:
      return getEndCondition();

    case ACTION:
      return getAction();

    case INSTRUCTIONS:
      return getInstructions();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetID();
    case NAME:
      return isSetName();
    case MOTION_TYPE:
      return isSetMotionType();
    case PROPERTIES:
      return isSetProperties();
    case CONSTRAINTS:
      return isSetConstraints();
    case START_CONDITION:
      return isSetStartCondition();
    case END_CONDITION:
      return isSetEndCondition();
    case ACTION:
      return isSetAction();
    case INSTRUCTIONS:
      return isSetInstructions();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MInstruction)
      return this.equals((MInstruction)that);
    return false;
  }

  public boolean equals(MInstruction that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ID = true && this.isSetID();
    boolean that_present_ID = true && that.isSetID();
    if (this_present_ID || that_present_ID) {
      if (!(this_present_ID && that_present_ID))
        return false;
      if (!this.ID.equals(that.ID))
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_MotionType = true && this.isSetMotionType();
    boolean that_present_MotionType = true && that.isSetMotionType();
    if (this_present_MotionType || that_present_MotionType) {
      if (!(this_present_MotionType && that_present_MotionType))
        return false;
      if (!this.MotionType.equals(that.MotionType))
        return false;
    }

    boolean this_present_Properties = true && this.isSetProperties();
    boolean that_present_Properties = true && that.isSetProperties();
    if (this_present_Properties || that_present_Properties) {
      if (!(this_present_Properties && that_present_Properties))
        return false;
      if (!this.Properties.equals(that.Properties))
        return false;
    }

    boolean this_present_Constraints = true && this.isSetConstraints();
    boolean that_present_Constraints = true && that.isSetConstraints();
    if (this_present_Constraints || that_present_Constraints) {
      if (!(this_present_Constraints && that_present_Constraints))
        return false;
      if (!this.Constraints.equals(that.Constraints))
        return false;
    }

    boolean this_present_StartCondition = true && this.isSetStartCondition();
    boolean that_present_StartCondition = true && that.isSetStartCondition();
    if (this_present_StartCondition || that_present_StartCondition) {
      if (!(this_present_StartCondition && that_present_StartCondition))
        return false;
      if (!this.StartCondition.equals(that.StartCondition))
        return false;
    }

    boolean this_present_EndCondition = true && this.isSetEndCondition();
    boolean that_present_EndCondition = true && that.isSetEndCondition();
    if (this_present_EndCondition || that_present_EndCondition) {
      if (!(this_present_EndCondition && that_present_EndCondition))
        return false;
      if (!this.EndCondition.equals(that.EndCondition))
        return false;
    }

    boolean this_present_Action = true && this.isSetAction();
    boolean that_present_Action = true && that.isSetAction();
    if (this_present_Action || that_present_Action) {
      if (!(this_present_Action && that_present_Action))
        return false;
      if (!this.Action.equals(that.Action))
        return false;
    }

    boolean this_present_Instructions = true && this.isSetInstructions();
    boolean that_present_Instructions = true && that.isSetInstructions();
    if (this_present_Instructions || that_present_Instructions) {
      if (!(this_present_Instructions && that_present_Instructions))
        return false;
      if (!this.Instructions.equals(that.Instructions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetID()) ? 131071 : 524287);
    if (isSetID())
      hashCode = hashCode * 8191 + ID.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetMotionType()) ? 131071 : 524287);
    if (isSetMotionType())
      hashCode = hashCode * 8191 + MotionType.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + Properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetConstraints()) ? 131071 : 524287);
    if (isSetConstraints())
      hashCode = hashCode * 8191 + Constraints.hashCode();

    hashCode = hashCode * 8191 + ((isSetStartCondition()) ? 131071 : 524287);
    if (isSetStartCondition())
      hashCode = hashCode * 8191 + StartCondition.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndCondition()) ? 131071 : 524287);
    if (isSetEndCondition())
      hashCode = hashCode * 8191 + EndCondition.hashCode();

    hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
    if (isSetAction())
      hashCode = hashCode * 8191 + Action.hashCode();

    hashCode = hashCode * 8191 + ((isSetInstructions()) ? 131071 : 524287);
    if (isSetInstructions())
      hashCode = hashCode * 8191 + Instructions.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MInstruction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetID()).compareTo(other.isSetID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, other.ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMotionType()).compareTo(other.isSetMotionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMotionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MotionType, other.MotionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Properties, other.Properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConstraints()).compareTo(other.isSetConstraints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstraints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Constraints, other.Constraints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStartCondition()).compareTo(other.isSetStartCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.StartCondition, other.StartCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEndCondition()).compareTo(other.isSetEndCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EndCondition, other.EndCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Action, other.Action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInstructions()).compareTo(other.isSetInstructions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstructions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Instructions, other.Instructions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MInstruction(");
    boolean first = true;

    sb.append("ID:");
    if (this.ID == null) {
      sb.append("null");
    } else {
      sb.append(this.ID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MotionType:");
    if (this.MotionType == null) {
      sb.append("null");
    } else {
      sb.append(this.MotionType);
    }
    first = false;
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("Properties:");
      if (this.Properties == null) {
        sb.append("null");
      } else {
        sb.append(this.Properties);
      }
      first = false;
    }
    if (isSetConstraints()) {
      if (!first) sb.append(", ");
      sb.append("Constraints:");
      if (this.Constraints == null) {
        sb.append("null");
      } else {
        sb.append(this.Constraints);
      }
      first = false;
    }
    if (isSetStartCondition()) {
      if (!first) sb.append(", ");
      sb.append("StartCondition:");
      if (this.StartCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.StartCondition);
      }
      first = false;
    }
    if (isSetEndCondition()) {
      if (!first) sb.append(", ");
      sb.append("EndCondition:");
      if (this.EndCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.EndCondition);
      }
      first = false;
    }
    if (isSetAction()) {
      if (!first) sb.append(", ");
      sb.append("Action:");
      if (this.Action == null) {
        sb.append("null");
      } else {
        sb.append(this.Action);
      }
      first = false;
    }
    if (isSetInstructions()) {
      if (!first) sb.append(", ");
      sb.append("Instructions:");
      if (this.Instructions == null) {
        sb.append("null");
      } else {
        sb.append(this.Instructions);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID' was not present! Struct: " + toString());
    }
    if (Name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Name' was not present! Struct: " + toString());
    }
    if (MotionType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'MotionType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MInstructionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MInstructionStandardScheme getScheme() {
      return new MInstructionStandardScheme();
    }
  }

  private static class MInstructionStandardScheme extends org.apache.thrift.scheme.StandardScheme<MInstruction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MInstruction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ID = iprot.readString();
              struct.setIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MOTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.MotionType = iprot.readString();
              struct.setMotionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map132 = iprot.readMapBegin();
                struct.Properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map132.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key133;
                @org.apache.thrift.annotation.Nullable java.lang.String _val134;
                for (int _i135 = 0; _i135 < _map132.size; ++_i135)
                {
                  _key133 = iprot.readString();
                  _val134 = iprot.readString();
                  struct.Properties.put(_key133, _val134);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONSTRAINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                struct.Constraints = new java.util.ArrayList<de.mosim.mmi.constraints.MConstraint>(_list136.size);
                @org.apache.thrift.annotation.Nullable de.mosim.mmi.constraints.MConstraint _elem137;
                for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                {
                  _elem137 = new de.mosim.mmi.constraints.MConstraint();
                  _elem137.read(iprot);
                  struct.Constraints.add(_elem137);
                }
                iprot.readListEnd();
              }
              struct.setConstraintsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.StartCondition = iprot.readString();
              struct.setStartConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // END_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.EndCondition = iprot.readString();
              struct.setEndConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Action = iprot.readString();
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INSTRUCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list139 = iprot.readListBegin();
                struct.Instructions = new java.util.ArrayList<MInstruction>(_list139.size);
                @org.apache.thrift.annotation.Nullable MInstruction _elem140;
                for (int _i141 = 0; _i141 < _list139.size; ++_i141)
                {
                  _elem140 = new MInstruction();
                  _elem140.read(iprot);
                  struct.Instructions.add(_elem140);
                }
                iprot.readListEnd();
              }
              struct.setInstructionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MInstruction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ID != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.ID);
        oprot.writeFieldEnd();
      }
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.MotionType != null) {
        oprot.writeFieldBegin(MOTION_TYPE_FIELD_DESC);
        oprot.writeString(struct.MotionType);
        oprot.writeFieldEnd();
      }
      if (struct.Properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.Properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter142 : struct.Properties.entrySet())
            {
              oprot.writeString(_iter142.getKey());
              oprot.writeString(_iter142.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.Constraints != null) {
        if (struct.isSetConstraints()) {
          oprot.writeFieldBegin(CONSTRAINTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Constraints.size()));
            for (de.mosim.mmi.constraints.MConstraint _iter143 : struct.Constraints)
            {
              _iter143.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.StartCondition != null) {
        if (struct.isSetStartCondition()) {
          oprot.writeFieldBegin(START_CONDITION_FIELD_DESC);
          oprot.writeString(struct.StartCondition);
          oprot.writeFieldEnd();
        }
      }
      if (struct.EndCondition != null) {
        if (struct.isSetEndCondition()) {
          oprot.writeFieldBegin(END_CONDITION_FIELD_DESC);
          oprot.writeString(struct.EndCondition);
          oprot.writeFieldEnd();
        }
      }
      if (struct.Action != null) {
        if (struct.isSetAction()) {
          oprot.writeFieldBegin(ACTION_FIELD_DESC);
          oprot.writeString(struct.Action);
          oprot.writeFieldEnd();
        }
      }
      if (struct.Instructions != null) {
        if (struct.isSetInstructions()) {
          oprot.writeFieldBegin(INSTRUCTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Instructions.size()));
            for (MInstruction _iter144 : struct.Instructions)
            {
              _iter144.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MInstructionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MInstructionTupleScheme getScheme() {
      return new MInstructionTupleScheme();
    }
  }

  private static class MInstructionTupleScheme extends org.apache.thrift.scheme.TupleScheme<MInstruction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MInstruction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.ID);
      oprot.writeString(struct.Name);
      oprot.writeString(struct.MotionType);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetProperties()) {
        optionals.set(0);
      }
      if (struct.isSetConstraints()) {
        optionals.set(1);
      }
      if (struct.isSetStartCondition()) {
        optionals.set(2);
      }
      if (struct.isSetEndCondition()) {
        optionals.set(3);
      }
      if (struct.isSetAction()) {
        optionals.set(4);
      }
      if (struct.isSetInstructions()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.Properties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter145 : struct.Properties.entrySet())
          {
            oprot.writeString(_iter145.getKey());
            oprot.writeString(_iter145.getValue());
          }
        }
      }
      if (struct.isSetConstraints()) {
        {
          oprot.writeI32(struct.Constraints.size());
          for (de.mosim.mmi.constraints.MConstraint _iter146 : struct.Constraints)
          {
            _iter146.write(oprot);
          }
        }
      }
      if (struct.isSetStartCondition()) {
        oprot.writeString(struct.StartCondition);
      }
      if (struct.isSetEndCondition()) {
        oprot.writeString(struct.EndCondition);
      }
      if (struct.isSetAction()) {
        oprot.writeString(struct.Action);
      }
      if (struct.isSetInstructions()) {
        {
          oprot.writeI32(struct.Instructions.size());
          for (MInstruction _iter147 : struct.Instructions)
          {
            _iter147.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MInstruction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.ID = iprot.readString();
      struct.setIDIsSet(true);
      struct.Name = iprot.readString();
      struct.setNameIsSet(true);
      struct.MotionType = iprot.readString();
      struct.setMotionTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map148 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.Properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map148.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key149;
          @org.apache.thrift.annotation.Nullable java.lang.String _val150;
          for (int _i151 = 0; _i151 < _map148.size; ++_i151)
          {
            _key149 = iprot.readString();
            _val150 = iprot.readString();
            struct.Properties.put(_key149, _val150);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list152 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Constraints = new java.util.ArrayList<de.mosim.mmi.constraints.MConstraint>(_list152.size);
          @org.apache.thrift.annotation.Nullable de.mosim.mmi.constraints.MConstraint _elem153;
          for (int _i154 = 0; _i154 < _list152.size; ++_i154)
          {
            _elem153 = new de.mosim.mmi.constraints.MConstraint();
            _elem153.read(iprot);
            struct.Constraints.add(_elem153);
          }
        }
        struct.setConstraintsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.StartCondition = iprot.readString();
        struct.setStartConditionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.EndCondition = iprot.readString();
        struct.setEndConditionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Action = iprot.readString();
        struct.setActionIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list155 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Instructions = new java.util.ArrayList<MInstruction>(_list155.size);
          @org.apache.thrift.annotation.Nullable MInstruction _elem156;
          for (int _i157 = 0; _i157 < _list155.size; ++_i157)
          {
            _elem156 = new MInstruction();
            _elem156.read(iprot);
            struct.Instructions.add(_elem156);
          }
        }
        struct.setInstructionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

