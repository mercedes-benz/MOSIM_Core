/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.services;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MWalkPointEstimationService {

  public interface Iface extends MMIServiceBase.Iface {

    public java.util.List<MWalkPoint> EstimateWalkPoints(java.util.List<de.mosim.mmi.scene.MSceneObject> sceneObjects, de.mosim.mmi.scene.MSceneObject target, int amount, java.util.Map<java.lang.String,java.lang.String> properties) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends MMIServiceBase .AsyncIface {

    public void EstimateWalkPoints(java.util.List<de.mosim.mmi.scene.MSceneObject> sceneObjects, de.mosim.mmi.scene.MSceneObject target, int amount, java.util.Map<java.lang.String,java.lang.String> properties, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MWalkPoint>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends MMIServiceBase.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<MWalkPoint> EstimateWalkPoints(java.util.List<de.mosim.mmi.scene.MSceneObject> sceneObjects, de.mosim.mmi.scene.MSceneObject target, int amount, java.util.Map<java.lang.String,java.lang.String> properties) throws org.apache.thrift.TException
    {
      send_EstimateWalkPoints(sceneObjects, target, amount, properties);
      return recv_EstimateWalkPoints();
    }

    public void send_EstimateWalkPoints(java.util.List<de.mosim.mmi.scene.MSceneObject> sceneObjects, de.mosim.mmi.scene.MSceneObject target, int amount, java.util.Map<java.lang.String,java.lang.String> properties) throws org.apache.thrift.TException
    {
      EstimateWalkPoints_args args = new EstimateWalkPoints_args();
      args.setSceneObjects(sceneObjects);
      args.setTarget(target);
      args.setAmount(amount);
      args.setProperties(properties);
      sendBase("EstimateWalkPoints", args);
    }

    public java.util.List<MWalkPoint> recv_EstimateWalkPoints() throws org.apache.thrift.TException
    {
      EstimateWalkPoints_result result = new EstimateWalkPoints_result();
      receiveBase(result, "EstimateWalkPoints");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "EstimateWalkPoints failed: unknown result");
    }

  }
  public static class AsyncClient extends MMIServiceBase.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void EstimateWalkPoints(java.util.List<de.mosim.mmi.scene.MSceneObject> sceneObjects, de.mosim.mmi.scene.MSceneObject target, int amount, java.util.Map<java.lang.String,java.lang.String> properties, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MWalkPoint>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      EstimateWalkPoints_call method_call = new EstimateWalkPoints_call(sceneObjects, target, amount, properties, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class EstimateWalkPoints_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<MWalkPoint>> {
      private java.util.List<de.mosim.mmi.scene.MSceneObject> sceneObjects;
      private de.mosim.mmi.scene.MSceneObject target;
      private int amount;
      private java.util.Map<java.lang.String,java.lang.String> properties;
      public EstimateWalkPoints_call(java.util.List<de.mosim.mmi.scene.MSceneObject> sceneObjects, de.mosim.mmi.scene.MSceneObject target, int amount, java.util.Map<java.lang.String,java.lang.String> properties, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MWalkPoint>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sceneObjects = sceneObjects;
        this.target = target;
        this.amount = amount;
        this.properties = properties;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("EstimateWalkPoints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        EstimateWalkPoints_args args = new EstimateWalkPoints_args();
        args.setSceneObjects(sceneObjects);
        args.setTarget(target);
        args.setAmount(amount);
        args.setProperties(properties);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<MWalkPoint> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_EstimateWalkPoints();
      }
    }

  }

  public static class Processor<I extends Iface> extends MMIServiceBase.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("EstimateWalkPoints", new EstimateWalkPoints());
      return processMap;
    }

    public static class EstimateWalkPoints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, EstimateWalkPoints_args> {
      public EstimateWalkPoints() {
        super("EstimateWalkPoints");
      }

      public EstimateWalkPoints_args getEmptyArgsInstance() {
        return new EstimateWalkPoints_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public EstimateWalkPoints_result getResult(I iface, EstimateWalkPoints_args args) throws org.apache.thrift.TException {
        EstimateWalkPoints_result result = new EstimateWalkPoints_result();
        result.success = iface.EstimateWalkPoints(args.sceneObjects, args.target, args.amount, args.properties);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends MMIServiceBase.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("EstimateWalkPoints", new EstimateWalkPoints());
      return processMap;
    }

    public static class EstimateWalkPoints<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, EstimateWalkPoints_args, java.util.List<MWalkPoint>> {
      public EstimateWalkPoints() {
        super("EstimateWalkPoints");
      }

      public EstimateWalkPoints_args getEmptyArgsInstance() {
        return new EstimateWalkPoints_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<MWalkPoint>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<MWalkPoint>>() { 
          public void onComplete(java.util.List<MWalkPoint> o) {
            EstimateWalkPoints_result result = new EstimateWalkPoints_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            EstimateWalkPoints_result result = new EstimateWalkPoints_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, EstimateWalkPoints_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MWalkPoint>> resultHandler) throws org.apache.thrift.TException {
        iface.EstimateWalkPoints(args.sceneObjects, args.target, args.amount, args.properties,resultHandler);
      }
    }

  }

  public static class EstimateWalkPoints_args implements org.apache.thrift.TBase<EstimateWalkPoints_args, EstimateWalkPoints_args._Fields>, java.io.Serializable, Cloneable, Comparable<EstimateWalkPoints_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EstimateWalkPoints_args");

    private static final org.apache.thrift.protocol.TField SCENE_OBJECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneObjects", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EstimateWalkPoints_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EstimateWalkPoints_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.scene.MSceneObject> sceneObjects; // required
    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MSceneObject target; // required
    public int amount; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCENE_OBJECTS((short)1, "sceneObjects"),
      TARGET((short)2, "target"),
      AMOUNT((short)3, "amount"),
      PROPERTIES((short)4, "properties");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCENE_OBJECTS
            return SCENE_OBJECTS;
          case 2: // TARGET
            return TARGET;
          case 3: // AMOUNT
            return AMOUNT;
          case 4: // PROPERTIES
            return PROPERTIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AMOUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCENE_OBJECTS, new org.apache.thrift.meta_data.FieldMetaData("sceneObjects", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.scene.MSceneObject.class))));
      tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.scene.MSceneObject.class)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EstimateWalkPoints_args.class, metaDataMap);
    }

    public EstimateWalkPoints_args() {
    }

    public EstimateWalkPoints_args(
      java.util.List<de.mosim.mmi.scene.MSceneObject> sceneObjects,
      de.mosim.mmi.scene.MSceneObject target,
      int amount,
      java.util.Map<java.lang.String,java.lang.String> properties)
    {
      this();
      this.sceneObjects = sceneObjects;
      this.target = target;
      this.amount = amount;
      setAmountIsSet(true);
      this.properties = properties;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EstimateWalkPoints_args(EstimateWalkPoints_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSceneObjects()) {
        java.util.List<de.mosim.mmi.scene.MSceneObject> __this__sceneObjects = new java.util.ArrayList<de.mosim.mmi.scene.MSceneObject>(other.sceneObjects.size());
        for (de.mosim.mmi.scene.MSceneObject other_element : other.sceneObjects) {
          __this__sceneObjects.add(new de.mosim.mmi.scene.MSceneObject(other_element));
        }
        this.sceneObjects = __this__sceneObjects;
      }
      if (other.isSetTarget()) {
        this.target = new de.mosim.mmi.scene.MSceneObject(other.target);
      }
      this.amount = other.amount;
      if (other.isSetProperties()) {
        java.util.Map<java.lang.String,java.lang.String> __this__properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.properties);
        this.properties = __this__properties;
      }
    }

    public EstimateWalkPoints_args deepCopy() {
      return new EstimateWalkPoints_args(this);
    }

    @Override
    public void clear() {
      this.sceneObjects = null;
      this.target = null;
      setAmountIsSet(false);
      this.amount = 0;
      this.properties = null;
    }

    public int getSceneObjectsSize() {
      return (this.sceneObjects == null) ? 0 : this.sceneObjects.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<de.mosim.mmi.scene.MSceneObject> getSceneObjectsIterator() {
      return (this.sceneObjects == null) ? null : this.sceneObjects.iterator();
    }

    public void addToSceneObjects(de.mosim.mmi.scene.MSceneObject elem) {
      if (this.sceneObjects == null) {
        this.sceneObjects = new java.util.ArrayList<de.mosim.mmi.scene.MSceneObject>();
      }
      this.sceneObjects.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<de.mosim.mmi.scene.MSceneObject> getSceneObjects() {
      return this.sceneObjects;
    }

    public EstimateWalkPoints_args setSceneObjects(@org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.scene.MSceneObject> sceneObjects) {
      this.sceneObjects = sceneObjects;
      return this;
    }

    public void unsetSceneObjects() {
      this.sceneObjects = null;
    }

    /** Returns true if field sceneObjects is set (has been assigned a value) and false otherwise */
    public boolean isSetSceneObjects() {
      return this.sceneObjects != null;
    }

    public void setSceneObjectsIsSet(boolean value) {
      if (!value) {
        this.sceneObjects = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.scene.MSceneObject getTarget() {
      return this.target;
    }

    public EstimateWalkPoints_args setTarget(@org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MSceneObject target) {
      this.target = target;
      return this;
    }

    public void unsetTarget() {
      this.target = null;
    }

    /** Returns true if field target is set (has been assigned a value) and false otherwise */
    public boolean isSetTarget() {
      return this.target != null;
    }

    public void setTargetIsSet(boolean value) {
      if (!value) {
        this.target = null;
      }
    }

    public int getAmount() {
      return this.amount;
    }

    public EstimateWalkPoints_args setAmount(int amount) {
      this.amount = amount;
      setAmountIsSet(true);
      return this;
    }

    public void unsetAmount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    public void setAmountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
    }

    public int getPropertiesSize() {
      return (this.properties == null) ? 0 : this.properties.size();
    }

    public void putToProperties(java.lang.String key, java.lang.String val) {
      if (this.properties == null) {
        this.properties = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.properties.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getProperties() {
      return this.properties;
    }

    public EstimateWalkPoints_args setProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties) {
      this.properties = properties;
      return this;
    }

    public void unsetProperties() {
      this.properties = null;
    }

    /** Returns true if field properties is set (has been assigned a value) and false otherwise */
    public boolean isSetProperties() {
      return this.properties != null;
    }

    public void setPropertiesIsSet(boolean value) {
      if (!value) {
        this.properties = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SCENE_OBJECTS:
        if (value == null) {
          unsetSceneObjects();
        } else {
          setSceneObjects((java.util.List<de.mosim.mmi.scene.MSceneObject>)value);
        }
        break;

      case TARGET:
        if (value == null) {
          unsetTarget();
        } else {
          setTarget((de.mosim.mmi.scene.MSceneObject)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((java.lang.Integer)value);
        }
        break;

      case PROPERTIES:
        if (value == null) {
          unsetProperties();
        } else {
          setProperties((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCENE_OBJECTS:
        return getSceneObjects();

      case TARGET:
        return getTarget();

      case AMOUNT:
        return getAmount();

      case PROPERTIES:
        return getProperties();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCENE_OBJECTS:
        return isSetSceneObjects();
      case TARGET:
        return isSetTarget();
      case AMOUNT:
        return isSetAmount();
      case PROPERTIES:
        return isSetProperties();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof EstimateWalkPoints_args)
        return this.equals((EstimateWalkPoints_args)that);
      return false;
    }

    public boolean equals(EstimateWalkPoints_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sceneObjects = true && this.isSetSceneObjects();
      boolean that_present_sceneObjects = true && that.isSetSceneObjects();
      if (this_present_sceneObjects || that_present_sceneObjects) {
        if (!(this_present_sceneObjects && that_present_sceneObjects))
          return false;
        if (!this.sceneObjects.equals(that.sceneObjects))
          return false;
      }

      boolean this_present_target = true && this.isSetTarget();
      boolean that_present_target = true && that.isSetTarget();
      if (this_present_target || that_present_target) {
        if (!(this_present_target && that_present_target))
          return false;
        if (!this.target.equals(that.target))
          return false;
      }

      boolean this_present_amount = true;
      boolean that_present_amount = true;
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (this.amount != that.amount)
          return false;
      }

      boolean this_present_properties = true && this.isSetProperties();
      boolean that_present_properties = true && that.isSetProperties();
      if (this_present_properties || that_present_properties) {
        if (!(this_present_properties && that_present_properties))
          return false;
        if (!this.properties.equals(that.properties))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSceneObjects()) ? 131071 : 524287);
      if (isSetSceneObjects())
        hashCode = hashCode * 8191 + sceneObjects.hashCode();

      hashCode = hashCode * 8191 + ((isSetTarget()) ? 131071 : 524287);
      if (isSetTarget())
        hashCode = hashCode * 8191 + target.hashCode();

      hashCode = hashCode * 8191 + amount;

      hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
      if (isSetProperties())
        hashCode = hashCode * 8191 + properties.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(EstimateWalkPoints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSceneObjects()).compareTo(other.isSetSceneObjects());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSceneObjects()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneObjects, other.sceneObjects);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTarget()).compareTo(other.isSetTarget());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTarget()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, other.target);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperties()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("EstimateWalkPoints_args(");
      boolean first = true;

      sb.append("sceneObjects:");
      if (this.sceneObjects == null) {
        sb.append("null");
      } else {
        sb.append(this.sceneObjects);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("target:");
      if (this.target == null) {
        sb.append("null");
      } else {
        sb.append(this.target);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (target != null) {
        target.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class EstimateWalkPoints_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public EstimateWalkPoints_argsStandardScheme getScheme() {
        return new EstimateWalkPoints_argsStandardScheme();
      }
    }

    private static class EstimateWalkPoints_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<EstimateWalkPoints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, EstimateWalkPoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCENE_OBJECTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list298 = iprot.readListBegin();
                  struct.sceneObjects = new java.util.ArrayList<de.mosim.mmi.scene.MSceneObject>(_list298.size);
                  @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MSceneObject _elem299;
                  for (int _i300 = 0; _i300 < _list298.size; ++_i300)
                  {
                    _elem299 = new de.mosim.mmi.scene.MSceneObject();
                    _elem299.read(iprot);
                    struct.sceneObjects.add(_elem299);
                  }
                  iprot.readListEnd();
                }
                struct.setSceneObjectsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TARGET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.target = new de.mosim.mmi.scene.MSceneObject();
                struct.target.read(iprot);
                struct.setTargetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.amount = iprot.readI32();
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PROPERTIES
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map301 = iprot.readMapBegin();
                  struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map301.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key302;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val303;
                  for (int _i304 = 0; _i304 < _map301.size; ++_i304)
                  {
                    _key302 = iprot.readString();
                    _val303 = iprot.readString();
                    struct.properties.put(_key302, _val303);
                  }
                  iprot.readMapEnd();
                }
                struct.setPropertiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, EstimateWalkPoints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sceneObjects != null) {
          oprot.writeFieldBegin(SCENE_OBJECTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sceneObjects.size()));
            for (de.mosim.mmi.scene.MSceneObject _iter305 : struct.sceneObjects)
            {
              _iter305.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.target != null) {
          oprot.writeFieldBegin(TARGET_FIELD_DESC);
          struct.target.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeI32(struct.amount);
        oprot.writeFieldEnd();
        if (struct.properties != null) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter306 : struct.properties.entrySet())
            {
              oprot.writeString(_iter306.getKey());
              oprot.writeString(_iter306.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class EstimateWalkPoints_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public EstimateWalkPoints_argsTupleScheme getScheme() {
        return new EstimateWalkPoints_argsTupleScheme();
      }
    }

    private static class EstimateWalkPoints_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<EstimateWalkPoints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, EstimateWalkPoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSceneObjects()) {
          optionals.set(0);
        }
        if (struct.isSetTarget()) {
          optionals.set(1);
        }
        if (struct.isSetAmount()) {
          optionals.set(2);
        }
        if (struct.isSetProperties()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSceneObjects()) {
          {
            oprot.writeI32(struct.sceneObjects.size());
            for (de.mosim.mmi.scene.MSceneObject _iter307 : struct.sceneObjects)
            {
              _iter307.write(oprot);
            }
          }
        }
        if (struct.isSetTarget()) {
          struct.target.write(oprot);
        }
        if (struct.isSetAmount()) {
          oprot.writeI32(struct.amount);
        }
        if (struct.isSetProperties()) {
          {
            oprot.writeI32(struct.properties.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter308 : struct.properties.entrySet())
            {
              oprot.writeString(_iter308.getKey());
              oprot.writeString(_iter308.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, EstimateWalkPoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list309 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.sceneObjects = new java.util.ArrayList<de.mosim.mmi.scene.MSceneObject>(_list309.size);
            @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MSceneObject _elem310;
            for (int _i311 = 0; _i311 < _list309.size; ++_i311)
            {
              _elem310 = new de.mosim.mmi.scene.MSceneObject();
              _elem310.read(iprot);
              struct.sceneObjects.add(_elem310);
            }
          }
          struct.setSceneObjectsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.target = new de.mosim.mmi.scene.MSceneObject();
          struct.target.read(iprot);
          struct.setTargetIsSet(true);
        }
        if (incoming.get(2)) {
          struct.amount = iprot.readI32();
          struct.setAmountIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map312 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map312.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key313;
            @org.apache.thrift.annotation.Nullable java.lang.String _val314;
            for (int _i315 = 0; _i315 < _map312.size; ++_i315)
            {
              _key313 = iprot.readString();
              _val314 = iprot.readString();
              struct.properties.put(_key313, _val314);
            }
          }
          struct.setPropertiesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class EstimateWalkPoints_result implements org.apache.thrift.TBase<EstimateWalkPoints_result, EstimateWalkPoints_result._Fields>, java.io.Serializable, Cloneable, Comparable<EstimateWalkPoints_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EstimateWalkPoints_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EstimateWalkPoints_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EstimateWalkPoints_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<MWalkPoint> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MWalkPoint.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EstimateWalkPoints_result.class, metaDataMap);
    }

    public EstimateWalkPoints_result() {
    }

    public EstimateWalkPoints_result(
      java.util.List<MWalkPoint> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EstimateWalkPoints_result(EstimateWalkPoints_result other) {
      if (other.isSetSuccess()) {
        java.util.List<MWalkPoint> __this__success = new java.util.ArrayList<MWalkPoint>(other.success.size());
        for (MWalkPoint other_element : other.success) {
          __this__success.add(new MWalkPoint(other_element));
        }
        this.success = __this__success;
      }
    }

    public EstimateWalkPoints_result deepCopy() {
      return new EstimateWalkPoints_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<MWalkPoint> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MWalkPoint elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<MWalkPoint>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<MWalkPoint> getSuccess() {
      return this.success;
    }

    public EstimateWalkPoints_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<MWalkPoint> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<MWalkPoint>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof EstimateWalkPoints_result)
        return this.equals((EstimateWalkPoints_result)that);
      return false;
    }

    public boolean equals(EstimateWalkPoints_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(EstimateWalkPoints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("EstimateWalkPoints_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class EstimateWalkPoints_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public EstimateWalkPoints_resultStandardScheme getScheme() {
        return new EstimateWalkPoints_resultStandardScheme();
      }
    }

    private static class EstimateWalkPoints_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<EstimateWalkPoints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, EstimateWalkPoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list316 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<MWalkPoint>(_list316.size);
                  @org.apache.thrift.annotation.Nullable MWalkPoint _elem317;
                  for (int _i318 = 0; _i318 < _list316.size; ++_i318)
                  {
                    _elem317 = new MWalkPoint();
                    _elem317.read(iprot);
                    struct.success.add(_elem317);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, EstimateWalkPoints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MWalkPoint _iter319 : struct.success)
            {
              _iter319.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class EstimateWalkPoints_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public EstimateWalkPoints_resultTupleScheme getScheme() {
        return new EstimateWalkPoints_resultTupleScheme();
      }
    }

    private static class EstimateWalkPoints_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<EstimateWalkPoints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, EstimateWalkPoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MWalkPoint _iter320 : struct.success)
            {
              _iter320.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, EstimateWalkPoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list321 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<MWalkPoint>(_list321.size);
            @org.apache.thrift.annotation.Nullable MWalkPoint _elem322;
            for (int _i323 = 0; _i323 < _list321.size; ++_i323)
            {
              _elem322 = new MWalkPoint();
              _elem322.read(iprot);
              struct.success.add(_elem322);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
