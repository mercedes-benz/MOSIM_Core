/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.services;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MSynchronizableScene {

  public interface Iface extends MMIServiceBase.Iface {

    public de.mosim.mmi.core.MBoolResponse ApplyUpdates(de.mosim.mmi.scene.MSceneUpdate sceneUpdates) throws org.apache.thrift.TException;

    public de.mosim.mmi.core.MBoolResponse ApplyManipulations(java.util.List<de.mosim.mmi.scene.MSceneManipulation> sceneManipulations) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends MMIServiceBase .AsyncIface {

    public void ApplyUpdates(de.mosim.mmi.scene.MSceneUpdate sceneUpdates, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

    public void ApplyManipulations(java.util.List<de.mosim.mmi.scene.MSceneManipulation> sceneManipulations, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends MMIServiceBase.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public de.mosim.mmi.core.MBoolResponse ApplyUpdates(de.mosim.mmi.scene.MSceneUpdate sceneUpdates) throws org.apache.thrift.TException
    {
      send_ApplyUpdates(sceneUpdates);
      return recv_ApplyUpdates();
    }

    public void send_ApplyUpdates(de.mosim.mmi.scene.MSceneUpdate sceneUpdates) throws org.apache.thrift.TException
    {
      ApplyUpdates_args args = new ApplyUpdates_args();
      args.setSceneUpdates(sceneUpdates);
      sendBase("ApplyUpdates", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_ApplyUpdates() throws org.apache.thrift.TException
    {
      ApplyUpdates_result result = new ApplyUpdates_result();
      receiveBase(result, "ApplyUpdates");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ApplyUpdates failed: unknown result");
    }

    public de.mosim.mmi.core.MBoolResponse ApplyManipulations(java.util.List<de.mosim.mmi.scene.MSceneManipulation> sceneManipulations) throws org.apache.thrift.TException
    {
      send_ApplyManipulations(sceneManipulations);
      return recv_ApplyManipulations();
    }

    public void send_ApplyManipulations(java.util.List<de.mosim.mmi.scene.MSceneManipulation> sceneManipulations) throws org.apache.thrift.TException
    {
      ApplyManipulations_args args = new ApplyManipulations_args();
      args.setSceneManipulations(sceneManipulations);
      sendBase("ApplyManipulations", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_ApplyManipulations() throws org.apache.thrift.TException
    {
      ApplyManipulations_result result = new ApplyManipulations_result();
      receiveBase(result, "ApplyManipulations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ApplyManipulations failed: unknown result");
    }

  }
  public static class AsyncClient extends MMIServiceBase.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ApplyUpdates(de.mosim.mmi.scene.MSceneUpdate sceneUpdates, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ApplyUpdates_call method_call = new ApplyUpdates_call(sceneUpdates, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ApplyUpdates_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private de.mosim.mmi.scene.MSceneUpdate sceneUpdates;
      public ApplyUpdates_call(de.mosim.mmi.scene.MSceneUpdate sceneUpdates, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sceneUpdates = sceneUpdates;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ApplyUpdates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ApplyUpdates_args args = new ApplyUpdates_args();
        args.setSceneUpdates(sceneUpdates);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ApplyUpdates();
      }
    }

    public void ApplyManipulations(java.util.List<de.mosim.mmi.scene.MSceneManipulation> sceneManipulations, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ApplyManipulations_call method_call = new ApplyManipulations_call(sceneManipulations, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ApplyManipulations_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private java.util.List<de.mosim.mmi.scene.MSceneManipulation> sceneManipulations;
      public ApplyManipulations_call(java.util.List<de.mosim.mmi.scene.MSceneManipulation> sceneManipulations, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sceneManipulations = sceneManipulations;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ApplyManipulations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ApplyManipulations_args args = new ApplyManipulations_args();
        args.setSceneManipulations(sceneManipulations);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ApplyManipulations();
      }
    }

  }

  public static class Processor<I extends Iface> extends MMIServiceBase.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ApplyUpdates", new ApplyUpdates());
      processMap.put("ApplyManipulations", new ApplyManipulations());
      return processMap;
    }

    public static class ApplyUpdates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ApplyUpdates_args> {
      public ApplyUpdates() {
        super("ApplyUpdates");
      }

      public ApplyUpdates_args getEmptyArgsInstance() {
        return new ApplyUpdates_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ApplyUpdates_result getResult(I iface, ApplyUpdates_args args) throws org.apache.thrift.TException {
        ApplyUpdates_result result = new ApplyUpdates_result();
        result.success = iface.ApplyUpdates(args.sceneUpdates);
        return result;
      }
    }

    public static class ApplyManipulations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ApplyManipulations_args> {
      public ApplyManipulations() {
        super("ApplyManipulations");
      }

      public ApplyManipulations_args getEmptyArgsInstance() {
        return new ApplyManipulations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ApplyManipulations_result getResult(I iface, ApplyManipulations_args args) throws org.apache.thrift.TException {
        ApplyManipulations_result result = new ApplyManipulations_result();
        result.success = iface.ApplyManipulations(args.sceneManipulations);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends MMIServiceBase.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ApplyUpdates", new ApplyUpdates());
      processMap.put("ApplyManipulations", new ApplyManipulations());
      return processMap;
    }

    public static class ApplyUpdates<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ApplyUpdates_args, de.mosim.mmi.core.MBoolResponse> {
      public ApplyUpdates() {
        super("ApplyUpdates");
      }

      public ApplyUpdates_args getEmptyArgsInstance() {
        return new ApplyUpdates_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            ApplyUpdates_result result = new ApplyUpdates_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ApplyUpdates_result result = new ApplyUpdates_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ApplyUpdates_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.ApplyUpdates(args.sceneUpdates,resultHandler);
      }
    }

    public static class ApplyManipulations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ApplyManipulations_args, de.mosim.mmi.core.MBoolResponse> {
      public ApplyManipulations() {
        super("ApplyManipulations");
      }

      public ApplyManipulations_args getEmptyArgsInstance() {
        return new ApplyManipulations_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            ApplyManipulations_result result = new ApplyManipulations_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ApplyManipulations_result result = new ApplyManipulations_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ApplyManipulations_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.ApplyManipulations(args.sceneManipulations,resultHandler);
      }
    }

  }

  public static class ApplyUpdates_args implements org.apache.thrift.TBase<ApplyUpdates_args, ApplyUpdates_args._Fields>, java.io.Serializable, Cloneable, Comparable<ApplyUpdates_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplyUpdates_args");

    private static final org.apache.thrift.protocol.TField SCENE_UPDATES_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneUpdates", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ApplyUpdates_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ApplyUpdates_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MSceneUpdate sceneUpdates; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCENE_UPDATES((short)1, "sceneUpdates");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCENE_UPDATES
            return SCENE_UPDATES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCENE_UPDATES, new org.apache.thrift.meta_data.FieldMetaData("sceneUpdates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.scene.MSceneUpdate.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplyUpdates_args.class, metaDataMap);
    }

    public ApplyUpdates_args() {
    }

    public ApplyUpdates_args(
      de.mosim.mmi.scene.MSceneUpdate sceneUpdates)
    {
      this();
      this.sceneUpdates = sceneUpdates;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ApplyUpdates_args(ApplyUpdates_args other) {
      if (other.isSetSceneUpdates()) {
        this.sceneUpdates = new de.mosim.mmi.scene.MSceneUpdate(other.sceneUpdates);
      }
    }

    public ApplyUpdates_args deepCopy() {
      return new ApplyUpdates_args(this);
    }

    @Override
    public void clear() {
      this.sceneUpdates = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.scene.MSceneUpdate getSceneUpdates() {
      return this.sceneUpdates;
    }

    public ApplyUpdates_args setSceneUpdates(@org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MSceneUpdate sceneUpdates) {
      this.sceneUpdates = sceneUpdates;
      return this;
    }

    public void unsetSceneUpdates() {
      this.sceneUpdates = null;
    }

    /** Returns true if field sceneUpdates is set (has been assigned a value) and false otherwise */
    public boolean isSetSceneUpdates() {
      return this.sceneUpdates != null;
    }

    public void setSceneUpdatesIsSet(boolean value) {
      if (!value) {
        this.sceneUpdates = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SCENE_UPDATES:
        if (value == null) {
          unsetSceneUpdates();
        } else {
          setSceneUpdates((de.mosim.mmi.scene.MSceneUpdate)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCENE_UPDATES:
        return getSceneUpdates();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCENE_UPDATES:
        return isSetSceneUpdates();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ApplyUpdates_args)
        return this.equals((ApplyUpdates_args)that);
      return false;
    }

    public boolean equals(ApplyUpdates_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sceneUpdates = true && this.isSetSceneUpdates();
      boolean that_present_sceneUpdates = true && that.isSetSceneUpdates();
      if (this_present_sceneUpdates || that_present_sceneUpdates) {
        if (!(this_present_sceneUpdates && that_present_sceneUpdates))
          return false;
        if (!this.sceneUpdates.equals(that.sceneUpdates))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSceneUpdates()) ? 131071 : 524287);
      if (isSetSceneUpdates())
        hashCode = hashCode * 8191 + sceneUpdates.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ApplyUpdates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSceneUpdates()).compareTo(other.isSetSceneUpdates());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSceneUpdates()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneUpdates, other.sceneUpdates);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ApplyUpdates_args(");
      boolean first = true;

      sb.append("sceneUpdates:");
      if (this.sceneUpdates == null) {
        sb.append("null");
      } else {
        sb.append(this.sceneUpdates);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sceneUpdates != null) {
        sceneUpdates.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ApplyUpdates_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ApplyUpdates_argsStandardScheme getScheme() {
        return new ApplyUpdates_argsStandardScheme();
      }
    }

    private static class ApplyUpdates_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ApplyUpdates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ApplyUpdates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCENE_UPDATES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sceneUpdates = new de.mosim.mmi.scene.MSceneUpdate();
                struct.sceneUpdates.read(iprot);
                struct.setSceneUpdatesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ApplyUpdates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sceneUpdates != null) {
          oprot.writeFieldBegin(SCENE_UPDATES_FIELD_DESC);
          struct.sceneUpdates.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ApplyUpdates_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ApplyUpdates_argsTupleScheme getScheme() {
        return new ApplyUpdates_argsTupleScheme();
      }
    }

    private static class ApplyUpdates_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ApplyUpdates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ApplyUpdates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSceneUpdates()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSceneUpdates()) {
          struct.sceneUpdates.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ApplyUpdates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sceneUpdates = new de.mosim.mmi.scene.MSceneUpdate();
          struct.sceneUpdates.read(iprot);
          struct.setSceneUpdatesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ApplyUpdates_result implements org.apache.thrift.TBase<ApplyUpdates_result, ApplyUpdates_result._Fields>, java.io.Serializable, Cloneable, Comparable<ApplyUpdates_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplyUpdates_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ApplyUpdates_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ApplyUpdates_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplyUpdates_result.class, metaDataMap);
    }

    public ApplyUpdates_result() {
    }

    public ApplyUpdates_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ApplyUpdates_result(ApplyUpdates_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public ApplyUpdates_result deepCopy() {
      return new ApplyUpdates_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public ApplyUpdates_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ApplyUpdates_result)
        return this.equals((ApplyUpdates_result)that);
      return false;
    }

    public boolean equals(ApplyUpdates_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ApplyUpdates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ApplyUpdates_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ApplyUpdates_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ApplyUpdates_resultStandardScheme getScheme() {
        return new ApplyUpdates_resultStandardScheme();
      }
    }

    private static class ApplyUpdates_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ApplyUpdates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ApplyUpdates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ApplyUpdates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ApplyUpdates_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ApplyUpdates_resultTupleScheme getScheme() {
        return new ApplyUpdates_resultTupleScheme();
      }
    }

    private static class ApplyUpdates_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ApplyUpdates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ApplyUpdates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ApplyUpdates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ApplyManipulations_args implements org.apache.thrift.TBase<ApplyManipulations_args, ApplyManipulations_args._Fields>, java.io.Serializable, Cloneable, Comparable<ApplyManipulations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplyManipulations_args");

    private static final org.apache.thrift.protocol.TField SCENE_MANIPULATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneManipulations", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ApplyManipulations_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ApplyManipulations_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.scene.MSceneManipulation> sceneManipulations; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCENE_MANIPULATIONS((short)1, "sceneManipulations");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCENE_MANIPULATIONS
            return SCENE_MANIPULATIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCENE_MANIPULATIONS, new org.apache.thrift.meta_data.FieldMetaData("sceneManipulations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.scene.MSceneManipulation.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplyManipulations_args.class, metaDataMap);
    }

    public ApplyManipulations_args() {
    }

    public ApplyManipulations_args(
      java.util.List<de.mosim.mmi.scene.MSceneManipulation> sceneManipulations)
    {
      this();
      this.sceneManipulations = sceneManipulations;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ApplyManipulations_args(ApplyManipulations_args other) {
      if (other.isSetSceneManipulations()) {
        java.util.List<de.mosim.mmi.scene.MSceneManipulation> __this__sceneManipulations = new java.util.ArrayList<de.mosim.mmi.scene.MSceneManipulation>(other.sceneManipulations.size());
        for (de.mosim.mmi.scene.MSceneManipulation other_element : other.sceneManipulations) {
          __this__sceneManipulations.add(new de.mosim.mmi.scene.MSceneManipulation(other_element));
        }
        this.sceneManipulations = __this__sceneManipulations;
      }
    }

    public ApplyManipulations_args deepCopy() {
      return new ApplyManipulations_args(this);
    }

    @Override
    public void clear() {
      this.sceneManipulations = null;
    }

    public int getSceneManipulationsSize() {
      return (this.sceneManipulations == null) ? 0 : this.sceneManipulations.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<de.mosim.mmi.scene.MSceneManipulation> getSceneManipulationsIterator() {
      return (this.sceneManipulations == null) ? null : this.sceneManipulations.iterator();
    }

    public void addToSceneManipulations(de.mosim.mmi.scene.MSceneManipulation elem) {
      if (this.sceneManipulations == null) {
        this.sceneManipulations = new java.util.ArrayList<de.mosim.mmi.scene.MSceneManipulation>();
      }
      this.sceneManipulations.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<de.mosim.mmi.scene.MSceneManipulation> getSceneManipulations() {
      return this.sceneManipulations;
    }

    public ApplyManipulations_args setSceneManipulations(@org.apache.thrift.annotation.Nullable java.util.List<de.mosim.mmi.scene.MSceneManipulation> sceneManipulations) {
      this.sceneManipulations = sceneManipulations;
      return this;
    }

    public void unsetSceneManipulations() {
      this.sceneManipulations = null;
    }

    /** Returns true if field sceneManipulations is set (has been assigned a value) and false otherwise */
    public boolean isSetSceneManipulations() {
      return this.sceneManipulations != null;
    }

    public void setSceneManipulationsIsSet(boolean value) {
      if (!value) {
        this.sceneManipulations = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SCENE_MANIPULATIONS:
        if (value == null) {
          unsetSceneManipulations();
        } else {
          setSceneManipulations((java.util.List<de.mosim.mmi.scene.MSceneManipulation>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCENE_MANIPULATIONS:
        return getSceneManipulations();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCENE_MANIPULATIONS:
        return isSetSceneManipulations();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ApplyManipulations_args)
        return this.equals((ApplyManipulations_args)that);
      return false;
    }

    public boolean equals(ApplyManipulations_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sceneManipulations = true && this.isSetSceneManipulations();
      boolean that_present_sceneManipulations = true && that.isSetSceneManipulations();
      if (this_present_sceneManipulations || that_present_sceneManipulations) {
        if (!(this_present_sceneManipulations && that_present_sceneManipulations))
          return false;
        if (!this.sceneManipulations.equals(that.sceneManipulations))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSceneManipulations()) ? 131071 : 524287);
      if (isSetSceneManipulations())
        hashCode = hashCode * 8191 + sceneManipulations.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ApplyManipulations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSceneManipulations()).compareTo(other.isSetSceneManipulations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSceneManipulations()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneManipulations, other.sceneManipulations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ApplyManipulations_args(");
      boolean first = true;

      sb.append("sceneManipulations:");
      if (this.sceneManipulations == null) {
        sb.append("null");
      } else {
        sb.append(this.sceneManipulations);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ApplyManipulations_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ApplyManipulations_argsStandardScheme getScheme() {
        return new ApplyManipulations_argsStandardScheme();
      }
    }

    private static class ApplyManipulations_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ApplyManipulations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ApplyManipulations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCENE_MANIPULATIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list396 = iprot.readListBegin();
                  struct.sceneManipulations = new java.util.ArrayList<de.mosim.mmi.scene.MSceneManipulation>(_list396.size);
                  @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MSceneManipulation _elem397;
                  for (int _i398 = 0; _i398 < _list396.size; ++_i398)
                  {
                    _elem397 = new de.mosim.mmi.scene.MSceneManipulation();
                    _elem397.read(iprot);
                    struct.sceneManipulations.add(_elem397);
                  }
                  iprot.readListEnd();
                }
                struct.setSceneManipulationsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ApplyManipulations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sceneManipulations != null) {
          oprot.writeFieldBegin(SCENE_MANIPULATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sceneManipulations.size()));
            for (de.mosim.mmi.scene.MSceneManipulation _iter399 : struct.sceneManipulations)
            {
              _iter399.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ApplyManipulations_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ApplyManipulations_argsTupleScheme getScheme() {
        return new ApplyManipulations_argsTupleScheme();
      }
    }

    private static class ApplyManipulations_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ApplyManipulations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ApplyManipulations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSceneManipulations()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSceneManipulations()) {
          {
            oprot.writeI32(struct.sceneManipulations.size());
            for (de.mosim.mmi.scene.MSceneManipulation _iter400 : struct.sceneManipulations)
            {
              _iter400.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ApplyManipulations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list401 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.sceneManipulations = new java.util.ArrayList<de.mosim.mmi.scene.MSceneManipulation>(_list401.size);
            @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MSceneManipulation _elem402;
            for (int _i403 = 0; _i403 < _list401.size; ++_i403)
            {
              _elem402 = new de.mosim.mmi.scene.MSceneManipulation();
              _elem402.read(iprot);
              struct.sceneManipulations.add(_elem402);
            }
          }
          struct.setSceneManipulationsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ApplyManipulations_result implements org.apache.thrift.TBase<ApplyManipulations_result, ApplyManipulations_result._Fields>, java.io.Serializable, Cloneable, Comparable<ApplyManipulations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplyManipulations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ApplyManipulations_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ApplyManipulations_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplyManipulations_result.class, metaDataMap);
    }

    public ApplyManipulations_result() {
    }

    public ApplyManipulations_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ApplyManipulations_result(ApplyManipulations_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public ApplyManipulations_result deepCopy() {
      return new ApplyManipulations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public ApplyManipulations_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ApplyManipulations_result)
        return this.equals((ApplyManipulations_result)that);
      return false;
    }

    public boolean equals(ApplyManipulations_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ApplyManipulations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ApplyManipulations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ApplyManipulations_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ApplyManipulations_resultStandardScheme getScheme() {
        return new ApplyManipulations_resultStandardScheme();
      }
    }

    private static class ApplyManipulations_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ApplyManipulations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ApplyManipulations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ApplyManipulations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ApplyManipulations_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ApplyManipulations_resultTupleScheme getScheme() {
        return new ApplyManipulations_resultTupleScheme();
      }
    }

    private static class ApplyManipulations_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ApplyManipulations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ApplyManipulations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ApplyManipulations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
