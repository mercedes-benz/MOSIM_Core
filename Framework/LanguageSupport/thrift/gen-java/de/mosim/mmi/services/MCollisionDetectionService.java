/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.services;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MCollisionDetectionService {

  public interface Iface extends MMIServiceBase.Iface {

    public de.mosim.mmi.math.MVector3 ComputePenetration(de.mosim.mmi.scene.MCollider colliderA, de.mosim.mmi.math.MTransform transformA, de.mosim.mmi.scene.MCollider colliderB, de.mosim.mmi.math.MTransform transformB) throws org.apache.thrift.TException;

    public boolean CausesCollision(de.mosim.mmi.scene.MCollider colliderA, de.mosim.mmi.math.MTransform transformA, de.mosim.mmi.scene.MCollider colliderB, de.mosim.mmi.math.MTransform transformB) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends MMIServiceBase .AsyncIface {

    public void ComputePenetration(de.mosim.mmi.scene.MCollider colliderA, de.mosim.mmi.math.MTransform transformA, de.mosim.mmi.scene.MCollider colliderB, de.mosim.mmi.math.MTransform transformB, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler) throws org.apache.thrift.TException;

    public void CausesCollision(de.mosim.mmi.scene.MCollider colliderA, de.mosim.mmi.math.MTransform transformA, de.mosim.mmi.scene.MCollider colliderB, de.mosim.mmi.math.MTransform transformB, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends MMIServiceBase.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public de.mosim.mmi.math.MVector3 ComputePenetration(de.mosim.mmi.scene.MCollider colliderA, de.mosim.mmi.math.MTransform transformA, de.mosim.mmi.scene.MCollider colliderB, de.mosim.mmi.math.MTransform transformB) throws org.apache.thrift.TException
    {
      send_ComputePenetration(colliderA, transformA, colliderB, transformB);
      return recv_ComputePenetration();
    }

    public void send_ComputePenetration(de.mosim.mmi.scene.MCollider colliderA, de.mosim.mmi.math.MTransform transformA, de.mosim.mmi.scene.MCollider colliderB, de.mosim.mmi.math.MTransform transformB) throws org.apache.thrift.TException
    {
      ComputePenetration_args args = new ComputePenetration_args();
      args.setColliderA(colliderA);
      args.setTransformA(transformA);
      args.setColliderB(colliderB);
      args.setTransformB(transformB);
      sendBase("ComputePenetration", args);
    }

    public de.mosim.mmi.math.MVector3 recv_ComputePenetration() throws org.apache.thrift.TException
    {
      ComputePenetration_result result = new ComputePenetration_result();
      receiveBase(result, "ComputePenetration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ComputePenetration failed: unknown result");
    }

    public boolean CausesCollision(de.mosim.mmi.scene.MCollider colliderA, de.mosim.mmi.math.MTransform transformA, de.mosim.mmi.scene.MCollider colliderB, de.mosim.mmi.math.MTransform transformB) throws org.apache.thrift.TException
    {
      send_CausesCollision(colliderA, transformA, colliderB, transformB);
      return recv_CausesCollision();
    }

    public void send_CausesCollision(de.mosim.mmi.scene.MCollider colliderA, de.mosim.mmi.math.MTransform transformA, de.mosim.mmi.scene.MCollider colliderB, de.mosim.mmi.math.MTransform transformB) throws org.apache.thrift.TException
    {
      CausesCollision_args args = new CausesCollision_args();
      args.setColliderA(colliderA);
      args.setTransformA(transformA);
      args.setColliderB(colliderB);
      args.setTransformB(transformB);
      sendBase("CausesCollision", args);
    }

    public boolean recv_CausesCollision() throws org.apache.thrift.TException
    {
      CausesCollision_result result = new CausesCollision_result();
      receiveBase(result, "CausesCollision");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CausesCollision failed: unknown result");
    }

  }
  public static class AsyncClient extends MMIServiceBase.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ComputePenetration(de.mosim.mmi.scene.MCollider colliderA, de.mosim.mmi.math.MTransform transformA, de.mosim.mmi.scene.MCollider colliderB, de.mosim.mmi.math.MTransform transformB, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ComputePenetration_call method_call = new ComputePenetration_call(colliderA, transformA, colliderB, transformB, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ComputePenetration_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.math.MVector3> {
      private de.mosim.mmi.scene.MCollider colliderA;
      private de.mosim.mmi.math.MTransform transformA;
      private de.mosim.mmi.scene.MCollider colliderB;
      private de.mosim.mmi.math.MTransform transformB;
      public ComputePenetration_call(de.mosim.mmi.scene.MCollider colliderA, de.mosim.mmi.math.MTransform transformA, de.mosim.mmi.scene.MCollider colliderB, de.mosim.mmi.math.MTransform transformB, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.colliderA = colliderA;
        this.transformA = transformA;
        this.colliderB = colliderB;
        this.transformB = transformB;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ComputePenetration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ComputePenetration_args args = new ComputePenetration_args();
        args.setColliderA(colliderA);
        args.setTransformA(transformA);
        args.setColliderB(colliderB);
        args.setTransformB(transformB);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.math.MVector3 getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ComputePenetration();
      }
    }

    public void CausesCollision(de.mosim.mmi.scene.MCollider colliderA, de.mosim.mmi.math.MTransform transformA, de.mosim.mmi.scene.MCollider colliderB, de.mosim.mmi.math.MTransform transformB, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CausesCollision_call method_call = new CausesCollision_call(colliderA, transformA, colliderB, transformB, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CausesCollision_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private de.mosim.mmi.scene.MCollider colliderA;
      private de.mosim.mmi.math.MTransform transformA;
      private de.mosim.mmi.scene.MCollider colliderB;
      private de.mosim.mmi.math.MTransform transformB;
      public CausesCollision_call(de.mosim.mmi.scene.MCollider colliderA, de.mosim.mmi.math.MTransform transformA, de.mosim.mmi.scene.MCollider colliderB, de.mosim.mmi.math.MTransform transformB, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.colliderA = colliderA;
        this.transformA = transformA;
        this.colliderB = colliderB;
        this.transformB = transformB;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CausesCollision", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CausesCollision_args args = new CausesCollision_args();
        args.setColliderA(colliderA);
        args.setTransformA(transformA);
        args.setColliderB(colliderB);
        args.setTransformB(transformB);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CausesCollision();
      }
    }

  }

  public static class Processor<I extends Iface> extends MMIServiceBase.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ComputePenetration", new ComputePenetration());
      processMap.put("CausesCollision", new CausesCollision());
      return processMap;
    }

    public static class ComputePenetration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ComputePenetration_args> {
      public ComputePenetration() {
        super("ComputePenetration");
      }

      public ComputePenetration_args getEmptyArgsInstance() {
        return new ComputePenetration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ComputePenetration_result getResult(I iface, ComputePenetration_args args) throws org.apache.thrift.TException {
        ComputePenetration_result result = new ComputePenetration_result();
        result.success = iface.ComputePenetration(args.colliderA, args.transformA, args.colliderB, args.transformB);
        return result;
      }
    }

    public static class CausesCollision<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CausesCollision_args> {
      public CausesCollision() {
        super("CausesCollision");
      }

      public CausesCollision_args getEmptyArgsInstance() {
        return new CausesCollision_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public CausesCollision_result getResult(I iface, CausesCollision_args args) throws org.apache.thrift.TException {
        CausesCollision_result result = new CausesCollision_result();
        result.success = iface.CausesCollision(args.colliderA, args.transformA, args.colliderB, args.transformB);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends MMIServiceBase.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ComputePenetration", new ComputePenetration());
      processMap.put("CausesCollision", new CausesCollision());
      return processMap;
    }

    public static class ComputePenetration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ComputePenetration_args, de.mosim.mmi.math.MVector3> {
      public ComputePenetration() {
        super("ComputePenetration");
      }

      public ComputePenetration_args getEmptyArgsInstance() {
        return new ComputePenetration_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3>() { 
          public void onComplete(de.mosim.mmi.math.MVector3 o) {
            ComputePenetration_result result = new ComputePenetration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ComputePenetration_result result = new ComputePenetration_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ComputePenetration_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler) throws org.apache.thrift.TException {
        iface.ComputePenetration(args.colliderA, args.transformA, args.colliderB, args.transformB,resultHandler);
      }
    }

    public static class CausesCollision<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CausesCollision_args, java.lang.Boolean> {
      public CausesCollision() {
        super("CausesCollision");
      }

      public CausesCollision_args getEmptyArgsInstance() {
        return new CausesCollision_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            CausesCollision_result result = new CausesCollision_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CausesCollision_result result = new CausesCollision_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CausesCollision_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.CausesCollision(args.colliderA, args.transformA, args.colliderB, args.transformB,resultHandler);
      }
    }

  }

  public static class ComputePenetration_args implements org.apache.thrift.TBase<ComputePenetration_args, ComputePenetration_args._Fields>, java.io.Serializable, Cloneable, Comparable<ComputePenetration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComputePenetration_args");

    private static final org.apache.thrift.protocol.TField COLLIDER_A_FIELD_DESC = new org.apache.thrift.protocol.TField("colliderA", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TRANSFORM_A_FIELD_DESC = new org.apache.thrift.protocol.TField("transformA", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField COLLIDER_B_FIELD_DESC = new org.apache.thrift.protocol.TField("colliderB", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TRANSFORM_B_FIELD_DESC = new org.apache.thrift.protocol.TField("transformB", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ComputePenetration_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ComputePenetration_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MCollider colliderA; // required
    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform transformA; // required
    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MCollider colliderB; // required
    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform transformB; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLIDER_A((short)1, "colliderA"),
      TRANSFORM_A((short)2, "transformA"),
      COLLIDER_B((short)3, "colliderB"),
      TRANSFORM_B((short)4, "transformB");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLIDER_A
            return COLLIDER_A;
          case 2: // TRANSFORM_A
            return TRANSFORM_A;
          case 3: // COLLIDER_B
            return COLLIDER_B;
          case 4: // TRANSFORM_B
            return TRANSFORM_B;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLIDER_A, new org.apache.thrift.meta_data.FieldMetaData("colliderA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.scene.MCollider.class)));
      tmpMap.put(_Fields.TRANSFORM_A, new org.apache.thrift.meta_data.FieldMetaData("transformA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MTransform.class)));
      tmpMap.put(_Fields.COLLIDER_B, new org.apache.thrift.meta_data.FieldMetaData("colliderB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.scene.MCollider.class)));
      tmpMap.put(_Fields.TRANSFORM_B, new org.apache.thrift.meta_data.FieldMetaData("transformB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MTransform.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComputePenetration_args.class, metaDataMap);
    }

    public ComputePenetration_args() {
    }

    public ComputePenetration_args(
      de.mosim.mmi.scene.MCollider colliderA,
      de.mosim.mmi.math.MTransform transformA,
      de.mosim.mmi.scene.MCollider colliderB,
      de.mosim.mmi.math.MTransform transformB)
    {
      this();
      this.colliderA = colliderA;
      this.transformA = transformA;
      this.colliderB = colliderB;
      this.transformB = transformB;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ComputePenetration_args(ComputePenetration_args other) {
      if (other.isSetColliderA()) {
        this.colliderA = new de.mosim.mmi.scene.MCollider(other.colliderA);
      }
      if (other.isSetTransformA()) {
        this.transformA = new de.mosim.mmi.math.MTransform(other.transformA);
      }
      if (other.isSetColliderB()) {
        this.colliderB = new de.mosim.mmi.scene.MCollider(other.colliderB);
      }
      if (other.isSetTransformB()) {
        this.transformB = new de.mosim.mmi.math.MTransform(other.transformB);
      }
    }

    public ComputePenetration_args deepCopy() {
      return new ComputePenetration_args(this);
    }

    @Override
    public void clear() {
      this.colliderA = null;
      this.transformA = null;
      this.colliderB = null;
      this.transformB = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.scene.MCollider getColliderA() {
      return this.colliderA;
    }

    public ComputePenetration_args setColliderA(@org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MCollider colliderA) {
      this.colliderA = colliderA;
      return this;
    }

    public void unsetColliderA() {
      this.colliderA = null;
    }

    /** Returns true if field colliderA is set (has been assigned a value) and false otherwise */
    public boolean isSetColliderA() {
      return this.colliderA != null;
    }

    public void setColliderAIsSet(boolean value) {
      if (!value) {
        this.colliderA = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MTransform getTransformA() {
      return this.transformA;
    }

    public ComputePenetration_args setTransformA(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform transformA) {
      this.transformA = transformA;
      return this;
    }

    public void unsetTransformA() {
      this.transformA = null;
    }

    /** Returns true if field transformA is set (has been assigned a value) and false otherwise */
    public boolean isSetTransformA() {
      return this.transformA != null;
    }

    public void setTransformAIsSet(boolean value) {
      if (!value) {
        this.transformA = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.scene.MCollider getColliderB() {
      return this.colliderB;
    }

    public ComputePenetration_args setColliderB(@org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MCollider colliderB) {
      this.colliderB = colliderB;
      return this;
    }

    public void unsetColliderB() {
      this.colliderB = null;
    }

    /** Returns true if field colliderB is set (has been assigned a value) and false otherwise */
    public boolean isSetColliderB() {
      return this.colliderB != null;
    }

    public void setColliderBIsSet(boolean value) {
      if (!value) {
        this.colliderB = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MTransform getTransformB() {
      return this.transformB;
    }

    public ComputePenetration_args setTransformB(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform transformB) {
      this.transformB = transformB;
      return this;
    }

    public void unsetTransformB() {
      this.transformB = null;
    }

    /** Returns true if field transformB is set (has been assigned a value) and false otherwise */
    public boolean isSetTransformB() {
      return this.transformB != null;
    }

    public void setTransformBIsSet(boolean value) {
      if (!value) {
        this.transformB = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COLLIDER_A:
        if (value == null) {
          unsetColliderA();
        } else {
          setColliderA((de.mosim.mmi.scene.MCollider)value);
        }
        break;

      case TRANSFORM_A:
        if (value == null) {
          unsetTransformA();
        } else {
          setTransformA((de.mosim.mmi.math.MTransform)value);
        }
        break;

      case COLLIDER_B:
        if (value == null) {
          unsetColliderB();
        } else {
          setColliderB((de.mosim.mmi.scene.MCollider)value);
        }
        break;

      case TRANSFORM_B:
        if (value == null) {
          unsetTransformB();
        } else {
          setTransformB((de.mosim.mmi.math.MTransform)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLIDER_A:
        return getColliderA();

      case TRANSFORM_A:
        return getTransformA();

      case COLLIDER_B:
        return getColliderB();

      case TRANSFORM_B:
        return getTransformB();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COLLIDER_A:
        return isSetColliderA();
      case TRANSFORM_A:
        return isSetTransformA();
      case COLLIDER_B:
        return isSetColliderB();
      case TRANSFORM_B:
        return isSetTransformB();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ComputePenetration_args)
        return this.equals((ComputePenetration_args)that);
      return false;
    }

    public boolean equals(ComputePenetration_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_colliderA = true && this.isSetColliderA();
      boolean that_present_colliderA = true && that.isSetColliderA();
      if (this_present_colliderA || that_present_colliderA) {
        if (!(this_present_colliderA && that_present_colliderA))
          return false;
        if (!this.colliderA.equals(that.colliderA))
          return false;
      }

      boolean this_present_transformA = true && this.isSetTransformA();
      boolean that_present_transformA = true && that.isSetTransformA();
      if (this_present_transformA || that_present_transformA) {
        if (!(this_present_transformA && that_present_transformA))
          return false;
        if (!this.transformA.equals(that.transformA))
          return false;
      }

      boolean this_present_colliderB = true && this.isSetColliderB();
      boolean that_present_colliderB = true && that.isSetColliderB();
      if (this_present_colliderB || that_present_colliderB) {
        if (!(this_present_colliderB && that_present_colliderB))
          return false;
        if (!this.colliderB.equals(that.colliderB))
          return false;
      }

      boolean this_present_transformB = true && this.isSetTransformB();
      boolean that_present_transformB = true && that.isSetTransformB();
      if (this_present_transformB || that_present_transformB) {
        if (!(this_present_transformB && that_present_transformB))
          return false;
        if (!this.transformB.equals(that.transformB))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetColliderA()) ? 131071 : 524287);
      if (isSetColliderA())
        hashCode = hashCode * 8191 + colliderA.hashCode();

      hashCode = hashCode * 8191 + ((isSetTransformA()) ? 131071 : 524287);
      if (isSetTransformA())
        hashCode = hashCode * 8191 + transformA.hashCode();

      hashCode = hashCode * 8191 + ((isSetColliderB()) ? 131071 : 524287);
      if (isSetColliderB())
        hashCode = hashCode * 8191 + colliderB.hashCode();

      hashCode = hashCode * 8191 + ((isSetTransformB()) ? 131071 : 524287);
      if (isSetTransformB())
        hashCode = hashCode * 8191 + transformB.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ComputePenetration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetColliderA()).compareTo(other.isSetColliderA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColliderA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colliderA, other.colliderA);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTransformA()).compareTo(other.isSetTransformA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransformA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transformA, other.transformA);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetColliderB()).compareTo(other.isSetColliderB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColliderB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colliderB, other.colliderB);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTransformB()).compareTo(other.isSetTransformB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransformB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transformB, other.transformB);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ComputePenetration_args(");
      boolean first = true;

      sb.append("colliderA:");
      if (this.colliderA == null) {
        sb.append("null");
      } else {
        sb.append(this.colliderA);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transformA:");
      if (this.transformA == null) {
        sb.append("null");
      } else {
        sb.append(this.transformA);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("colliderB:");
      if (this.colliderB == null) {
        sb.append("null");
      } else {
        sb.append(this.colliderB);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transformB:");
      if (this.transformB == null) {
        sb.append("null");
      } else {
        sb.append(this.transformB);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (colliderA != null) {
        colliderA.validate();
      }
      if (transformA != null) {
        transformA.validate();
      }
      if (colliderB != null) {
        colliderB.validate();
      }
      if (transformB != null) {
        transformB.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ComputePenetration_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ComputePenetration_argsStandardScheme getScheme() {
        return new ComputePenetration_argsStandardScheme();
      }
    }

    private static class ComputePenetration_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ComputePenetration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ComputePenetration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLIDER_A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.colliderA = new de.mosim.mmi.scene.MCollider();
                struct.colliderA.read(iprot);
                struct.setColliderAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TRANSFORM_A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transformA = new de.mosim.mmi.math.MTransform();
                struct.transformA.read(iprot);
                struct.setTransformAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLLIDER_B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.colliderB = new de.mosim.mmi.scene.MCollider();
                struct.colliderB.read(iprot);
                struct.setColliderBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TRANSFORM_B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transformB = new de.mosim.mmi.math.MTransform();
                struct.transformB.read(iprot);
                struct.setTransformBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ComputePenetration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.colliderA != null) {
          oprot.writeFieldBegin(COLLIDER_A_FIELD_DESC);
          struct.colliderA.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.transformA != null) {
          oprot.writeFieldBegin(TRANSFORM_A_FIELD_DESC);
          struct.transformA.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.colliderB != null) {
          oprot.writeFieldBegin(COLLIDER_B_FIELD_DESC);
          struct.colliderB.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.transformB != null) {
          oprot.writeFieldBegin(TRANSFORM_B_FIELD_DESC);
          struct.transformB.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ComputePenetration_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ComputePenetration_argsTupleScheme getScheme() {
        return new ComputePenetration_argsTupleScheme();
      }
    }

    private static class ComputePenetration_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ComputePenetration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ComputePenetration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetColliderA()) {
          optionals.set(0);
        }
        if (struct.isSetTransformA()) {
          optionals.set(1);
        }
        if (struct.isSetColliderB()) {
          optionals.set(2);
        }
        if (struct.isSetTransformB()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetColliderA()) {
          struct.colliderA.write(oprot);
        }
        if (struct.isSetTransformA()) {
          struct.transformA.write(oprot);
        }
        if (struct.isSetColliderB()) {
          struct.colliderB.write(oprot);
        }
        if (struct.isSetTransformB()) {
          struct.transformB.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ComputePenetration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.colliderA = new de.mosim.mmi.scene.MCollider();
          struct.colliderA.read(iprot);
          struct.setColliderAIsSet(true);
        }
        if (incoming.get(1)) {
          struct.transformA = new de.mosim.mmi.math.MTransform();
          struct.transformA.read(iprot);
          struct.setTransformAIsSet(true);
        }
        if (incoming.get(2)) {
          struct.colliderB = new de.mosim.mmi.scene.MCollider();
          struct.colliderB.read(iprot);
          struct.setColliderBIsSet(true);
        }
        if (incoming.get(3)) {
          struct.transformB = new de.mosim.mmi.math.MTransform();
          struct.transformB.read(iprot);
          struct.setTransformBIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ComputePenetration_result implements org.apache.thrift.TBase<ComputePenetration_result, ComputePenetration_result._Fields>, java.io.Serializable, Cloneable, Comparable<ComputePenetration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComputePenetration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ComputePenetration_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ComputePenetration_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MVector3.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComputePenetration_result.class, metaDataMap);
    }

    public ComputePenetration_result() {
    }

    public ComputePenetration_result(
      de.mosim.mmi.math.MVector3 success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ComputePenetration_result(ComputePenetration_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.math.MVector3(other.success);
      }
    }

    public ComputePenetration_result deepCopy() {
      return new ComputePenetration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MVector3 getSuccess() {
      return this.success;
    }

    public ComputePenetration_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.math.MVector3)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ComputePenetration_result)
        return this.equals((ComputePenetration_result)that);
      return false;
    }

    public boolean equals(ComputePenetration_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ComputePenetration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ComputePenetration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ComputePenetration_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ComputePenetration_resultStandardScheme getScheme() {
        return new ComputePenetration_resultStandardScheme();
      }
    }

    private static class ComputePenetration_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ComputePenetration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ComputePenetration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.math.MVector3();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ComputePenetration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ComputePenetration_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ComputePenetration_resultTupleScheme getScheme() {
        return new ComputePenetration_resultTupleScheme();
      }
    }

    private static class ComputePenetration_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ComputePenetration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ComputePenetration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ComputePenetration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.math.MVector3();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CausesCollision_args implements org.apache.thrift.TBase<CausesCollision_args, CausesCollision_args._Fields>, java.io.Serializable, Cloneable, Comparable<CausesCollision_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CausesCollision_args");

    private static final org.apache.thrift.protocol.TField COLLIDER_A_FIELD_DESC = new org.apache.thrift.protocol.TField("colliderA", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TRANSFORM_A_FIELD_DESC = new org.apache.thrift.protocol.TField("transformA", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField COLLIDER_B_FIELD_DESC = new org.apache.thrift.protocol.TField("colliderB", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TRANSFORM_B_FIELD_DESC = new org.apache.thrift.protocol.TField("transformB", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CausesCollision_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CausesCollision_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MCollider colliderA; // required
    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform transformA; // required
    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MCollider colliderB; // required
    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform transformB; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLIDER_A((short)1, "colliderA"),
      TRANSFORM_A((short)2, "transformA"),
      COLLIDER_B((short)3, "colliderB"),
      TRANSFORM_B((short)4, "transformB");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLIDER_A
            return COLLIDER_A;
          case 2: // TRANSFORM_A
            return TRANSFORM_A;
          case 3: // COLLIDER_B
            return COLLIDER_B;
          case 4: // TRANSFORM_B
            return TRANSFORM_B;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLIDER_A, new org.apache.thrift.meta_data.FieldMetaData("colliderA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.scene.MCollider.class)));
      tmpMap.put(_Fields.TRANSFORM_A, new org.apache.thrift.meta_data.FieldMetaData("transformA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MTransform.class)));
      tmpMap.put(_Fields.COLLIDER_B, new org.apache.thrift.meta_data.FieldMetaData("colliderB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.scene.MCollider.class)));
      tmpMap.put(_Fields.TRANSFORM_B, new org.apache.thrift.meta_data.FieldMetaData("transformB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MTransform.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CausesCollision_args.class, metaDataMap);
    }

    public CausesCollision_args() {
    }

    public CausesCollision_args(
      de.mosim.mmi.scene.MCollider colliderA,
      de.mosim.mmi.math.MTransform transformA,
      de.mosim.mmi.scene.MCollider colliderB,
      de.mosim.mmi.math.MTransform transformB)
    {
      this();
      this.colliderA = colliderA;
      this.transformA = transformA;
      this.colliderB = colliderB;
      this.transformB = transformB;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CausesCollision_args(CausesCollision_args other) {
      if (other.isSetColliderA()) {
        this.colliderA = new de.mosim.mmi.scene.MCollider(other.colliderA);
      }
      if (other.isSetTransformA()) {
        this.transformA = new de.mosim.mmi.math.MTransform(other.transformA);
      }
      if (other.isSetColliderB()) {
        this.colliderB = new de.mosim.mmi.scene.MCollider(other.colliderB);
      }
      if (other.isSetTransformB()) {
        this.transformB = new de.mosim.mmi.math.MTransform(other.transformB);
      }
    }

    public CausesCollision_args deepCopy() {
      return new CausesCollision_args(this);
    }

    @Override
    public void clear() {
      this.colliderA = null;
      this.transformA = null;
      this.colliderB = null;
      this.transformB = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.scene.MCollider getColliderA() {
      return this.colliderA;
    }

    public CausesCollision_args setColliderA(@org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MCollider colliderA) {
      this.colliderA = colliderA;
      return this;
    }

    public void unsetColliderA() {
      this.colliderA = null;
    }

    /** Returns true if field colliderA is set (has been assigned a value) and false otherwise */
    public boolean isSetColliderA() {
      return this.colliderA != null;
    }

    public void setColliderAIsSet(boolean value) {
      if (!value) {
        this.colliderA = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MTransform getTransformA() {
      return this.transformA;
    }

    public CausesCollision_args setTransformA(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform transformA) {
      this.transformA = transformA;
      return this;
    }

    public void unsetTransformA() {
      this.transformA = null;
    }

    /** Returns true if field transformA is set (has been assigned a value) and false otherwise */
    public boolean isSetTransformA() {
      return this.transformA != null;
    }

    public void setTransformAIsSet(boolean value) {
      if (!value) {
        this.transformA = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.scene.MCollider getColliderB() {
      return this.colliderB;
    }

    public CausesCollision_args setColliderB(@org.apache.thrift.annotation.Nullable de.mosim.mmi.scene.MCollider colliderB) {
      this.colliderB = colliderB;
      return this;
    }

    public void unsetColliderB() {
      this.colliderB = null;
    }

    /** Returns true if field colliderB is set (has been assigned a value) and false otherwise */
    public boolean isSetColliderB() {
      return this.colliderB != null;
    }

    public void setColliderBIsSet(boolean value) {
      if (!value) {
        this.colliderB = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MTransform getTransformB() {
      return this.transformB;
    }

    public CausesCollision_args setTransformB(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform transformB) {
      this.transformB = transformB;
      return this;
    }

    public void unsetTransformB() {
      this.transformB = null;
    }

    /** Returns true if field transformB is set (has been assigned a value) and false otherwise */
    public boolean isSetTransformB() {
      return this.transformB != null;
    }

    public void setTransformBIsSet(boolean value) {
      if (!value) {
        this.transformB = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COLLIDER_A:
        if (value == null) {
          unsetColliderA();
        } else {
          setColliderA((de.mosim.mmi.scene.MCollider)value);
        }
        break;

      case TRANSFORM_A:
        if (value == null) {
          unsetTransformA();
        } else {
          setTransformA((de.mosim.mmi.math.MTransform)value);
        }
        break;

      case COLLIDER_B:
        if (value == null) {
          unsetColliderB();
        } else {
          setColliderB((de.mosim.mmi.scene.MCollider)value);
        }
        break;

      case TRANSFORM_B:
        if (value == null) {
          unsetTransformB();
        } else {
          setTransformB((de.mosim.mmi.math.MTransform)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLIDER_A:
        return getColliderA();

      case TRANSFORM_A:
        return getTransformA();

      case COLLIDER_B:
        return getColliderB();

      case TRANSFORM_B:
        return getTransformB();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COLLIDER_A:
        return isSetColliderA();
      case TRANSFORM_A:
        return isSetTransformA();
      case COLLIDER_B:
        return isSetColliderB();
      case TRANSFORM_B:
        return isSetTransformB();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CausesCollision_args)
        return this.equals((CausesCollision_args)that);
      return false;
    }

    public boolean equals(CausesCollision_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_colliderA = true && this.isSetColliderA();
      boolean that_present_colliderA = true && that.isSetColliderA();
      if (this_present_colliderA || that_present_colliderA) {
        if (!(this_present_colliderA && that_present_colliderA))
          return false;
        if (!this.colliderA.equals(that.colliderA))
          return false;
      }

      boolean this_present_transformA = true && this.isSetTransformA();
      boolean that_present_transformA = true && that.isSetTransformA();
      if (this_present_transformA || that_present_transformA) {
        if (!(this_present_transformA && that_present_transformA))
          return false;
        if (!this.transformA.equals(that.transformA))
          return false;
      }

      boolean this_present_colliderB = true && this.isSetColliderB();
      boolean that_present_colliderB = true && that.isSetColliderB();
      if (this_present_colliderB || that_present_colliderB) {
        if (!(this_present_colliderB && that_present_colliderB))
          return false;
        if (!this.colliderB.equals(that.colliderB))
          return false;
      }

      boolean this_present_transformB = true && this.isSetTransformB();
      boolean that_present_transformB = true && that.isSetTransformB();
      if (this_present_transformB || that_present_transformB) {
        if (!(this_present_transformB && that_present_transformB))
          return false;
        if (!this.transformB.equals(that.transformB))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetColliderA()) ? 131071 : 524287);
      if (isSetColliderA())
        hashCode = hashCode * 8191 + colliderA.hashCode();

      hashCode = hashCode * 8191 + ((isSetTransformA()) ? 131071 : 524287);
      if (isSetTransformA())
        hashCode = hashCode * 8191 + transformA.hashCode();

      hashCode = hashCode * 8191 + ((isSetColliderB()) ? 131071 : 524287);
      if (isSetColliderB())
        hashCode = hashCode * 8191 + colliderB.hashCode();

      hashCode = hashCode * 8191 + ((isSetTransformB()) ? 131071 : 524287);
      if (isSetTransformB())
        hashCode = hashCode * 8191 + transformB.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CausesCollision_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetColliderA()).compareTo(other.isSetColliderA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColliderA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colliderA, other.colliderA);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTransformA()).compareTo(other.isSetTransformA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransformA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transformA, other.transformA);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetColliderB()).compareTo(other.isSetColliderB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColliderB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colliderB, other.colliderB);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTransformB()).compareTo(other.isSetTransformB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransformB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transformB, other.transformB);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CausesCollision_args(");
      boolean first = true;

      sb.append("colliderA:");
      if (this.colliderA == null) {
        sb.append("null");
      } else {
        sb.append(this.colliderA);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transformA:");
      if (this.transformA == null) {
        sb.append("null");
      } else {
        sb.append(this.transformA);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("colliderB:");
      if (this.colliderB == null) {
        sb.append("null");
      } else {
        sb.append(this.colliderB);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transformB:");
      if (this.transformB == null) {
        sb.append("null");
      } else {
        sb.append(this.transformB);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (colliderA != null) {
        colliderA.validate();
      }
      if (transformA != null) {
        transformA.validate();
      }
      if (colliderB != null) {
        colliderB.validate();
      }
      if (transformB != null) {
        transformB.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CausesCollision_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CausesCollision_argsStandardScheme getScheme() {
        return new CausesCollision_argsStandardScheme();
      }
    }

    private static class CausesCollision_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CausesCollision_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CausesCollision_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLIDER_A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.colliderA = new de.mosim.mmi.scene.MCollider();
                struct.colliderA.read(iprot);
                struct.setColliderAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TRANSFORM_A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transformA = new de.mosim.mmi.math.MTransform();
                struct.transformA.read(iprot);
                struct.setTransformAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLLIDER_B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.colliderB = new de.mosim.mmi.scene.MCollider();
                struct.colliderB.read(iprot);
                struct.setColliderBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TRANSFORM_B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transformB = new de.mosim.mmi.math.MTransform();
                struct.transformB.read(iprot);
                struct.setTransformBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CausesCollision_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.colliderA != null) {
          oprot.writeFieldBegin(COLLIDER_A_FIELD_DESC);
          struct.colliderA.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.transformA != null) {
          oprot.writeFieldBegin(TRANSFORM_A_FIELD_DESC);
          struct.transformA.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.colliderB != null) {
          oprot.writeFieldBegin(COLLIDER_B_FIELD_DESC);
          struct.colliderB.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.transformB != null) {
          oprot.writeFieldBegin(TRANSFORM_B_FIELD_DESC);
          struct.transformB.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CausesCollision_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CausesCollision_argsTupleScheme getScheme() {
        return new CausesCollision_argsTupleScheme();
      }
    }

    private static class CausesCollision_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CausesCollision_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CausesCollision_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetColliderA()) {
          optionals.set(0);
        }
        if (struct.isSetTransformA()) {
          optionals.set(1);
        }
        if (struct.isSetColliderB()) {
          optionals.set(2);
        }
        if (struct.isSetTransformB()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetColliderA()) {
          struct.colliderA.write(oprot);
        }
        if (struct.isSetTransformA()) {
          struct.transformA.write(oprot);
        }
        if (struct.isSetColliderB()) {
          struct.colliderB.write(oprot);
        }
        if (struct.isSetTransformB()) {
          struct.transformB.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CausesCollision_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.colliderA = new de.mosim.mmi.scene.MCollider();
          struct.colliderA.read(iprot);
          struct.setColliderAIsSet(true);
        }
        if (incoming.get(1)) {
          struct.transformA = new de.mosim.mmi.math.MTransform();
          struct.transformA.read(iprot);
          struct.setTransformAIsSet(true);
        }
        if (incoming.get(2)) {
          struct.colliderB = new de.mosim.mmi.scene.MCollider();
          struct.colliderB.read(iprot);
          struct.setColliderBIsSet(true);
        }
        if (incoming.get(3)) {
          struct.transformB = new de.mosim.mmi.math.MTransform();
          struct.transformB.read(iprot);
          struct.setTransformBIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CausesCollision_result implements org.apache.thrift.TBase<CausesCollision_result, CausesCollision_result._Fields>, java.io.Serializable, Cloneable, Comparable<CausesCollision_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CausesCollision_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CausesCollision_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CausesCollision_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CausesCollision_result.class, metaDataMap);
    }

    public CausesCollision_result() {
    }

    public CausesCollision_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CausesCollision_result(CausesCollision_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public CausesCollision_result deepCopy() {
      return new CausesCollision_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public CausesCollision_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CausesCollision_result)
        return this.equals((CausesCollision_result)that);
      return false;
    }

    public boolean equals(CausesCollision_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(CausesCollision_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CausesCollision_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CausesCollision_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CausesCollision_resultStandardScheme getScheme() {
        return new CausesCollision_resultStandardScheme();
      }
    }

    private static class CausesCollision_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CausesCollision_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CausesCollision_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CausesCollision_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CausesCollision_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CausesCollision_resultTupleScheme getScheme() {
        return new CausesCollision_resultTupleScheme();
      }
    }

    private static class CausesCollision_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CausesCollision_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CausesCollision_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CausesCollision_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
