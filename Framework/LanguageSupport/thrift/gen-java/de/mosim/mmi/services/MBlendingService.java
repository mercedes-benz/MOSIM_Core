/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.services;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MBlendingService {

  public interface Iface extends MMIServiceBase.Iface {

    public de.mosim.mmi.core.MBoolResponse SetBlendingMask(java.util.Map<de.mosim.mmi.avatar.MJointType,java.lang.Double> mask, java.lang.String avatarID) throws org.apache.thrift.TException;

    public de.mosim.mmi.avatar.MAvatarPostureValues Blend(de.mosim.mmi.avatar.MAvatarPostureValues startPosture, de.mosim.mmi.avatar.MAvatarPostureValues targetPosture, double weight) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends MMIServiceBase .AsyncIface {

    public void SetBlendingMask(java.util.Map<de.mosim.mmi.avatar.MJointType,java.lang.Double> mask, java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException;

    public void Blend(de.mosim.mmi.avatar.MAvatarPostureValues startPosture, de.mosim.mmi.avatar.MAvatarPostureValues targetPosture, double weight, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.avatar.MAvatarPostureValues> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends MMIServiceBase.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public de.mosim.mmi.core.MBoolResponse SetBlendingMask(java.util.Map<de.mosim.mmi.avatar.MJointType,java.lang.Double> mask, java.lang.String avatarID) throws org.apache.thrift.TException
    {
      send_SetBlendingMask(mask, avatarID);
      return recv_SetBlendingMask();
    }

    public void send_SetBlendingMask(java.util.Map<de.mosim.mmi.avatar.MJointType,java.lang.Double> mask, java.lang.String avatarID) throws org.apache.thrift.TException
    {
      SetBlendingMask_args args = new SetBlendingMask_args();
      args.setMask(mask);
      args.setAvatarID(avatarID);
      sendBase("SetBlendingMask", args);
    }

    public de.mosim.mmi.core.MBoolResponse recv_SetBlendingMask() throws org.apache.thrift.TException
    {
      SetBlendingMask_result result = new SetBlendingMask_result();
      receiveBase(result, "SetBlendingMask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetBlendingMask failed: unknown result");
    }

    public de.mosim.mmi.avatar.MAvatarPostureValues Blend(de.mosim.mmi.avatar.MAvatarPostureValues startPosture, de.mosim.mmi.avatar.MAvatarPostureValues targetPosture, double weight) throws org.apache.thrift.TException
    {
      send_Blend(startPosture, targetPosture, weight);
      return recv_Blend();
    }

    public void send_Blend(de.mosim.mmi.avatar.MAvatarPostureValues startPosture, de.mosim.mmi.avatar.MAvatarPostureValues targetPosture, double weight) throws org.apache.thrift.TException
    {
      Blend_args args = new Blend_args();
      args.setStartPosture(startPosture);
      args.setTargetPosture(targetPosture);
      args.setWeight(weight);
      sendBase("Blend", args);
    }

    public de.mosim.mmi.avatar.MAvatarPostureValues recv_Blend() throws org.apache.thrift.TException
    {
      Blend_result result = new Blend_result();
      receiveBase(result, "Blend");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Blend failed: unknown result");
    }

  }
  public static class AsyncClient extends MMIServiceBase.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void SetBlendingMask(java.util.Map<de.mosim.mmi.avatar.MJointType,java.lang.Double> mask, java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetBlendingMask_call method_call = new SetBlendingMask_call(mask, avatarID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetBlendingMask_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.core.MBoolResponse> {
      private java.util.Map<de.mosim.mmi.avatar.MJointType,java.lang.Double> mask;
      private java.lang.String avatarID;
      public SetBlendingMask_call(java.util.Map<de.mosim.mmi.avatar.MJointType,java.lang.Double> mask, java.lang.String avatarID, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mask = mask;
        this.avatarID = avatarID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetBlendingMask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetBlendingMask_args args = new SetBlendingMask_args();
        args.setMask(mask);
        args.setAvatarID(avatarID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.core.MBoolResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetBlendingMask();
      }
    }

    public void Blend(de.mosim.mmi.avatar.MAvatarPostureValues startPosture, de.mosim.mmi.avatar.MAvatarPostureValues targetPosture, double weight, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.avatar.MAvatarPostureValues> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Blend_call method_call = new Blend_call(startPosture, targetPosture, weight, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Blend_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.avatar.MAvatarPostureValues> {
      private de.mosim.mmi.avatar.MAvatarPostureValues startPosture;
      private de.mosim.mmi.avatar.MAvatarPostureValues targetPosture;
      private double weight;
      public Blend_call(de.mosim.mmi.avatar.MAvatarPostureValues startPosture, de.mosim.mmi.avatar.MAvatarPostureValues targetPosture, double weight, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.avatar.MAvatarPostureValues> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startPosture = startPosture;
        this.targetPosture = targetPosture;
        this.weight = weight;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Blend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Blend_args args = new Blend_args();
        args.setStartPosture(startPosture);
        args.setTargetPosture(targetPosture);
        args.setWeight(weight);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.avatar.MAvatarPostureValues getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Blend();
      }
    }

  }

  public static class Processor<I extends Iface> extends MMIServiceBase.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("SetBlendingMask", new SetBlendingMask());
      processMap.put("Blend", new Blend());
      return processMap;
    }

    public static class SetBlendingMask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetBlendingMask_args> {
      public SetBlendingMask() {
        super("SetBlendingMask");
      }

      public SetBlendingMask_args getEmptyArgsInstance() {
        return new SetBlendingMask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public SetBlendingMask_result getResult(I iface, SetBlendingMask_args args) throws org.apache.thrift.TException {
        SetBlendingMask_result result = new SetBlendingMask_result();
        result.success = iface.SetBlendingMask(args.mask, args.avatarID);
        return result;
      }
    }

    public static class Blend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Blend_args> {
      public Blend() {
        super("Blend");
      }

      public Blend_args getEmptyArgsInstance() {
        return new Blend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public Blend_result getResult(I iface, Blend_args args) throws org.apache.thrift.TException {
        Blend_result result = new Blend_result();
        result.success = iface.Blend(args.startPosture, args.targetPosture, args.weight);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends MMIServiceBase.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("SetBlendingMask", new SetBlendingMask());
      processMap.put("Blend", new Blend());
      return processMap;
    }

    public static class SetBlendingMask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SetBlendingMask_args, de.mosim.mmi.core.MBoolResponse> {
      public SetBlendingMask() {
        super("SetBlendingMask");
      }

      public SetBlendingMask_args getEmptyArgsInstance() {
        return new SetBlendingMask_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse>() { 
          public void onComplete(de.mosim.mmi.core.MBoolResponse o) {
            SetBlendingMask_result result = new SetBlendingMask_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            SetBlendingMask_result result = new SetBlendingMask_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, SetBlendingMask_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.core.MBoolResponse> resultHandler) throws org.apache.thrift.TException {
        iface.SetBlendingMask(args.mask, args.avatarID,resultHandler);
      }
    }

    public static class Blend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Blend_args, de.mosim.mmi.avatar.MAvatarPostureValues> {
      public Blend() {
        super("Blend");
      }

      public Blend_args getEmptyArgsInstance() {
        return new Blend_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.avatar.MAvatarPostureValues> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.avatar.MAvatarPostureValues>() { 
          public void onComplete(de.mosim.mmi.avatar.MAvatarPostureValues o) {
            Blend_result result = new Blend_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Blend_result result = new Blend_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Blend_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.avatar.MAvatarPostureValues> resultHandler) throws org.apache.thrift.TException {
        iface.Blend(args.startPosture, args.targetPosture, args.weight,resultHandler);
      }
    }

  }

  public static class SetBlendingMask_args implements org.apache.thrift.TBase<SetBlendingMask_args, SetBlendingMask_args._Fields>, java.io.Serializable, Cloneable, Comparable<SetBlendingMask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetBlendingMask_args");

    private static final org.apache.thrift.protocol.TField MASK_FIELD_DESC = new org.apache.thrift.protocol.TField("mask", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField AVATAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarID", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SetBlendingMask_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SetBlendingMask_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<de.mosim.mmi.avatar.MJointType,java.lang.Double> mask; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String avatarID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASK((short)1, "mask"),
      AVATAR_ID((short)2, "avatarID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASK
            return MASK;
          case 2: // AVATAR_ID
            return AVATAR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASK, new org.apache.thrift.meta_data.FieldMetaData("mask", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, de.mosim.mmi.avatar.MJointType.class), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.AVATAR_ID, new org.apache.thrift.meta_data.FieldMetaData("avatarID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetBlendingMask_args.class, metaDataMap);
    }

    public SetBlendingMask_args() {
    }

    public SetBlendingMask_args(
      java.util.Map<de.mosim.mmi.avatar.MJointType,java.lang.Double> mask,
      java.lang.String avatarID)
    {
      this();
      this.mask = mask;
      this.avatarID = avatarID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetBlendingMask_args(SetBlendingMask_args other) {
      if (other.isSetMask()) {
        java.util.Map<de.mosim.mmi.avatar.MJointType,java.lang.Double> __this__mask = new java.util.EnumMap<de.mosim.mmi.avatar.MJointType,java.lang.Double>(de.mosim.mmi.avatar.MJointType.class);
        for (java.util.Map.Entry<de.mosim.mmi.avatar.MJointType, java.lang.Double> other_element : other.mask.entrySet()) {

          de.mosim.mmi.avatar.MJointType other_element_key = other_element.getKey();
          java.lang.Double other_element_value = other_element.getValue();

          de.mosim.mmi.avatar.MJointType __this__mask_copy_key = other_element_key;

          java.lang.Double __this__mask_copy_value = other_element_value;

          __this__mask.put(__this__mask_copy_key, __this__mask_copy_value);
        }
        this.mask = __this__mask;
      }
      if (other.isSetAvatarID()) {
        this.avatarID = other.avatarID;
      }
    }

    public SetBlendingMask_args deepCopy() {
      return new SetBlendingMask_args(this);
    }

    @Override
    public void clear() {
      this.mask = null;
      this.avatarID = null;
    }

    public int getMaskSize() {
      return (this.mask == null) ? 0 : this.mask.size();
    }

    public void putToMask(de.mosim.mmi.avatar.MJointType key, double val) {
      if (this.mask == null) {
        this.mask = new java.util.EnumMap<de.mosim.mmi.avatar.MJointType,java.lang.Double>(de.mosim.mmi.avatar.MJointType.class);
      }
      this.mask.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<de.mosim.mmi.avatar.MJointType,java.lang.Double> getMask() {
      return this.mask;
    }

    public SetBlendingMask_args setMask(@org.apache.thrift.annotation.Nullable java.util.Map<de.mosim.mmi.avatar.MJointType,java.lang.Double> mask) {
      this.mask = mask;
      return this;
    }

    public void unsetMask() {
      this.mask = null;
    }

    /** Returns true if field mask is set (has been assigned a value) and false otherwise */
    public boolean isSetMask() {
      return this.mask != null;
    }

    public void setMaskIsSet(boolean value) {
      if (!value) {
        this.mask = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAvatarID() {
      return this.avatarID;
    }

    public SetBlendingMask_args setAvatarID(@org.apache.thrift.annotation.Nullable java.lang.String avatarID) {
      this.avatarID = avatarID;
      return this;
    }

    public void unsetAvatarID() {
      this.avatarID = null;
    }

    /** Returns true if field avatarID is set (has been assigned a value) and false otherwise */
    public boolean isSetAvatarID() {
      return this.avatarID != null;
    }

    public void setAvatarIDIsSet(boolean value) {
      if (!value) {
        this.avatarID = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MASK:
        if (value == null) {
          unsetMask();
        } else {
          setMask((java.util.Map<de.mosim.mmi.avatar.MJointType,java.lang.Double>)value);
        }
        break;

      case AVATAR_ID:
        if (value == null) {
          unsetAvatarID();
        } else {
          setAvatarID((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASK:
        return getMask();

      case AVATAR_ID:
        return getAvatarID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASK:
        return isSetMask();
      case AVATAR_ID:
        return isSetAvatarID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof SetBlendingMask_args)
        return this.equals((SetBlendingMask_args)that);
      return false;
    }

    public boolean equals(SetBlendingMask_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mask = true && this.isSetMask();
      boolean that_present_mask = true && that.isSetMask();
      if (this_present_mask || that_present_mask) {
        if (!(this_present_mask && that_present_mask))
          return false;
        if (!this.mask.equals(that.mask))
          return false;
      }

      boolean this_present_avatarID = true && this.isSetAvatarID();
      boolean that_present_avatarID = true && that.isSetAvatarID();
      if (this_present_avatarID || that_present_avatarID) {
        if (!(this_present_avatarID && that_present_avatarID))
          return false;
        if (!this.avatarID.equals(that.avatarID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMask()) ? 131071 : 524287);
      if (isSetMask())
        hashCode = hashCode * 8191 + mask.hashCode();

      hashCode = hashCode * 8191 + ((isSetAvatarID()) ? 131071 : 524287);
      if (isSetAvatarID())
        hashCode = hashCode * 8191 + avatarID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(SetBlendingMask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMask()).compareTo(other.isSetMask());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMask()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mask, other.mask);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAvatarID()).compareTo(other.isSetAvatarID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvatarID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarID, other.avatarID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("SetBlendingMask_args(");
      boolean first = true;

      sb.append("mask:");
      if (this.mask == null) {
        sb.append("null");
      } else {
        sb.append(this.mask);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("avatarID:");
      if (this.avatarID == null) {
        sb.append("null");
      } else {
        sb.append(this.avatarID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetBlendingMask_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SetBlendingMask_argsStandardScheme getScheme() {
        return new SetBlendingMask_argsStandardScheme();
      }
    }

    private static class SetBlendingMask_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<SetBlendingMask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetBlendingMask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASK
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map206 = iprot.readMapBegin();
                  struct.mask = new java.util.EnumMap<de.mosim.mmi.avatar.MJointType,java.lang.Double>(de.mosim.mmi.avatar.MJointType.class);
                  @org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MJointType _key207;
                  double _val208;
                  for (int _i209 = 0; _i209 < _map206.size; ++_i209)
                  {
                    _key207 = de.mosim.mmi.avatar.MJointType.findByValue(iprot.readI32());
                    _val208 = iprot.readDouble();
                    if (_key207 != null)
                    {
                      struct.mask.put(_key207, _val208);
                    }
                  }
                  iprot.readMapEnd();
                }
                struct.setMaskIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AVATAR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.avatarID = iprot.readString();
                struct.setAvatarIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetBlendingMask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mask != null) {
          oprot.writeFieldBegin(MASK_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.mask.size()));
            for (java.util.Map.Entry<de.mosim.mmi.avatar.MJointType, java.lang.Double> _iter210 : struct.mask.entrySet())
            {
              oprot.writeI32(_iter210.getKey().getValue());
              oprot.writeDouble(_iter210.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.avatarID != null) {
          oprot.writeFieldBegin(AVATAR_ID_FIELD_DESC);
          oprot.writeString(struct.avatarID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetBlendingMask_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SetBlendingMask_argsTupleScheme getScheme() {
        return new SetBlendingMask_argsTupleScheme();
      }
    }

    private static class SetBlendingMask_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<SetBlendingMask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetBlendingMask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMask()) {
          optionals.set(0);
        }
        if (struct.isSetAvatarID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMask()) {
          {
            oprot.writeI32(struct.mask.size());
            for (java.util.Map.Entry<de.mosim.mmi.avatar.MJointType, java.lang.Double> _iter211 : struct.mask.entrySet())
            {
              oprot.writeI32(_iter211.getKey().getValue());
              oprot.writeDouble(_iter211.getValue());
            }
          }
        }
        if (struct.isSetAvatarID()) {
          oprot.writeString(struct.avatarID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetBlendingMask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map212 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.mask = new java.util.EnumMap<de.mosim.mmi.avatar.MJointType,java.lang.Double>(de.mosim.mmi.avatar.MJointType.class);
            @org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MJointType _key213;
            double _val214;
            for (int _i215 = 0; _i215 < _map212.size; ++_i215)
            {
              _key213 = de.mosim.mmi.avatar.MJointType.findByValue(iprot.readI32());
              _val214 = iprot.readDouble();
              if (_key213 != null)
              {
                struct.mask.put(_key213, _val214);
              }
            }
          }
          struct.setMaskIsSet(true);
        }
        if (incoming.get(1)) {
          struct.avatarID = iprot.readString();
          struct.setAvatarIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class SetBlendingMask_result implements org.apache.thrift.TBase<SetBlendingMask_result, SetBlendingMask_result._Fields>, java.io.Serializable, Cloneable, Comparable<SetBlendingMask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetBlendingMask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SetBlendingMask_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SetBlendingMask_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.core.MBoolResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetBlendingMask_result.class, metaDataMap);
    }

    public SetBlendingMask_result() {
    }

    public SetBlendingMask_result(
      de.mosim.mmi.core.MBoolResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetBlendingMask_result(SetBlendingMask_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.core.MBoolResponse(other.success);
      }
    }

    public SetBlendingMask_result deepCopy() {
      return new SetBlendingMask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.core.MBoolResponse getSuccess() {
      return this.success;
    }

    public SetBlendingMask_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.core.MBoolResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.core.MBoolResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof SetBlendingMask_result)
        return this.equals((SetBlendingMask_result)that);
      return false;
    }

    public boolean equals(SetBlendingMask_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(SetBlendingMask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("SetBlendingMask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetBlendingMask_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SetBlendingMask_resultStandardScheme getScheme() {
        return new SetBlendingMask_resultStandardScheme();
      }
    }

    private static class SetBlendingMask_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<SetBlendingMask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetBlendingMask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.core.MBoolResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetBlendingMask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetBlendingMask_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SetBlendingMask_resultTupleScheme getScheme() {
        return new SetBlendingMask_resultTupleScheme();
      }
    }

    private static class SetBlendingMask_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<SetBlendingMask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetBlendingMask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetBlendingMask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.core.MBoolResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Blend_args implements org.apache.thrift.TBase<Blend_args, Blend_args._Fields>, java.io.Serializable, Cloneable, Comparable<Blend_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Blend_args");

    private static final org.apache.thrift.protocol.TField START_POSTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("startPosture", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TARGET_POSTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("targetPosture", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Blend_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Blend_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MAvatarPostureValues startPosture; // required
    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MAvatarPostureValues targetPosture; // required
    public double weight; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_POSTURE((short)1, "startPosture"),
      TARGET_POSTURE((short)2, "targetPosture"),
      WEIGHT((short)3, "weight");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_POSTURE
            return START_POSTURE;
          case 2: // TARGET_POSTURE
            return TARGET_POSTURE;
          case 3: // WEIGHT
            return WEIGHT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEIGHT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_POSTURE, new org.apache.thrift.meta_data.FieldMetaData("startPosture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.avatar.MAvatarPostureValues.class)));
      tmpMap.put(_Fields.TARGET_POSTURE, new org.apache.thrift.meta_data.FieldMetaData("targetPosture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.avatar.MAvatarPostureValues.class)));
      tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Blend_args.class, metaDataMap);
    }

    public Blend_args() {
    }

    public Blend_args(
      de.mosim.mmi.avatar.MAvatarPostureValues startPosture,
      de.mosim.mmi.avatar.MAvatarPostureValues targetPosture,
      double weight)
    {
      this();
      this.startPosture = startPosture;
      this.targetPosture = targetPosture;
      this.weight = weight;
      setWeightIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Blend_args(Blend_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetStartPosture()) {
        this.startPosture = new de.mosim.mmi.avatar.MAvatarPostureValues(other.startPosture);
      }
      if (other.isSetTargetPosture()) {
        this.targetPosture = new de.mosim.mmi.avatar.MAvatarPostureValues(other.targetPosture);
      }
      this.weight = other.weight;
    }

    public Blend_args deepCopy() {
      return new Blend_args(this);
    }

    @Override
    public void clear() {
      this.startPosture = null;
      this.targetPosture = null;
      setWeightIsSet(false);
      this.weight = 0.0;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.avatar.MAvatarPostureValues getStartPosture() {
      return this.startPosture;
    }

    public Blend_args setStartPosture(@org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MAvatarPostureValues startPosture) {
      this.startPosture = startPosture;
      return this;
    }

    public void unsetStartPosture() {
      this.startPosture = null;
    }

    /** Returns true if field startPosture is set (has been assigned a value) and false otherwise */
    public boolean isSetStartPosture() {
      return this.startPosture != null;
    }

    public void setStartPostureIsSet(boolean value) {
      if (!value) {
        this.startPosture = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.avatar.MAvatarPostureValues getTargetPosture() {
      return this.targetPosture;
    }

    public Blend_args setTargetPosture(@org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MAvatarPostureValues targetPosture) {
      this.targetPosture = targetPosture;
      return this;
    }

    public void unsetTargetPosture() {
      this.targetPosture = null;
    }

    /** Returns true if field targetPosture is set (has been assigned a value) and false otherwise */
    public boolean isSetTargetPosture() {
      return this.targetPosture != null;
    }

    public void setTargetPostureIsSet(boolean value) {
      if (!value) {
        this.targetPosture = null;
      }
    }

    public double getWeight() {
      return this.weight;
    }

    public Blend_args setWeight(double weight) {
      this.weight = weight;
      setWeightIsSet(true);
      return this;
    }

    public void unsetWeight() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    /** Returns true if field weight is set (has been assigned a value) and false otherwise */
    public boolean isSetWeight() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    public void setWeightIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case START_POSTURE:
        if (value == null) {
          unsetStartPosture();
        } else {
          setStartPosture((de.mosim.mmi.avatar.MAvatarPostureValues)value);
        }
        break;

      case TARGET_POSTURE:
        if (value == null) {
          unsetTargetPosture();
        } else {
          setTargetPosture((de.mosim.mmi.avatar.MAvatarPostureValues)value);
        }
        break;

      case WEIGHT:
        if (value == null) {
          unsetWeight();
        } else {
          setWeight((java.lang.Double)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case START_POSTURE:
        return getStartPosture();

      case TARGET_POSTURE:
        return getTargetPosture();

      case WEIGHT:
        return getWeight();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case START_POSTURE:
        return isSetStartPosture();
      case TARGET_POSTURE:
        return isSetTargetPosture();
      case WEIGHT:
        return isSetWeight();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Blend_args)
        return this.equals((Blend_args)that);
      return false;
    }

    public boolean equals(Blend_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_startPosture = true && this.isSetStartPosture();
      boolean that_present_startPosture = true && that.isSetStartPosture();
      if (this_present_startPosture || that_present_startPosture) {
        if (!(this_present_startPosture && that_present_startPosture))
          return false;
        if (!this.startPosture.equals(that.startPosture))
          return false;
      }

      boolean this_present_targetPosture = true && this.isSetTargetPosture();
      boolean that_present_targetPosture = true && that.isSetTargetPosture();
      if (this_present_targetPosture || that_present_targetPosture) {
        if (!(this_present_targetPosture && that_present_targetPosture))
          return false;
        if (!this.targetPosture.equals(that.targetPosture))
          return false;
      }

      boolean this_present_weight = true;
      boolean that_present_weight = true;
      if (this_present_weight || that_present_weight) {
        if (!(this_present_weight && that_present_weight))
          return false;
        if (this.weight != that.weight)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStartPosture()) ? 131071 : 524287);
      if (isSetStartPosture())
        hashCode = hashCode * 8191 + startPosture.hashCode();

      hashCode = hashCode * 8191 + ((isSetTargetPosture()) ? 131071 : 524287);
      if (isSetTargetPosture())
        hashCode = hashCode * 8191 + targetPosture.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(weight);

      return hashCode;
    }

    @Override
    public int compareTo(Blend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetStartPosture()).compareTo(other.isSetStartPosture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartPosture()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startPosture, other.startPosture);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTargetPosture()).compareTo(other.isSetTargetPosture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTargetPosture()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetPosture, other.targetPosture);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Blend_args(");
      boolean first = true;

      sb.append("startPosture:");
      if (this.startPosture == null) {
        sb.append("null");
      } else {
        sb.append(this.startPosture);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("targetPosture:");
      if (this.targetPosture == null) {
        sb.append("null");
      } else {
        sb.append(this.targetPosture);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("weight:");
      sb.append(this.weight);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (startPosture != null) {
        startPosture.validate();
      }
      if (targetPosture != null) {
        targetPosture.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Blend_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Blend_argsStandardScheme getScheme() {
        return new Blend_argsStandardScheme();
      }
    }

    private static class Blend_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Blend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Blend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_POSTURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.startPosture = new de.mosim.mmi.avatar.MAvatarPostureValues();
                struct.startPosture.read(iprot);
                struct.setStartPostureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TARGET_POSTURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.targetPosture = new de.mosim.mmi.avatar.MAvatarPostureValues();
                struct.targetPosture.read(iprot);
                struct.setTargetPostureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WEIGHT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.weight = iprot.readDouble();
                struct.setWeightIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Blend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.startPosture != null) {
          oprot.writeFieldBegin(START_POSTURE_FIELD_DESC);
          struct.startPosture.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.targetPosture != null) {
          oprot.writeFieldBegin(TARGET_POSTURE_FIELD_DESC);
          struct.targetPosture.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
        oprot.writeDouble(struct.weight);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Blend_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Blend_argsTupleScheme getScheme() {
        return new Blend_argsTupleScheme();
      }
    }

    private static class Blend_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Blend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Blend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStartPosture()) {
          optionals.set(0);
        }
        if (struct.isSetTargetPosture()) {
          optionals.set(1);
        }
        if (struct.isSetWeight()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStartPosture()) {
          struct.startPosture.write(oprot);
        }
        if (struct.isSetTargetPosture()) {
          struct.targetPosture.write(oprot);
        }
        if (struct.isSetWeight()) {
          oprot.writeDouble(struct.weight);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Blend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.startPosture = new de.mosim.mmi.avatar.MAvatarPostureValues();
          struct.startPosture.read(iprot);
          struct.setStartPostureIsSet(true);
        }
        if (incoming.get(1)) {
          struct.targetPosture = new de.mosim.mmi.avatar.MAvatarPostureValues();
          struct.targetPosture.read(iprot);
          struct.setTargetPostureIsSet(true);
        }
        if (incoming.get(2)) {
          struct.weight = iprot.readDouble();
          struct.setWeightIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Blend_result implements org.apache.thrift.TBase<Blend_result, Blend_result._Fields>, java.io.Serializable, Cloneable, Comparable<Blend_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Blend_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Blend_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Blend_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MAvatarPostureValues success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.avatar.MAvatarPostureValues.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Blend_result.class, metaDataMap);
    }

    public Blend_result() {
    }

    public Blend_result(
      de.mosim.mmi.avatar.MAvatarPostureValues success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Blend_result(Blend_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.avatar.MAvatarPostureValues(other.success);
      }
    }

    public Blend_result deepCopy() {
      return new Blend_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.avatar.MAvatarPostureValues getSuccess() {
      return this.success;
    }

    public Blend_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MAvatarPostureValues success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.avatar.MAvatarPostureValues)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Blend_result)
        return this.equals((Blend_result)that);
      return false;
    }

    public boolean equals(Blend_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Blend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Blend_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Blend_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Blend_resultStandardScheme getScheme() {
        return new Blend_resultStandardScheme();
      }
    }

    private static class Blend_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Blend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Blend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.avatar.MAvatarPostureValues();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Blend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Blend_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Blend_resultTupleScheme getScheme() {
        return new Blend_resultTupleScheme();
      }
    }

    private static class Blend_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Blend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Blend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Blend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.avatar.MAvatarPostureValues();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
