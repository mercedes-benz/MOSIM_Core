/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.services;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MCoordinateSystemMapper {

  public interface Iface extends MMIServiceBase.Iface {

    public de.mosim.mmi.math.MTransform TransformToMMI_L(de.mosim.mmi.math.MTransform transform, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException;

    public de.mosim.mmi.math.MTransform TransformToMMI(de.mosim.mmi.math.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException;

    public de.mosim.mmi.math.MTransform TransformFromMMI_L(de.mosim.mmi.math.MTransform transform, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException;

    public de.mosim.mmi.math.MTransform TransformFromMMI(de.mosim.mmi.math.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException;

    public de.mosim.mmi.math.MQuaternion QuaternionToMMI_L(de.mosim.mmi.math.MQuaternion quat, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException;

    public de.mosim.mmi.math.MQuaternion QuaternionToMMI(de.mosim.mmi.math.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException;

    public de.mosim.mmi.math.MQuaternion QuaternionFromMMI_L(de.mosim.mmi.math.MQuaternion quat, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException;

    public de.mosim.mmi.math.MQuaternion QuaternionFromMMI(de.mosim.mmi.math.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException;

    public de.mosim.mmi.math.MVector3 VectorToMMI_L(de.mosim.mmi.math.MVector3 quat, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException;

    public de.mosim.mmi.math.MVector3 VectorToMMI(de.mosim.mmi.math.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException;

    public de.mosim.mmi.math.MVector3 VectorFromMMI_L(de.mosim.mmi.math.MVector3 quat, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException;

    public de.mosim.mmi.math.MVector3 VectorFromMMI(de.mosim.mmi.math.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends MMIServiceBase .AsyncIface {

    public void TransformToMMI_L(de.mosim.mmi.math.MTransform transform, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> resultHandler) throws org.apache.thrift.TException;

    public void TransformToMMI(de.mosim.mmi.math.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> resultHandler) throws org.apache.thrift.TException;

    public void TransformFromMMI_L(de.mosim.mmi.math.MTransform transform, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> resultHandler) throws org.apache.thrift.TException;

    public void TransformFromMMI(de.mosim.mmi.math.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> resultHandler) throws org.apache.thrift.TException;

    public void QuaternionToMMI_L(de.mosim.mmi.math.MQuaternion quat, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> resultHandler) throws org.apache.thrift.TException;

    public void QuaternionToMMI(de.mosim.mmi.math.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> resultHandler) throws org.apache.thrift.TException;

    public void QuaternionFromMMI_L(de.mosim.mmi.math.MQuaternion quat, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> resultHandler) throws org.apache.thrift.TException;

    public void QuaternionFromMMI(de.mosim.mmi.math.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> resultHandler) throws org.apache.thrift.TException;

    public void VectorToMMI_L(de.mosim.mmi.math.MVector3 quat, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler) throws org.apache.thrift.TException;

    public void VectorToMMI(de.mosim.mmi.math.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler) throws org.apache.thrift.TException;

    public void VectorFromMMI_L(de.mosim.mmi.math.MVector3 quat, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler) throws org.apache.thrift.TException;

    public void VectorFromMMI(de.mosim.mmi.math.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends MMIServiceBase.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public de.mosim.mmi.math.MTransform TransformToMMI_L(de.mosim.mmi.math.MTransform transform, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException
    {
      send_TransformToMMI_L(transform, coordinateSystem);
      return recv_TransformToMMI_L();
    }

    public void send_TransformToMMI_L(de.mosim.mmi.math.MTransform transform, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException
    {
      TransformToMMI_L_args args = new TransformToMMI_L_args();
      args.setTransform(transform);
      args.setCoordinateSystem(coordinateSystem);
      sendBase("TransformToMMI_L", args);
    }

    public de.mosim.mmi.math.MTransform recv_TransformToMMI_L() throws org.apache.thrift.TException
    {
      TransformToMMI_L_result result = new TransformToMMI_L_result();
      receiveBase(result, "TransformToMMI_L");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "TransformToMMI_L failed: unknown result");
    }

    public de.mosim.mmi.math.MTransform TransformToMMI(de.mosim.mmi.math.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException
    {
      send_TransformToMMI(transform, firstAxis, secondAxis, thirdAxis);
      return recv_TransformToMMI();
    }

    public void send_TransformToMMI(de.mosim.mmi.math.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException
    {
      TransformToMMI_args args = new TransformToMMI_args();
      args.setTransform(transform);
      args.setFirstAxis(firstAxis);
      args.setSecondAxis(secondAxis);
      args.setThirdAxis(thirdAxis);
      sendBase("TransformToMMI", args);
    }

    public de.mosim.mmi.math.MTransform recv_TransformToMMI() throws org.apache.thrift.TException
    {
      TransformToMMI_result result = new TransformToMMI_result();
      receiveBase(result, "TransformToMMI");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "TransformToMMI failed: unknown result");
    }

    public de.mosim.mmi.math.MTransform TransformFromMMI_L(de.mosim.mmi.math.MTransform transform, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException
    {
      send_TransformFromMMI_L(transform, coordinateSystem);
      return recv_TransformFromMMI_L();
    }

    public void send_TransformFromMMI_L(de.mosim.mmi.math.MTransform transform, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException
    {
      TransformFromMMI_L_args args = new TransformFromMMI_L_args();
      args.setTransform(transform);
      args.setCoordinateSystem(coordinateSystem);
      sendBase("TransformFromMMI_L", args);
    }

    public de.mosim.mmi.math.MTransform recv_TransformFromMMI_L() throws org.apache.thrift.TException
    {
      TransformFromMMI_L_result result = new TransformFromMMI_L_result();
      receiveBase(result, "TransformFromMMI_L");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "TransformFromMMI_L failed: unknown result");
    }

    public de.mosim.mmi.math.MTransform TransformFromMMI(de.mosim.mmi.math.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException
    {
      send_TransformFromMMI(transform, firstAxis, secondAxis, thirdAxis);
      return recv_TransformFromMMI();
    }

    public void send_TransformFromMMI(de.mosim.mmi.math.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException
    {
      TransformFromMMI_args args = new TransformFromMMI_args();
      args.setTransform(transform);
      args.setFirstAxis(firstAxis);
      args.setSecondAxis(secondAxis);
      args.setThirdAxis(thirdAxis);
      sendBase("TransformFromMMI", args);
    }

    public de.mosim.mmi.math.MTransform recv_TransformFromMMI() throws org.apache.thrift.TException
    {
      TransformFromMMI_result result = new TransformFromMMI_result();
      receiveBase(result, "TransformFromMMI");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "TransformFromMMI failed: unknown result");
    }

    public de.mosim.mmi.math.MQuaternion QuaternionToMMI_L(de.mosim.mmi.math.MQuaternion quat, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException
    {
      send_QuaternionToMMI_L(quat, coordinateSystem);
      return recv_QuaternionToMMI_L();
    }

    public void send_QuaternionToMMI_L(de.mosim.mmi.math.MQuaternion quat, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException
    {
      QuaternionToMMI_L_args args = new QuaternionToMMI_L_args();
      args.setQuat(quat);
      args.setCoordinateSystem(coordinateSystem);
      sendBase("QuaternionToMMI_L", args);
    }

    public de.mosim.mmi.math.MQuaternion recv_QuaternionToMMI_L() throws org.apache.thrift.TException
    {
      QuaternionToMMI_L_result result = new QuaternionToMMI_L_result();
      receiveBase(result, "QuaternionToMMI_L");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "QuaternionToMMI_L failed: unknown result");
    }

    public de.mosim.mmi.math.MQuaternion QuaternionToMMI(de.mosim.mmi.math.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException
    {
      send_QuaternionToMMI(quat, firstAxis, secondAxis, thirdAxis);
      return recv_QuaternionToMMI();
    }

    public void send_QuaternionToMMI(de.mosim.mmi.math.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException
    {
      QuaternionToMMI_args args = new QuaternionToMMI_args();
      args.setQuat(quat);
      args.setFirstAxis(firstAxis);
      args.setSecondAxis(secondAxis);
      args.setThirdAxis(thirdAxis);
      sendBase("QuaternionToMMI", args);
    }

    public de.mosim.mmi.math.MQuaternion recv_QuaternionToMMI() throws org.apache.thrift.TException
    {
      QuaternionToMMI_result result = new QuaternionToMMI_result();
      receiveBase(result, "QuaternionToMMI");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "QuaternionToMMI failed: unknown result");
    }

    public de.mosim.mmi.math.MQuaternion QuaternionFromMMI_L(de.mosim.mmi.math.MQuaternion quat, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException
    {
      send_QuaternionFromMMI_L(quat, coordinateSystem);
      return recv_QuaternionFromMMI_L();
    }

    public void send_QuaternionFromMMI_L(de.mosim.mmi.math.MQuaternion quat, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException
    {
      QuaternionFromMMI_L_args args = new QuaternionFromMMI_L_args();
      args.setQuat(quat);
      args.setCoordinateSystem(coordinateSystem);
      sendBase("QuaternionFromMMI_L", args);
    }

    public de.mosim.mmi.math.MQuaternion recv_QuaternionFromMMI_L() throws org.apache.thrift.TException
    {
      QuaternionFromMMI_L_result result = new QuaternionFromMMI_L_result();
      receiveBase(result, "QuaternionFromMMI_L");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "QuaternionFromMMI_L failed: unknown result");
    }

    public de.mosim.mmi.math.MQuaternion QuaternionFromMMI(de.mosim.mmi.math.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException
    {
      send_QuaternionFromMMI(quat, firstAxis, secondAxis, thirdAxis);
      return recv_QuaternionFromMMI();
    }

    public void send_QuaternionFromMMI(de.mosim.mmi.math.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException
    {
      QuaternionFromMMI_args args = new QuaternionFromMMI_args();
      args.setQuat(quat);
      args.setFirstAxis(firstAxis);
      args.setSecondAxis(secondAxis);
      args.setThirdAxis(thirdAxis);
      sendBase("QuaternionFromMMI", args);
    }

    public de.mosim.mmi.math.MQuaternion recv_QuaternionFromMMI() throws org.apache.thrift.TException
    {
      QuaternionFromMMI_result result = new QuaternionFromMMI_result();
      receiveBase(result, "QuaternionFromMMI");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "QuaternionFromMMI failed: unknown result");
    }

    public de.mosim.mmi.math.MVector3 VectorToMMI_L(de.mosim.mmi.math.MVector3 quat, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException
    {
      send_VectorToMMI_L(quat, coordinateSystem);
      return recv_VectorToMMI_L();
    }

    public void send_VectorToMMI_L(de.mosim.mmi.math.MVector3 quat, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException
    {
      VectorToMMI_L_args args = new VectorToMMI_L_args();
      args.setQuat(quat);
      args.setCoordinateSystem(coordinateSystem);
      sendBase("VectorToMMI_L", args);
    }

    public de.mosim.mmi.math.MVector3 recv_VectorToMMI_L() throws org.apache.thrift.TException
    {
      VectorToMMI_L_result result = new VectorToMMI_L_result();
      receiveBase(result, "VectorToMMI_L");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "VectorToMMI_L failed: unknown result");
    }

    public de.mosim.mmi.math.MVector3 VectorToMMI(de.mosim.mmi.math.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException
    {
      send_VectorToMMI(quat, firstAxis, secondAxis, thirdAxis);
      return recv_VectorToMMI();
    }

    public void send_VectorToMMI(de.mosim.mmi.math.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException
    {
      VectorToMMI_args args = new VectorToMMI_args();
      args.setQuat(quat);
      args.setFirstAxis(firstAxis);
      args.setSecondAxis(secondAxis);
      args.setThirdAxis(thirdAxis);
      sendBase("VectorToMMI", args);
    }

    public de.mosim.mmi.math.MVector3 recv_VectorToMMI() throws org.apache.thrift.TException
    {
      VectorToMMI_result result = new VectorToMMI_result();
      receiveBase(result, "VectorToMMI");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "VectorToMMI failed: unknown result");
    }

    public de.mosim.mmi.math.MVector3 VectorFromMMI_L(de.mosim.mmi.math.MVector3 quat, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException
    {
      send_VectorFromMMI_L(quat, coordinateSystem);
      return recv_VectorFromMMI_L();
    }

    public void send_VectorFromMMI_L(de.mosim.mmi.math.MVector3 quat, java.util.List<MDirection> coordinateSystem) throws org.apache.thrift.TException
    {
      VectorFromMMI_L_args args = new VectorFromMMI_L_args();
      args.setQuat(quat);
      args.setCoordinateSystem(coordinateSystem);
      sendBase("VectorFromMMI_L", args);
    }

    public de.mosim.mmi.math.MVector3 recv_VectorFromMMI_L() throws org.apache.thrift.TException
    {
      VectorFromMMI_L_result result = new VectorFromMMI_L_result();
      receiveBase(result, "VectorFromMMI_L");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "VectorFromMMI_L failed: unknown result");
    }

    public de.mosim.mmi.math.MVector3 VectorFromMMI(de.mosim.mmi.math.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException
    {
      send_VectorFromMMI(quat, firstAxis, secondAxis, thirdAxis);
      return recv_VectorFromMMI();
    }

    public void send_VectorFromMMI(de.mosim.mmi.math.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis) throws org.apache.thrift.TException
    {
      VectorFromMMI_args args = new VectorFromMMI_args();
      args.setQuat(quat);
      args.setFirstAxis(firstAxis);
      args.setSecondAxis(secondAxis);
      args.setThirdAxis(thirdAxis);
      sendBase("VectorFromMMI", args);
    }

    public de.mosim.mmi.math.MVector3 recv_VectorFromMMI() throws org.apache.thrift.TException
    {
      VectorFromMMI_result result = new VectorFromMMI_result();
      receiveBase(result, "VectorFromMMI");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "VectorFromMMI failed: unknown result");
    }

  }
  public static class AsyncClient extends MMIServiceBase.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void TransformToMMI_L(de.mosim.mmi.math.MTransform transform, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      TransformToMMI_L_call method_call = new TransformToMMI_L_call(transform, coordinateSystem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class TransformToMMI_L_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.math.MTransform> {
      private de.mosim.mmi.math.MTransform transform;
      private java.util.List<MDirection> coordinateSystem;
      public TransformToMMI_L_call(de.mosim.mmi.math.MTransform transform, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transform = transform;
        this.coordinateSystem = coordinateSystem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TransformToMMI_L", org.apache.thrift.protocol.TMessageType.CALL, 0));
        TransformToMMI_L_args args = new TransformToMMI_L_args();
        args.setTransform(transform);
        args.setCoordinateSystem(coordinateSystem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.math.MTransform getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_TransformToMMI_L();
      }
    }

    public void TransformToMMI(de.mosim.mmi.math.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      TransformToMMI_call method_call = new TransformToMMI_call(transform, firstAxis, secondAxis, thirdAxis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class TransformToMMI_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.math.MTransform> {
      private de.mosim.mmi.math.MTransform transform;
      private MDirection firstAxis;
      private MDirection secondAxis;
      private MDirection thirdAxis;
      public TransformToMMI_call(de.mosim.mmi.math.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transform = transform;
        this.firstAxis = firstAxis;
        this.secondAxis = secondAxis;
        this.thirdAxis = thirdAxis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TransformToMMI", org.apache.thrift.protocol.TMessageType.CALL, 0));
        TransformToMMI_args args = new TransformToMMI_args();
        args.setTransform(transform);
        args.setFirstAxis(firstAxis);
        args.setSecondAxis(secondAxis);
        args.setThirdAxis(thirdAxis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.math.MTransform getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_TransformToMMI();
      }
    }

    public void TransformFromMMI_L(de.mosim.mmi.math.MTransform transform, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      TransformFromMMI_L_call method_call = new TransformFromMMI_L_call(transform, coordinateSystem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class TransformFromMMI_L_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.math.MTransform> {
      private de.mosim.mmi.math.MTransform transform;
      private java.util.List<MDirection> coordinateSystem;
      public TransformFromMMI_L_call(de.mosim.mmi.math.MTransform transform, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transform = transform;
        this.coordinateSystem = coordinateSystem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TransformFromMMI_L", org.apache.thrift.protocol.TMessageType.CALL, 0));
        TransformFromMMI_L_args args = new TransformFromMMI_L_args();
        args.setTransform(transform);
        args.setCoordinateSystem(coordinateSystem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.math.MTransform getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_TransformFromMMI_L();
      }
    }

    public void TransformFromMMI(de.mosim.mmi.math.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      TransformFromMMI_call method_call = new TransformFromMMI_call(transform, firstAxis, secondAxis, thirdAxis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class TransformFromMMI_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.math.MTransform> {
      private de.mosim.mmi.math.MTransform transform;
      private MDirection firstAxis;
      private MDirection secondAxis;
      private MDirection thirdAxis;
      public TransformFromMMI_call(de.mosim.mmi.math.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transform = transform;
        this.firstAxis = firstAxis;
        this.secondAxis = secondAxis;
        this.thirdAxis = thirdAxis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TransformFromMMI", org.apache.thrift.protocol.TMessageType.CALL, 0));
        TransformFromMMI_args args = new TransformFromMMI_args();
        args.setTransform(transform);
        args.setFirstAxis(firstAxis);
        args.setSecondAxis(secondAxis);
        args.setThirdAxis(thirdAxis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.math.MTransform getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_TransformFromMMI();
      }
    }

    public void QuaternionToMMI_L(de.mosim.mmi.math.MQuaternion quat, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      QuaternionToMMI_L_call method_call = new QuaternionToMMI_L_call(quat, coordinateSystem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QuaternionToMMI_L_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.math.MQuaternion> {
      private de.mosim.mmi.math.MQuaternion quat;
      private java.util.List<MDirection> coordinateSystem;
      public QuaternionToMMI_L_call(de.mosim.mmi.math.MQuaternion quat, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.quat = quat;
        this.coordinateSystem = coordinateSystem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QuaternionToMMI_L", org.apache.thrift.protocol.TMessageType.CALL, 0));
        QuaternionToMMI_L_args args = new QuaternionToMMI_L_args();
        args.setQuat(quat);
        args.setCoordinateSystem(coordinateSystem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.math.MQuaternion getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_QuaternionToMMI_L();
      }
    }

    public void QuaternionToMMI(de.mosim.mmi.math.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      QuaternionToMMI_call method_call = new QuaternionToMMI_call(quat, firstAxis, secondAxis, thirdAxis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QuaternionToMMI_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.math.MQuaternion> {
      private de.mosim.mmi.math.MQuaternion quat;
      private MDirection firstAxis;
      private MDirection secondAxis;
      private MDirection thirdAxis;
      public QuaternionToMMI_call(de.mosim.mmi.math.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.quat = quat;
        this.firstAxis = firstAxis;
        this.secondAxis = secondAxis;
        this.thirdAxis = thirdAxis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QuaternionToMMI", org.apache.thrift.protocol.TMessageType.CALL, 0));
        QuaternionToMMI_args args = new QuaternionToMMI_args();
        args.setQuat(quat);
        args.setFirstAxis(firstAxis);
        args.setSecondAxis(secondAxis);
        args.setThirdAxis(thirdAxis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.math.MQuaternion getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_QuaternionToMMI();
      }
    }

    public void QuaternionFromMMI_L(de.mosim.mmi.math.MQuaternion quat, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      QuaternionFromMMI_L_call method_call = new QuaternionFromMMI_L_call(quat, coordinateSystem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QuaternionFromMMI_L_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.math.MQuaternion> {
      private de.mosim.mmi.math.MQuaternion quat;
      private java.util.List<MDirection> coordinateSystem;
      public QuaternionFromMMI_L_call(de.mosim.mmi.math.MQuaternion quat, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.quat = quat;
        this.coordinateSystem = coordinateSystem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QuaternionFromMMI_L", org.apache.thrift.protocol.TMessageType.CALL, 0));
        QuaternionFromMMI_L_args args = new QuaternionFromMMI_L_args();
        args.setQuat(quat);
        args.setCoordinateSystem(coordinateSystem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.math.MQuaternion getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_QuaternionFromMMI_L();
      }
    }

    public void QuaternionFromMMI(de.mosim.mmi.math.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      QuaternionFromMMI_call method_call = new QuaternionFromMMI_call(quat, firstAxis, secondAxis, thirdAxis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QuaternionFromMMI_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.math.MQuaternion> {
      private de.mosim.mmi.math.MQuaternion quat;
      private MDirection firstAxis;
      private MDirection secondAxis;
      private MDirection thirdAxis;
      public QuaternionFromMMI_call(de.mosim.mmi.math.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.quat = quat;
        this.firstAxis = firstAxis;
        this.secondAxis = secondAxis;
        this.thirdAxis = thirdAxis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QuaternionFromMMI", org.apache.thrift.protocol.TMessageType.CALL, 0));
        QuaternionFromMMI_args args = new QuaternionFromMMI_args();
        args.setQuat(quat);
        args.setFirstAxis(firstAxis);
        args.setSecondAxis(secondAxis);
        args.setThirdAxis(thirdAxis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.math.MQuaternion getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_QuaternionFromMMI();
      }
    }

    public void VectorToMMI_L(de.mosim.mmi.math.MVector3 quat, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      VectorToMMI_L_call method_call = new VectorToMMI_L_call(quat, coordinateSystem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class VectorToMMI_L_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.math.MVector3> {
      private de.mosim.mmi.math.MVector3 quat;
      private java.util.List<MDirection> coordinateSystem;
      public VectorToMMI_L_call(de.mosim.mmi.math.MVector3 quat, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.quat = quat;
        this.coordinateSystem = coordinateSystem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("VectorToMMI_L", org.apache.thrift.protocol.TMessageType.CALL, 0));
        VectorToMMI_L_args args = new VectorToMMI_L_args();
        args.setQuat(quat);
        args.setCoordinateSystem(coordinateSystem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.math.MVector3 getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_VectorToMMI_L();
      }
    }

    public void VectorToMMI(de.mosim.mmi.math.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      VectorToMMI_call method_call = new VectorToMMI_call(quat, firstAxis, secondAxis, thirdAxis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class VectorToMMI_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.math.MVector3> {
      private de.mosim.mmi.math.MVector3 quat;
      private MDirection firstAxis;
      private MDirection secondAxis;
      private MDirection thirdAxis;
      public VectorToMMI_call(de.mosim.mmi.math.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.quat = quat;
        this.firstAxis = firstAxis;
        this.secondAxis = secondAxis;
        this.thirdAxis = thirdAxis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("VectorToMMI", org.apache.thrift.protocol.TMessageType.CALL, 0));
        VectorToMMI_args args = new VectorToMMI_args();
        args.setQuat(quat);
        args.setFirstAxis(firstAxis);
        args.setSecondAxis(secondAxis);
        args.setThirdAxis(thirdAxis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.math.MVector3 getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_VectorToMMI();
      }
    }

    public void VectorFromMMI_L(de.mosim.mmi.math.MVector3 quat, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      VectorFromMMI_L_call method_call = new VectorFromMMI_L_call(quat, coordinateSystem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class VectorFromMMI_L_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.math.MVector3> {
      private de.mosim.mmi.math.MVector3 quat;
      private java.util.List<MDirection> coordinateSystem;
      public VectorFromMMI_L_call(de.mosim.mmi.math.MVector3 quat, java.util.List<MDirection> coordinateSystem, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.quat = quat;
        this.coordinateSystem = coordinateSystem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("VectorFromMMI_L", org.apache.thrift.protocol.TMessageType.CALL, 0));
        VectorFromMMI_L_args args = new VectorFromMMI_L_args();
        args.setQuat(quat);
        args.setCoordinateSystem(coordinateSystem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.math.MVector3 getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_VectorFromMMI_L();
      }
    }

    public void VectorFromMMI(de.mosim.mmi.math.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      VectorFromMMI_call method_call = new VectorFromMMI_call(quat, firstAxis, secondAxis, thirdAxis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class VectorFromMMI_call extends org.apache.thrift.async.TAsyncMethodCall<de.mosim.mmi.math.MVector3> {
      private de.mosim.mmi.math.MVector3 quat;
      private MDirection firstAxis;
      private MDirection secondAxis;
      private MDirection thirdAxis;
      public VectorFromMMI_call(de.mosim.mmi.math.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.quat = quat;
        this.firstAxis = firstAxis;
        this.secondAxis = secondAxis;
        this.thirdAxis = thirdAxis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("VectorFromMMI", org.apache.thrift.protocol.TMessageType.CALL, 0));
        VectorFromMMI_args args = new VectorFromMMI_args();
        args.setQuat(quat);
        args.setFirstAxis(firstAxis);
        args.setSecondAxis(secondAxis);
        args.setThirdAxis(thirdAxis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.mosim.mmi.math.MVector3 getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_VectorFromMMI();
      }
    }

  }

  public static class Processor<I extends Iface> extends MMIServiceBase.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("TransformToMMI_L", new TransformToMMI_L());
      processMap.put("TransformToMMI", new TransformToMMI());
      processMap.put("TransformFromMMI_L", new TransformFromMMI_L());
      processMap.put("TransformFromMMI", new TransformFromMMI());
      processMap.put("QuaternionToMMI_L", new QuaternionToMMI_L());
      processMap.put("QuaternionToMMI", new QuaternionToMMI());
      processMap.put("QuaternionFromMMI_L", new QuaternionFromMMI_L());
      processMap.put("QuaternionFromMMI", new QuaternionFromMMI());
      processMap.put("VectorToMMI_L", new VectorToMMI_L());
      processMap.put("VectorToMMI", new VectorToMMI());
      processMap.put("VectorFromMMI_L", new VectorFromMMI_L());
      processMap.put("VectorFromMMI", new VectorFromMMI());
      return processMap;
    }

    public static class TransformToMMI_L<I extends Iface> extends org.apache.thrift.ProcessFunction<I, TransformToMMI_L_args> {
      public TransformToMMI_L() {
        super("TransformToMMI_L");
      }

      public TransformToMMI_L_args getEmptyArgsInstance() {
        return new TransformToMMI_L_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public TransformToMMI_L_result getResult(I iface, TransformToMMI_L_args args) throws org.apache.thrift.TException {
        TransformToMMI_L_result result = new TransformToMMI_L_result();
        result.success = iface.TransformToMMI_L(args.transform, args.coordinateSystem);
        return result;
      }
    }

    public static class TransformToMMI<I extends Iface> extends org.apache.thrift.ProcessFunction<I, TransformToMMI_args> {
      public TransformToMMI() {
        super("TransformToMMI");
      }

      public TransformToMMI_args getEmptyArgsInstance() {
        return new TransformToMMI_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public TransformToMMI_result getResult(I iface, TransformToMMI_args args) throws org.apache.thrift.TException {
        TransformToMMI_result result = new TransformToMMI_result();
        result.success = iface.TransformToMMI(args.transform, args.firstAxis, args.secondAxis, args.thirdAxis);
        return result;
      }
    }

    public static class TransformFromMMI_L<I extends Iface> extends org.apache.thrift.ProcessFunction<I, TransformFromMMI_L_args> {
      public TransformFromMMI_L() {
        super("TransformFromMMI_L");
      }

      public TransformFromMMI_L_args getEmptyArgsInstance() {
        return new TransformFromMMI_L_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public TransformFromMMI_L_result getResult(I iface, TransformFromMMI_L_args args) throws org.apache.thrift.TException {
        TransformFromMMI_L_result result = new TransformFromMMI_L_result();
        result.success = iface.TransformFromMMI_L(args.transform, args.coordinateSystem);
        return result;
      }
    }

    public static class TransformFromMMI<I extends Iface> extends org.apache.thrift.ProcessFunction<I, TransformFromMMI_args> {
      public TransformFromMMI() {
        super("TransformFromMMI");
      }

      public TransformFromMMI_args getEmptyArgsInstance() {
        return new TransformFromMMI_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public TransformFromMMI_result getResult(I iface, TransformFromMMI_args args) throws org.apache.thrift.TException {
        TransformFromMMI_result result = new TransformFromMMI_result();
        result.success = iface.TransformFromMMI(args.transform, args.firstAxis, args.secondAxis, args.thirdAxis);
        return result;
      }
    }

    public static class QuaternionToMMI_L<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QuaternionToMMI_L_args> {
      public QuaternionToMMI_L() {
        super("QuaternionToMMI_L");
      }

      public QuaternionToMMI_L_args getEmptyArgsInstance() {
        return new QuaternionToMMI_L_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public QuaternionToMMI_L_result getResult(I iface, QuaternionToMMI_L_args args) throws org.apache.thrift.TException {
        QuaternionToMMI_L_result result = new QuaternionToMMI_L_result();
        result.success = iface.QuaternionToMMI_L(args.quat, args.coordinateSystem);
        return result;
      }
    }

    public static class QuaternionToMMI<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QuaternionToMMI_args> {
      public QuaternionToMMI() {
        super("QuaternionToMMI");
      }

      public QuaternionToMMI_args getEmptyArgsInstance() {
        return new QuaternionToMMI_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public QuaternionToMMI_result getResult(I iface, QuaternionToMMI_args args) throws org.apache.thrift.TException {
        QuaternionToMMI_result result = new QuaternionToMMI_result();
        result.success = iface.QuaternionToMMI(args.quat, args.firstAxis, args.secondAxis, args.thirdAxis);
        return result;
      }
    }

    public static class QuaternionFromMMI_L<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QuaternionFromMMI_L_args> {
      public QuaternionFromMMI_L() {
        super("QuaternionFromMMI_L");
      }

      public QuaternionFromMMI_L_args getEmptyArgsInstance() {
        return new QuaternionFromMMI_L_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public QuaternionFromMMI_L_result getResult(I iface, QuaternionFromMMI_L_args args) throws org.apache.thrift.TException {
        QuaternionFromMMI_L_result result = new QuaternionFromMMI_L_result();
        result.success = iface.QuaternionFromMMI_L(args.quat, args.coordinateSystem);
        return result;
      }
    }

    public static class QuaternionFromMMI<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QuaternionFromMMI_args> {
      public QuaternionFromMMI() {
        super("QuaternionFromMMI");
      }

      public QuaternionFromMMI_args getEmptyArgsInstance() {
        return new QuaternionFromMMI_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public QuaternionFromMMI_result getResult(I iface, QuaternionFromMMI_args args) throws org.apache.thrift.TException {
        QuaternionFromMMI_result result = new QuaternionFromMMI_result();
        result.success = iface.QuaternionFromMMI(args.quat, args.firstAxis, args.secondAxis, args.thirdAxis);
        return result;
      }
    }

    public static class VectorToMMI_L<I extends Iface> extends org.apache.thrift.ProcessFunction<I, VectorToMMI_L_args> {
      public VectorToMMI_L() {
        super("VectorToMMI_L");
      }

      public VectorToMMI_L_args getEmptyArgsInstance() {
        return new VectorToMMI_L_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public VectorToMMI_L_result getResult(I iface, VectorToMMI_L_args args) throws org.apache.thrift.TException {
        VectorToMMI_L_result result = new VectorToMMI_L_result();
        result.success = iface.VectorToMMI_L(args.quat, args.coordinateSystem);
        return result;
      }
    }

    public static class VectorToMMI<I extends Iface> extends org.apache.thrift.ProcessFunction<I, VectorToMMI_args> {
      public VectorToMMI() {
        super("VectorToMMI");
      }

      public VectorToMMI_args getEmptyArgsInstance() {
        return new VectorToMMI_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public VectorToMMI_result getResult(I iface, VectorToMMI_args args) throws org.apache.thrift.TException {
        VectorToMMI_result result = new VectorToMMI_result();
        result.success = iface.VectorToMMI(args.quat, args.firstAxis, args.secondAxis, args.thirdAxis);
        return result;
      }
    }

    public static class VectorFromMMI_L<I extends Iface> extends org.apache.thrift.ProcessFunction<I, VectorFromMMI_L_args> {
      public VectorFromMMI_L() {
        super("VectorFromMMI_L");
      }

      public VectorFromMMI_L_args getEmptyArgsInstance() {
        return new VectorFromMMI_L_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public VectorFromMMI_L_result getResult(I iface, VectorFromMMI_L_args args) throws org.apache.thrift.TException {
        VectorFromMMI_L_result result = new VectorFromMMI_L_result();
        result.success = iface.VectorFromMMI_L(args.quat, args.coordinateSystem);
        return result;
      }
    }

    public static class VectorFromMMI<I extends Iface> extends org.apache.thrift.ProcessFunction<I, VectorFromMMI_args> {
      public VectorFromMMI() {
        super("VectorFromMMI");
      }

      public VectorFromMMI_args getEmptyArgsInstance() {
        return new VectorFromMMI_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public VectorFromMMI_result getResult(I iface, VectorFromMMI_args args) throws org.apache.thrift.TException {
        VectorFromMMI_result result = new VectorFromMMI_result();
        result.success = iface.VectorFromMMI(args.quat, args.firstAxis, args.secondAxis, args.thirdAxis);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends MMIServiceBase.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("TransformToMMI_L", new TransformToMMI_L());
      processMap.put("TransformToMMI", new TransformToMMI());
      processMap.put("TransformFromMMI_L", new TransformFromMMI_L());
      processMap.put("TransformFromMMI", new TransformFromMMI());
      processMap.put("QuaternionToMMI_L", new QuaternionToMMI_L());
      processMap.put("QuaternionToMMI", new QuaternionToMMI());
      processMap.put("QuaternionFromMMI_L", new QuaternionFromMMI_L());
      processMap.put("QuaternionFromMMI", new QuaternionFromMMI());
      processMap.put("VectorToMMI_L", new VectorToMMI_L());
      processMap.put("VectorToMMI", new VectorToMMI());
      processMap.put("VectorFromMMI_L", new VectorFromMMI_L());
      processMap.put("VectorFromMMI", new VectorFromMMI());
      return processMap;
    }

    public static class TransformToMMI_L<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, TransformToMMI_L_args, de.mosim.mmi.math.MTransform> {
      public TransformToMMI_L() {
        super("TransformToMMI_L");
      }

      public TransformToMMI_L_args getEmptyArgsInstance() {
        return new TransformToMMI_L_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform>() { 
          public void onComplete(de.mosim.mmi.math.MTransform o) {
            TransformToMMI_L_result result = new TransformToMMI_L_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            TransformToMMI_L_result result = new TransformToMMI_L_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, TransformToMMI_L_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> resultHandler) throws org.apache.thrift.TException {
        iface.TransformToMMI_L(args.transform, args.coordinateSystem,resultHandler);
      }
    }

    public static class TransformToMMI<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, TransformToMMI_args, de.mosim.mmi.math.MTransform> {
      public TransformToMMI() {
        super("TransformToMMI");
      }

      public TransformToMMI_args getEmptyArgsInstance() {
        return new TransformToMMI_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform>() { 
          public void onComplete(de.mosim.mmi.math.MTransform o) {
            TransformToMMI_result result = new TransformToMMI_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            TransformToMMI_result result = new TransformToMMI_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, TransformToMMI_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> resultHandler) throws org.apache.thrift.TException {
        iface.TransformToMMI(args.transform, args.firstAxis, args.secondAxis, args.thirdAxis,resultHandler);
      }
    }

    public static class TransformFromMMI_L<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, TransformFromMMI_L_args, de.mosim.mmi.math.MTransform> {
      public TransformFromMMI_L() {
        super("TransformFromMMI_L");
      }

      public TransformFromMMI_L_args getEmptyArgsInstance() {
        return new TransformFromMMI_L_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform>() { 
          public void onComplete(de.mosim.mmi.math.MTransform o) {
            TransformFromMMI_L_result result = new TransformFromMMI_L_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            TransformFromMMI_L_result result = new TransformFromMMI_L_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, TransformFromMMI_L_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> resultHandler) throws org.apache.thrift.TException {
        iface.TransformFromMMI_L(args.transform, args.coordinateSystem,resultHandler);
      }
    }

    public static class TransformFromMMI<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, TransformFromMMI_args, de.mosim.mmi.math.MTransform> {
      public TransformFromMMI() {
        super("TransformFromMMI");
      }

      public TransformFromMMI_args getEmptyArgsInstance() {
        return new TransformFromMMI_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform>() { 
          public void onComplete(de.mosim.mmi.math.MTransform o) {
            TransformFromMMI_result result = new TransformFromMMI_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            TransformFromMMI_result result = new TransformFromMMI_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, TransformFromMMI_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MTransform> resultHandler) throws org.apache.thrift.TException {
        iface.TransformFromMMI(args.transform, args.firstAxis, args.secondAxis, args.thirdAxis,resultHandler);
      }
    }

    public static class QuaternionToMMI_L<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QuaternionToMMI_L_args, de.mosim.mmi.math.MQuaternion> {
      public QuaternionToMMI_L() {
        super("QuaternionToMMI_L");
      }

      public QuaternionToMMI_L_args getEmptyArgsInstance() {
        return new QuaternionToMMI_L_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion>() { 
          public void onComplete(de.mosim.mmi.math.MQuaternion o) {
            QuaternionToMMI_L_result result = new QuaternionToMMI_L_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            QuaternionToMMI_L_result result = new QuaternionToMMI_L_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, QuaternionToMMI_L_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> resultHandler) throws org.apache.thrift.TException {
        iface.QuaternionToMMI_L(args.quat, args.coordinateSystem,resultHandler);
      }
    }

    public static class QuaternionToMMI<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QuaternionToMMI_args, de.mosim.mmi.math.MQuaternion> {
      public QuaternionToMMI() {
        super("QuaternionToMMI");
      }

      public QuaternionToMMI_args getEmptyArgsInstance() {
        return new QuaternionToMMI_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion>() { 
          public void onComplete(de.mosim.mmi.math.MQuaternion o) {
            QuaternionToMMI_result result = new QuaternionToMMI_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            QuaternionToMMI_result result = new QuaternionToMMI_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, QuaternionToMMI_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> resultHandler) throws org.apache.thrift.TException {
        iface.QuaternionToMMI(args.quat, args.firstAxis, args.secondAxis, args.thirdAxis,resultHandler);
      }
    }

    public static class QuaternionFromMMI_L<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QuaternionFromMMI_L_args, de.mosim.mmi.math.MQuaternion> {
      public QuaternionFromMMI_L() {
        super("QuaternionFromMMI_L");
      }

      public QuaternionFromMMI_L_args getEmptyArgsInstance() {
        return new QuaternionFromMMI_L_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion>() { 
          public void onComplete(de.mosim.mmi.math.MQuaternion o) {
            QuaternionFromMMI_L_result result = new QuaternionFromMMI_L_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            QuaternionFromMMI_L_result result = new QuaternionFromMMI_L_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, QuaternionFromMMI_L_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> resultHandler) throws org.apache.thrift.TException {
        iface.QuaternionFromMMI_L(args.quat, args.coordinateSystem,resultHandler);
      }
    }

    public static class QuaternionFromMMI<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QuaternionFromMMI_args, de.mosim.mmi.math.MQuaternion> {
      public QuaternionFromMMI() {
        super("QuaternionFromMMI");
      }

      public QuaternionFromMMI_args getEmptyArgsInstance() {
        return new QuaternionFromMMI_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion>() { 
          public void onComplete(de.mosim.mmi.math.MQuaternion o) {
            QuaternionFromMMI_result result = new QuaternionFromMMI_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            QuaternionFromMMI_result result = new QuaternionFromMMI_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, QuaternionFromMMI_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MQuaternion> resultHandler) throws org.apache.thrift.TException {
        iface.QuaternionFromMMI(args.quat, args.firstAxis, args.secondAxis, args.thirdAxis,resultHandler);
      }
    }

    public static class VectorToMMI_L<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, VectorToMMI_L_args, de.mosim.mmi.math.MVector3> {
      public VectorToMMI_L() {
        super("VectorToMMI_L");
      }

      public VectorToMMI_L_args getEmptyArgsInstance() {
        return new VectorToMMI_L_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3>() { 
          public void onComplete(de.mosim.mmi.math.MVector3 o) {
            VectorToMMI_L_result result = new VectorToMMI_L_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            VectorToMMI_L_result result = new VectorToMMI_L_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, VectorToMMI_L_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler) throws org.apache.thrift.TException {
        iface.VectorToMMI_L(args.quat, args.coordinateSystem,resultHandler);
      }
    }

    public static class VectorToMMI<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, VectorToMMI_args, de.mosim.mmi.math.MVector3> {
      public VectorToMMI() {
        super("VectorToMMI");
      }

      public VectorToMMI_args getEmptyArgsInstance() {
        return new VectorToMMI_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3>() { 
          public void onComplete(de.mosim.mmi.math.MVector3 o) {
            VectorToMMI_result result = new VectorToMMI_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            VectorToMMI_result result = new VectorToMMI_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, VectorToMMI_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler) throws org.apache.thrift.TException {
        iface.VectorToMMI(args.quat, args.firstAxis, args.secondAxis, args.thirdAxis,resultHandler);
      }
    }

    public static class VectorFromMMI_L<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, VectorFromMMI_L_args, de.mosim.mmi.math.MVector3> {
      public VectorFromMMI_L() {
        super("VectorFromMMI_L");
      }

      public VectorFromMMI_L_args getEmptyArgsInstance() {
        return new VectorFromMMI_L_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3>() { 
          public void onComplete(de.mosim.mmi.math.MVector3 o) {
            VectorFromMMI_L_result result = new VectorFromMMI_L_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            VectorFromMMI_L_result result = new VectorFromMMI_L_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, VectorFromMMI_L_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler) throws org.apache.thrift.TException {
        iface.VectorFromMMI_L(args.quat, args.coordinateSystem,resultHandler);
      }
    }

    public static class VectorFromMMI<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, VectorFromMMI_args, de.mosim.mmi.math.MVector3> {
      public VectorFromMMI() {
        super("VectorFromMMI");
      }

      public VectorFromMMI_args getEmptyArgsInstance() {
        return new VectorFromMMI_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3>() { 
          public void onComplete(de.mosim.mmi.math.MVector3 o) {
            VectorFromMMI_result result = new VectorFromMMI_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            VectorFromMMI_result result = new VectorFromMMI_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, VectorFromMMI_args args, org.apache.thrift.async.AsyncMethodCallback<de.mosim.mmi.math.MVector3> resultHandler) throws org.apache.thrift.TException {
        iface.VectorFromMMI(args.quat, args.firstAxis, args.secondAxis, args.thirdAxis,resultHandler);
      }
    }

  }

  public static class TransformToMMI_L_args implements org.apache.thrift.TBase<TransformToMMI_L_args, TransformToMMI_L_args._Fields>, java.io.Serializable, Cloneable, Comparable<TransformToMMI_L_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransformToMMI_L_args");

    private static final org.apache.thrift.protocol.TField TRANSFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("transform", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COORDINATE_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinateSystem", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransformToMMI_L_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransformToMMI_L_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform transform; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<MDirection> coordinateSystem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSFORM((short)1, "transform"),
      COORDINATE_SYSTEM((short)2, "coordinateSystem");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSFORM
            return TRANSFORM;
          case 2: // COORDINATE_SYSTEM
            return COORDINATE_SYSTEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSFORM, new org.apache.thrift.meta_data.FieldMetaData("transform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MTransform.class)));
      tmpMap.put(_Fields.COORDINATE_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("coordinateSystem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransformToMMI_L_args.class, metaDataMap);
    }

    public TransformToMMI_L_args() {
    }

    public TransformToMMI_L_args(
      de.mosim.mmi.math.MTransform transform,
      java.util.List<MDirection> coordinateSystem)
    {
      this();
      this.transform = transform;
      this.coordinateSystem = coordinateSystem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TransformToMMI_L_args(TransformToMMI_L_args other) {
      if (other.isSetTransform()) {
        this.transform = new de.mosim.mmi.math.MTransform(other.transform);
      }
      if (other.isSetCoordinateSystem()) {
        java.util.List<MDirection> __this__coordinateSystem = new java.util.ArrayList<MDirection>(other.coordinateSystem.size());
        for (MDirection other_element : other.coordinateSystem) {
          __this__coordinateSystem.add(other_element);
        }
        this.coordinateSystem = __this__coordinateSystem;
      }
    }

    public TransformToMMI_L_args deepCopy() {
      return new TransformToMMI_L_args(this);
    }

    @Override
    public void clear() {
      this.transform = null;
      this.coordinateSystem = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MTransform getTransform() {
      return this.transform;
    }

    public TransformToMMI_L_args setTransform(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform transform) {
      this.transform = transform;
      return this;
    }

    public void unsetTransform() {
      this.transform = null;
    }

    /** Returns true if field transform is set (has been assigned a value) and false otherwise */
    public boolean isSetTransform() {
      return this.transform != null;
    }

    public void setTransformIsSet(boolean value) {
      if (!value) {
        this.transform = null;
      }
    }

    public int getCoordinateSystemSize() {
      return (this.coordinateSystem == null) ? 0 : this.coordinateSystem.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<MDirection> getCoordinateSystemIterator() {
      return (this.coordinateSystem == null) ? null : this.coordinateSystem.iterator();
    }

    public void addToCoordinateSystem(MDirection elem) {
      if (this.coordinateSystem == null) {
        this.coordinateSystem = new java.util.ArrayList<MDirection>();
      }
      this.coordinateSystem.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<MDirection> getCoordinateSystem() {
      return this.coordinateSystem;
    }

    public TransformToMMI_L_args setCoordinateSystem(@org.apache.thrift.annotation.Nullable java.util.List<MDirection> coordinateSystem) {
      this.coordinateSystem = coordinateSystem;
      return this;
    }

    public void unsetCoordinateSystem() {
      this.coordinateSystem = null;
    }

    /** Returns true if field coordinateSystem is set (has been assigned a value) and false otherwise */
    public boolean isSetCoordinateSystem() {
      return this.coordinateSystem != null;
    }

    public void setCoordinateSystemIsSet(boolean value) {
      if (!value) {
        this.coordinateSystem = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TRANSFORM:
        if (value == null) {
          unsetTransform();
        } else {
          setTransform((de.mosim.mmi.math.MTransform)value);
        }
        break;

      case COORDINATE_SYSTEM:
        if (value == null) {
          unsetCoordinateSystem();
        } else {
          setCoordinateSystem((java.util.List<MDirection>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSFORM:
        return getTransform();

      case COORDINATE_SYSTEM:
        return getCoordinateSystem();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TRANSFORM:
        return isSetTransform();
      case COORDINATE_SYSTEM:
        return isSetCoordinateSystem();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof TransformToMMI_L_args)
        return this.equals((TransformToMMI_L_args)that);
      return false;
    }

    public boolean equals(TransformToMMI_L_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_transform = true && this.isSetTransform();
      boolean that_present_transform = true && that.isSetTransform();
      if (this_present_transform || that_present_transform) {
        if (!(this_present_transform && that_present_transform))
          return false;
        if (!this.transform.equals(that.transform))
          return false;
      }

      boolean this_present_coordinateSystem = true && this.isSetCoordinateSystem();
      boolean that_present_coordinateSystem = true && that.isSetCoordinateSystem();
      if (this_present_coordinateSystem || that_present_coordinateSystem) {
        if (!(this_present_coordinateSystem && that_present_coordinateSystem))
          return false;
        if (!this.coordinateSystem.equals(that.coordinateSystem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTransform()) ? 131071 : 524287);
      if (isSetTransform())
        hashCode = hashCode * 8191 + transform.hashCode();

      hashCode = hashCode * 8191 + ((isSetCoordinateSystem()) ? 131071 : 524287);
      if (isSetCoordinateSystem())
        hashCode = hashCode * 8191 + coordinateSystem.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(TransformToMMI_L_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTransform()).compareTo(other.isSetTransform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transform, other.transform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCoordinateSystem()).compareTo(other.isSetCoordinateSystem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoordinateSystem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinateSystem, other.coordinateSystem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("TransformToMMI_L_args(");
      boolean first = true;

      sb.append("transform:");
      if (this.transform == null) {
        sb.append("null");
      } else {
        sb.append(this.transform);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coordinateSystem:");
      if (this.coordinateSystem == null) {
        sb.append("null");
      } else {
        sb.append(this.coordinateSystem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (transform != null) {
        transform.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TransformToMMI_L_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransformToMMI_L_argsStandardScheme getScheme() {
        return new TransformToMMI_L_argsStandardScheme();
      }
    }

    private static class TransformToMMI_L_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TransformToMMI_L_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TransformToMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transform = new de.mosim.mmi.math.MTransform();
                struct.transform.read(iprot);
                struct.setTransformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COORDINATE_SYSTEM
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list348 = iprot.readListBegin();
                  struct.coordinateSystem = new java.util.ArrayList<MDirection>(_list348.size);
                  @org.apache.thrift.annotation.Nullable MDirection _elem349;
                  for (int _i350 = 0; _i350 < _list348.size; ++_i350)
                  {
                    _elem349 = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                    if (_elem349 != null)
                    {
                      struct.coordinateSystem.add(_elem349);
                    }
                  }
                  iprot.readListEnd();
                }
                struct.setCoordinateSystemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TransformToMMI_L_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transform != null) {
          oprot.writeFieldBegin(TRANSFORM_FIELD_DESC);
          struct.transform.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.coordinateSystem != null) {
          oprot.writeFieldBegin(COORDINATE_SYSTEM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.coordinateSystem.size()));
            for (MDirection _iter351 : struct.coordinateSystem)
            {
              oprot.writeI32(_iter351.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TransformToMMI_L_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransformToMMI_L_argsTupleScheme getScheme() {
        return new TransformToMMI_L_argsTupleScheme();
      }
    }

    private static class TransformToMMI_L_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TransformToMMI_L_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TransformToMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTransform()) {
          optionals.set(0);
        }
        if (struct.isSetCoordinateSystem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTransform()) {
          struct.transform.write(oprot);
        }
        if (struct.isSetCoordinateSystem()) {
          {
            oprot.writeI32(struct.coordinateSystem.size());
            for (MDirection _iter352 : struct.coordinateSystem)
            {
              oprot.writeI32(_iter352.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TransformToMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.transform = new de.mosim.mmi.math.MTransform();
          struct.transform.read(iprot);
          struct.setTransformIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list353 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.coordinateSystem = new java.util.ArrayList<MDirection>(_list353.size);
            @org.apache.thrift.annotation.Nullable MDirection _elem354;
            for (int _i355 = 0; _i355 < _list353.size; ++_i355)
            {
              _elem354 = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
              if (_elem354 != null)
              {
                struct.coordinateSystem.add(_elem354);
              }
            }
          }
          struct.setCoordinateSystemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class TransformToMMI_L_result implements org.apache.thrift.TBase<TransformToMMI_L_result, TransformToMMI_L_result._Fields>, java.io.Serializable, Cloneable, Comparable<TransformToMMI_L_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransformToMMI_L_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransformToMMI_L_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransformToMMI_L_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MTransform.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransformToMMI_L_result.class, metaDataMap);
    }

    public TransformToMMI_L_result() {
    }

    public TransformToMMI_L_result(
      de.mosim.mmi.math.MTransform success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TransformToMMI_L_result(TransformToMMI_L_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.math.MTransform(other.success);
      }
    }

    public TransformToMMI_L_result deepCopy() {
      return new TransformToMMI_L_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MTransform getSuccess() {
      return this.success;
    }

    public TransformToMMI_L_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.math.MTransform)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof TransformToMMI_L_result)
        return this.equals((TransformToMMI_L_result)that);
      return false;
    }

    public boolean equals(TransformToMMI_L_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(TransformToMMI_L_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("TransformToMMI_L_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TransformToMMI_L_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransformToMMI_L_resultStandardScheme getScheme() {
        return new TransformToMMI_L_resultStandardScheme();
      }
    }

    private static class TransformToMMI_L_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TransformToMMI_L_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TransformToMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.math.MTransform();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TransformToMMI_L_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TransformToMMI_L_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransformToMMI_L_resultTupleScheme getScheme() {
        return new TransformToMMI_L_resultTupleScheme();
      }
    }

    private static class TransformToMMI_L_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TransformToMMI_L_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TransformToMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TransformToMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.math.MTransform();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class TransformToMMI_args implements org.apache.thrift.TBase<TransformToMMI_args, TransformToMMI_args._Fields>, java.io.Serializable, Cloneable, Comparable<TransformToMMI_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransformToMMI_args");

    private static final org.apache.thrift.protocol.TField TRANSFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("transform", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FIRST_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("firstAxis", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SECOND_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("secondAxis", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField THIRD_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdAxis", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransformToMMI_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransformToMMI_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform transform; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection firstAxis; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection secondAxis; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection thirdAxis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSFORM((short)1, "transform"),
      /**
       * 
       * @see MDirection
       */
      FIRST_AXIS((short)2, "firstAxis"),
      /**
       * 
       * @see MDirection
       */
      SECOND_AXIS((short)3, "secondAxis"),
      /**
       * 
       * @see MDirection
       */
      THIRD_AXIS((short)4, "thirdAxis");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSFORM
            return TRANSFORM;
          case 2: // FIRST_AXIS
            return FIRST_AXIS;
          case 3: // SECOND_AXIS
            return SECOND_AXIS;
          case 4: // THIRD_AXIS
            return THIRD_AXIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSFORM, new org.apache.thrift.meta_data.FieldMetaData("transform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MTransform.class)));
      tmpMap.put(_Fields.FIRST_AXIS, new org.apache.thrift.meta_data.FieldMetaData("firstAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      tmpMap.put(_Fields.SECOND_AXIS, new org.apache.thrift.meta_data.FieldMetaData("secondAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      tmpMap.put(_Fields.THIRD_AXIS, new org.apache.thrift.meta_data.FieldMetaData("thirdAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransformToMMI_args.class, metaDataMap);
    }

    public TransformToMMI_args() {
    }

    public TransformToMMI_args(
      de.mosim.mmi.math.MTransform transform,
      MDirection firstAxis,
      MDirection secondAxis,
      MDirection thirdAxis)
    {
      this();
      this.transform = transform;
      this.firstAxis = firstAxis;
      this.secondAxis = secondAxis;
      this.thirdAxis = thirdAxis;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TransformToMMI_args(TransformToMMI_args other) {
      if (other.isSetTransform()) {
        this.transform = new de.mosim.mmi.math.MTransform(other.transform);
      }
      if (other.isSetFirstAxis()) {
        this.firstAxis = other.firstAxis;
      }
      if (other.isSetSecondAxis()) {
        this.secondAxis = other.secondAxis;
      }
      if (other.isSetThirdAxis()) {
        this.thirdAxis = other.thirdAxis;
      }
    }

    public TransformToMMI_args deepCopy() {
      return new TransformToMMI_args(this);
    }

    @Override
    public void clear() {
      this.transform = null;
      this.firstAxis = null;
      this.secondAxis = null;
      this.thirdAxis = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MTransform getTransform() {
      return this.transform;
    }

    public TransformToMMI_args setTransform(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform transform) {
      this.transform = transform;
      return this;
    }

    public void unsetTransform() {
      this.transform = null;
    }

    /** Returns true if field transform is set (has been assigned a value) and false otherwise */
    public boolean isSetTransform() {
      return this.transform != null;
    }

    public void setTransformIsSet(boolean value) {
      if (!value) {
        this.transform = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getFirstAxis() {
      return this.firstAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public TransformToMMI_args setFirstAxis(@org.apache.thrift.annotation.Nullable MDirection firstAxis) {
      this.firstAxis = firstAxis;
      return this;
    }

    public void unsetFirstAxis() {
      this.firstAxis = null;
    }

    /** Returns true if field firstAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstAxis() {
      return this.firstAxis != null;
    }

    public void setFirstAxisIsSet(boolean value) {
      if (!value) {
        this.firstAxis = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getSecondAxis() {
      return this.secondAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public TransformToMMI_args setSecondAxis(@org.apache.thrift.annotation.Nullable MDirection secondAxis) {
      this.secondAxis = secondAxis;
      return this;
    }

    public void unsetSecondAxis() {
      this.secondAxis = null;
    }

    /** Returns true if field secondAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetSecondAxis() {
      return this.secondAxis != null;
    }

    public void setSecondAxisIsSet(boolean value) {
      if (!value) {
        this.secondAxis = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getThirdAxis() {
      return this.thirdAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public TransformToMMI_args setThirdAxis(@org.apache.thrift.annotation.Nullable MDirection thirdAxis) {
      this.thirdAxis = thirdAxis;
      return this;
    }

    public void unsetThirdAxis() {
      this.thirdAxis = null;
    }

    /** Returns true if field thirdAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetThirdAxis() {
      return this.thirdAxis != null;
    }

    public void setThirdAxisIsSet(boolean value) {
      if (!value) {
        this.thirdAxis = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TRANSFORM:
        if (value == null) {
          unsetTransform();
        } else {
          setTransform((de.mosim.mmi.math.MTransform)value);
        }
        break;

      case FIRST_AXIS:
        if (value == null) {
          unsetFirstAxis();
        } else {
          setFirstAxis((MDirection)value);
        }
        break;

      case SECOND_AXIS:
        if (value == null) {
          unsetSecondAxis();
        } else {
          setSecondAxis((MDirection)value);
        }
        break;

      case THIRD_AXIS:
        if (value == null) {
          unsetThirdAxis();
        } else {
          setThirdAxis((MDirection)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSFORM:
        return getTransform();

      case FIRST_AXIS:
        return getFirstAxis();

      case SECOND_AXIS:
        return getSecondAxis();

      case THIRD_AXIS:
        return getThirdAxis();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TRANSFORM:
        return isSetTransform();
      case FIRST_AXIS:
        return isSetFirstAxis();
      case SECOND_AXIS:
        return isSetSecondAxis();
      case THIRD_AXIS:
        return isSetThirdAxis();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof TransformToMMI_args)
        return this.equals((TransformToMMI_args)that);
      return false;
    }

    public boolean equals(TransformToMMI_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_transform = true && this.isSetTransform();
      boolean that_present_transform = true && that.isSetTransform();
      if (this_present_transform || that_present_transform) {
        if (!(this_present_transform && that_present_transform))
          return false;
        if (!this.transform.equals(that.transform))
          return false;
      }

      boolean this_present_firstAxis = true && this.isSetFirstAxis();
      boolean that_present_firstAxis = true && that.isSetFirstAxis();
      if (this_present_firstAxis || that_present_firstAxis) {
        if (!(this_present_firstAxis && that_present_firstAxis))
          return false;
        if (!this.firstAxis.equals(that.firstAxis))
          return false;
      }

      boolean this_present_secondAxis = true && this.isSetSecondAxis();
      boolean that_present_secondAxis = true && that.isSetSecondAxis();
      if (this_present_secondAxis || that_present_secondAxis) {
        if (!(this_present_secondAxis && that_present_secondAxis))
          return false;
        if (!this.secondAxis.equals(that.secondAxis))
          return false;
      }

      boolean this_present_thirdAxis = true && this.isSetThirdAxis();
      boolean that_present_thirdAxis = true && that.isSetThirdAxis();
      if (this_present_thirdAxis || that_present_thirdAxis) {
        if (!(this_present_thirdAxis && that_present_thirdAxis))
          return false;
        if (!this.thirdAxis.equals(that.thirdAxis))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTransform()) ? 131071 : 524287);
      if (isSetTransform())
        hashCode = hashCode * 8191 + transform.hashCode();

      hashCode = hashCode * 8191 + ((isSetFirstAxis()) ? 131071 : 524287);
      if (isSetFirstAxis())
        hashCode = hashCode * 8191 + firstAxis.getValue();

      hashCode = hashCode * 8191 + ((isSetSecondAxis()) ? 131071 : 524287);
      if (isSetSecondAxis())
        hashCode = hashCode * 8191 + secondAxis.getValue();

      hashCode = hashCode * 8191 + ((isSetThirdAxis()) ? 131071 : 524287);
      if (isSetThirdAxis())
        hashCode = hashCode * 8191 + thirdAxis.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(TransformToMMI_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTransform()).compareTo(other.isSetTransform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transform, other.transform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFirstAxis()).compareTo(other.isSetFirstAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstAxis, other.firstAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSecondAxis()).compareTo(other.isSetSecondAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecondAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondAxis, other.secondAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetThirdAxis()).compareTo(other.isSetThirdAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThirdAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdAxis, other.thirdAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("TransformToMMI_args(");
      boolean first = true;

      sb.append("transform:");
      if (this.transform == null) {
        sb.append("null");
      } else {
        sb.append(this.transform);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("firstAxis:");
      if (this.firstAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.firstAxis);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secondAxis:");
      if (this.secondAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.secondAxis);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("thirdAxis:");
      if (this.thirdAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdAxis);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (transform != null) {
        transform.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TransformToMMI_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransformToMMI_argsStandardScheme getScheme() {
        return new TransformToMMI_argsStandardScheme();
      }
    }

    private static class TransformToMMI_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TransformToMMI_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TransformToMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transform = new de.mosim.mmi.math.MTransform();
                struct.transform.read(iprot);
                struct.setTransformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FIRST_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.firstAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setFirstAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECOND_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.secondAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setSecondAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // THIRD_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.thirdAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setThirdAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TransformToMMI_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transform != null) {
          oprot.writeFieldBegin(TRANSFORM_FIELD_DESC);
          struct.transform.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.firstAxis != null) {
          oprot.writeFieldBegin(FIRST_AXIS_FIELD_DESC);
          oprot.writeI32(struct.firstAxis.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.secondAxis != null) {
          oprot.writeFieldBegin(SECOND_AXIS_FIELD_DESC);
          oprot.writeI32(struct.secondAxis.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.thirdAxis != null) {
          oprot.writeFieldBegin(THIRD_AXIS_FIELD_DESC);
          oprot.writeI32(struct.thirdAxis.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TransformToMMI_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransformToMMI_argsTupleScheme getScheme() {
        return new TransformToMMI_argsTupleScheme();
      }
    }

    private static class TransformToMMI_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TransformToMMI_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TransformToMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTransform()) {
          optionals.set(0);
        }
        if (struct.isSetFirstAxis()) {
          optionals.set(1);
        }
        if (struct.isSetSecondAxis()) {
          optionals.set(2);
        }
        if (struct.isSetThirdAxis()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTransform()) {
          struct.transform.write(oprot);
        }
        if (struct.isSetFirstAxis()) {
          oprot.writeI32(struct.firstAxis.getValue());
        }
        if (struct.isSetSecondAxis()) {
          oprot.writeI32(struct.secondAxis.getValue());
        }
        if (struct.isSetThirdAxis()) {
          oprot.writeI32(struct.thirdAxis.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TransformToMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.transform = new de.mosim.mmi.math.MTransform();
          struct.transform.read(iprot);
          struct.setTransformIsSet(true);
        }
        if (incoming.get(1)) {
          struct.firstAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setFirstAxisIsSet(true);
        }
        if (incoming.get(2)) {
          struct.secondAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setSecondAxisIsSet(true);
        }
        if (incoming.get(3)) {
          struct.thirdAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setThirdAxisIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class TransformToMMI_result implements org.apache.thrift.TBase<TransformToMMI_result, TransformToMMI_result._Fields>, java.io.Serializable, Cloneable, Comparable<TransformToMMI_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransformToMMI_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransformToMMI_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransformToMMI_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MTransform.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransformToMMI_result.class, metaDataMap);
    }

    public TransformToMMI_result() {
    }

    public TransformToMMI_result(
      de.mosim.mmi.math.MTransform success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TransformToMMI_result(TransformToMMI_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.math.MTransform(other.success);
      }
    }

    public TransformToMMI_result deepCopy() {
      return new TransformToMMI_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MTransform getSuccess() {
      return this.success;
    }

    public TransformToMMI_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.math.MTransform)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof TransformToMMI_result)
        return this.equals((TransformToMMI_result)that);
      return false;
    }

    public boolean equals(TransformToMMI_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(TransformToMMI_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("TransformToMMI_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TransformToMMI_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransformToMMI_resultStandardScheme getScheme() {
        return new TransformToMMI_resultStandardScheme();
      }
    }

    private static class TransformToMMI_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TransformToMMI_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TransformToMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.math.MTransform();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TransformToMMI_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TransformToMMI_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransformToMMI_resultTupleScheme getScheme() {
        return new TransformToMMI_resultTupleScheme();
      }
    }

    private static class TransformToMMI_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TransformToMMI_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TransformToMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TransformToMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.math.MTransform();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class TransformFromMMI_L_args implements org.apache.thrift.TBase<TransformFromMMI_L_args, TransformFromMMI_L_args._Fields>, java.io.Serializable, Cloneable, Comparable<TransformFromMMI_L_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransformFromMMI_L_args");

    private static final org.apache.thrift.protocol.TField TRANSFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("transform", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COORDINATE_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinateSystem", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransformFromMMI_L_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransformFromMMI_L_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform transform; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<MDirection> coordinateSystem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSFORM((short)1, "transform"),
      COORDINATE_SYSTEM((short)2, "coordinateSystem");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSFORM
            return TRANSFORM;
          case 2: // COORDINATE_SYSTEM
            return COORDINATE_SYSTEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSFORM, new org.apache.thrift.meta_data.FieldMetaData("transform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MTransform.class)));
      tmpMap.put(_Fields.COORDINATE_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("coordinateSystem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransformFromMMI_L_args.class, metaDataMap);
    }

    public TransformFromMMI_L_args() {
    }

    public TransformFromMMI_L_args(
      de.mosim.mmi.math.MTransform transform,
      java.util.List<MDirection> coordinateSystem)
    {
      this();
      this.transform = transform;
      this.coordinateSystem = coordinateSystem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TransformFromMMI_L_args(TransformFromMMI_L_args other) {
      if (other.isSetTransform()) {
        this.transform = new de.mosim.mmi.math.MTransform(other.transform);
      }
      if (other.isSetCoordinateSystem()) {
        java.util.List<MDirection> __this__coordinateSystem = new java.util.ArrayList<MDirection>(other.coordinateSystem.size());
        for (MDirection other_element : other.coordinateSystem) {
          __this__coordinateSystem.add(other_element);
        }
        this.coordinateSystem = __this__coordinateSystem;
      }
    }

    public TransformFromMMI_L_args deepCopy() {
      return new TransformFromMMI_L_args(this);
    }

    @Override
    public void clear() {
      this.transform = null;
      this.coordinateSystem = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MTransform getTransform() {
      return this.transform;
    }

    public TransformFromMMI_L_args setTransform(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform transform) {
      this.transform = transform;
      return this;
    }

    public void unsetTransform() {
      this.transform = null;
    }

    /** Returns true if field transform is set (has been assigned a value) and false otherwise */
    public boolean isSetTransform() {
      return this.transform != null;
    }

    public void setTransformIsSet(boolean value) {
      if (!value) {
        this.transform = null;
      }
    }

    public int getCoordinateSystemSize() {
      return (this.coordinateSystem == null) ? 0 : this.coordinateSystem.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<MDirection> getCoordinateSystemIterator() {
      return (this.coordinateSystem == null) ? null : this.coordinateSystem.iterator();
    }

    public void addToCoordinateSystem(MDirection elem) {
      if (this.coordinateSystem == null) {
        this.coordinateSystem = new java.util.ArrayList<MDirection>();
      }
      this.coordinateSystem.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<MDirection> getCoordinateSystem() {
      return this.coordinateSystem;
    }

    public TransformFromMMI_L_args setCoordinateSystem(@org.apache.thrift.annotation.Nullable java.util.List<MDirection> coordinateSystem) {
      this.coordinateSystem = coordinateSystem;
      return this;
    }

    public void unsetCoordinateSystem() {
      this.coordinateSystem = null;
    }

    /** Returns true if field coordinateSystem is set (has been assigned a value) and false otherwise */
    public boolean isSetCoordinateSystem() {
      return this.coordinateSystem != null;
    }

    public void setCoordinateSystemIsSet(boolean value) {
      if (!value) {
        this.coordinateSystem = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TRANSFORM:
        if (value == null) {
          unsetTransform();
        } else {
          setTransform((de.mosim.mmi.math.MTransform)value);
        }
        break;

      case COORDINATE_SYSTEM:
        if (value == null) {
          unsetCoordinateSystem();
        } else {
          setCoordinateSystem((java.util.List<MDirection>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSFORM:
        return getTransform();

      case COORDINATE_SYSTEM:
        return getCoordinateSystem();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TRANSFORM:
        return isSetTransform();
      case COORDINATE_SYSTEM:
        return isSetCoordinateSystem();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof TransformFromMMI_L_args)
        return this.equals((TransformFromMMI_L_args)that);
      return false;
    }

    public boolean equals(TransformFromMMI_L_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_transform = true && this.isSetTransform();
      boolean that_present_transform = true && that.isSetTransform();
      if (this_present_transform || that_present_transform) {
        if (!(this_present_transform && that_present_transform))
          return false;
        if (!this.transform.equals(that.transform))
          return false;
      }

      boolean this_present_coordinateSystem = true && this.isSetCoordinateSystem();
      boolean that_present_coordinateSystem = true && that.isSetCoordinateSystem();
      if (this_present_coordinateSystem || that_present_coordinateSystem) {
        if (!(this_present_coordinateSystem && that_present_coordinateSystem))
          return false;
        if (!this.coordinateSystem.equals(that.coordinateSystem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTransform()) ? 131071 : 524287);
      if (isSetTransform())
        hashCode = hashCode * 8191 + transform.hashCode();

      hashCode = hashCode * 8191 + ((isSetCoordinateSystem()) ? 131071 : 524287);
      if (isSetCoordinateSystem())
        hashCode = hashCode * 8191 + coordinateSystem.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(TransformFromMMI_L_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTransform()).compareTo(other.isSetTransform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transform, other.transform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCoordinateSystem()).compareTo(other.isSetCoordinateSystem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoordinateSystem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinateSystem, other.coordinateSystem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("TransformFromMMI_L_args(");
      boolean first = true;

      sb.append("transform:");
      if (this.transform == null) {
        sb.append("null");
      } else {
        sb.append(this.transform);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coordinateSystem:");
      if (this.coordinateSystem == null) {
        sb.append("null");
      } else {
        sb.append(this.coordinateSystem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (transform != null) {
        transform.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TransformFromMMI_L_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransformFromMMI_L_argsStandardScheme getScheme() {
        return new TransformFromMMI_L_argsStandardScheme();
      }
    }

    private static class TransformFromMMI_L_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TransformFromMMI_L_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TransformFromMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transform = new de.mosim.mmi.math.MTransform();
                struct.transform.read(iprot);
                struct.setTransformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COORDINATE_SYSTEM
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list356 = iprot.readListBegin();
                  struct.coordinateSystem = new java.util.ArrayList<MDirection>(_list356.size);
                  @org.apache.thrift.annotation.Nullable MDirection _elem357;
                  for (int _i358 = 0; _i358 < _list356.size; ++_i358)
                  {
                    _elem357 = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                    if (_elem357 != null)
                    {
                      struct.coordinateSystem.add(_elem357);
                    }
                  }
                  iprot.readListEnd();
                }
                struct.setCoordinateSystemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TransformFromMMI_L_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transform != null) {
          oprot.writeFieldBegin(TRANSFORM_FIELD_DESC);
          struct.transform.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.coordinateSystem != null) {
          oprot.writeFieldBegin(COORDINATE_SYSTEM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.coordinateSystem.size()));
            for (MDirection _iter359 : struct.coordinateSystem)
            {
              oprot.writeI32(_iter359.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TransformFromMMI_L_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransformFromMMI_L_argsTupleScheme getScheme() {
        return new TransformFromMMI_L_argsTupleScheme();
      }
    }

    private static class TransformFromMMI_L_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TransformFromMMI_L_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TransformFromMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTransform()) {
          optionals.set(0);
        }
        if (struct.isSetCoordinateSystem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTransform()) {
          struct.transform.write(oprot);
        }
        if (struct.isSetCoordinateSystem()) {
          {
            oprot.writeI32(struct.coordinateSystem.size());
            for (MDirection _iter360 : struct.coordinateSystem)
            {
              oprot.writeI32(_iter360.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TransformFromMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.transform = new de.mosim.mmi.math.MTransform();
          struct.transform.read(iprot);
          struct.setTransformIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list361 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.coordinateSystem = new java.util.ArrayList<MDirection>(_list361.size);
            @org.apache.thrift.annotation.Nullable MDirection _elem362;
            for (int _i363 = 0; _i363 < _list361.size; ++_i363)
            {
              _elem362 = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
              if (_elem362 != null)
              {
                struct.coordinateSystem.add(_elem362);
              }
            }
          }
          struct.setCoordinateSystemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class TransformFromMMI_L_result implements org.apache.thrift.TBase<TransformFromMMI_L_result, TransformFromMMI_L_result._Fields>, java.io.Serializable, Cloneable, Comparable<TransformFromMMI_L_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransformFromMMI_L_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransformFromMMI_L_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransformFromMMI_L_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MTransform.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransformFromMMI_L_result.class, metaDataMap);
    }

    public TransformFromMMI_L_result() {
    }

    public TransformFromMMI_L_result(
      de.mosim.mmi.math.MTransform success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TransformFromMMI_L_result(TransformFromMMI_L_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.math.MTransform(other.success);
      }
    }

    public TransformFromMMI_L_result deepCopy() {
      return new TransformFromMMI_L_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MTransform getSuccess() {
      return this.success;
    }

    public TransformFromMMI_L_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.math.MTransform)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof TransformFromMMI_L_result)
        return this.equals((TransformFromMMI_L_result)that);
      return false;
    }

    public boolean equals(TransformFromMMI_L_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(TransformFromMMI_L_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("TransformFromMMI_L_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TransformFromMMI_L_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransformFromMMI_L_resultStandardScheme getScheme() {
        return new TransformFromMMI_L_resultStandardScheme();
      }
    }

    private static class TransformFromMMI_L_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TransformFromMMI_L_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TransformFromMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.math.MTransform();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TransformFromMMI_L_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TransformFromMMI_L_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransformFromMMI_L_resultTupleScheme getScheme() {
        return new TransformFromMMI_L_resultTupleScheme();
      }
    }

    private static class TransformFromMMI_L_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TransformFromMMI_L_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TransformFromMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TransformFromMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.math.MTransform();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class TransformFromMMI_args implements org.apache.thrift.TBase<TransformFromMMI_args, TransformFromMMI_args._Fields>, java.io.Serializable, Cloneable, Comparable<TransformFromMMI_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransformFromMMI_args");

    private static final org.apache.thrift.protocol.TField TRANSFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("transform", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FIRST_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("firstAxis", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SECOND_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("secondAxis", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField THIRD_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdAxis", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransformFromMMI_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransformFromMMI_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform transform; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection firstAxis; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection secondAxis; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection thirdAxis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSFORM((short)1, "transform"),
      /**
       * 
       * @see MDirection
       */
      FIRST_AXIS((short)2, "firstAxis"),
      /**
       * 
       * @see MDirection
       */
      SECOND_AXIS((short)3, "secondAxis"),
      /**
       * 
       * @see MDirection
       */
      THIRD_AXIS((short)4, "thirdAxis");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSFORM
            return TRANSFORM;
          case 2: // FIRST_AXIS
            return FIRST_AXIS;
          case 3: // SECOND_AXIS
            return SECOND_AXIS;
          case 4: // THIRD_AXIS
            return THIRD_AXIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSFORM, new org.apache.thrift.meta_data.FieldMetaData("transform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MTransform.class)));
      tmpMap.put(_Fields.FIRST_AXIS, new org.apache.thrift.meta_data.FieldMetaData("firstAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      tmpMap.put(_Fields.SECOND_AXIS, new org.apache.thrift.meta_data.FieldMetaData("secondAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      tmpMap.put(_Fields.THIRD_AXIS, new org.apache.thrift.meta_data.FieldMetaData("thirdAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransformFromMMI_args.class, metaDataMap);
    }

    public TransformFromMMI_args() {
    }

    public TransformFromMMI_args(
      de.mosim.mmi.math.MTransform transform,
      MDirection firstAxis,
      MDirection secondAxis,
      MDirection thirdAxis)
    {
      this();
      this.transform = transform;
      this.firstAxis = firstAxis;
      this.secondAxis = secondAxis;
      this.thirdAxis = thirdAxis;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TransformFromMMI_args(TransformFromMMI_args other) {
      if (other.isSetTransform()) {
        this.transform = new de.mosim.mmi.math.MTransform(other.transform);
      }
      if (other.isSetFirstAxis()) {
        this.firstAxis = other.firstAxis;
      }
      if (other.isSetSecondAxis()) {
        this.secondAxis = other.secondAxis;
      }
      if (other.isSetThirdAxis()) {
        this.thirdAxis = other.thirdAxis;
      }
    }

    public TransformFromMMI_args deepCopy() {
      return new TransformFromMMI_args(this);
    }

    @Override
    public void clear() {
      this.transform = null;
      this.firstAxis = null;
      this.secondAxis = null;
      this.thirdAxis = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MTransform getTransform() {
      return this.transform;
    }

    public TransformFromMMI_args setTransform(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform transform) {
      this.transform = transform;
      return this;
    }

    public void unsetTransform() {
      this.transform = null;
    }

    /** Returns true if field transform is set (has been assigned a value) and false otherwise */
    public boolean isSetTransform() {
      return this.transform != null;
    }

    public void setTransformIsSet(boolean value) {
      if (!value) {
        this.transform = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getFirstAxis() {
      return this.firstAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public TransformFromMMI_args setFirstAxis(@org.apache.thrift.annotation.Nullable MDirection firstAxis) {
      this.firstAxis = firstAxis;
      return this;
    }

    public void unsetFirstAxis() {
      this.firstAxis = null;
    }

    /** Returns true if field firstAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstAxis() {
      return this.firstAxis != null;
    }

    public void setFirstAxisIsSet(boolean value) {
      if (!value) {
        this.firstAxis = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getSecondAxis() {
      return this.secondAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public TransformFromMMI_args setSecondAxis(@org.apache.thrift.annotation.Nullable MDirection secondAxis) {
      this.secondAxis = secondAxis;
      return this;
    }

    public void unsetSecondAxis() {
      this.secondAxis = null;
    }

    /** Returns true if field secondAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetSecondAxis() {
      return this.secondAxis != null;
    }

    public void setSecondAxisIsSet(boolean value) {
      if (!value) {
        this.secondAxis = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getThirdAxis() {
      return this.thirdAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public TransformFromMMI_args setThirdAxis(@org.apache.thrift.annotation.Nullable MDirection thirdAxis) {
      this.thirdAxis = thirdAxis;
      return this;
    }

    public void unsetThirdAxis() {
      this.thirdAxis = null;
    }

    /** Returns true if field thirdAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetThirdAxis() {
      return this.thirdAxis != null;
    }

    public void setThirdAxisIsSet(boolean value) {
      if (!value) {
        this.thirdAxis = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TRANSFORM:
        if (value == null) {
          unsetTransform();
        } else {
          setTransform((de.mosim.mmi.math.MTransform)value);
        }
        break;

      case FIRST_AXIS:
        if (value == null) {
          unsetFirstAxis();
        } else {
          setFirstAxis((MDirection)value);
        }
        break;

      case SECOND_AXIS:
        if (value == null) {
          unsetSecondAxis();
        } else {
          setSecondAxis((MDirection)value);
        }
        break;

      case THIRD_AXIS:
        if (value == null) {
          unsetThirdAxis();
        } else {
          setThirdAxis((MDirection)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSFORM:
        return getTransform();

      case FIRST_AXIS:
        return getFirstAxis();

      case SECOND_AXIS:
        return getSecondAxis();

      case THIRD_AXIS:
        return getThirdAxis();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TRANSFORM:
        return isSetTransform();
      case FIRST_AXIS:
        return isSetFirstAxis();
      case SECOND_AXIS:
        return isSetSecondAxis();
      case THIRD_AXIS:
        return isSetThirdAxis();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof TransformFromMMI_args)
        return this.equals((TransformFromMMI_args)that);
      return false;
    }

    public boolean equals(TransformFromMMI_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_transform = true && this.isSetTransform();
      boolean that_present_transform = true && that.isSetTransform();
      if (this_present_transform || that_present_transform) {
        if (!(this_present_transform && that_present_transform))
          return false;
        if (!this.transform.equals(that.transform))
          return false;
      }

      boolean this_present_firstAxis = true && this.isSetFirstAxis();
      boolean that_present_firstAxis = true && that.isSetFirstAxis();
      if (this_present_firstAxis || that_present_firstAxis) {
        if (!(this_present_firstAxis && that_present_firstAxis))
          return false;
        if (!this.firstAxis.equals(that.firstAxis))
          return false;
      }

      boolean this_present_secondAxis = true && this.isSetSecondAxis();
      boolean that_present_secondAxis = true && that.isSetSecondAxis();
      if (this_present_secondAxis || that_present_secondAxis) {
        if (!(this_present_secondAxis && that_present_secondAxis))
          return false;
        if (!this.secondAxis.equals(that.secondAxis))
          return false;
      }

      boolean this_present_thirdAxis = true && this.isSetThirdAxis();
      boolean that_present_thirdAxis = true && that.isSetThirdAxis();
      if (this_present_thirdAxis || that_present_thirdAxis) {
        if (!(this_present_thirdAxis && that_present_thirdAxis))
          return false;
        if (!this.thirdAxis.equals(that.thirdAxis))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTransform()) ? 131071 : 524287);
      if (isSetTransform())
        hashCode = hashCode * 8191 + transform.hashCode();

      hashCode = hashCode * 8191 + ((isSetFirstAxis()) ? 131071 : 524287);
      if (isSetFirstAxis())
        hashCode = hashCode * 8191 + firstAxis.getValue();

      hashCode = hashCode * 8191 + ((isSetSecondAxis()) ? 131071 : 524287);
      if (isSetSecondAxis())
        hashCode = hashCode * 8191 + secondAxis.getValue();

      hashCode = hashCode * 8191 + ((isSetThirdAxis()) ? 131071 : 524287);
      if (isSetThirdAxis())
        hashCode = hashCode * 8191 + thirdAxis.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(TransformFromMMI_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTransform()).compareTo(other.isSetTransform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transform, other.transform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFirstAxis()).compareTo(other.isSetFirstAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstAxis, other.firstAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSecondAxis()).compareTo(other.isSetSecondAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecondAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondAxis, other.secondAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetThirdAxis()).compareTo(other.isSetThirdAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThirdAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdAxis, other.thirdAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("TransformFromMMI_args(");
      boolean first = true;

      sb.append("transform:");
      if (this.transform == null) {
        sb.append("null");
      } else {
        sb.append(this.transform);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("firstAxis:");
      if (this.firstAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.firstAxis);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secondAxis:");
      if (this.secondAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.secondAxis);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("thirdAxis:");
      if (this.thirdAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdAxis);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (transform != null) {
        transform.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TransformFromMMI_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransformFromMMI_argsStandardScheme getScheme() {
        return new TransformFromMMI_argsStandardScheme();
      }
    }

    private static class TransformFromMMI_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TransformFromMMI_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TransformFromMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transform = new de.mosim.mmi.math.MTransform();
                struct.transform.read(iprot);
                struct.setTransformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FIRST_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.firstAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setFirstAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECOND_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.secondAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setSecondAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // THIRD_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.thirdAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setThirdAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TransformFromMMI_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transform != null) {
          oprot.writeFieldBegin(TRANSFORM_FIELD_DESC);
          struct.transform.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.firstAxis != null) {
          oprot.writeFieldBegin(FIRST_AXIS_FIELD_DESC);
          oprot.writeI32(struct.firstAxis.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.secondAxis != null) {
          oprot.writeFieldBegin(SECOND_AXIS_FIELD_DESC);
          oprot.writeI32(struct.secondAxis.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.thirdAxis != null) {
          oprot.writeFieldBegin(THIRD_AXIS_FIELD_DESC);
          oprot.writeI32(struct.thirdAxis.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TransformFromMMI_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransformFromMMI_argsTupleScheme getScheme() {
        return new TransformFromMMI_argsTupleScheme();
      }
    }

    private static class TransformFromMMI_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TransformFromMMI_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TransformFromMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTransform()) {
          optionals.set(0);
        }
        if (struct.isSetFirstAxis()) {
          optionals.set(1);
        }
        if (struct.isSetSecondAxis()) {
          optionals.set(2);
        }
        if (struct.isSetThirdAxis()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTransform()) {
          struct.transform.write(oprot);
        }
        if (struct.isSetFirstAxis()) {
          oprot.writeI32(struct.firstAxis.getValue());
        }
        if (struct.isSetSecondAxis()) {
          oprot.writeI32(struct.secondAxis.getValue());
        }
        if (struct.isSetThirdAxis()) {
          oprot.writeI32(struct.thirdAxis.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TransformFromMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.transform = new de.mosim.mmi.math.MTransform();
          struct.transform.read(iprot);
          struct.setTransformIsSet(true);
        }
        if (incoming.get(1)) {
          struct.firstAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setFirstAxisIsSet(true);
        }
        if (incoming.get(2)) {
          struct.secondAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setSecondAxisIsSet(true);
        }
        if (incoming.get(3)) {
          struct.thirdAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setThirdAxisIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class TransformFromMMI_result implements org.apache.thrift.TBase<TransformFromMMI_result, TransformFromMMI_result._Fields>, java.io.Serializable, Cloneable, Comparable<TransformFromMMI_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransformFromMMI_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransformFromMMI_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransformFromMMI_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MTransform.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransformFromMMI_result.class, metaDataMap);
    }

    public TransformFromMMI_result() {
    }

    public TransformFromMMI_result(
      de.mosim.mmi.math.MTransform success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TransformFromMMI_result(TransformFromMMI_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.math.MTransform(other.success);
      }
    }

    public TransformFromMMI_result deepCopy() {
      return new TransformFromMMI_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MTransform getSuccess() {
      return this.success;
    }

    public TransformFromMMI_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MTransform success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.math.MTransform)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof TransformFromMMI_result)
        return this.equals((TransformFromMMI_result)that);
      return false;
    }

    public boolean equals(TransformFromMMI_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(TransformFromMMI_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("TransformFromMMI_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TransformFromMMI_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransformFromMMI_resultStandardScheme getScheme() {
        return new TransformFromMMI_resultStandardScheme();
      }
    }

    private static class TransformFromMMI_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TransformFromMMI_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TransformFromMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.math.MTransform();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TransformFromMMI_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TransformFromMMI_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransformFromMMI_resultTupleScheme getScheme() {
        return new TransformFromMMI_resultTupleScheme();
      }
    }

    private static class TransformFromMMI_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TransformFromMMI_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TransformFromMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TransformFromMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.math.MTransform();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class QuaternionToMMI_L_args implements org.apache.thrift.TBase<QuaternionToMMI_L_args, QuaternionToMMI_L_args._Fields>, java.io.Serializable, Cloneable, Comparable<QuaternionToMMI_L_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuaternionToMMI_L_args");

    private static final org.apache.thrift.protocol.TField QUAT_FIELD_DESC = new org.apache.thrift.protocol.TField("quat", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COORDINATE_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinateSystem", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QuaternionToMMI_L_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QuaternionToMMI_L_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion quat; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<MDirection> coordinateSystem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUAT((short)1, "quat"),
      COORDINATE_SYSTEM((short)2, "coordinateSystem");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUAT
            return QUAT;
          case 2: // COORDINATE_SYSTEM
            return COORDINATE_SYSTEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUAT, new org.apache.thrift.meta_data.FieldMetaData("quat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MQuaternion.class)));
      tmpMap.put(_Fields.COORDINATE_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("coordinateSystem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuaternionToMMI_L_args.class, metaDataMap);
    }

    public QuaternionToMMI_L_args() {
    }

    public QuaternionToMMI_L_args(
      de.mosim.mmi.math.MQuaternion quat,
      java.util.List<MDirection> coordinateSystem)
    {
      this();
      this.quat = quat;
      this.coordinateSystem = coordinateSystem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QuaternionToMMI_L_args(QuaternionToMMI_L_args other) {
      if (other.isSetQuat()) {
        this.quat = new de.mosim.mmi.math.MQuaternion(other.quat);
      }
      if (other.isSetCoordinateSystem()) {
        java.util.List<MDirection> __this__coordinateSystem = new java.util.ArrayList<MDirection>(other.coordinateSystem.size());
        for (MDirection other_element : other.coordinateSystem) {
          __this__coordinateSystem.add(other_element);
        }
        this.coordinateSystem = __this__coordinateSystem;
      }
    }

    public QuaternionToMMI_L_args deepCopy() {
      return new QuaternionToMMI_L_args(this);
    }

    @Override
    public void clear() {
      this.quat = null;
      this.coordinateSystem = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MQuaternion getQuat() {
      return this.quat;
    }

    public QuaternionToMMI_L_args setQuat(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion quat) {
      this.quat = quat;
      return this;
    }

    public void unsetQuat() {
      this.quat = null;
    }

    /** Returns true if field quat is set (has been assigned a value) and false otherwise */
    public boolean isSetQuat() {
      return this.quat != null;
    }

    public void setQuatIsSet(boolean value) {
      if (!value) {
        this.quat = null;
      }
    }

    public int getCoordinateSystemSize() {
      return (this.coordinateSystem == null) ? 0 : this.coordinateSystem.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<MDirection> getCoordinateSystemIterator() {
      return (this.coordinateSystem == null) ? null : this.coordinateSystem.iterator();
    }

    public void addToCoordinateSystem(MDirection elem) {
      if (this.coordinateSystem == null) {
        this.coordinateSystem = new java.util.ArrayList<MDirection>();
      }
      this.coordinateSystem.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<MDirection> getCoordinateSystem() {
      return this.coordinateSystem;
    }

    public QuaternionToMMI_L_args setCoordinateSystem(@org.apache.thrift.annotation.Nullable java.util.List<MDirection> coordinateSystem) {
      this.coordinateSystem = coordinateSystem;
      return this;
    }

    public void unsetCoordinateSystem() {
      this.coordinateSystem = null;
    }

    /** Returns true if field coordinateSystem is set (has been assigned a value) and false otherwise */
    public boolean isSetCoordinateSystem() {
      return this.coordinateSystem != null;
    }

    public void setCoordinateSystemIsSet(boolean value) {
      if (!value) {
        this.coordinateSystem = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QUAT:
        if (value == null) {
          unsetQuat();
        } else {
          setQuat((de.mosim.mmi.math.MQuaternion)value);
        }
        break;

      case COORDINATE_SYSTEM:
        if (value == null) {
          unsetCoordinateSystem();
        } else {
          setCoordinateSystem((java.util.List<MDirection>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUAT:
        return getQuat();

      case COORDINATE_SYSTEM:
        return getCoordinateSystem();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUAT:
        return isSetQuat();
      case COORDINATE_SYSTEM:
        return isSetCoordinateSystem();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof QuaternionToMMI_L_args)
        return this.equals((QuaternionToMMI_L_args)that);
      return false;
    }

    public boolean equals(QuaternionToMMI_L_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_quat = true && this.isSetQuat();
      boolean that_present_quat = true && that.isSetQuat();
      if (this_present_quat || that_present_quat) {
        if (!(this_present_quat && that_present_quat))
          return false;
        if (!this.quat.equals(that.quat))
          return false;
      }

      boolean this_present_coordinateSystem = true && this.isSetCoordinateSystem();
      boolean that_present_coordinateSystem = true && that.isSetCoordinateSystem();
      if (this_present_coordinateSystem || that_present_coordinateSystem) {
        if (!(this_present_coordinateSystem && that_present_coordinateSystem))
          return false;
        if (!this.coordinateSystem.equals(that.coordinateSystem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuat()) ? 131071 : 524287);
      if (isSetQuat())
        hashCode = hashCode * 8191 + quat.hashCode();

      hashCode = hashCode * 8191 + ((isSetCoordinateSystem()) ? 131071 : 524287);
      if (isSetCoordinateSystem())
        hashCode = hashCode * 8191 + coordinateSystem.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(QuaternionToMMI_L_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuat()).compareTo(other.isSetQuat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quat, other.quat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCoordinateSystem()).compareTo(other.isSetCoordinateSystem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoordinateSystem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinateSystem, other.coordinateSystem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QuaternionToMMI_L_args(");
      boolean first = true;

      sb.append("quat:");
      if (this.quat == null) {
        sb.append("null");
      } else {
        sb.append(this.quat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coordinateSystem:");
      if (this.coordinateSystem == null) {
        sb.append("null");
      } else {
        sb.append(this.coordinateSystem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (quat != null) {
        quat.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QuaternionToMMI_L_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuaternionToMMI_L_argsStandardScheme getScheme() {
        return new QuaternionToMMI_L_argsStandardScheme();
      }
    }

    private static class QuaternionToMMI_L_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<QuaternionToMMI_L_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QuaternionToMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.quat = new de.mosim.mmi.math.MQuaternion();
                struct.quat.read(iprot);
                struct.setQuatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COORDINATE_SYSTEM
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list364 = iprot.readListBegin();
                  struct.coordinateSystem = new java.util.ArrayList<MDirection>(_list364.size);
                  @org.apache.thrift.annotation.Nullable MDirection _elem365;
                  for (int _i366 = 0; _i366 < _list364.size; ++_i366)
                  {
                    _elem365 = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                    if (_elem365 != null)
                    {
                      struct.coordinateSystem.add(_elem365);
                    }
                  }
                  iprot.readListEnd();
                }
                struct.setCoordinateSystemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QuaternionToMMI_L_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.quat != null) {
          oprot.writeFieldBegin(QUAT_FIELD_DESC);
          struct.quat.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.coordinateSystem != null) {
          oprot.writeFieldBegin(COORDINATE_SYSTEM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.coordinateSystem.size()));
            for (MDirection _iter367 : struct.coordinateSystem)
            {
              oprot.writeI32(_iter367.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QuaternionToMMI_L_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuaternionToMMI_L_argsTupleScheme getScheme() {
        return new QuaternionToMMI_L_argsTupleScheme();
      }
    }

    private static class QuaternionToMMI_L_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<QuaternionToMMI_L_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QuaternionToMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuat()) {
          optionals.set(0);
        }
        if (struct.isSetCoordinateSystem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuat()) {
          struct.quat.write(oprot);
        }
        if (struct.isSetCoordinateSystem()) {
          {
            oprot.writeI32(struct.coordinateSystem.size());
            for (MDirection _iter368 : struct.coordinateSystem)
            {
              oprot.writeI32(_iter368.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QuaternionToMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.quat = new de.mosim.mmi.math.MQuaternion();
          struct.quat.read(iprot);
          struct.setQuatIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list369 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.coordinateSystem = new java.util.ArrayList<MDirection>(_list369.size);
            @org.apache.thrift.annotation.Nullable MDirection _elem370;
            for (int _i371 = 0; _i371 < _list369.size; ++_i371)
            {
              _elem370 = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
              if (_elem370 != null)
              {
                struct.coordinateSystem.add(_elem370);
              }
            }
          }
          struct.setCoordinateSystemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class QuaternionToMMI_L_result implements org.apache.thrift.TBase<QuaternionToMMI_L_result, QuaternionToMMI_L_result._Fields>, java.io.Serializable, Cloneable, Comparable<QuaternionToMMI_L_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuaternionToMMI_L_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QuaternionToMMI_L_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QuaternionToMMI_L_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MQuaternion.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuaternionToMMI_L_result.class, metaDataMap);
    }

    public QuaternionToMMI_L_result() {
    }

    public QuaternionToMMI_L_result(
      de.mosim.mmi.math.MQuaternion success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QuaternionToMMI_L_result(QuaternionToMMI_L_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.math.MQuaternion(other.success);
      }
    }

    public QuaternionToMMI_L_result deepCopy() {
      return new QuaternionToMMI_L_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MQuaternion getSuccess() {
      return this.success;
    }

    public QuaternionToMMI_L_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.math.MQuaternion)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof QuaternionToMMI_L_result)
        return this.equals((QuaternionToMMI_L_result)that);
      return false;
    }

    public boolean equals(QuaternionToMMI_L_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(QuaternionToMMI_L_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QuaternionToMMI_L_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QuaternionToMMI_L_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuaternionToMMI_L_resultStandardScheme getScheme() {
        return new QuaternionToMMI_L_resultStandardScheme();
      }
    }

    private static class QuaternionToMMI_L_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<QuaternionToMMI_L_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QuaternionToMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.math.MQuaternion();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QuaternionToMMI_L_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QuaternionToMMI_L_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuaternionToMMI_L_resultTupleScheme getScheme() {
        return new QuaternionToMMI_L_resultTupleScheme();
      }
    }

    private static class QuaternionToMMI_L_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<QuaternionToMMI_L_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QuaternionToMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QuaternionToMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.math.MQuaternion();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class QuaternionToMMI_args implements org.apache.thrift.TBase<QuaternionToMMI_args, QuaternionToMMI_args._Fields>, java.io.Serializable, Cloneable, Comparable<QuaternionToMMI_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuaternionToMMI_args");

    private static final org.apache.thrift.protocol.TField QUAT_FIELD_DESC = new org.apache.thrift.protocol.TField("quat", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FIRST_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("firstAxis", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SECOND_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("secondAxis", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField THIRD_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdAxis", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QuaternionToMMI_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QuaternionToMMI_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion quat; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection firstAxis; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection secondAxis; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection thirdAxis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUAT((short)1, "quat"),
      /**
       * 
       * @see MDirection
       */
      FIRST_AXIS((short)2, "firstAxis"),
      /**
       * 
       * @see MDirection
       */
      SECOND_AXIS((short)3, "secondAxis"),
      /**
       * 
       * @see MDirection
       */
      THIRD_AXIS((short)4, "thirdAxis");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUAT
            return QUAT;
          case 2: // FIRST_AXIS
            return FIRST_AXIS;
          case 3: // SECOND_AXIS
            return SECOND_AXIS;
          case 4: // THIRD_AXIS
            return THIRD_AXIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUAT, new org.apache.thrift.meta_data.FieldMetaData("quat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MQuaternion.class)));
      tmpMap.put(_Fields.FIRST_AXIS, new org.apache.thrift.meta_data.FieldMetaData("firstAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      tmpMap.put(_Fields.SECOND_AXIS, new org.apache.thrift.meta_data.FieldMetaData("secondAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      tmpMap.put(_Fields.THIRD_AXIS, new org.apache.thrift.meta_data.FieldMetaData("thirdAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuaternionToMMI_args.class, metaDataMap);
    }

    public QuaternionToMMI_args() {
    }

    public QuaternionToMMI_args(
      de.mosim.mmi.math.MQuaternion quat,
      MDirection firstAxis,
      MDirection secondAxis,
      MDirection thirdAxis)
    {
      this();
      this.quat = quat;
      this.firstAxis = firstAxis;
      this.secondAxis = secondAxis;
      this.thirdAxis = thirdAxis;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QuaternionToMMI_args(QuaternionToMMI_args other) {
      if (other.isSetQuat()) {
        this.quat = new de.mosim.mmi.math.MQuaternion(other.quat);
      }
      if (other.isSetFirstAxis()) {
        this.firstAxis = other.firstAxis;
      }
      if (other.isSetSecondAxis()) {
        this.secondAxis = other.secondAxis;
      }
      if (other.isSetThirdAxis()) {
        this.thirdAxis = other.thirdAxis;
      }
    }

    public QuaternionToMMI_args deepCopy() {
      return new QuaternionToMMI_args(this);
    }

    @Override
    public void clear() {
      this.quat = null;
      this.firstAxis = null;
      this.secondAxis = null;
      this.thirdAxis = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MQuaternion getQuat() {
      return this.quat;
    }

    public QuaternionToMMI_args setQuat(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion quat) {
      this.quat = quat;
      return this;
    }

    public void unsetQuat() {
      this.quat = null;
    }

    /** Returns true if field quat is set (has been assigned a value) and false otherwise */
    public boolean isSetQuat() {
      return this.quat != null;
    }

    public void setQuatIsSet(boolean value) {
      if (!value) {
        this.quat = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getFirstAxis() {
      return this.firstAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public QuaternionToMMI_args setFirstAxis(@org.apache.thrift.annotation.Nullable MDirection firstAxis) {
      this.firstAxis = firstAxis;
      return this;
    }

    public void unsetFirstAxis() {
      this.firstAxis = null;
    }

    /** Returns true if field firstAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstAxis() {
      return this.firstAxis != null;
    }

    public void setFirstAxisIsSet(boolean value) {
      if (!value) {
        this.firstAxis = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getSecondAxis() {
      return this.secondAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public QuaternionToMMI_args setSecondAxis(@org.apache.thrift.annotation.Nullable MDirection secondAxis) {
      this.secondAxis = secondAxis;
      return this;
    }

    public void unsetSecondAxis() {
      this.secondAxis = null;
    }

    /** Returns true if field secondAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetSecondAxis() {
      return this.secondAxis != null;
    }

    public void setSecondAxisIsSet(boolean value) {
      if (!value) {
        this.secondAxis = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getThirdAxis() {
      return this.thirdAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public QuaternionToMMI_args setThirdAxis(@org.apache.thrift.annotation.Nullable MDirection thirdAxis) {
      this.thirdAxis = thirdAxis;
      return this;
    }

    public void unsetThirdAxis() {
      this.thirdAxis = null;
    }

    /** Returns true if field thirdAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetThirdAxis() {
      return this.thirdAxis != null;
    }

    public void setThirdAxisIsSet(boolean value) {
      if (!value) {
        this.thirdAxis = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QUAT:
        if (value == null) {
          unsetQuat();
        } else {
          setQuat((de.mosim.mmi.math.MQuaternion)value);
        }
        break;

      case FIRST_AXIS:
        if (value == null) {
          unsetFirstAxis();
        } else {
          setFirstAxis((MDirection)value);
        }
        break;

      case SECOND_AXIS:
        if (value == null) {
          unsetSecondAxis();
        } else {
          setSecondAxis((MDirection)value);
        }
        break;

      case THIRD_AXIS:
        if (value == null) {
          unsetThirdAxis();
        } else {
          setThirdAxis((MDirection)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUAT:
        return getQuat();

      case FIRST_AXIS:
        return getFirstAxis();

      case SECOND_AXIS:
        return getSecondAxis();

      case THIRD_AXIS:
        return getThirdAxis();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUAT:
        return isSetQuat();
      case FIRST_AXIS:
        return isSetFirstAxis();
      case SECOND_AXIS:
        return isSetSecondAxis();
      case THIRD_AXIS:
        return isSetThirdAxis();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof QuaternionToMMI_args)
        return this.equals((QuaternionToMMI_args)that);
      return false;
    }

    public boolean equals(QuaternionToMMI_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_quat = true && this.isSetQuat();
      boolean that_present_quat = true && that.isSetQuat();
      if (this_present_quat || that_present_quat) {
        if (!(this_present_quat && that_present_quat))
          return false;
        if (!this.quat.equals(that.quat))
          return false;
      }

      boolean this_present_firstAxis = true && this.isSetFirstAxis();
      boolean that_present_firstAxis = true && that.isSetFirstAxis();
      if (this_present_firstAxis || that_present_firstAxis) {
        if (!(this_present_firstAxis && that_present_firstAxis))
          return false;
        if (!this.firstAxis.equals(that.firstAxis))
          return false;
      }

      boolean this_present_secondAxis = true && this.isSetSecondAxis();
      boolean that_present_secondAxis = true && that.isSetSecondAxis();
      if (this_present_secondAxis || that_present_secondAxis) {
        if (!(this_present_secondAxis && that_present_secondAxis))
          return false;
        if (!this.secondAxis.equals(that.secondAxis))
          return false;
      }

      boolean this_present_thirdAxis = true && this.isSetThirdAxis();
      boolean that_present_thirdAxis = true && that.isSetThirdAxis();
      if (this_present_thirdAxis || that_present_thirdAxis) {
        if (!(this_present_thirdAxis && that_present_thirdAxis))
          return false;
        if (!this.thirdAxis.equals(that.thirdAxis))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuat()) ? 131071 : 524287);
      if (isSetQuat())
        hashCode = hashCode * 8191 + quat.hashCode();

      hashCode = hashCode * 8191 + ((isSetFirstAxis()) ? 131071 : 524287);
      if (isSetFirstAxis())
        hashCode = hashCode * 8191 + firstAxis.getValue();

      hashCode = hashCode * 8191 + ((isSetSecondAxis()) ? 131071 : 524287);
      if (isSetSecondAxis())
        hashCode = hashCode * 8191 + secondAxis.getValue();

      hashCode = hashCode * 8191 + ((isSetThirdAxis()) ? 131071 : 524287);
      if (isSetThirdAxis())
        hashCode = hashCode * 8191 + thirdAxis.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(QuaternionToMMI_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuat()).compareTo(other.isSetQuat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quat, other.quat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFirstAxis()).compareTo(other.isSetFirstAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstAxis, other.firstAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSecondAxis()).compareTo(other.isSetSecondAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecondAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondAxis, other.secondAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetThirdAxis()).compareTo(other.isSetThirdAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThirdAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdAxis, other.thirdAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QuaternionToMMI_args(");
      boolean first = true;

      sb.append("quat:");
      if (this.quat == null) {
        sb.append("null");
      } else {
        sb.append(this.quat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("firstAxis:");
      if (this.firstAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.firstAxis);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secondAxis:");
      if (this.secondAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.secondAxis);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("thirdAxis:");
      if (this.thirdAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdAxis);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (quat != null) {
        quat.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QuaternionToMMI_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuaternionToMMI_argsStandardScheme getScheme() {
        return new QuaternionToMMI_argsStandardScheme();
      }
    }

    private static class QuaternionToMMI_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<QuaternionToMMI_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QuaternionToMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.quat = new de.mosim.mmi.math.MQuaternion();
                struct.quat.read(iprot);
                struct.setQuatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FIRST_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.firstAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setFirstAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECOND_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.secondAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setSecondAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // THIRD_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.thirdAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setThirdAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QuaternionToMMI_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.quat != null) {
          oprot.writeFieldBegin(QUAT_FIELD_DESC);
          struct.quat.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.firstAxis != null) {
          oprot.writeFieldBegin(FIRST_AXIS_FIELD_DESC);
          oprot.writeI32(struct.firstAxis.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.secondAxis != null) {
          oprot.writeFieldBegin(SECOND_AXIS_FIELD_DESC);
          oprot.writeI32(struct.secondAxis.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.thirdAxis != null) {
          oprot.writeFieldBegin(THIRD_AXIS_FIELD_DESC);
          oprot.writeI32(struct.thirdAxis.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QuaternionToMMI_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuaternionToMMI_argsTupleScheme getScheme() {
        return new QuaternionToMMI_argsTupleScheme();
      }
    }

    private static class QuaternionToMMI_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<QuaternionToMMI_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QuaternionToMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuat()) {
          optionals.set(0);
        }
        if (struct.isSetFirstAxis()) {
          optionals.set(1);
        }
        if (struct.isSetSecondAxis()) {
          optionals.set(2);
        }
        if (struct.isSetThirdAxis()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetQuat()) {
          struct.quat.write(oprot);
        }
        if (struct.isSetFirstAxis()) {
          oprot.writeI32(struct.firstAxis.getValue());
        }
        if (struct.isSetSecondAxis()) {
          oprot.writeI32(struct.secondAxis.getValue());
        }
        if (struct.isSetThirdAxis()) {
          oprot.writeI32(struct.thirdAxis.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QuaternionToMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.quat = new de.mosim.mmi.math.MQuaternion();
          struct.quat.read(iprot);
          struct.setQuatIsSet(true);
        }
        if (incoming.get(1)) {
          struct.firstAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setFirstAxisIsSet(true);
        }
        if (incoming.get(2)) {
          struct.secondAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setSecondAxisIsSet(true);
        }
        if (incoming.get(3)) {
          struct.thirdAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setThirdAxisIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class QuaternionToMMI_result implements org.apache.thrift.TBase<QuaternionToMMI_result, QuaternionToMMI_result._Fields>, java.io.Serializable, Cloneable, Comparable<QuaternionToMMI_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuaternionToMMI_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QuaternionToMMI_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QuaternionToMMI_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MQuaternion.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuaternionToMMI_result.class, metaDataMap);
    }

    public QuaternionToMMI_result() {
    }

    public QuaternionToMMI_result(
      de.mosim.mmi.math.MQuaternion success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QuaternionToMMI_result(QuaternionToMMI_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.math.MQuaternion(other.success);
      }
    }

    public QuaternionToMMI_result deepCopy() {
      return new QuaternionToMMI_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MQuaternion getSuccess() {
      return this.success;
    }

    public QuaternionToMMI_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.math.MQuaternion)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof QuaternionToMMI_result)
        return this.equals((QuaternionToMMI_result)that);
      return false;
    }

    public boolean equals(QuaternionToMMI_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(QuaternionToMMI_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QuaternionToMMI_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QuaternionToMMI_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuaternionToMMI_resultStandardScheme getScheme() {
        return new QuaternionToMMI_resultStandardScheme();
      }
    }

    private static class QuaternionToMMI_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<QuaternionToMMI_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QuaternionToMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.math.MQuaternion();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QuaternionToMMI_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QuaternionToMMI_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuaternionToMMI_resultTupleScheme getScheme() {
        return new QuaternionToMMI_resultTupleScheme();
      }
    }

    private static class QuaternionToMMI_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<QuaternionToMMI_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QuaternionToMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QuaternionToMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.math.MQuaternion();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class QuaternionFromMMI_L_args implements org.apache.thrift.TBase<QuaternionFromMMI_L_args, QuaternionFromMMI_L_args._Fields>, java.io.Serializable, Cloneable, Comparable<QuaternionFromMMI_L_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuaternionFromMMI_L_args");

    private static final org.apache.thrift.protocol.TField QUAT_FIELD_DESC = new org.apache.thrift.protocol.TField("quat", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COORDINATE_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinateSystem", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QuaternionFromMMI_L_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QuaternionFromMMI_L_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion quat; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<MDirection> coordinateSystem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUAT((short)1, "quat"),
      COORDINATE_SYSTEM((short)2, "coordinateSystem");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUAT
            return QUAT;
          case 2: // COORDINATE_SYSTEM
            return COORDINATE_SYSTEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUAT, new org.apache.thrift.meta_data.FieldMetaData("quat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MQuaternion.class)));
      tmpMap.put(_Fields.COORDINATE_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("coordinateSystem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuaternionFromMMI_L_args.class, metaDataMap);
    }

    public QuaternionFromMMI_L_args() {
    }

    public QuaternionFromMMI_L_args(
      de.mosim.mmi.math.MQuaternion quat,
      java.util.List<MDirection> coordinateSystem)
    {
      this();
      this.quat = quat;
      this.coordinateSystem = coordinateSystem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QuaternionFromMMI_L_args(QuaternionFromMMI_L_args other) {
      if (other.isSetQuat()) {
        this.quat = new de.mosim.mmi.math.MQuaternion(other.quat);
      }
      if (other.isSetCoordinateSystem()) {
        java.util.List<MDirection> __this__coordinateSystem = new java.util.ArrayList<MDirection>(other.coordinateSystem.size());
        for (MDirection other_element : other.coordinateSystem) {
          __this__coordinateSystem.add(other_element);
        }
        this.coordinateSystem = __this__coordinateSystem;
      }
    }

    public QuaternionFromMMI_L_args deepCopy() {
      return new QuaternionFromMMI_L_args(this);
    }

    @Override
    public void clear() {
      this.quat = null;
      this.coordinateSystem = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MQuaternion getQuat() {
      return this.quat;
    }

    public QuaternionFromMMI_L_args setQuat(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion quat) {
      this.quat = quat;
      return this;
    }

    public void unsetQuat() {
      this.quat = null;
    }

    /** Returns true if field quat is set (has been assigned a value) and false otherwise */
    public boolean isSetQuat() {
      return this.quat != null;
    }

    public void setQuatIsSet(boolean value) {
      if (!value) {
        this.quat = null;
      }
    }

    public int getCoordinateSystemSize() {
      return (this.coordinateSystem == null) ? 0 : this.coordinateSystem.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<MDirection> getCoordinateSystemIterator() {
      return (this.coordinateSystem == null) ? null : this.coordinateSystem.iterator();
    }

    public void addToCoordinateSystem(MDirection elem) {
      if (this.coordinateSystem == null) {
        this.coordinateSystem = new java.util.ArrayList<MDirection>();
      }
      this.coordinateSystem.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<MDirection> getCoordinateSystem() {
      return this.coordinateSystem;
    }

    public QuaternionFromMMI_L_args setCoordinateSystem(@org.apache.thrift.annotation.Nullable java.util.List<MDirection> coordinateSystem) {
      this.coordinateSystem = coordinateSystem;
      return this;
    }

    public void unsetCoordinateSystem() {
      this.coordinateSystem = null;
    }

    /** Returns true if field coordinateSystem is set (has been assigned a value) and false otherwise */
    public boolean isSetCoordinateSystem() {
      return this.coordinateSystem != null;
    }

    public void setCoordinateSystemIsSet(boolean value) {
      if (!value) {
        this.coordinateSystem = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QUAT:
        if (value == null) {
          unsetQuat();
        } else {
          setQuat((de.mosim.mmi.math.MQuaternion)value);
        }
        break;

      case COORDINATE_SYSTEM:
        if (value == null) {
          unsetCoordinateSystem();
        } else {
          setCoordinateSystem((java.util.List<MDirection>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUAT:
        return getQuat();

      case COORDINATE_SYSTEM:
        return getCoordinateSystem();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUAT:
        return isSetQuat();
      case COORDINATE_SYSTEM:
        return isSetCoordinateSystem();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof QuaternionFromMMI_L_args)
        return this.equals((QuaternionFromMMI_L_args)that);
      return false;
    }

    public boolean equals(QuaternionFromMMI_L_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_quat = true && this.isSetQuat();
      boolean that_present_quat = true && that.isSetQuat();
      if (this_present_quat || that_present_quat) {
        if (!(this_present_quat && that_present_quat))
          return false;
        if (!this.quat.equals(that.quat))
          return false;
      }

      boolean this_present_coordinateSystem = true && this.isSetCoordinateSystem();
      boolean that_present_coordinateSystem = true && that.isSetCoordinateSystem();
      if (this_present_coordinateSystem || that_present_coordinateSystem) {
        if (!(this_present_coordinateSystem && that_present_coordinateSystem))
          return false;
        if (!this.coordinateSystem.equals(that.coordinateSystem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuat()) ? 131071 : 524287);
      if (isSetQuat())
        hashCode = hashCode * 8191 + quat.hashCode();

      hashCode = hashCode * 8191 + ((isSetCoordinateSystem()) ? 131071 : 524287);
      if (isSetCoordinateSystem())
        hashCode = hashCode * 8191 + coordinateSystem.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(QuaternionFromMMI_L_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuat()).compareTo(other.isSetQuat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quat, other.quat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCoordinateSystem()).compareTo(other.isSetCoordinateSystem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoordinateSystem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinateSystem, other.coordinateSystem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QuaternionFromMMI_L_args(");
      boolean first = true;

      sb.append("quat:");
      if (this.quat == null) {
        sb.append("null");
      } else {
        sb.append(this.quat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coordinateSystem:");
      if (this.coordinateSystem == null) {
        sb.append("null");
      } else {
        sb.append(this.coordinateSystem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (quat != null) {
        quat.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QuaternionFromMMI_L_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuaternionFromMMI_L_argsStandardScheme getScheme() {
        return new QuaternionFromMMI_L_argsStandardScheme();
      }
    }

    private static class QuaternionFromMMI_L_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<QuaternionFromMMI_L_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QuaternionFromMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.quat = new de.mosim.mmi.math.MQuaternion();
                struct.quat.read(iprot);
                struct.setQuatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COORDINATE_SYSTEM
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list372 = iprot.readListBegin();
                  struct.coordinateSystem = new java.util.ArrayList<MDirection>(_list372.size);
                  @org.apache.thrift.annotation.Nullable MDirection _elem373;
                  for (int _i374 = 0; _i374 < _list372.size; ++_i374)
                  {
                    _elem373 = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                    if (_elem373 != null)
                    {
                      struct.coordinateSystem.add(_elem373);
                    }
                  }
                  iprot.readListEnd();
                }
                struct.setCoordinateSystemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QuaternionFromMMI_L_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.quat != null) {
          oprot.writeFieldBegin(QUAT_FIELD_DESC);
          struct.quat.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.coordinateSystem != null) {
          oprot.writeFieldBegin(COORDINATE_SYSTEM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.coordinateSystem.size()));
            for (MDirection _iter375 : struct.coordinateSystem)
            {
              oprot.writeI32(_iter375.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QuaternionFromMMI_L_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuaternionFromMMI_L_argsTupleScheme getScheme() {
        return new QuaternionFromMMI_L_argsTupleScheme();
      }
    }

    private static class QuaternionFromMMI_L_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<QuaternionFromMMI_L_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QuaternionFromMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuat()) {
          optionals.set(0);
        }
        if (struct.isSetCoordinateSystem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuat()) {
          struct.quat.write(oprot);
        }
        if (struct.isSetCoordinateSystem()) {
          {
            oprot.writeI32(struct.coordinateSystem.size());
            for (MDirection _iter376 : struct.coordinateSystem)
            {
              oprot.writeI32(_iter376.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QuaternionFromMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.quat = new de.mosim.mmi.math.MQuaternion();
          struct.quat.read(iprot);
          struct.setQuatIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list377 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.coordinateSystem = new java.util.ArrayList<MDirection>(_list377.size);
            @org.apache.thrift.annotation.Nullable MDirection _elem378;
            for (int _i379 = 0; _i379 < _list377.size; ++_i379)
            {
              _elem378 = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
              if (_elem378 != null)
              {
                struct.coordinateSystem.add(_elem378);
              }
            }
          }
          struct.setCoordinateSystemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class QuaternionFromMMI_L_result implements org.apache.thrift.TBase<QuaternionFromMMI_L_result, QuaternionFromMMI_L_result._Fields>, java.io.Serializable, Cloneable, Comparable<QuaternionFromMMI_L_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuaternionFromMMI_L_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QuaternionFromMMI_L_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QuaternionFromMMI_L_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MQuaternion.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuaternionFromMMI_L_result.class, metaDataMap);
    }

    public QuaternionFromMMI_L_result() {
    }

    public QuaternionFromMMI_L_result(
      de.mosim.mmi.math.MQuaternion success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QuaternionFromMMI_L_result(QuaternionFromMMI_L_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.math.MQuaternion(other.success);
      }
    }

    public QuaternionFromMMI_L_result deepCopy() {
      return new QuaternionFromMMI_L_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MQuaternion getSuccess() {
      return this.success;
    }

    public QuaternionFromMMI_L_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.math.MQuaternion)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof QuaternionFromMMI_L_result)
        return this.equals((QuaternionFromMMI_L_result)that);
      return false;
    }

    public boolean equals(QuaternionFromMMI_L_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(QuaternionFromMMI_L_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QuaternionFromMMI_L_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QuaternionFromMMI_L_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuaternionFromMMI_L_resultStandardScheme getScheme() {
        return new QuaternionFromMMI_L_resultStandardScheme();
      }
    }

    private static class QuaternionFromMMI_L_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<QuaternionFromMMI_L_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QuaternionFromMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.math.MQuaternion();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QuaternionFromMMI_L_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QuaternionFromMMI_L_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuaternionFromMMI_L_resultTupleScheme getScheme() {
        return new QuaternionFromMMI_L_resultTupleScheme();
      }
    }

    private static class QuaternionFromMMI_L_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<QuaternionFromMMI_L_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QuaternionFromMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QuaternionFromMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.math.MQuaternion();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class QuaternionFromMMI_args implements org.apache.thrift.TBase<QuaternionFromMMI_args, QuaternionFromMMI_args._Fields>, java.io.Serializable, Cloneable, Comparable<QuaternionFromMMI_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuaternionFromMMI_args");

    private static final org.apache.thrift.protocol.TField QUAT_FIELD_DESC = new org.apache.thrift.protocol.TField("quat", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FIRST_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("firstAxis", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SECOND_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("secondAxis", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField THIRD_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdAxis", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QuaternionFromMMI_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QuaternionFromMMI_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion quat; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection firstAxis; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection secondAxis; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection thirdAxis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUAT((short)1, "quat"),
      /**
       * 
       * @see MDirection
       */
      FIRST_AXIS((short)2, "firstAxis"),
      /**
       * 
       * @see MDirection
       */
      SECOND_AXIS((short)3, "secondAxis"),
      /**
       * 
       * @see MDirection
       */
      THIRD_AXIS((short)4, "thirdAxis");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUAT
            return QUAT;
          case 2: // FIRST_AXIS
            return FIRST_AXIS;
          case 3: // SECOND_AXIS
            return SECOND_AXIS;
          case 4: // THIRD_AXIS
            return THIRD_AXIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUAT, new org.apache.thrift.meta_data.FieldMetaData("quat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MQuaternion.class)));
      tmpMap.put(_Fields.FIRST_AXIS, new org.apache.thrift.meta_data.FieldMetaData("firstAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      tmpMap.put(_Fields.SECOND_AXIS, new org.apache.thrift.meta_data.FieldMetaData("secondAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      tmpMap.put(_Fields.THIRD_AXIS, new org.apache.thrift.meta_data.FieldMetaData("thirdAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuaternionFromMMI_args.class, metaDataMap);
    }

    public QuaternionFromMMI_args() {
    }

    public QuaternionFromMMI_args(
      de.mosim.mmi.math.MQuaternion quat,
      MDirection firstAxis,
      MDirection secondAxis,
      MDirection thirdAxis)
    {
      this();
      this.quat = quat;
      this.firstAxis = firstAxis;
      this.secondAxis = secondAxis;
      this.thirdAxis = thirdAxis;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QuaternionFromMMI_args(QuaternionFromMMI_args other) {
      if (other.isSetQuat()) {
        this.quat = new de.mosim.mmi.math.MQuaternion(other.quat);
      }
      if (other.isSetFirstAxis()) {
        this.firstAxis = other.firstAxis;
      }
      if (other.isSetSecondAxis()) {
        this.secondAxis = other.secondAxis;
      }
      if (other.isSetThirdAxis()) {
        this.thirdAxis = other.thirdAxis;
      }
    }

    public QuaternionFromMMI_args deepCopy() {
      return new QuaternionFromMMI_args(this);
    }

    @Override
    public void clear() {
      this.quat = null;
      this.firstAxis = null;
      this.secondAxis = null;
      this.thirdAxis = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MQuaternion getQuat() {
      return this.quat;
    }

    public QuaternionFromMMI_args setQuat(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion quat) {
      this.quat = quat;
      return this;
    }

    public void unsetQuat() {
      this.quat = null;
    }

    /** Returns true if field quat is set (has been assigned a value) and false otherwise */
    public boolean isSetQuat() {
      return this.quat != null;
    }

    public void setQuatIsSet(boolean value) {
      if (!value) {
        this.quat = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getFirstAxis() {
      return this.firstAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public QuaternionFromMMI_args setFirstAxis(@org.apache.thrift.annotation.Nullable MDirection firstAxis) {
      this.firstAxis = firstAxis;
      return this;
    }

    public void unsetFirstAxis() {
      this.firstAxis = null;
    }

    /** Returns true if field firstAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstAxis() {
      return this.firstAxis != null;
    }

    public void setFirstAxisIsSet(boolean value) {
      if (!value) {
        this.firstAxis = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getSecondAxis() {
      return this.secondAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public QuaternionFromMMI_args setSecondAxis(@org.apache.thrift.annotation.Nullable MDirection secondAxis) {
      this.secondAxis = secondAxis;
      return this;
    }

    public void unsetSecondAxis() {
      this.secondAxis = null;
    }

    /** Returns true if field secondAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetSecondAxis() {
      return this.secondAxis != null;
    }

    public void setSecondAxisIsSet(boolean value) {
      if (!value) {
        this.secondAxis = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getThirdAxis() {
      return this.thirdAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public QuaternionFromMMI_args setThirdAxis(@org.apache.thrift.annotation.Nullable MDirection thirdAxis) {
      this.thirdAxis = thirdAxis;
      return this;
    }

    public void unsetThirdAxis() {
      this.thirdAxis = null;
    }

    /** Returns true if field thirdAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetThirdAxis() {
      return this.thirdAxis != null;
    }

    public void setThirdAxisIsSet(boolean value) {
      if (!value) {
        this.thirdAxis = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QUAT:
        if (value == null) {
          unsetQuat();
        } else {
          setQuat((de.mosim.mmi.math.MQuaternion)value);
        }
        break;

      case FIRST_AXIS:
        if (value == null) {
          unsetFirstAxis();
        } else {
          setFirstAxis((MDirection)value);
        }
        break;

      case SECOND_AXIS:
        if (value == null) {
          unsetSecondAxis();
        } else {
          setSecondAxis((MDirection)value);
        }
        break;

      case THIRD_AXIS:
        if (value == null) {
          unsetThirdAxis();
        } else {
          setThirdAxis((MDirection)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUAT:
        return getQuat();

      case FIRST_AXIS:
        return getFirstAxis();

      case SECOND_AXIS:
        return getSecondAxis();

      case THIRD_AXIS:
        return getThirdAxis();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUAT:
        return isSetQuat();
      case FIRST_AXIS:
        return isSetFirstAxis();
      case SECOND_AXIS:
        return isSetSecondAxis();
      case THIRD_AXIS:
        return isSetThirdAxis();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof QuaternionFromMMI_args)
        return this.equals((QuaternionFromMMI_args)that);
      return false;
    }

    public boolean equals(QuaternionFromMMI_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_quat = true && this.isSetQuat();
      boolean that_present_quat = true && that.isSetQuat();
      if (this_present_quat || that_present_quat) {
        if (!(this_present_quat && that_present_quat))
          return false;
        if (!this.quat.equals(that.quat))
          return false;
      }

      boolean this_present_firstAxis = true && this.isSetFirstAxis();
      boolean that_present_firstAxis = true && that.isSetFirstAxis();
      if (this_present_firstAxis || that_present_firstAxis) {
        if (!(this_present_firstAxis && that_present_firstAxis))
          return false;
        if (!this.firstAxis.equals(that.firstAxis))
          return false;
      }

      boolean this_present_secondAxis = true && this.isSetSecondAxis();
      boolean that_present_secondAxis = true && that.isSetSecondAxis();
      if (this_present_secondAxis || that_present_secondAxis) {
        if (!(this_present_secondAxis && that_present_secondAxis))
          return false;
        if (!this.secondAxis.equals(that.secondAxis))
          return false;
      }

      boolean this_present_thirdAxis = true && this.isSetThirdAxis();
      boolean that_present_thirdAxis = true && that.isSetThirdAxis();
      if (this_present_thirdAxis || that_present_thirdAxis) {
        if (!(this_present_thirdAxis && that_present_thirdAxis))
          return false;
        if (!this.thirdAxis.equals(that.thirdAxis))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuat()) ? 131071 : 524287);
      if (isSetQuat())
        hashCode = hashCode * 8191 + quat.hashCode();

      hashCode = hashCode * 8191 + ((isSetFirstAxis()) ? 131071 : 524287);
      if (isSetFirstAxis())
        hashCode = hashCode * 8191 + firstAxis.getValue();

      hashCode = hashCode * 8191 + ((isSetSecondAxis()) ? 131071 : 524287);
      if (isSetSecondAxis())
        hashCode = hashCode * 8191 + secondAxis.getValue();

      hashCode = hashCode * 8191 + ((isSetThirdAxis()) ? 131071 : 524287);
      if (isSetThirdAxis())
        hashCode = hashCode * 8191 + thirdAxis.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(QuaternionFromMMI_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuat()).compareTo(other.isSetQuat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quat, other.quat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFirstAxis()).compareTo(other.isSetFirstAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstAxis, other.firstAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSecondAxis()).compareTo(other.isSetSecondAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecondAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondAxis, other.secondAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetThirdAxis()).compareTo(other.isSetThirdAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThirdAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdAxis, other.thirdAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QuaternionFromMMI_args(");
      boolean first = true;

      sb.append("quat:");
      if (this.quat == null) {
        sb.append("null");
      } else {
        sb.append(this.quat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("firstAxis:");
      if (this.firstAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.firstAxis);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secondAxis:");
      if (this.secondAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.secondAxis);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("thirdAxis:");
      if (this.thirdAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdAxis);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (quat != null) {
        quat.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QuaternionFromMMI_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuaternionFromMMI_argsStandardScheme getScheme() {
        return new QuaternionFromMMI_argsStandardScheme();
      }
    }

    private static class QuaternionFromMMI_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<QuaternionFromMMI_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QuaternionFromMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.quat = new de.mosim.mmi.math.MQuaternion();
                struct.quat.read(iprot);
                struct.setQuatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FIRST_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.firstAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setFirstAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECOND_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.secondAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setSecondAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // THIRD_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.thirdAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setThirdAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QuaternionFromMMI_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.quat != null) {
          oprot.writeFieldBegin(QUAT_FIELD_DESC);
          struct.quat.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.firstAxis != null) {
          oprot.writeFieldBegin(FIRST_AXIS_FIELD_DESC);
          oprot.writeI32(struct.firstAxis.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.secondAxis != null) {
          oprot.writeFieldBegin(SECOND_AXIS_FIELD_DESC);
          oprot.writeI32(struct.secondAxis.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.thirdAxis != null) {
          oprot.writeFieldBegin(THIRD_AXIS_FIELD_DESC);
          oprot.writeI32(struct.thirdAxis.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QuaternionFromMMI_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuaternionFromMMI_argsTupleScheme getScheme() {
        return new QuaternionFromMMI_argsTupleScheme();
      }
    }

    private static class QuaternionFromMMI_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<QuaternionFromMMI_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QuaternionFromMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuat()) {
          optionals.set(0);
        }
        if (struct.isSetFirstAxis()) {
          optionals.set(1);
        }
        if (struct.isSetSecondAxis()) {
          optionals.set(2);
        }
        if (struct.isSetThirdAxis()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetQuat()) {
          struct.quat.write(oprot);
        }
        if (struct.isSetFirstAxis()) {
          oprot.writeI32(struct.firstAxis.getValue());
        }
        if (struct.isSetSecondAxis()) {
          oprot.writeI32(struct.secondAxis.getValue());
        }
        if (struct.isSetThirdAxis()) {
          oprot.writeI32(struct.thirdAxis.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QuaternionFromMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.quat = new de.mosim.mmi.math.MQuaternion();
          struct.quat.read(iprot);
          struct.setQuatIsSet(true);
        }
        if (incoming.get(1)) {
          struct.firstAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setFirstAxisIsSet(true);
        }
        if (incoming.get(2)) {
          struct.secondAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setSecondAxisIsSet(true);
        }
        if (incoming.get(3)) {
          struct.thirdAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setThirdAxisIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class QuaternionFromMMI_result implements org.apache.thrift.TBase<QuaternionFromMMI_result, QuaternionFromMMI_result._Fields>, java.io.Serializable, Cloneable, Comparable<QuaternionFromMMI_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuaternionFromMMI_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QuaternionFromMMI_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QuaternionFromMMI_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MQuaternion.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuaternionFromMMI_result.class, metaDataMap);
    }

    public QuaternionFromMMI_result() {
    }

    public QuaternionFromMMI_result(
      de.mosim.mmi.math.MQuaternion success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QuaternionFromMMI_result(QuaternionFromMMI_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.math.MQuaternion(other.success);
      }
    }

    public QuaternionFromMMI_result deepCopy() {
      return new QuaternionFromMMI_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MQuaternion getSuccess() {
      return this.success;
    }

    public QuaternionFromMMI_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.math.MQuaternion)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof QuaternionFromMMI_result)
        return this.equals((QuaternionFromMMI_result)that);
      return false;
    }

    public boolean equals(QuaternionFromMMI_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(QuaternionFromMMI_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QuaternionFromMMI_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QuaternionFromMMI_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuaternionFromMMI_resultStandardScheme getScheme() {
        return new QuaternionFromMMI_resultStandardScheme();
      }
    }

    private static class QuaternionFromMMI_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<QuaternionFromMMI_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QuaternionFromMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.math.MQuaternion();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QuaternionFromMMI_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QuaternionFromMMI_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuaternionFromMMI_resultTupleScheme getScheme() {
        return new QuaternionFromMMI_resultTupleScheme();
      }
    }

    private static class QuaternionFromMMI_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<QuaternionFromMMI_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QuaternionFromMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QuaternionFromMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.math.MQuaternion();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class VectorToMMI_L_args implements org.apache.thrift.TBase<VectorToMMI_L_args, VectorToMMI_L_args._Fields>, java.io.Serializable, Cloneable, Comparable<VectorToMMI_L_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VectorToMMI_L_args");

    private static final org.apache.thrift.protocol.TField QUAT_FIELD_DESC = new org.apache.thrift.protocol.TField("quat", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COORDINATE_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinateSystem", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new VectorToMMI_L_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new VectorToMMI_L_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 quat; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<MDirection> coordinateSystem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUAT((short)1, "quat"),
      COORDINATE_SYSTEM((short)2, "coordinateSystem");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUAT
            return QUAT;
          case 2: // COORDINATE_SYSTEM
            return COORDINATE_SYSTEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUAT, new org.apache.thrift.meta_data.FieldMetaData("quat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MVector3.class)));
      tmpMap.put(_Fields.COORDINATE_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("coordinateSystem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VectorToMMI_L_args.class, metaDataMap);
    }

    public VectorToMMI_L_args() {
    }

    public VectorToMMI_L_args(
      de.mosim.mmi.math.MVector3 quat,
      java.util.List<MDirection> coordinateSystem)
    {
      this();
      this.quat = quat;
      this.coordinateSystem = coordinateSystem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public VectorToMMI_L_args(VectorToMMI_L_args other) {
      if (other.isSetQuat()) {
        this.quat = new de.mosim.mmi.math.MVector3(other.quat);
      }
      if (other.isSetCoordinateSystem()) {
        java.util.List<MDirection> __this__coordinateSystem = new java.util.ArrayList<MDirection>(other.coordinateSystem.size());
        for (MDirection other_element : other.coordinateSystem) {
          __this__coordinateSystem.add(other_element);
        }
        this.coordinateSystem = __this__coordinateSystem;
      }
    }

    public VectorToMMI_L_args deepCopy() {
      return new VectorToMMI_L_args(this);
    }

    @Override
    public void clear() {
      this.quat = null;
      this.coordinateSystem = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MVector3 getQuat() {
      return this.quat;
    }

    public VectorToMMI_L_args setQuat(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 quat) {
      this.quat = quat;
      return this;
    }

    public void unsetQuat() {
      this.quat = null;
    }

    /** Returns true if field quat is set (has been assigned a value) and false otherwise */
    public boolean isSetQuat() {
      return this.quat != null;
    }

    public void setQuatIsSet(boolean value) {
      if (!value) {
        this.quat = null;
      }
    }

    public int getCoordinateSystemSize() {
      return (this.coordinateSystem == null) ? 0 : this.coordinateSystem.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<MDirection> getCoordinateSystemIterator() {
      return (this.coordinateSystem == null) ? null : this.coordinateSystem.iterator();
    }

    public void addToCoordinateSystem(MDirection elem) {
      if (this.coordinateSystem == null) {
        this.coordinateSystem = new java.util.ArrayList<MDirection>();
      }
      this.coordinateSystem.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<MDirection> getCoordinateSystem() {
      return this.coordinateSystem;
    }

    public VectorToMMI_L_args setCoordinateSystem(@org.apache.thrift.annotation.Nullable java.util.List<MDirection> coordinateSystem) {
      this.coordinateSystem = coordinateSystem;
      return this;
    }

    public void unsetCoordinateSystem() {
      this.coordinateSystem = null;
    }

    /** Returns true if field coordinateSystem is set (has been assigned a value) and false otherwise */
    public boolean isSetCoordinateSystem() {
      return this.coordinateSystem != null;
    }

    public void setCoordinateSystemIsSet(boolean value) {
      if (!value) {
        this.coordinateSystem = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QUAT:
        if (value == null) {
          unsetQuat();
        } else {
          setQuat((de.mosim.mmi.math.MVector3)value);
        }
        break;

      case COORDINATE_SYSTEM:
        if (value == null) {
          unsetCoordinateSystem();
        } else {
          setCoordinateSystem((java.util.List<MDirection>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUAT:
        return getQuat();

      case COORDINATE_SYSTEM:
        return getCoordinateSystem();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUAT:
        return isSetQuat();
      case COORDINATE_SYSTEM:
        return isSetCoordinateSystem();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof VectorToMMI_L_args)
        return this.equals((VectorToMMI_L_args)that);
      return false;
    }

    public boolean equals(VectorToMMI_L_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_quat = true && this.isSetQuat();
      boolean that_present_quat = true && that.isSetQuat();
      if (this_present_quat || that_present_quat) {
        if (!(this_present_quat && that_present_quat))
          return false;
        if (!this.quat.equals(that.quat))
          return false;
      }

      boolean this_present_coordinateSystem = true && this.isSetCoordinateSystem();
      boolean that_present_coordinateSystem = true && that.isSetCoordinateSystem();
      if (this_present_coordinateSystem || that_present_coordinateSystem) {
        if (!(this_present_coordinateSystem && that_present_coordinateSystem))
          return false;
        if (!this.coordinateSystem.equals(that.coordinateSystem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuat()) ? 131071 : 524287);
      if (isSetQuat())
        hashCode = hashCode * 8191 + quat.hashCode();

      hashCode = hashCode * 8191 + ((isSetCoordinateSystem()) ? 131071 : 524287);
      if (isSetCoordinateSystem())
        hashCode = hashCode * 8191 + coordinateSystem.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(VectorToMMI_L_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuat()).compareTo(other.isSetQuat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quat, other.quat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCoordinateSystem()).compareTo(other.isSetCoordinateSystem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoordinateSystem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinateSystem, other.coordinateSystem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("VectorToMMI_L_args(");
      boolean first = true;

      sb.append("quat:");
      if (this.quat == null) {
        sb.append("null");
      } else {
        sb.append(this.quat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coordinateSystem:");
      if (this.coordinateSystem == null) {
        sb.append("null");
      } else {
        sb.append(this.coordinateSystem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (quat != null) {
        quat.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class VectorToMMI_L_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public VectorToMMI_L_argsStandardScheme getScheme() {
        return new VectorToMMI_L_argsStandardScheme();
      }
    }

    private static class VectorToMMI_L_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<VectorToMMI_L_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, VectorToMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.quat = new de.mosim.mmi.math.MVector3();
                struct.quat.read(iprot);
                struct.setQuatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COORDINATE_SYSTEM
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list380 = iprot.readListBegin();
                  struct.coordinateSystem = new java.util.ArrayList<MDirection>(_list380.size);
                  @org.apache.thrift.annotation.Nullable MDirection _elem381;
                  for (int _i382 = 0; _i382 < _list380.size; ++_i382)
                  {
                    _elem381 = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                    if (_elem381 != null)
                    {
                      struct.coordinateSystem.add(_elem381);
                    }
                  }
                  iprot.readListEnd();
                }
                struct.setCoordinateSystemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, VectorToMMI_L_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.quat != null) {
          oprot.writeFieldBegin(QUAT_FIELD_DESC);
          struct.quat.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.coordinateSystem != null) {
          oprot.writeFieldBegin(COORDINATE_SYSTEM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.coordinateSystem.size()));
            for (MDirection _iter383 : struct.coordinateSystem)
            {
              oprot.writeI32(_iter383.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class VectorToMMI_L_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public VectorToMMI_L_argsTupleScheme getScheme() {
        return new VectorToMMI_L_argsTupleScheme();
      }
    }

    private static class VectorToMMI_L_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<VectorToMMI_L_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, VectorToMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuat()) {
          optionals.set(0);
        }
        if (struct.isSetCoordinateSystem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuat()) {
          struct.quat.write(oprot);
        }
        if (struct.isSetCoordinateSystem()) {
          {
            oprot.writeI32(struct.coordinateSystem.size());
            for (MDirection _iter384 : struct.coordinateSystem)
            {
              oprot.writeI32(_iter384.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, VectorToMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.quat = new de.mosim.mmi.math.MVector3();
          struct.quat.read(iprot);
          struct.setQuatIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list385 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.coordinateSystem = new java.util.ArrayList<MDirection>(_list385.size);
            @org.apache.thrift.annotation.Nullable MDirection _elem386;
            for (int _i387 = 0; _i387 < _list385.size; ++_i387)
            {
              _elem386 = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
              if (_elem386 != null)
              {
                struct.coordinateSystem.add(_elem386);
              }
            }
          }
          struct.setCoordinateSystemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class VectorToMMI_L_result implements org.apache.thrift.TBase<VectorToMMI_L_result, VectorToMMI_L_result._Fields>, java.io.Serializable, Cloneable, Comparable<VectorToMMI_L_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VectorToMMI_L_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new VectorToMMI_L_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new VectorToMMI_L_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MVector3.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VectorToMMI_L_result.class, metaDataMap);
    }

    public VectorToMMI_L_result() {
    }

    public VectorToMMI_L_result(
      de.mosim.mmi.math.MVector3 success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public VectorToMMI_L_result(VectorToMMI_L_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.math.MVector3(other.success);
      }
    }

    public VectorToMMI_L_result deepCopy() {
      return new VectorToMMI_L_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MVector3 getSuccess() {
      return this.success;
    }

    public VectorToMMI_L_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.math.MVector3)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof VectorToMMI_L_result)
        return this.equals((VectorToMMI_L_result)that);
      return false;
    }

    public boolean equals(VectorToMMI_L_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(VectorToMMI_L_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("VectorToMMI_L_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class VectorToMMI_L_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public VectorToMMI_L_resultStandardScheme getScheme() {
        return new VectorToMMI_L_resultStandardScheme();
      }
    }

    private static class VectorToMMI_L_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<VectorToMMI_L_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, VectorToMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.math.MVector3();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, VectorToMMI_L_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class VectorToMMI_L_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public VectorToMMI_L_resultTupleScheme getScheme() {
        return new VectorToMMI_L_resultTupleScheme();
      }
    }

    private static class VectorToMMI_L_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<VectorToMMI_L_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, VectorToMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, VectorToMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.math.MVector3();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class VectorToMMI_args implements org.apache.thrift.TBase<VectorToMMI_args, VectorToMMI_args._Fields>, java.io.Serializable, Cloneable, Comparable<VectorToMMI_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VectorToMMI_args");

    private static final org.apache.thrift.protocol.TField QUAT_FIELD_DESC = new org.apache.thrift.protocol.TField("quat", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FIRST_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("firstAxis", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SECOND_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("secondAxis", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField THIRD_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdAxis", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new VectorToMMI_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new VectorToMMI_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 quat; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection firstAxis; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection secondAxis; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection thirdAxis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUAT((short)1, "quat"),
      /**
       * 
       * @see MDirection
       */
      FIRST_AXIS((short)2, "firstAxis"),
      /**
       * 
       * @see MDirection
       */
      SECOND_AXIS((short)3, "secondAxis"),
      /**
       * 
       * @see MDirection
       */
      THIRD_AXIS((short)4, "thirdAxis");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUAT
            return QUAT;
          case 2: // FIRST_AXIS
            return FIRST_AXIS;
          case 3: // SECOND_AXIS
            return SECOND_AXIS;
          case 4: // THIRD_AXIS
            return THIRD_AXIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUAT, new org.apache.thrift.meta_data.FieldMetaData("quat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MVector3.class)));
      tmpMap.put(_Fields.FIRST_AXIS, new org.apache.thrift.meta_data.FieldMetaData("firstAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      tmpMap.put(_Fields.SECOND_AXIS, new org.apache.thrift.meta_data.FieldMetaData("secondAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      tmpMap.put(_Fields.THIRD_AXIS, new org.apache.thrift.meta_data.FieldMetaData("thirdAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VectorToMMI_args.class, metaDataMap);
    }

    public VectorToMMI_args() {
    }

    public VectorToMMI_args(
      de.mosim.mmi.math.MVector3 quat,
      MDirection firstAxis,
      MDirection secondAxis,
      MDirection thirdAxis)
    {
      this();
      this.quat = quat;
      this.firstAxis = firstAxis;
      this.secondAxis = secondAxis;
      this.thirdAxis = thirdAxis;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public VectorToMMI_args(VectorToMMI_args other) {
      if (other.isSetQuat()) {
        this.quat = new de.mosim.mmi.math.MVector3(other.quat);
      }
      if (other.isSetFirstAxis()) {
        this.firstAxis = other.firstAxis;
      }
      if (other.isSetSecondAxis()) {
        this.secondAxis = other.secondAxis;
      }
      if (other.isSetThirdAxis()) {
        this.thirdAxis = other.thirdAxis;
      }
    }

    public VectorToMMI_args deepCopy() {
      return new VectorToMMI_args(this);
    }

    @Override
    public void clear() {
      this.quat = null;
      this.firstAxis = null;
      this.secondAxis = null;
      this.thirdAxis = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MVector3 getQuat() {
      return this.quat;
    }

    public VectorToMMI_args setQuat(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 quat) {
      this.quat = quat;
      return this;
    }

    public void unsetQuat() {
      this.quat = null;
    }

    /** Returns true if field quat is set (has been assigned a value) and false otherwise */
    public boolean isSetQuat() {
      return this.quat != null;
    }

    public void setQuatIsSet(boolean value) {
      if (!value) {
        this.quat = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getFirstAxis() {
      return this.firstAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public VectorToMMI_args setFirstAxis(@org.apache.thrift.annotation.Nullable MDirection firstAxis) {
      this.firstAxis = firstAxis;
      return this;
    }

    public void unsetFirstAxis() {
      this.firstAxis = null;
    }

    /** Returns true if field firstAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstAxis() {
      return this.firstAxis != null;
    }

    public void setFirstAxisIsSet(boolean value) {
      if (!value) {
        this.firstAxis = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getSecondAxis() {
      return this.secondAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public VectorToMMI_args setSecondAxis(@org.apache.thrift.annotation.Nullable MDirection secondAxis) {
      this.secondAxis = secondAxis;
      return this;
    }

    public void unsetSecondAxis() {
      this.secondAxis = null;
    }

    /** Returns true if field secondAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetSecondAxis() {
      return this.secondAxis != null;
    }

    public void setSecondAxisIsSet(boolean value) {
      if (!value) {
        this.secondAxis = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getThirdAxis() {
      return this.thirdAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public VectorToMMI_args setThirdAxis(@org.apache.thrift.annotation.Nullable MDirection thirdAxis) {
      this.thirdAxis = thirdAxis;
      return this;
    }

    public void unsetThirdAxis() {
      this.thirdAxis = null;
    }

    /** Returns true if field thirdAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetThirdAxis() {
      return this.thirdAxis != null;
    }

    public void setThirdAxisIsSet(boolean value) {
      if (!value) {
        this.thirdAxis = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QUAT:
        if (value == null) {
          unsetQuat();
        } else {
          setQuat((de.mosim.mmi.math.MVector3)value);
        }
        break;

      case FIRST_AXIS:
        if (value == null) {
          unsetFirstAxis();
        } else {
          setFirstAxis((MDirection)value);
        }
        break;

      case SECOND_AXIS:
        if (value == null) {
          unsetSecondAxis();
        } else {
          setSecondAxis((MDirection)value);
        }
        break;

      case THIRD_AXIS:
        if (value == null) {
          unsetThirdAxis();
        } else {
          setThirdAxis((MDirection)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUAT:
        return getQuat();

      case FIRST_AXIS:
        return getFirstAxis();

      case SECOND_AXIS:
        return getSecondAxis();

      case THIRD_AXIS:
        return getThirdAxis();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUAT:
        return isSetQuat();
      case FIRST_AXIS:
        return isSetFirstAxis();
      case SECOND_AXIS:
        return isSetSecondAxis();
      case THIRD_AXIS:
        return isSetThirdAxis();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof VectorToMMI_args)
        return this.equals((VectorToMMI_args)that);
      return false;
    }

    public boolean equals(VectorToMMI_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_quat = true && this.isSetQuat();
      boolean that_present_quat = true && that.isSetQuat();
      if (this_present_quat || that_present_quat) {
        if (!(this_present_quat && that_present_quat))
          return false;
        if (!this.quat.equals(that.quat))
          return false;
      }

      boolean this_present_firstAxis = true && this.isSetFirstAxis();
      boolean that_present_firstAxis = true && that.isSetFirstAxis();
      if (this_present_firstAxis || that_present_firstAxis) {
        if (!(this_present_firstAxis && that_present_firstAxis))
          return false;
        if (!this.firstAxis.equals(that.firstAxis))
          return false;
      }

      boolean this_present_secondAxis = true && this.isSetSecondAxis();
      boolean that_present_secondAxis = true && that.isSetSecondAxis();
      if (this_present_secondAxis || that_present_secondAxis) {
        if (!(this_present_secondAxis && that_present_secondAxis))
          return false;
        if (!this.secondAxis.equals(that.secondAxis))
          return false;
      }

      boolean this_present_thirdAxis = true && this.isSetThirdAxis();
      boolean that_present_thirdAxis = true && that.isSetThirdAxis();
      if (this_present_thirdAxis || that_present_thirdAxis) {
        if (!(this_present_thirdAxis && that_present_thirdAxis))
          return false;
        if (!this.thirdAxis.equals(that.thirdAxis))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuat()) ? 131071 : 524287);
      if (isSetQuat())
        hashCode = hashCode * 8191 + quat.hashCode();

      hashCode = hashCode * 8191 + ((isSetFirstAxis()) ? 131071 : 524287);
      if (isSetFirstAxis())
        hashCode = hashCode * 8191 + firstAxis.getValue();

      hashCode = hashCode * 8191 + ((isSetSecondAxis()) ? 131071 : 524287);
      if (isSetSecondAxis())
        hashCode = hashCode * 8191 + secondAxis.getValue();

      hashCode = hashCode * 8191 + ((isSetThirdAxis()) ? 131071 : 524287);
      if (isSetThirdAxis())
        hashCode = hashCode * 8191 + thirdAxis.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(VectorToMMI_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuat()).compareTo(other.isSetQuat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quat, other.quat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFirstAxis()).compareTo(other.isSetFirstAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstAxis, other.firstAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSecondAxis()).compareTo(other.isSetSecondAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecondAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondAxis, other.secondAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetThirdAxis()).compareTo(other.isSetThirdAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThirdAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdAxis, other.thirdAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("VectorToMMI_args(");
      boolean first = true;

      sb.append("quat:");
      if (this.quat == null) {
        sb.append("null");
      } else {
        sb.append(this.quat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("firstAxis:");
      if (this.firstAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.firstAxis);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secondAxis:");
      if (this.secondAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.secondAxis);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("thirdAxis:");
      if (this.thirdAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdAxis);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (quat != null) {
        quat.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class VectorToMMI_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public VectorToMMI_argsStandardScheme getScheme() {
        return new VectorToMMI_argsStandardScheme();
      }
    }

    private static class VectorToMMI_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<VectorToMMI_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, VectorToMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.quat = new de.mosim.mmi.math.MVector3();
                struct.quat.read(iprot);
                struct.setQuatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FIRST_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.firstAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setFirstAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECOND_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.secondAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setSecondAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // THIRD_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.thirdAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setThirdAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, VectorToMMI_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.quat != null) {
          oprot.writeFieldBegin(QUAT_FIELD_DESC);
          struct.quat.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.firstAxis != null) {
          oprot.writeFieldBegin(FIRST_AXIS_FIELD_DESC);
          oprot.writeI32(struct.firstAxis.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.secondAxis != null) {
          oprot.writeFieldBegin(SECOND_AXIS_FIELD_DESC);
          oprot.writeI32(struct.secondAxis.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.thirdAxis != null) {
          oprot.writeFieldBegin(THIRD_AXIS_FIELD_DESC);
          oprot.writeI32(struct.thirdAxis.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class VectorToMMI_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public VectorToMMI_argsTupleScheme getScheme() {
        return new VectorToMMI_argsTupleScheme();
      }
    }

    private static class VectorToMMI_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<VectorToMMI_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, VectorToMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuat()) {
          optionals.set(0);
        }
        if (struct.isSetFirstAxis()) {
          optionals.set(1);
        }
        if (struct.isSetSecondAxis()) {
          optionals.set(2);
        }
        if (struct.isSetThirdAxis()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetQuat()) {
          struct.quat.write(oprot);
        }
        if (struct.isSetFirstAxis()) {
          oprot.writeI32(struct.firstAxis.getValue());
        }
        if (struct.isSetSecondAxis()) {
          oprot.writeI32(struct.secondAxis.getValue());
        }
        if (struct.isSetThirdAxis()) {
          oprot.writeI32(struct.thirdAxis.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, VectorToMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.quat = new de.mosim.mmi.math.MVector3();
          struct.quat.read(iprot);
          struct.setQuatIsSet(true);
        }
        if (incoming.get(1)) {
          struct.firstAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setFirstAxisIsSet(true);
        }
        if (incoming.get(2)) {
          struct.secondAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setSecondAxisIsSet(true);
        }
        if (incoming.get(3)) {
          struct.thirdAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setThirdAxisIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class VectorToMMI_result implements org.apache.thrift.TBase<VectorToMMI_result, VectorToMMI_result._Fields>, java.io.Serializable, Cloneable, Comparable<VectorToMMI_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VectorToMMI_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new VectorToMMI_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new VectorToMMI_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MVector3.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VectorToMMI_result.class, metaDataMap);
    }

    public VectorToMMI_result() {
    }

    public VectorToMMI_result(
      de.mosim.mmi.math.MVector3 success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public VectorToMMI_result(VectorToMMI_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.math.MVector3(other.success);
      }
    }

    public VectorToMMI_result deepCopy() {
      return new VectorToMMI_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MVector3 getSuccess() {
      return this.success;
    }

    public VectorToMMI_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.math.MVector3)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof VectorToMMI_result)
        return this.equals((VectorToMMI_result)that);
      return false;
    }

    public boolean equals(VectorToMMI_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(VectorToMMI_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("VectorToMMI_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class VectorToMMI_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public VectorToMMI_resultStandardScheme getScheme() {
        return new VectorToMMI_resultStandardScheme();
      }
    }

    private static class VectorToMMI_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<VectorToMMI_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, VectorToMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.math.MVector3();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, VectorToMMI_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class VectorToMMI_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public VectorToMMI_resultTupleScheme getScheme() {
        return new VectorToMMI_resultTupleScheme();
      }
    }

    private static class VectorToMMI_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<VectorToMMI_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, VectorToMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, VectorToMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.math.MVector3();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class VectorFromMMI_L_args implements org.apache.thrift.TBase<VectorFromMMI_L_args, VectorFromMMI_L_args._Fields>, java.io.Serializable, Cloneable, Comparable<VectorFromMMI_L_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VectorFromMMI_L_args");

    private static final org.apache.thrift.protocol.TField QUAT_FIELD_DESC = new org.apache.thrift.protocol.TField("quat", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COORDINATE_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinateSystem", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new VectorFromMMI_L_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new VectorFromMMI_L_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 quat; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<MDirection> coordinateSystem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUAT((short)1, "quat"),
      COORDINATE_SYSTEM((short)2, "coordinateSystem");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUAT
            return QUAT;
          case 2: // COORDINATE_SYSTEM
            return COORDINATE_SYSTEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUAT, new org.apache.thrift.meta_data.FieldMetaData("quat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MVector3.class)));
      tmpMap.put(_Fields.COORDINATE_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("coordinateSystem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VectorFromMMI_L_args.class, metaDataMap);
    }

    public VectorFromMMI_L_args() {
    }

    public VectorFromMMI_L_args(
      de.mosim.mmi.math.MVector3 quat,
      java.util.List<MDirection> coordinateSystem)
    {
      this();
      this.quat = quat;
      this.coordinateSystem = coordinateSystem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public VectorFromMMI_L_args(VectorFromMMI_L_args other) {
      if (other.isSetQuat()) {
        this.quat = new de.mosim.mmi.math.MVector3(other.quat);
      }
      if (other.isSetCoordinateSystem()) {
        java.util.List<MDirection> __this__coordinateSystem = new java.util.ArrayList<MDirection>(other.coordinateSystem.size());
        for (MDirection other_element : other.coordinateSystem) {
          __this__coordinateSystem.add(other_element);
        }
        this.coordinateSystem = __this__coordinateSystem;
      }
    }

    public VectorFromMMI_L_args deepCopy() {
      return new VectorFromMMI_L_args(this);
    }

    @Override
    public void clear() {
      this.quat = null;
      this.coordinateSystem = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MVector3 getQuat() {
      return this.quat;
    }

    public VectorFromMMI_L_args setQuat(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 quat) {
      this.quat = quat;
      return this;
    }

    public void unsetQuat() {
      this.quat = null;
    }

    /** Returns true if field quat is set (has been assigned a value) and false otherwise */
    public boolean isSetQuat() {
      return this.quat != null;
    }

    public void setQuatIsSet(boolean value) {
      if (!value) {
        this.quat = null;
      }
    }

    public int getCoordinateSystemSize() {
      return (this.coordinateSystem == null) ? 0 : this.coordinateSystem.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<MDirection> getCoordinateSystemIterator() {
      return (this.coordinateSystem == null) ? null : this.coordinateSystem.iterator();
    }

    public void addToCoordinateSystem(MDirection elem) {
      if (this.coordinateSystem == null) {
        this.coordinateSystem = new java.util.ArrayList<MDirection>();
      }
      this.coordinateSystem.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<MDirection> getCoordinateSystem() {
      return this.coordinateSystem;
    }

    public VectorFromMMI_L_args setCoordinateSystem(@org.apache.thrift.annotation.Nullable java.util.List<MDirection> coordinateSystem) {
      this.coordinateSystem = coordinateSystem;
      return this;
    }

    public void unsetCoordinateSystem() {
      this.coordinateSystem = null;
    }

    /** Returns true if field coordinateSystem is set (has been assigned a value) and false otherwise */
    public boolean isSetCoordinateSystem() {
      return this.coordinateSystem != null;
    }

    public void setCoordinateSystemIsSet(boolean value) {
      if (!value) {
        this.coordinateSystem = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QUAT:
        if (value == null) {
          unsetQuat();
        } else {
          setQuat((de.mosim.mmi.math.MVector3)value);
        }
        break;

      case COORDINATE_SYSTEM:
        if (value == null) {
          unsetCoordinateSystem();
        } else {
          setCoordinateSystem((java.util.List<MDirection>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUAT:
        return getQuat();

      case COORDINATE_SYSTEM:
        return getCoordinateSystem();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUAT:
        return isSetQuat();
      case COORDINATE_SYSTEM:
        return isSetCoordinateSystem();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof VectorFromMMI_L_args)
        return this.equals((VectorFromMMI_L_args)that);
      return false;
    }

    public boolean equals(VectorFromMMI_L_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_quat = true && this.isSetQuat();
      boolean that_present_quat = true && that.isSetQuat();
      if (this_present_quat || that_present_quat) {
        if (!(this_present_quat && that_present_quat))
          return false;
        if (!this.quat.equals(that.quat))
          return false;
      }

      boolean this_present_coordinateSystem = true && this.isSetCoordinateSystem();
      boolean that_present_coordinateSystem = true && that.isSetCoordinateSystem();
      if (this_present_coordinateSystem || that_present_coordinateSystem) {
        if (!(this_present_coordinateSystem && that_present_coordinateSystem))
          return false;
        if (!this.coordinateSystem.equals(that.coordinateSystem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuat()) ? 131071 : 524287);
      if (isSetQuat())
        hashCode = hashCode * 8191 + quat.hashCode();

      hashCode = hashCode * 8191 + ((isSetCoordinateSystem()) ? 131071 : 524287);
      if (isSetCoordinateSystem())
        hashCode = hashCode * 8191 + coordinateSystem.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(VectorFromMMI_L_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuat()).compareTo(other.isSetQuat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quat, other.quat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCoordinateSystem()).compareTo(other.isSetCoordinateSystem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoordinateSystem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinateSystem, other.coordinateSystem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("VectorFromMMI_L_args(");
      boolean first = true;

      sb.append("quat:");
      if (this.quat == null) {
        sb.append("null");
      } else {
        sb.append(this.quat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coordinateSystem:");
      if (this.coordinateSystem == null) {
        sb.append("null");
      } else {
        sb.append(this.coordinateSystem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (quat != null) {
        quat.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class VectorFromMMI_L_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public VectorFromMMI_L_argsStandardScheme getScheme() {
        return new VectorFromMMI_L_argsStandardScheme();
      }
    }

    private static class VectorFromMMI_L_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<VectorFromMMI_L_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, VectorFromMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.quat = new de.mosim.mmi.math.MVector3();
                struct.quat.read(iprot);
                struct.setQuatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COORDINATE_SYSTEM
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list388 = iprot.readListBegin();
                  struct.coordinateSystem = new java.util.ArrayList<MDirection>(_list388.size);
                  @org.apache.thrift.annotation.Nullable MDirection _elem389;
                  for (int _i390 = 0; _i390 < _list388.size; ++_i390)
                  {
                    _elem389 = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                    if (_elem389 != null)
                    {
                      struct.coordinateSystem.add(_elem389);
                    }
                  }
                  iprot.readListEnd();
                }
                struct.setCoordinateSystemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, VectorFromMMI_L_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.quat != null) {
          oprot.writeFieldBegin(QUAT_FIELD_DESC);
          struct.quat.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.coordinateSystem != null) {
          oprot.writeFieldBegin(COORDINATE_SYSTEM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.coordinateSystem.size()));
            for (MDirection _iter391 : struct.coordinateSystem)
            {
              oprot.writeI32(_iter391.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class VectorFromMMI_L_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public VectorFromMMI_L_argsTupleScheme getScheme() {
        return new VectorFromMMI_L_argsTupleScheme();
      }
    }

    private static class VectorFromMMI_L_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<VectorFromMMI_L_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, VectorFromMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuat()) {
          optionals.set(0);
        }
        if (struct.isSetCoordinateSystem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuat()) {
          struct.quat.write(oprot);
        }
        if (struct.isSetCoordinateSystem()) {
          {
            oprot.writeI32(struct.coordinateSystem.size());
            for (MDirection _iter392 : struct.coordinateSystem)
            {
              oprot.writeI32(_iter392.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, VectorFromMMI_L_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.quat = new de.mosim.mmi.math.MVector3();
          struct.quat.read(iprot);
          struct.setQuatIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list393 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.coordinateSystem = new java.util.ArrayList<MDirection>(_list393.size);
            @org.apache.thrift.annotation.Nullable MDirection _elem394;
            for (int _i395 = 0; _i395 < _list393.size; ++_i395)
            {
              _elem394 = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
              if (_elem394 != null)
              {
                struct.coordinateSystem.add(_elem394);
              }
            }
          }
          struct.setCoordinateSystemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class VectorFromMMI_L_result implements org.apache.thrift.TBase<VectorFromMMI_L_result, VectorFromMMI_L_result._Fields>, java.io.Serializable, Cloneable, Comparable<VectorFromMMI_L_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VectorFromMMI_L_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new VectorFromMMI_L_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new VectorFromMMI_L_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MVector3.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VectorFromMMI_L_result.class, metaDataMap);
    }

    public VectorFromMMI_L_result() {
    }

    public VectorFromMMI_L_result(
      de.mosim.mmi.math.MVector3 success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public VectorFromMMI_L_result(VectorFromMMI_L_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.math.MVector3(other.success);
      }
    }

    public VectorFromMMI_L_result deepCopy() {
      return new VectorFromMMI_L_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MVector3 getSuccess() {
      return this.success;
    }

    public VectorFromMMI_L_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.math.MVector3)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof VectorFromMMI_L_result)
        return this.equals((VectorFromMMI_L_result)that);
      return false;
    }

    public boolean equals(VectorFromMMI_L_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(VectorFromMMI_L_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("VectorFromMMI_L_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class VectorFromMMI_L_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public VectorFromMMI_L_resultStandardScheme getScheme() {
        return new VectorFromMMI_L_resultStandardScheme();
      }
    }

    private static class VectorFromMMI_L_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<VectorFromMMI_L_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, VectorFromMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.math.MVector3();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, VectorFromMMI_L_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class VectorFromMMI_L_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public VectorFromMMI_L_resultTupleScheme getScheme() {
        return new VectorFromMMI_L_resultTupleScheme();
      }
    }

    private static class VectorFromMMI_L_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<VectorFromMMI_L_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, VectorFromMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, VectorFromMMI_L_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.math.MVector3();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class VectorFromMMI_args implements org.apache.thrift.TBase<VectorFromMMI_args, VectorFromMMI_args._Fields>, java.io.Serializable, Cloneable, Comparable<VectorFromMMI_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VectorFromMMI_args");

    private static final org.apache.thrift.protocol.TField QUAT_FIELD_DESC = new org.apache.thrift.protocol.TField("quat", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FIRST_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("firstAxis", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SECOND_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("secondAxis", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField THIRD_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdAxis", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new VectorFromMMI_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new VectorFromMMI_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 quat; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection firstAxis; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection secondAxis; // required
    /**
     * 
     * @see MDirection
     */
    public @org.apache.thrift.annotation.Nullable MDirection thirdAxis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUAT((short)1, "quat"),
      /**
       * 
       * @see MDirection
       */
      FIRST_AXIS((short)2, "firstAxis"),
      /**
       * 
       * @see MDirection
       */
      SECOND_AXIS((short)3, "secondAxis"),
      /**
       * 
       * @see MDirection
       */
      THIRD_AXIS((short)4, "thirdAxis");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUAT
            return QUAT;
          case 2: // FIRST_AXIS
            return FIRST_AXIS;
          case 3: // SECOND_AXIS
            return SECOND_AXIS;
          case 4: // THIRD_AXIS
            return THIRD_AXIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUAT, new org.apache.thrift.meta_data.FieldMetaData("quat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MVector3.class)));
      tmpMap.put(_Fields.FIRST_AXIS, new org.apache.thrift.meta_data.FieldMetaData("firstAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      tmpMap.put(_Fields.SECOND_AXIS, new org.apache.thrift.meta_data.FieldMetaData("secondAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      tmpMap.put(_Fields.THIRD_AXIS, new org.apache.thrift.meta_data.FieldMetaData("thirdAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MDirection.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VectorFromMMI_args.class, metaDataMap);
    }

    public VectorFromMMI_args() {
    }

    public VectorFromMMI_args(
      de.mosim.mmi.math.MVector3 quat,
      MDirection firstAxis,
      MDirection secondAxis,
      MDirection thirdAxis)
    {
      this();
      this.quat = quat;
      this.firstAxis = firstAxis;
      this.secondAxis = secondAxis;
      this.thirdAxis = thirdAxis;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public VectorFromMMI_args(VectorFromMMI_args other) {
      if (other.isSetQuat()) {
        this.quat = new de.mosim.mmi.math.MVector3(other.quat);
      }
      if (other.isSetFirstAxis()) {
        this.firstAxis = other.firstAxis;
      }
      if (other.isSetSecondAxis()) {
        this.secondAxis = other.secondAxis;
      }
      if (other.isSetThirdAxis()) {
        this.thirdAxis = other.thirdAxis;
      }
    }

    public VectorFromMMI_args deepCopy() {
      return new VectorFromMMI_args(this);
    }

    @Override
    public void clear() {
      this.quat = null;
      this.firstAxis = null;
      this.secondAxis = null;
      this.thirdAxis = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MVector3 getQuat() {
      return this.quat;
    }

    public VectorFromMMI_args setQuat(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 quat) {
      this.quat = quat;
      return this;
    }

    public void unsetQuat() {
      this.quat = null;
    }

    /** Returns true if field quat is set (has been assigned a value) and false otherwise */
    public boolean isSetQuat() {
      return this.quat != null;
    }

    public void setQuatIsSet(boolean value) {
      if (!value) {
        this.quat = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getFirstAxis() {
      return this.firstAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public VectorFromMMI_args setFirstAxis(@org.apache.thrift.annotation.Nullable MDirection firstAxis) {
      this.firstAxis = firstAxis;
      return this;
    }

    public void unsetFirstAxis() {
      this.firstAxis = null;
    }

    /** Returns true if field firstAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstAxis() {
      return this.firstAxis != null;
    }

    public void setFirstAxisIsSet(boolean value) {
      if (!value) {
        this.firstAxis = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getSecondAxis() {
      return this.secondAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public VectorFromMMI_args setSecondAxis(@org.apache.thrift.annotation.Nullable MDirection secondAxis) {
      this.secondAxis = secondAxis;
      return this;
    }

    public void unsetSecondAxis() {
      this.secondAxis = null;
    }

    /** Returns true if field secondAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetSecondAxis() {
      return this.secondAxis != null;
    }

    public void setSecondAxisIsSet(boolean value) {
      if (!value) {
        this.secondAxis = null;
      }
    }

    /**
     * 
     * @see MDirection
     */
    @org.apache.thrift.annotation.Nullable
    public MDirection getThirdAxis() {
      return this.thirdAxis;
    }

    /**
     * 
     * @see MDirection
     */
    public VectorFromMMI_args setThirdAxis(@org.apache.thrift.annotation.Nullable MDirection thirdAxis) {
      this.thirdAxis = thirdAxis;
      return this;
    }

    public void unsetThirdAxis() {
      this.thirdAxis = null;
    }

    /** Returns true if field thirdAxis is set (has been assigned a value) and false otherwise */
    public boolean isSetThirdAxis() {
      return this.thirdAxis != null;
    }

    public void setThirdAxisIsSet(boolean value) {
      if (!value) {
        this.thirdAxis = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QUAT:
        if (value == null) {
          unsetQuat();
        } else {
          setQuat((de.mosim.mmi.math.MVector3)value);
        }
        break;

      case FIRST_AXIS:
        if (value == null) {
          unsetFirstAxis();
        } else {
          setFirstAxis((MDirection)value);
        }
        break;

      case SECOND_AXIS:
        if (value == null) {
          unsetSecondAxis();
        } else {
          setSecondAxis((MDirection)value);
        }
        break;

      case THIRD_AXIS:
        if (value == null) {
          unsetThirdAxis();
        } else {
          setThirdAxis((MDirection)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUAT:
        return getQuat();

      case FIRST_AXIS:
        return getFirstAxis();

      case SECOND_AXIS:
        return getSecondAxis();

      case THIRD_AXIS:
        return getThirdAxis();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUAT:
        return isSetQuat();
      case FIRST_AXIS:
        return isSetFirstAxis();
      case SECOND_AXIS:
        return isSetSecondAxis();
      case THIRD_AXIS:
        return isSetThirdAxis();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof VectorFromMMI_args)
        return this.equals((VectorFromMMI_args)that);
      return false;
    }

    public boolean equals(VectorFromMMI_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_quat = true && this.isSetQuat();
      boolean that_present_quat = true && that.isSetQuat();
      if (this_present_quat || that_present_quat) {
        if (!(this_present_quat && that_present_quat))
          return false;
        if (!this.quat.equals(that.quat))
          return false;
      }

      boolean this_present_firstAxis = true && this.isSetFirstAxis();
      boolean that_present_firstAxis = true && that.isSetFirstAxis();
      if (this_present_firstAxis || that_present_firstAxis) {
        if (!(this_present_firstAxis && that_present_firstAxis))
          return false;
        if (!this.firstAxis.equals(that.firstAxis))
          return false;
      }

      boolean this_present_secondAxis = true && this.isSetSecondAxis();
      boolean that_present_secondAxis = true && that.isSetSecondAxis();
      if (this_present_secondAxis || that_present_secondAxis) {
        if (!(this_present_secondAxis && that_present_secondAxis))
          return false;
        if (!this.secondAxis.equals(that.secondAxis))
          return false;
      }

      boolean this_present_thirdAxis = true && this.isSetThirdAxis();
      boolean that_present_thirdAxis = true && that.isSetThirdAxis();
      if (this_present_thirdAxis || that_present_thirdAxis) {
        if (!(this_present_thirdAxis && that_present_thirdAxis))
          return false;
        if (!this.thirdAxis.equals(that.thirdAxis))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuat()) ? 131071 : 524287);
      if (isSetQuat())
        hashCode = hashCode * 8191 + quat.hashCode();

      hashCode = hashCode * 8191 + ((isSetFirstAxis()) ? 131071 : 524287);
      if (isSetFirstAxis())
        hashCode = hashCode * 8191 + firstAxis.getValue();

      hashCode = hashCode * 8191 + ((isSetSecondAxis()) ? 131071 : 524287);
      if (isSetSecondAxis())
        hashCode = hashCode * 8191 + secondAxis.getValue();

      hashCode = hashCode * 8191 + ((isSetThirdAxis()) ? 131071 : 524287);
      if (isSetThirdAxis())
        hashCode = hashCode * 8191 + thirdAxis.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(VectorFromMMI_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuat()).compareTo(other.isSetQuat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quat, other.quat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFirstAxis()).compareTo(other.isSetFirstAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstAxis, other.firstAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSecondAxis()).compareTo(other.isSetSecondAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecondAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondAxis, other.secondAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetThirdAxis()).compareTo(other.isSetThirdAxis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThirdAxis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdAxis, other.thirdAxis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("VectorFromMMI_args(");
      boolean first = true;

      sb.append("quat:");
      if (this.quat == null) {
        sb.append("null");
      } else {
        sb.append(this.quat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("firstAxis:");
      if (this.firstAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.firstAxis);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secondAxis:");
      if (this.secondAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.secondAxis);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("thirdAxis:");
      if (this.thirdAxis == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdAxis);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (quat != null) {
        quat.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class VectorFromMMI_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public VectorFromMMI_argsStandardScheme getScheme() {
        return new VectorFromMMI_argsStandardScheme();
      }
    }

    private static class VectorFromMMI_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<VectorFromMMI_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, VectorFromMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.quat = new de.mosim.mmi.math.MVector3();
                struct.quat.read(iprot);
                struct.setQuatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FIRST_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.firstAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setFirstAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECOND_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.secondAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setSecondAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // THIRD_AXIS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.thirdAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
                struct.setThirdAxisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, VectorFromMMI_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.quat != null) {
          oprot.writeFieldBegin(QUAT_FIELD_DESC);
          struct.quat.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.firstAxis != null) {
          oprot.writeFieldBegin(FIRST_AXIS_FIELD_DESC);
          oprot.writeI32(struct.firstAxis.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.secondAxis != null) {
          oprot.writeFieldBegin(SECOND_AXIS_FIELD_DESC);
          oprot.writeI32(struct.secondAxis.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.thirdAxis != null) {
          oprot.writeFieldBegin(THIRD_AXIS_FIELD_DESC);
          oprot.writeI32(struct.thirdAxis.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class VectorFromMMI_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public VectorFromMMI_argsTupleScheme getScheme() {
        return new VectorFromMMI_argsTupleScheme();
      }
    }

    private static class VectorFromMMI_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<VectorFromMMI_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, VectorFromMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuat()) {
          optionals.set(0);
        }
        if (struct.isSetFirstAxis()) {
          optionals.set(1);
        }
        if (struct.isSetSecondAxis()) {
          optionals.set(2);
        }
        if (struct.isSetThirdAxis()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetQuat()) {
          struct.quat.write(oprot);
        }
        if (struct.isSetFirstAxis()) {
          oprot.writeI32(struct.firstAxis.getValue());
        }
        if (struct.isSetSecondAxis()) {
          oprot.writeI32(struct.secondAxis.getValue());
        }
        if (struct.isSetThirdAxis()) {
          oprot.writeI32(struct.thirdAxis.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, VectorFromMMI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.quat = new de.mosim.mmi.math.MVector3();
          struct.quat.read(iprot);
          struct.setQuatIsSet(true);
        }
        if (incoming.get(1)) {
          struct.firstAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setFirstAxisIsSet(true);
        }
        if (incoming.get(2)) {
          struct.secondAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setSecondAxisIsSet(true);
        }
        if (incoming.get(3)) {
          struct.thirdAxis = de.mosim.mmi.services.MDirection.findByValue(iprot.readI32());
          struct.setThirdAxisIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class VectorFromMMI_result implements org.apache.thrift.TBase<VectorFromMMI_result, VectorFromMMI_result._Fields>, java.io.Serializable, Cloneable, Comparable<VectorFromMMI_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VectorFromMMI_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new VectorFromMMI_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new VectorFromMMI_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MVector3.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VectorFromMMI_result.class, metaDataMap);
    }

    public VectorFromMMI_result() {
    }

    public VectorFromMMI_result(
      de.mosim.mmi.math.MVector3 success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public VectorFromMMI_result(VectorFromMMI_result other) {
      if (other.isSetSuccess()) {
        this.success = new de.mosim.mmi.math.MVector3(other.success);
      }
    }

    public VectorFromMMI_result deepCopy() {
      return new VectorFromMMI_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public de.mosim.mmi.math.MVector3 getSuccess() {
      return this.success;
    }

    public VectorFromMMI_result setSuccess(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.mosim.mmi.math.MVector3)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof VectorFromMMI_result)
        return this.equals((VectorFromMMI_result)that);
      return false;
    }

    public boolean equals(VectorFromMMI_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(VectorFromMMI_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("VectorFromMMI_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class VectorFromMMI_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public VectorFromMMI_resultStandardScheme getScheme() {
        return new VectorFromMMI_resultStandardScheme();
      }
    }

    private static class VectorFromMMI_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<VectorFromMMI_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, VectorFromMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new de.mosim.mmi.math.MVector3();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, VectorFromMMI_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class VectorFromMMI_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public VectorFromMMI_resultTupleScheme getScheme() {
        return new VectorFromMMI_resultTupleScheme();
      }
    }

    private static class VectorFromMMI_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<VectorFromMMI_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, VectorFromMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, VectorFromMMI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new de.mosim.mmi.math.MVector3();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
