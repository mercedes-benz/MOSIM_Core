/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.constraints;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MPathConstraint implements org.apache.thrift.TBase<MPathConstraint, MPathConstraint._Fields>, java.io.Serializable, Cloneable, Comparable<MPathConstraint> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MPathConstraint");

  private static final org.apache.thrift.protocol.TField POLYGON_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("PolygonPoints", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField WEIGHTING_FACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("WeightingFactor", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MPathConstraintStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MPathConstraintTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<MGeometryConstraint> PolygonPoints; // required
  public double WeightingFactor; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POLYGON_POINTS((short)1, "PolygonPoints"),
    WEIGHTING_FACTOR((short)2, "WeightingFactor");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POLYGON_POINTS
          return POLYGON_POINTS;
        case 2: // WEIGHTING_FACTOR
          return WEIGHTING_FACTOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WEIGHTINGFACTOR_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.WEIGHTING_FACTOR};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POLYGON_POINTS, new org.apache.thrift.meta_data.FieldMetaData("PolygonPoints", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MGeometryConstraint.class))));
    tmpMap.put(_Fields.WEIGHTING_FACTOR, new org.apache.thrift.meta_data.FieldMetaData("WeightingFactor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MPathConstraint.class, metaDataMap);
  }

  public MPathConstraint() {
  }

  public MPathConstraint(
    java.util.List<MGeometryConstraint> PolygonPoints)
  {
    this();
    this.PolygonPoints = PolygonPoints;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MPathConstraint(MPathConstraint other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPolygonPoints()) {
      java.util.List<MGeometryConstraint> __this__PolygonPoints = new java.util.ArrayList<MGeometryConstraint>(other.PolygonPoints.size());
      for (MGeometryConstraint other_element : other.PolygonPoints) {
        __this__PolygonPoints.add(new MGeometryConstraint(other_element));
      }
      this.PolygonPoints = __this__PolygonPoints;
    }
    this.WeightingFactor = other.WeightingFactor;
  }

  public MPathConstraint deepCopy() {
    return new MPathConstraint(this);
  }

  @Override
  public void clear() {
    this.PolygonPoints = null;
    setWeightingFactorIsSet(false);
    this.WeightingFactor = 0.0;
  }

  public int getPolygonPointsSize() {
    return (this.PolygonPoints == null) ? 0 : this.PolygonPoints.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MGeometryConstraint> getPolygonPointsIterator() {
    return (this.PolygonPoints == null) ? null : this.PolygonPoints.iterator();
  }

  public void addToPolygonPoints(MGeometryConstraint elem) {
    if (this.PolygonPoints == null) {
      this.PolygonPoints = new java.util.ArrayList<MGeometryConstraint>();
    }
    this.PolygonPoints.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MGeometryConstraint> getPolygonPoints() {
    return this.PolygonPoints;
  }

  public MPathConstraint setPolygonPoints(@org.apache.thrift.annotation.Nullable java.util.List<MGeometryConstraint> PolygonPoints) {
    this.PolygonPoints = PolygonPoints;
    return this;
  }

  public void unsetPolygonPoints() {
    this.PolygonPoints = null;
  }

  /** Returns true if field PolygonPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetPolygonPoints() {
    return this.PolygonPoints != null;
  }

  public void setPolygonPointsIsSet(boolean value) {
    if (!value) {
      this.PolygonPoints = null;
    }
  }

  public double getWeightingFactor() {
    return this.WeightingFactor;
  }

  public MPathConstraint setWeightingFactor(double WeightingFactor) {
    this.WeightingFactor = WeightingFactor;
    setWeightingFactorIsSet(true);
    return this;
  }

  public void unsetWeightingFactor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WEIGHTINGFACTOR_ISSET_ID);
  }

  /** Returns true if field WeightingFactor is set (has been assigned a value) and false otherwise */
  public boolean isSetWeightingFactor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WEIGHTINGFACTOR_ISSET_ID);
  }

  public void setWeightingFactorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WEIGHTINGFACTOR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case POLYGON_POINTS:
      if (value == null) {
        unsetPolygonPoints();
      } else {
        setPolygonPoints((java.util.List<MGeometryConstraint>)value);
      }
      break;

    case WEIGHTING_FACTOR:
      if (value == null) {
        unsetWeightingFactor();
      } else {
        setWeightingFactor((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case POLYGON_POINTS:
      return getPolygonPoints();

    case WEIGHTING_FACTOR:
      return getWeightingFactor();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case POLYGON_POINTS:
      return isSetPolygonPoints();
    case WEIGHTING_FACTOR:
      return isSetWeightingFactor();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MPathConstraint)
      return this.equals((MPathConstraint)that);
    return false;
  }

  public boolean equals(MPathConstraint that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_PolygonPoints = true && this.isSetPolygonPoints();
    boolean that_present_PolygonPoints = true && that.isSetPolygonPoints();
    if (this_present_PolygonPoints || that_present_PolygonPoints) {
      if (!(this_present_PolygonPoints && that_present_PolygonPoints))
        return false;
      if (!this.PolygonPoints.equals(that.PolygonPoints))
        return false;
    }

    boolean this_present_WeightingFactor = true && this.isSetWeightingFactor();
    boolean that_present_WeightingFactor = true && that.isSetWeightingFactor();
    if (this_present_WeightingFactor || that_present_WeightingFactor) {
      if (!(this_present_WeightingFactor && that_present_WeightingFactor))
        return false;
      if (this.WeightingFactor != that.WeightingFactor)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPolygonPoints()) ? 131071 : 524287);
    if (isSetPolygonPoints())
      hashCode = hashCode * 8191 + PolygonPoints.hashCode();

    hashCode = hashCode * 8191 + ((isSetWeightingFactor()) ? 131071 : 524287);
    if (isSetWeightingFactor())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(WeightingFactor);

    return hashCode;
  }

  @Override
  public int compareTo(MPathConstraint other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPolygonPoints()).compareTo(other.isSetPolygonPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolygonPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PolygonPoints, other.PolygonPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWeightingFactor()).compareTo(other.isSetWeightingFactor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeightingFactor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.WeightingFactor, other.WeightingFactor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MPathConstraint(");
    boolean first = true;

    sb.append("PolygonPoints:");
    if (this.PolygonPoints == null) {
      sb.append("null");
    } else {
      sb.append(this.PolygonPoints);
    }
    first = false;
    if (isSetWeightingFactor()) {
      if (!first) sb.append(", ");
      sb.append("WeightingFactor:");
      sb.append(this.WeightingFactor);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (PolygonPoints == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'PolygonPoints' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MPathConstraintStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MPathConstraintStandardScheme getScheme() {
      return new MPathConstraintStandardScheme();
    }
  }

  private static class MPathConstraintStandardScheme extends org.apache.thrift.scheme.StandardScheme<MPathConstraint> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MPathConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POLYGON_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.PolygonPoints = new java.util.ArrayList<MGeometryConstraint>(_list0.size);
                @org.apache.thrift.annotation.Nullable MGeometryConstraint _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new MGeometryConstraint();
                  _elem1.read(iprot);
                  struct.PolygonPoints.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setPolygonPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WEIGHTING_FACTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.WeightingFactor = iprot.readDouble();
              struct.setWeightingFactorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MPathConstraint struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.PolygonPoints != null) {
        oprot.writeFieldBegin(POLYGON_POINTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.PolygonPoints.size()));
          for (MGeometryConstraint _iter3 : struct.PolygonPoints)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetWeightingFactor()) {
        oprot.writeFieldBegin(WEIGHTING_FACTOR_FIELD_DESC);
        oprot.writeDouble(struct.WeightingFactor);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MPathConstraintTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MPathConstraintTupleScheme getScheme() {
      return new MPathConstraintTupleScheme();
    }
  }

  private static class MPathConstraintTupleScheme extends org.apache.thrift.scheme.TupleScheme<MPathConstraint> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MPathConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.PolygonPoints.size());
        for (MGeometryConstraint _iter4 : struct.PolygonPoints)
        {
          _iter4.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetWeightingFactor()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetWeightingFactor()) {
        oprot.writeDouble(struct.WeightingFactor);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MPathConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.PolygonPoints = new java.util.ArrayList<MGeometryConstraint>(_list5.size);
        @org.apache.thrift.annotation.Nullable MGeometryConstraint _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new MGeometryConstraint();
          _elem6.read(iprot);
          struct.PolygonPoints.add(_elem6);
        }
      }
      struct.setPolygonPointsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.WeightingFactor = iprot.readDouble();
        struct.setWeightingFactorIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

