/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.constraints;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MJointPathConstraint implements org.apache.thrift.TBase<MJointPathConstraint, MJointPathConstraint._Fields>, java.io.Serializable, Cloneable, Comparable<MJointPathConstraint> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MJointPathConstraint");

  private static final org.apache.thrift.protocol.TField JOINT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("JointType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PATH_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("PathConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MJointPathConstraintStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MJointPathConstraintTupleSchemeFactory();

  /**
   * 
   * @see de.mosim.mmi.avatar.MJointType
   */
  public @org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MJointType JointType; // required
  public @org.apache.thrift.annotation.Nullable MPathConstraint PathConstraint; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see de.mosim.mmi.avatar.MJointType
     */
    JOINT_TYPE((short)1, "JointType"),
    PATH_CONSTRAINT((short)2, "PathConstraint");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOINT_TYPE
          return JOINT_TYPE;
        case 2: // PATH_CONSTRAINT
          return PATH_CONSTRAINT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOINT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("JointType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, de.mosim.mmi.avatar.MJointType.class)));
    tmpMap.put(_Fields.PATH_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("PathConstraint", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MPathConstraint.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MJointPathConstraint.class, metaDataMap);
  }

  public MJointPathConstraint() {
  }

  public MJointPathConstraint(
    de.mosim.mmi.avatar.MJointType JointType,
    MPathConstraint PathConstraint)
  {
    this();
    this.JointType = JointType;
    this.PathConstraint = PathConstraint;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MJointPathConstraint(MJointPathConstraint other) {
    if (other.isSetJointType()) {
      this.JointType = other.JointType;
    }
    if (other.isSetPathConstraint()) {
      this.PathConstraint = new MPathConstraint(other.PathConstraint);
    }
  }

  public MJointPathConstraint deepCopy() {
    return new MJointPathConstraint(this);
  }

  @Override
  public void clear() {
    this.JointType = null;
    this.PathConstraint = null;
  }

  /**
   * 
   * @see de.mosim.mmi.avatar.MJointType
   */
  @org.apache.thrift.annotation.Nullable
  public de.mosim.mmi.avatar.MJointType getJointType() {
    return this.JointType;
  }

  /**
   * 
   * @see de.mosim.mmi.avatar.MJointType
   */
  public MJointPathConstraint setJointType(@org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MJointType JointType) {
    this.JointType = JointType;
    return this;
  }

  public void unsetJointType() {
    this.JointType = null;
  }

  /** Returns true if field JointType is set (has been assigned a value) and false otherwise */
  public boolean isSetJointType() {
    return this.JointType != null;
  }

  public void setJointTypeIsSet(boolean value) {
    if (!value) {
      this.JointType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MPathConstraint getPathConstraint() {
    return this.PathConstraint;
  }

  public MJointPathConstraint setPathConstraint(@org.apache.thrift.annotation.Nullable MPathConstraint PathConstraint) {
    this.PathConstraint = PathConstraint;
    return this;
  }

  public void unsetPathConstraint() {
    this.PathConstraint = null;
  }

  /** Returns true if field PathConstraint is set (has been assigned a value) and false otherwise */
  public boolean isSetPathConstraint() {
    return this.PathConstraint != null;
  }

  public void setPathConstraintIsSet(boolean value) {
    if (!value) {
      this.PathConstraint = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case JOINT_TYPE:
      if (value == null) {
        unsetJointType();
      } else {
        setJointType((de.mosim.mmi.avatar.MJointType)value);
      }
      break;

    case PATH_CONSTRAINT:
      if (value == null) {
        unsetPathConstraint();
      } else {
        setPathConstraint((MPathConstraint)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case JOINT_TYPE:
      return getJointType();

    case PATH_CONSTRAINT:
      return getPathConstraint();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case JOINT_TYPE:
      return isSetJointType();
    case PATH_CONSTRAINT:
      return isSetPathConstraint();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MJointPathConstraint)
      return this.equals((MJointPathConstraint)that);
    return false;
  }

  public boolean equals(MJointPathConstraint that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_JointType = true && this.isSetJointType();
    boolean that_present_JointType = true && that.isSetJointType();
    if (this_present_JointType || that_present_JointType) {
      if (!(this_present_JointType && that_present_JointType))
        return false;
      if (!this.JointType.equals(that.JointType))
        return false;
    }

    boolean this_present_PathConstraint = true && this.isSetPathConstraint();
    boolean that_present_PathConstraint = true && that.isSetPathConstraint();
    if (this_present_PathConstraint || that_present_PathConstraint) {
      if (!(this_present_PathConstraint && that_present_PathConstraint))
        return false;
      if (!this.PathConstraint.equals(that.PathConstraint))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetJointType()) ? 131071 : 524287);
    if (isSetJointType())
      hashCode = hashCode * 8191 + JointType.getValue();

    hashCode = hashCode * 8191 + ((isSetPathConstraint()) ? 131071 : 524287);
    if (isSetPathConstraint())
      hashCode = hashCode * 8191 + PathConstraint.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MJointPathConstraint other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetJointType()).compareTo(other.isSetJointType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJointType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.JointType, other.JointType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPathConstraint()).compareTo(other.isSetPathConstraint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPathConstraint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PathConstraint, other.PathConstraint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MJointPathConstraint(");
    boolean first = true;

    sb.append("JointType:");
    if (this.JointType == null) {
      sb.append("null");
    } else {
      sb.append(this.JointType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PathConstraint:");
    if (this.PathConstraint == null) {
      sb.append("null");
    } else {
      sb.append(this.PathConstraint);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (JointType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'JointType' was not present! Struct: " + toString());
    }
    if (PathConstraint == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'PathConstraint' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (PathConstraint != null) {
      PathConstraint.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MJointPathConstraintStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MJointPathConstraintStandardScheme getScheme() {
      return new MJointPathConstraintStandardScheme();
    }
  }

  private static class MJointPathConstraintStandardScheme extends org.apache.thrift.scheme.StandardScheme<MJointPathConstraint> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MJointPathConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOINT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.JointType = de.mosim.mmi.avatar.MJointType.findByValue(iprot.readI32());
              struct.setJointTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PATH_CONSTRAINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.PathConstraint = new MPathConstraint();
              struct.PathConstraint.read(iprot);
              struct.setPathConstraintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MJointPathConstraint struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.JointType != null) {
        oprot.writeFieldBegin(JOINT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.JointType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.PathConstraint != null) {
        oprot.writeFieldBegin(PATH_CONSTRAINT_FIELD_DESC);
        struct.PathConstraint.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MJointPathConstraintTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MJointPathConstraintTupleScheme getScheme() {
      return new MJointPathConstraintTupleScheme();
    }
  }

  private static class MJointPathConstraintTupleScheme extends org.apache.thrift.scheme.TupleScheme<MJointPathConstraint> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MJointPathConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.JointType.getValue());
      struct.PathConstraint.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MJointPathConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.JointType = de.mosim.mmi.avatar.MJointType.findByValue(iprot.readI32());
      struct.setJointTypeIsSet(true);
      struct.PathConstraint = new MPathConstraint();
      struct.PathConstraint.read(iprot);
      struct.setPathConstraintIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

