/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.constraints;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MConstraint implements org.apache.thrift.TBase<MConstraint, MConstraint._Fields>, java.io.Serializable, Cloneable, Comparable<MConstraint> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MConstraint");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GEOMETRY_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("GeometryConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField VELOCITY_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("VelocityConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ACCELERATION_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("AccelerationConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField PATH_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("PathConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField JOINT_PATH_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("JointPathConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField POSTURE_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("PostureConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField JOINT_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("JointConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("Properties", org.apache.thrift.protocol.TType.MAP, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MConstraintStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MConstraintTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String ID; // required
  public @org.apache.thrift.annotation.Nullable MGeometryConstraint GeometryConstraint; // optional
  public @org.apache.thrift.annotation.Nullable MVelocityConstraint VelocityConstraint; // optional
  public @org.apache.thrift.annotation.Nullable MAccelerationConstraint AccelerationConstraint; // optional
  public @org.apache.thrift.annotation.Nullable MPathConstraint PathConstraint; // optional
  public @org.apache.thrift.annotation.Nullable MJointPathConstraint JointPathConstraint; // optional
  public @org.apache.thrift.annotation.Nullable MPostureConstraint PostureConstraint; // optional
  public @org.apache.thrift.annotation.Nullable MJointConstraint JointConstraint; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> Properties; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "ID"),
    GEOMETRY_CONSTRAINT((short)2, "GeometryConstraint"),
    VELOCITY_CONSTRAINT((short)3, "VelocityConstraint"),
    ACCELERATION_CONSTRAINT((short)4, "AccelerationConstraint"),
    PATH_CONSTRAINT((short)5, "PathConstraint"),
    JOINT_PATH_CONSTRAINT((short)6, "JointPathConstraint"),
    POSTURE_CONSTRAINT((short)7, "PostureConstraint"),
    JOINT_CONSTRAINT((short)8, "JointConstraint"),
    PROPERTIES((short)9, "Properties");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // GEOMETRY_CONSTRAINT
          return GEOMETRY_CONSTRAINT;
        case 3: // VELOCITY_CONSTRAINT
          return VELOCITY_CONSTRAINT;
        case 4: // ACCELERATION_CONSTRAINT
          return ACCELERATION_CONSTRAINT;
        case 5: // PATH_CONSTRAINT
          return PATH_CONSTRAINT;
        case 6: // JOINT_PATH_CONSTRAINT
          return JOINT_PATH_CONSTRAINT;
        case 7: // POSTURE_CONSTRAINT
          return POSTURE_CONSTRAINT;
        case 8: // JOINT_CONSTRAINT
          return JOINT_CONSTRAINT;
        case 9: // PROPERTIES
          return PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.GEOMETRY_CONSTRAINT,_Fields.VELOCITY_CONSTRAINT,_Fields.ACCELERATION_CONSTRAINT,_Fields.PATH_CONSTRAINT,_Fields.JOINT_PATH_CONSTRAINT,_Fields.POSTURE_CONSTRAINT,_Fields.JOINT_CONSTRAINT,_Fields.PROPERTIES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("ID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEOMETRY_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("GeometryConstraint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MGeometryConstraint.class)));
    tmpMap.put(_Fields.VELOCITY_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("VelocityConstraint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MVelocityConstraint.class)));
    tmpMap.put(_Fields.ACCELERATION_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("AccelerationConstraint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MAccelerationConstraint.class)));
    tmpMap.put(_Fields.PATH_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("PathConstraint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MPathConstraint.class)));
    tmpMap.put(_Fields.JOINT_PATH_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("JointPathConstraint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MJointPathConstraint.class)));
    tmpMap.put(_Fields.POSTURE_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("PostureConstraint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MPostureConstraint.class)));
    tmpMap.put(_Fields.JOINT_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("JointConstraint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MJointConstraint.class)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("Properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MConstraint.class, metaDataMap);
  }

  public MConstraint() {
  }

  public MConstraint(
    java.lang.String ID)
  {
    this();
    this.ID = ID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MConstraint(MConstraint other) {
    if (other.isSetID()) {
      this.ID = other.ID;
    }
    if (other.isSetGeometryConstraint()) {
      this.GeometryConstraint = new MGeometryConstraint(other.GeometryConstraint);
    }
    if (other.isSetVelocityConstraint()) {
      this.VelocityConstraint = new MVelocityConstraint(other.VelocityConstraint);
    }
    if (other.isSetAccelerationConstraint()) {
      this.AccelerationConstraint = new MAccelerationConstraint(other.AccelerationConstraint);
    }
    if (other.isSetPathConstraint()) {
      this.PathConstraint = new MPathConstraint(other.PathConstraint);
    }
    if (other.isSetJointPathConstraint()) {
      this.JointPathConstraint = new MJointPathConstraint(other.JointPathConstraint);
    }
    if (other.isSetPostureConstraint()) {
      this.PostureConstraint = new MPostureConstraint(other.PostureConstraint);
    }
    if (other.isSetJointConstraint()) {
      this.JointConstraint = new MJointConstraint(other.JointConstraint);
    }
    if (other.isSetProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__Properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.Properties);
      this.Properties = __this__Properties;
    }
  }

  public MConstraint deepCopy() {
    return new MConstraint(this);
  }

  @Override
  public void clear() {
    this.ID = null;
    this.GeometryConstraint = null;
    this.VelocityConstraint = null;
    this.AccelerationConstraint = null;
    this.PathConstraint = null;
    this.JointPathConstraint = null;
    this.PostureConstraint = null;
    this.JointConstraint = null;
    this.Properties = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getID() {
    return this.ID;
  }

  public MConstraint setID(@org.apache.thrift.annotation.Nullable java.lang.String ID) {
    this.ID = ID;
    return this;
  }

  public void unsetID() {
    this.ID = null;
  }

  /** Returns true if field ID is set (has been assigned a value) and false otherwise */
  public boolean isSetID() {
    return this.ID != null;
  }

  public void setIDIsSet(boolean value) {
    if (!value) {
      this.ID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MGeometryConstraint getGeometryConstraint() {
    return this.GeometryConstraint;
  }

  public MConstraint setGeometryConstraint(@org.apache.thrift.annotation.Nullable MGeometryConstraint GeometryConstraint) {
    this.GeometryConstraint = GeometryConstraint;
    return this;
  }

  public void unsetGeometryConstraint() {
    this.GeometryConstraint = null;
  }

  /** Returns true if field GeometryConstraint is set (has been assigned a value) and false otherwise */
  public boolean isSetGeometryConstraint() {
    return this.GeometryConstraint != null;
  }

  public void setGeometryConstraintIsSet(boolean value) {
    if (!value) {
      this.GeometryConstraint = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MVelocityConstraint getVelocityConstraint() {
    return this.VelocityConstraint;
  }

  public MConstraint setVelocityConstraint(@org.apache.thrift.annotation.Nullable MVelocityConstraint VelocityConstraint) {
    this.VelocityConstraint = VelocityConstraint;
    return this;
  }

  public void unsetVelocityConstraint() {
    this.VelocityConstraint = null;
  }

  /** Returns true if field VelocityConstraint is set (has been assigned a value) and false otherwise */
  public boolean isSetVelocityConstraint() {
    return this.VelocityConstraint != null;
  }

  public void setVelocityConstraintIsSet(boolean value) {
    if (!value) {
      this.VelocityConstraint = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MAccelerationConstraint getAccelerationConstraint() {
    return this.AccelerationConstraint;
  }

  public MConstraint setAccelerationConstraint(@org.apache.thrift.annotation.Nullable MAccelerationConstraint AccelerationConstraint) {
    this.AccelerationConstraint = AccelerationConstraint;
    return this;
  }

  public void unsetAccelerationConstraint() {
    this.AccelerationConstraint = null;
  }

  /** Returns true if field AccelerationConstraint is set (has been assigned a value) and false otherwise */
  public boolean isSetAccelerationConstraint() {
    return this.AccelerationConstraint != null;
  }

  public void setAccelerationConstraintIsSet(boolean value) {
    if (!value) {
      this.AccelerationConstraint = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MPathConstraint getPathConstraint() {
    return this.PathConstraint;
  }

  public MConstraint setPathConstraint(@org.apache.thrift.annotation.Nullable MPathConstraint PathConstraint) {
    this.PathConstraint = PathConstraint;
    return this;
  }

  public void unsetPathConstraint() {
    this.PathConstraint = null;
  }

  /** Returns true if field PathConstraint is set (has been assigned a value) and false otherwise */
  public boolean isSetPathConstraint() {
    return this.PathConstraint != null;
  }

  public void setPathConstraintIsSet(boolean value) {
    if (!value) {
      this.PathConstraint = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MJointPathConstraint getJointPathConstraint() {
    return this.JointPathConstraint;
  }

  public MConstraint setJointPathConstraint(@org.apache.thrift.annotation.Nullable MJointPathConstraint JointPathConstraint) {
    this.JointPathConstraint = JointPathConstraint;
    return this;
  }

  public void unsetJointPathConstraint() {
    this.JointPathConstraint = null;
  }

  /** Returns true if field JointPathConstraint is set (has been assigned a value) and false otherwise */
  public boolean isSetJointPathConstraint() {
    return this.JointPathConstraint != null;
  }

  public void setJointPathConstraintIsSet(boolean value) {
    if (!value) {
      this.JointPathConstraint = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MPostureConstraint getPostureConstraint() {
    return this.PostureConstraint;
  }

  public MConstraint setPostureConstraint(@org.apache.thrift.annotation.Nullable MPostureConstraint PostureConstraint) {
    this.PostureConstraint = PostureConstraint;
    return this;
  }

  public void unsetPostureConstraint() {
    this.PostureConstraint = null;
  }

  /** Returns true if field PostureConstraint is set (has been assigned a value) and false otherwise */
  public boolean isSetPostureConstraint() {
    return this.PostureConstraint != null;
  }

  public void setPostureConstraintIsSet(boolean value) {
    if (!value) {
      this.PostureConstraint = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MJointConstraint getJointConstraint() {
    return this.JointConstraint;
  }

  public MConstraint setJointConstraint(@org.apache.thrift.annotation.Nullable MJointConstraint JointConstraint) {
    this.JointConstraint = JointConstraint;
    return this;
  }

  public void unsetJointConstraint() {
    this.JointConstraint = null;
  }

  /** Returns true if field JointConstraint is set (has been assigned a value) and false otherwise */
  public boolean isSetJointConstraint() {
    return this.JointConstraint != null;
  }

  public void setJointConstraintIsSet(boolean value) {
    if (!value) {
      this.JointConstraint = null;
    }
  }

  public int getPropertiesSize() {
    return (this.Properties == null) ? 0 : this.Properties.size();
  }

  public void putToProperties(java.lang.String key, java.lang.String val) {
    if (this.Properties == null) {
      this.Properties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.Properties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getProperties() {
    return this.Properties;
  }

  public MConstraint setProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> Properties) {
    this.Properties = Properties;
    return this;
  }

  public void unsetProperties() {
    this.Properties = null;
  }

  /** Returns true if field Properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.Properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.Properties = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetID();
      } else {
        setID((java.lang.String)value);
      }
      break;

    case GEOMETRY_CONSTRAINT:
      if (value == null) {
        unsetGeometryConstraint();
      } else {
        setGeometryConstraint((MGeometryConstraint)value);
      }
      break;

    case VELOCITY_CONSTRAINT:
      if (value == null) {
        unsetVelocityConstraint();
      } else {
        setVelocityConstraint((MVelocityConstraint)value);
      }
      break;

    case ACCELERATION_CONSTRAINT:
      if (value == null) {
        unsetAccelerationConstraint();
      } else {
        setAccelerationConstraint((MAccelerationConstraint)value);
      }
      break;

    case PATH_CONSTRAINT:
      if (value == null) {
        unsetPathConstraint();
      } else {
        setPathConstraint((MPathConstraint)value);
      }
      break;

    case JOINT_PATH_CONSTRAINT:
      if (value == null) {
        unsetJointPathConstraint();
      } else {
        setJointPathConstraint((MJointPathConstraint)value);
      }
      break;

    case POSTURE_CONSTRAINT:
      if (value == null) {
        unsetPostureConstraint();
      } else {
        setPostureConstraint((MPostureConstraint)value);
      }
      break;

    case JOINT_CONSTRAINT:
      if (value == null) {
        unsetJointConstraint();
      } else {
        setJointConstraint((MJointConstraint)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getID();

    case GEOMETRY_CONSTRAINT:
      return getGeometryConstraint();

    case VELOCITY_CONSTRAINT:
      return getVelocityConstraint();

    case ACCELERATION_CONSTRAINT:
      return getAccelerationConstraint();

    case PATH_CONSTRAINT:
      return getPathConstraint();

    case JOINT_PATH_CONSTRAINT:
      return getJointPathConstraint();

    case POSTURE_CONSTRAINT:
      return getPostureConstraint();

    case JOINT_CONSTRAINT:
      return getJointConstraint();

    case PROPERTIES:
      return getProperties();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetID();
    case GEOMETRY_CONSTRAINT:
      return isSetGeometryConstraint();
    case VELOCITY_CONSTRAINT:
      return isSetVelocityConstraint();
    case ACCELERATION_CONSTRAINT:
      return isSetAccelerationConstraint();
    case PATH_CONSTRAINT:
      return isSetPathConstraint();
    case JOINT_PATH_CONSTRAINT:
      return isSetJointPathConstraint();
    case POSTURE_CONSTRAINT:
      return isSetPostureConstraint();
    case JOINT_CONSTRAINT:
      return isSetJointConstraint();
    case PROPERTIES:
      return isSetProperties();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MConstraint)
      return this.equals((MConstraint)that);
    return false;
  }

  public boolean equals(MConstraint that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ID = true && this.isSetID();
    boolean that_present_ID = true && that.isSetID();
    if (this_present_ID || that_present_ID) {
      if (!(this_present_ID && that_present_ID))
        return false;
      if (!this.ID.equals(that.ID))
        return false;
    }

    boolean this_present_GeometryConstraint = true && this.isSetGeometryConstraint();
    boolean that_present_GeometryConstraint = true && that.isSetGeometryConstraint();
    if (this_present_GeometryConstraint || that_present_GeometryConstraint) {
      if (!(this_present_GeometryConstraint && that_present_GeometryConstraint))
        return false;
      if (!this.GeometryConstraint.equals(that.GeometryConstraint))
        return false;
    }

    boolean this_present_VelocityConstraint = true && this.isSetVelocityConstraint();
    boolean that_present_VelocityConstraint = true && that.isSetVelocityConstraint();
    if (this_present_VelocityConstraint || that_present_VelocityConstraint) {
      if (!(this_present_VelocityConstraint && that_present_VelocityConstraint))
        return false;
      if (!this.VelocityConstraint.equals(that.VelocityConstraint))
        return false;
    }

    boolean this_present_AccelerationConstraint = true && this.isSetAccelerationConstraint();
    boolean that_present_AccelerationConstraint = true && that.isSetAccelerationConstraint();
    if (this_present_AccelerationConstraint || that_present_AccelerationConstraint) {
      if (!(this_present_AccelerationConstraint && that_present_AccelerationConstraint))
        return false;
      if (!this.AccelerationConstraint.equals(that.AccelerationConstraint))
        return false;
    }

    boolean this_present_PathConstraint = true && this.isSetPathConstraint();
    boolean that_present_PathConstraint = true && that.isSetPathConstraint();
    if (this_present_PathConstraint || that_present_PathConstraint) {
      if (!(this_present_PathConstraint && that_present_PathConstraint))
        return false;
      if (!this.PathConstraint.equals(that.PathConstraint))
        return false;
    }

    boolean this_present_JointPathConstraint = true && this.isSetJointPathConstraint();
    boolean that_present_JointPathConstraint = true && that.isSetJointPathConstraint();
    if (this_present_JointPathConstraint || that_present_JointPathConstraint) {
      if (!(this_present_JointPathConstraint && that_present_JointPathConstraint))
        return false;
      if (!this.JointPathConstraint.equals(that.JointPathConstraint))
        return false;
    }

    boolean this_present_PostureConstraint = true && this.isSetPostureConstraint();
    boolean that_present_PostureConstraint = true && that.isSetPostureConstraint();
    if (this_present_PostureConstraint || that_present_PostureConstraint) {
      if (!(this_present_PostureConstraint && that_present_PostureConstraint))
        return false;
      if (!this.PostureConstraint.equals(that.PostureConstraint))
        return false;
    }

    boolean this_present_JointConstraint = true && this.isSetJointConstraint();
    boolean that_present_JointConstraint = true && that.isSetJointConstraint();
    if (this_present_JointConstraint || that_present_JointConstraint) {
      if (!(this_present_JointConstraint && that_present_JointConstraint))
        return false;
      if (!this.JointConstraint.equals(that.JointConstraint))
        return false;
    }

    boolean this_present_Properties = true && this.isSetProperties();
    boolean that_present_Properties = true && that.isSetProperties();
    if (this_present_Properties || that_present_Properties) {
      if (!(this_present_Properties && that_present_Properties))
        return false;
      if (!this.Properties.equals(that.Properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetID()) ? 131071 : 524287);
    if (isSetID())
      hashCode = hashCode * 8191 + ID.hashCode();

    hashCode = hashCode * 8191 + ((isSetGeometryConstraint()) ? 131071 : 524287);
    if (isSetGeometryConstraint())
      hashCode = hashCode * 8191 + GeometryConstraint.hashCode();

    hashCode = hashCode * 8191 + ((isSetVelocityConstraint()) ? 131071 : 524287);
    if (isSetVelocityConstraint())
      hashCode = hashCode * 8191 + VelocityConstraint.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccelerationConstraint()) ? 131071 : 524287);
    if (isSetAccelerationConstraint())
      hashCode = hashCode * 8191 + AccelerationConstraint.hashCode();

    hashCode = hashCode * 8191 + ((isSetPathConstraint()) ? 131071 : 524287);
    if (isSetPathConstraint())
      hashCode = hashCode * 8191 + PathConstraint.hashCode();

    hashCode = hashCode * 8191 + ((isSetJointPathConstraint()) ? 131071 : 524287);
    if (isSetJointPathConstraint())
      hashCode = hashCode * 8191 + JointPathConstraint.hashCode();

    hashCode = hashCode * 8191 + ((isSetPostureConstraint()) ? 131071 : 524287);
    if (isSetPostureConstraint())
      hashCode = hashCode * 8191 + PostureConstraint.hashCode();

    hashCode = hashCode * 8191 + ((isSetJointConstraint()) ? 131071 : 524287);
    if (isSetJointConstraint())
      hashCode = hashCode * 8191 + JointConstraint.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + Properties.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MConstraint other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetID()).compareTo(other.isSetID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, other.ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGeometryConstraint()).compareTo(other.isSetGeometryConstraint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeometryConstraint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GeometryConstraint, other.GeometryConstraint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVelocityConstraint()).compareTo(other.isSetVelocityConstraint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVelocityConstraint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VelocityConstraint, other.VelocityConstraint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccelerationConstraint()).compareTo(other.isSetAccelerationConstraint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccelerationConstraint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AccelerationConstraint, other.AccelerationConstraint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPathConstraint()).compareTo(other.isSetPathConstraint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPathConstraint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PathConstraint, other.PathConstraint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJointPathConstraint()).compareTo(other.isSetJointPathConstraint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJointPathConstraint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.JointPathConstraint, other.JointPathConstraint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPostureConstraint()).compareTo(other.isSetPostureConstraint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostureConstraint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PostureConstraint, other.PostureConstraint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJointConstraint()).compareTo(other.isSetJointConstraint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJointConstraint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.JointConstraint, other.JointConstraint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Properties, other.Properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MConstraint(");
    boolean first = true;

    sb.append("ID:");
    if (this.ID == null) {
      sb.append("null");
    } else {
      sb.append(this.ID);
    }
    first = false;
    if (isSetGeometryConstraint()) {
      if (!first) sb.append(", ");
      sb.append("GeometryConstraint:");
      if (this.GeometryConstraint == null) {
        sb.append("null");
      } else {
        sb.append(this.GeometryConstraint);
      }
      first = false;
    }
    if (isSetVelocityConstraint()) {
      if (!first) sb.append(", ");
      sb.append("VelocityConstraint:");
      if (this.VelocityConstraint == null) {
        sb.append("null");
      } else {
        sb.append(this.VelocityConstraint);
      }
      first = false;
    }
    if (isSetAccelerationConstraint()) {
      if (!first) sb.append(", ");
      sb.append("AccelerationConstraint:");
      if (this.AccelerationConstraint == null) {
        sb.append("null");
      } else {
        sb.append(this.AccelerationConstraint);
      }
      first = false;
    }
    if (isSetPathConstraint()) {
      if (!first) sb.append(", ");
      sb.append("PathConstraint:");
      if (this.PathConstraint == null) {
        sb.append("null");
      } else {
        sb.append(this.PathConstraint);
      }
      first = false;
    }
    if (isSetJointPathConstraint()) {
      if (!first) sb.append(", ");
      sb.append("JointPathConstraint:");
      if (this.JointPathConstraint == null) {
        sb.append("null");
      } else {
        sb.append(this.JointPathConstraint);
      }
      first = false;
    }
    if (isSetPostureConstraint()) {
      if (!first) sb.append(", ");
      sb.append("PostureConstraint:");
      if (this.PostureConstraint == null) {
        sb.append("null");
      } else {
        sb.append(this.PostureConstraint);
      }
      first = false;
    }
    if (isSetJointConstraint()) {
      if (!first) sb.append(", ");
      sb.append("JointConstraint:");
      if (this.JointConstraint == null) {
        sb.append("null");
      } else {
        sb.append(this.JointConstraint);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("Properties:");
      if (this.Properties == null) {
        sb.append("null");
      } else {
        sb.append(this.Properties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (GeometryConstraint != null) {
      GeometryConstraint.validate();
    }
    if (VelocityConstraint != null) {
      VelocityConstraint.validate();
    }
    if (AccelerationConstraint != null) {
      AccelerationConstraint.validate();
    }
    if (PathConstraint != null) {
      PathConstraint.validate();
    }
    if (JointPathConstraint != null) {
      JointPathConstraint.validate();
    }
    if (PostureConstraint != null) {
      PostureConstraint.validate();
    }
    if (JointConstraint != null) {
      JointConstraint.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MConstraintStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MConstraintStandardScheme getScheme() {
      return new MConstraintStandardScheme();
    }
  }

  private static class MConstraintStandardScheme extends org.apache.thrift.scheme.StandardScheme<MConstraint> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ID = iprot.readString();
              struct.setIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GEOMETRY_CONSTRAINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.GeometryConstraint = new MGeometryConstraint();
              struct.GeometryConstraint.read(iprot);
              struct.setGeometryConstraintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VELOCITY_CONSTRAINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.VelocityConstraint = new MVelocityConstraint();
              struct.VelocityConstraint.read(iprot);
              struct.setVelocityConstraintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCELERATION_CONSTRAINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.AccelerationConstraint = new MAccelerationConstraint();
              struct.AccelerationConstraint.read(iprot);
              struct.setAccelerationConstraintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PATH_CONSTRAINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.PathConstraint = new MPathConstraint();
              struct.PathConstraint.read(iprot);
              struct.setPathConstraintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JOINT_PATH_CONSTRAINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.JointPathConstraint = new MJointPathConstraint();
              struct.JointPathConstraint.read(iprot);
              struct.setJointPathConstraintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POSTURE_CONSTRAINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.PostureConstraint = new MPostureConstraint();
              struct.PostureConstraint.read(iprot);
              struct.setPostureConstraintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JOINT_CONSTRAINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.JointConstraint = new MJointConstraint();
              struct.JointConstraint.read(iprot);
              struct.setJointConstraintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.Properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map16.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key17;
                @org.apache.thrift.annotation.Nullable java.lang.String _val18;
                for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                {
                  _key17 = iprot.readString();
                  _val18 = iprot.readString();
                  struct.Properties.put(_key17, _val18);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MConstraint struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ID != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.ID);
        oprot.writeFieldEnd();
      }
      if (struct.GeometryConstraint != null) {
        if (struct.isSetGeometryConstraint()) {
          oprot.writeFieldBegin(GEOMETRY_CONSTRAINT_FIELD_DESC);
          struct.GeometryConstraint.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.VelocityConstraint != null) {
        if (struct.isSetVelocityConstraint()) {
          oprot.writeFieldBegin(VELOCITY_CONSTRAINT_FIELD_DESC);
          struct.VelocityConstraint.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.AccelerationConstraint != null) {
        if (struct.isSetAccelerationConstraint()) {
          oprot.writeFieldBegin(ACCELERATION_CONSTRAINT_FIELD_DESC);
          struct.AccelerationConstraint.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.PathConstraint != null) {
        if (struct.isSetPathConstraint()) {
          oprot.writeFieldBegin(PATH_CONSTRAINT_FIELD_DESC);
          struct.PathConstraint.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.JointPathConstraint != null) {
        if (struct.isSetJointPathConstraint()) {
          oprot.writeFieldBegin(JOINT_PATH_CONSTRAINT_FIELD_DESC);
          struct.JointPathConstraint.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.PostureConstraint != null) {
        if (struct.isSetPostureConstraint()) {
          oprot.writeFieldBegin(POSTURE_CONSTRAINT_FIELD_DESC);
          struct.PostureConstraint.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.JointConstraint != null) {
        if (struct.isSetJointConstraint()) {
          oprot.writeFieldBegin(JOINT_CONSTRAINT_FIELD_DESC);
          struct.JointConstraint.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.Properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.Properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter20 : struct.Properties.entrySet())
            {
              oprot.writeString(_iter20.getKey());
              oprot.writeString(_iter20.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MConstraintTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MConstraintTupleScheme getScheme() {
      return new MConstraintTupleScheme();
    }
  }

  private static class MConstraintTupleScheme extends org.apache.thrift.scheme.TupleScheme<MConstraint> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.ID);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGeometryConstraint()) {
        optionals.set(0);
      }
      if (struct.isSetVelocityConstraint()) {
        optionals.set(1);
      }
      if (struct.isSetAccelerationConstraint()) {
        optionals.set(2);
      }
      if (struct.isSetPathConstraint()) {
        optionals.set(3);
      }
      if (struct.isSetJointPathConstraint()) {
        optionals.set(4);
      }
      if (struct.isSetPostureConstraint()) {
        optionals.set(5);
      }
      if (struct.isSetJointConstraint()) {
        optionals.set(6);
      }
      if (struct.isSetProperties()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetGeometryConstraint()) {
        struct.GeometryConstraint.write(oprot);
      }
      if (struct.isSetVelocityConstraint()) {
        struct.VelocityConstraint.write(oprot);
      }
      if (struct.isSetAccelerationConstraint()) {
        struct.AccelerationConstraint.write(oprot);
      }
      if (struct.isSetPathConstraint()) {
        struct.PathConstraint.write(oprot);
      }
      if (struct.isSetJointPathConstraint()) {
        struct.JointPathConstraint.write(oprot);
      }
      if (struct.isSetPostureConstraint()) {
        struct.PostureConstraint.write(oprot);
      }
      if (struct.isSetJointConstraint()) {
        struct.JointConstraint.write(oprot);
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.Properties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter21 : struct.Properties.entrySet())
          {
            oprot.writeString(_iter21.getKey());
            oprot.writeString(_iter21.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.ID = iprot.readString();
      struct.setIDIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.GeometryConstraint = new MGeometryConstraint();
        struct.GeometryConstraint.read(iprot);
        struct.setGeometryConstraintIsSet(true);
      }
      if (incoming.get(1)) {
        struct.VelocityConstraint = new MVelocityConstraint();
        struct.VelocityConstraint.read(iprot);
        struct.setVelocityConstraintIsSet(true);
      }
      if (incoming.get(2)) {
        struct.AccelerationConstraint = new MAccelerationConstraint();
        struct.AccelerationConstraint.read(iprot);
        struct.setAccelerationConstraintIsSet(true);
      }
      if (incoming.get(3)) {
        struct.PathConstraint = new MPathConstraint();
        struct.PathConstraint.read(iprot);
        struct.setPathConstraintIsSet(true);
      }
      if (incoming.get(4)) {
        struct.JointPathConstraint = new MJointPathConstraint();
        struct.JointPathConstraint.read(iprot);
        struct.setJointPathConstraintIsSet(true);
      }
      if (incoming.get(5)) {
        struct.PostureConstraint = new MPostureConstraint();
        struct.PostureConstraint.read(iprot);
        struct.setPostureConstraintIsSet(true);
      }
      if (incoming.get(6)) {
        struct.JointConstraint = new MJointConstraint();
        struct.JointConstraint.read(iprot);
        struct.setJointConstraintIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.Properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map22.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key23;
          @org.apache.thrift.annotation.Nullable java.lang.String _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = iprot.readString();
            _val24 = iprot.readString();
            struct.Properties.put(_key23, _val24);
          }
        }
        struct.setPropertiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

