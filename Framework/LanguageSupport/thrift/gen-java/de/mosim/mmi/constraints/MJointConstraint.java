/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.constraints;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MJointConstraint implements org.apache.thrift.TBase<MJointConstraint, MJointConstraint._Fields>, java.io.Serializable, Cloneable, Comparable<MJointConstraint> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MJointConstraint");

  private static final org.apache.thrift.protocol.TField JOINT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("JointType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GEOMETRY_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("GeometryConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField VELOCITY_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("VelocityConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ACCELERATION_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("AccelerationConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MJointConstraintStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MJointConstraintTupleSchemeFactory();

  /**
   * 
   * @see de.mosim.mmi.avatar.MJointType
   */
  public @org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MJointType JointType; // required
  public @org.apache.thrift.annotation.Nullable MGeometryConstraint GeometryConstraint; // optional
  public @org.apache.thrift.annotation.Nullable MVelocityConstraint VelocityConstraint; // optional
  public @org.apache.thrift.annotation.Nullable MAccelerationConstraint AccelerationConstraint; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see de.mosim.mmi.avatar.MJointType
     */
    JOINT_TYPE((short)1, "JointType"),
    GEOMETRY_CONSTRAINT((short)2, "GeometryConstraint"),
    VELOCITY_CONSTRAINT((short)3, "VelocityConstraint"),
    ACCELERATION_CONSTRAINT((short)4, "AccelerationConstraint");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOINT_TYPE
          return JOINT_TYPE;
        case 2: // GEOMETRY_CONSTRAINT
          return GEOMETRY_CONSTRAINT;
        case 3: // VELOCITY_CONSTRAINT
          return VELOCITY_CONSTRAINT;
        case 4: // ACCELERATION_CONSTRAINT
          return ACCELERATION_CONSTRAINT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.GEOMETRY_CONSTRAINT,_Fields.VELOCITY_CONSTRAINT,_Fields.ACCELERATION_CONSTRAINT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOINT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("JointType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, de.mosim.mmi.avatar.MJointType.class)));
    tmpMap.put(_Fields.GEOMETRY_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("GeometryConstraint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MGeometryConstraint.class)));
    tmpMap.put(_Fields.VELOCITY_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("VelocityConstraint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MVelocityConstraint.class)));
    tmpMap.put(_Fields.ACCELERATION_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("AccelerationConstraint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MAccelerationConstraint.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MJointConstraint.class, metaDataMap);
  }

  public MJointConstraint() {
  }

  public MJointConstraint(
    de.mosim.mmi.avatar.MJointType JointType)
  {
    this();
    this.JointType = JointType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MJointConstraint(MJointConstraint other) {
    if (other.isSetJointType()) {
      this.JointType = other.JointType;
    }
    if (other.isSetGeometryConstraint()) {
      this.GeometryConstraint = new MGeometryConstraint(other.GeometryConstraint);
    }
    if (other.isSetVelocityConstraint()) {
      this.VelocityConstraint = new MVelocityConstraint(other.VelocityConstraint);
    }
    if (other.isSetAccelerationConstraint()) {
      this.AccelerationConstraint = new MAccelerationConstraint(other.AccelerationConstraint);
    }
  }

  public MJointConstraint deepCopy() {
    return new MJointConstraint(this);
  }

  @Override
  public void clear() {
    this.JointType = null;
    this.GeometryConstraint = null;
    this.VelocityConstraint = null;
    this.AccelerationConstraint = null;
  }

  /**
   * 
   * @see de.mosim.mmi.avatar.MJointType
   */
  @org.apache.thrift.annotation.Nullable
  public de.mosim.mmi.avatar.MJointType getJointType() {
    return this.JointType;
  }

  /**
   * 
   * @see de.mosim.mmi.avatar.MJointType
   */
  public MJointConstraint setJointType(@org.apache.thrift.annotation.Nullable de.mosim.mmi.avatar.MJointType JointType) {
    this.JointType = JointType;
    return this;
  }

  public void unsetJointType() {
    this.JointType = null;
  }

  /** Returns true if field JointType is set (has been assigned a value) and false otherwise */
  public boolean isSetJointType() {
    return this.JointType != null;
  }

  public void setJointTypeIsSet(boolean value) {
    if (!value) {
      this.JointType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MGeometryConstraint getGeometryConstraint() {
    return this.GeometryConstraint;
  }

  public MJointConstraint setGeometryConstraint(@org.apache.thrift.annotation.Nullable MGeometryConstraint GeometryConstraint) {
    this.GeometryConstraint = GeometryConstraint;
    return this;
  }

  public void unsetGeometryConstraint() {
    this.GeometryConstraint = null;
  }

  /** Returns true if field GeometryConstraint is set (has been assigned a value) and false otherwise */
  public boolean isSetGeometryConstraint() {
    return this.GeometryConstraint != null;
  }

  public void setGeometryConstraintIsSet(boolean value) {
    if (!value) {
      this.GeometryConstraint = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MVelocityConstraint getVelocityConstraint() {
    return this.VelocityConstraint;
  }

  public MJointConstraint setVelocityConstraint(@org.apache.thrift.annotation.Nullable MVelocityConstraint VelocityConstraint) {
    this.VelocityConstraint = VelocityConstraint;
    return this;
  }

  public void unsetVelocityConstraint() {
    this.VelocityConstraint = null;
  }

  /** Returns true if field VelocityConstraint is set (has been assigned a value) and false otherwise */
  public boolean isSetVelocityConstraint() {
    return this.VelocityConstraint != null;
  }

  public void setVelocityConstraintIsSet(boolean value) {
    if (!value) {
      this.VelocityConstraint = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MAccelerationConstraint getAccelerationConstraint() {
    return this.AccelerationConstraint;
  }

  public MJointConstraint setAccelerationConstraint(@org.apache.thrift.annotation.Nullable MAccelerationConstraint AccelerationConstraint) {
    this.AccelerationConstraint = AccelerationConstraint;
    return this;
  }

  public void unsetAccelerationConstraint() {
    this.AccelerationConstraint = null;
  }

  /** Returns true if field AccelerationConstraint is set (has been assigned a value) and false otherwise */
  public boolean isSetAccelerationConstraint() {
    return this.AccelerationConstraint != null;
  }

  public void setAccelerationConstraintIsSet(boolean value) {
    if (!value) {
      this.AccelerationConstraint = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case JOINT_TYPE:
      if (value == null) {
        unsetJointType();
      } else {
        setJointType((de.mosim.mmi.avatar.MJointType)value);
      }
      break;

    case GEOMETRY_CONSTRAINT:
      if (value == null) {
        unsetGeometryConstraint();
      } else {
        setGeometryConstraint((MGeometryConstraint)value);
      }
      break;

    case VELOCITY_CONSTRAINT:
      if (value == null) {
        unsetVelocityConstraint();
      } else {
        setVelocityConstraint((MVelocityConstraint)value);
      }
      break;

    case ACCELERATION_CONSTRAINT:
      if (value == null) {
        unsetAccelerationConstraint();
      } else {
        setAccelerationConstraint((MAccelerationConstraint)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case JOINT_TYPE:
      return getJointType();

    case GEOMETRY_CONSTRAINT:
      return getGeometryConstraint();

    case VELOCITY_CONSTRAINT:
      return getVelocityConstraint();

    case ACCELERATION_CONSTRAINT:
      return getAccelerationConstraint();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case JOINT_TYPE:
      return isSetJointType();
    case GEOMETRY_CONSTRAINT:
      return isSetGeometryConstraint();
    case VELOCITY_CONSTRAINT:
      return isSetVelocityConstraint();
    case ACCELERATION_CONSTRAINT:
      return isSetAccelerationConstraint();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MJointConstraint)
      return this.equals((MJointConstraint)that);
    return false;
  }

  public boolean equals(MJointConstraint that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_JointType = true && this.isSetJointType();
    boolean that_present_JointType = true && that.isSetJointType();
    if (this_present_JointType || that_present_JointType) {
      if (!(this_present_JointType && that_present_JointType))
        return false;
      if (!this.JointType.equals(that.JointType))
        return false;
    }

    boolean this_present_GeometryConstraint = true && this.isSetGeometryConstraint();
    boolean that_present_GeometryConstraint = true && that.isSetGeometryConstraint();
    if (this_present_GeometryConstraint || that_present_GeometryConstraint) {
      if (!(this_present_GeometryConstraint && that_present_GeometryConstraint))
        return false;
      if (!this.GeometryConstraint.equals(that.GeometryConstraint))
        return false;
    }

    boolean this_present_VelocityConstraint = true && this.isSetVelocityConstraint();
    boolean that_present_VelocityConstraint = true && that.isSetVelocityConstraint();
    if (this_present_VelocityConstraint || that_present_VelocityConstraint) {
      if (!(this_present_VelocityConstraint && that_present_VelocityConstraint))
        return false;
      if (!this.VelocityConstraint.equals(that.VelocityConstraint))
        return false;
    }

    boolean this_present_AccelerationConstraint = true && this.isSetAccelerationConstraint();
    boolean that_present_AccelerationConstraint = true && that.isSetAccelerationConstraint();
    if (this_present_AccelerationConstraint || that_present_AccelerationConstraint) {
      if (!(this_present_AccelerationConstraint && that_present_AccelerationConstraint))
        return false;
      if (!this.AccelerationConstraint.equals(that.AccelerationConstraint))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetJointType()) ? 131071 : 524287);
    if (isSetJointType())
      hashCode = hashCode * 8191 + JointType.getValue();

    hashCode = hashCode * 8191 + ((isSetGeometryConstraint()) ? 131071 : 524287);
    if (isSetGeometryConstraint())
      hashCode = hashCode * 8191 + GeometryConstraint.hashCode();

    hashCode = hashCode * 8191 + ((isSetVelocityConstraint()) ? 131071 : 524287);
    if (isSetVelocityConstraint())
      hashCode = hashCode * 8191 + VelocityConstraint.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccelerationConstraint()) ? 131071 : 524287);
    if (isSetAccelerationConstraint())
      hashCode = hashCode * 8191 + AccelerationConstraint.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MJointConstraint other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetJointType()).compareTo(other.isSetJointType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJointType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.JointType, other.JointType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGeometryConstraint()).compareTo(other.isSetGeometryConstraint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeometryConstraint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GeometryConstraint, other.GeometryConstraint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVelocityConstraint()).compareTo(other.isSetVelocityConstraint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVelocityConstraint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VelocityConstraint, other.VelocityConstraint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccelerationConstraint()).compareTo(other.isSetAccelerationConstraint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccelerationConstraint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AccelerationConstraint, other.AccelerationConstraint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MJointConstraint(");
    boolean first = true;

    sb.append("JointType:");
    if (this.JointType == null) {
      sb.append("null");
    } else {
      sb.append(this.JointType);
    }
    first = false;
    if (isSetGeometryConstraint()) {
      if (!first) sb.append(", ");
      sb.append("GeometryConstraint:");
      if (this.GeometryConstraint == null) {
        sb.append("null");
      } else {
        sb.append(this.GeometryConstraint);
      }
      first = false;
    }
    if (isSetVelocityConstraint()) {
      if (!first) sb.append(", ");
      sb.append("VelocityConstraint:");
      if (this.VelocityConstraint == null) {
        sb.append("null");
      } else {
        sb.append(this.VelocityConstraint);
      }
      first = false;
    }
    if (isSetAccelerationConstraint()) {
      if (!first) sb.append(", ");
      sb.append("AccelerationConstraint:");
      if (this.AccelerationConstraint == null) {
        sb.append("null");
      } else {
        sb.append(this.AccelerationConstraint);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (JointType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'JointType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (GeometryConstraint != null) {
      GeometryConstraint.validate();
    }
    if (VelocityConstraint != null) {
      VelocityConstraint.validate();
    }
    if (AccelerationConstraint != null) {
      AccelerationConstraint.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MJointConstraintStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MJointConstraintStandardScheme getScheme() {
      return new MJointConstraintStandardScheme();
    }
  }

  private static class MJointConstraintStandardScheme extends org.apache.thrift.scheme.StandardScheme<MJointConstraint> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MJointConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOINT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.JointType = de.mosim.mmi.avatar.MJointType.findByValue(iprot.readI32());
              struct.setJointTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GEOMETRY_CONSTRAINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.GeometryConstraint = new MGeometryConstraint();
              struct.GeometryConstraint.read(iprot);
              struct.setGeometryConstraintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VELOCITY_CONSTRAINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.VelocityConstraint = new MVelocityConstraint();
              struct.VelocityConstraint.read(iprot);
              struct.setVelocityConstraintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCELERATION_CONSTRAINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.AccelerationConstraint = new MAccelerationConstraint();
              struct.AccelerationConstraint.read(iprot);
              struct.setAccelerationConstraintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MJointConstraint struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.JointType != null) {
        oprot.writeFieldBegin(JOINT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.JointType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.GeometryConstraint != null) {
        if (struct.isSetGeometryConstraint()) {
          oprot.writeFieldBegin(GEOMETRY_CONSTRAINT_FIELD_DESC);
          struct.GeometryConstraint.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.VelocityConstraint != null) {
        if (struct.isSetVelocityConstraint()) {
          oprot.writeFieldBegin(VELOCITY_CONSTRAINT_FIELD_DESC);
          struct.VelocityConstraint.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.AccelerationConstraint != null) {
        if (struct.isSetAccelerationConstraint()) {
          oprot.writeFieldBegin(ACCELERATION_CONSTRAINT_FIELD_DESC);
          struct.AccelerationConstraint.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MJointConstraintTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MJointConstraintTupleScheme getScheme() {
      return new MJointConstraintTupleScheme();
    }
  }

  private static class MJointConstraintTupleScheme extends org.apache.thrift.scheme.TupleScheme<MJointConstraint> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MJointConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.JointType.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGeometryConstraint()) {
        optionals.set(0);
      }
      if (struct.isSetVelocityConstraint()) {
        optionals.set(1);
      }
      if (struct.isSetAccelerationConstraint()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetGeometryConstraint()) {
        struct.GeometryConstraint.write(oprot);
      }
      if (struct.isSetVelocityConstraint()) {
        struct.VelocityConstraint.write(oprot);
      }
      if (struct.isSetAccelerationConstraint()) {
        struct.AccelerationConstraint.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MJointConstraint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.JointType = de.mosim.mmi.avatar.MJointType.findByValue(iprot.readI32());
      struct.setJointTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.GeometryConstraint = new MGeometryConstraint();
        struct.GeometryConstraint.read(iprot);
        struct.setGeometryConstraintIsSet(true);
      }
      if (incoming.get(1)) {
        struct.VelocityConstraint = new MVelocityConstraint();
        struct.VelocityConstraint.read(iprot);
        struct.setVelocityConstraintIsSet(true);
      }
      if (incoming.get(2)) {
        struct.AccelerationConstraint = new MAccelerationConstraint();
        struct.AccelerationConstraint.read(iprot);
        struct.setAccelerationConstraintIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

