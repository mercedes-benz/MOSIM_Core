/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.scene;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MCollider implements org.apache.thrift.TBase<MCollider, MCollider._Fields>, java.io.Serializable, Cloneable, Comparable<MCollider> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MCollider");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("Type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BOX_COLLIDER_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("BoxColliderProperties", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SPHERE_COLLIDER_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("SphereColliderProperties", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField CAPSULE_COLLIDER_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("CapsuleColliderProperties", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField CONE_COLLIDER_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("ConeColliderProperties", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField CYLINDER_COLLIDER_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("CylinderColliderProperties", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField MESH_COLLIDER_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("MeshColliderProperties", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField POSITION_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("PositionOffset", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField ROTATION_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("RotationOffset", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField COLLIDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("Colliders", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("Properties", org.apache.thrift.protocol.TType.MAP, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MColliderStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MColliderTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String ID; // required
  /**
   * 
   * @see MColliderType
   */
  public @org.apache.thrift.annotation.Nullable MColliderType Type; // required
  public @org.apache.thrift.annotation.Nullable MBoxColliderProperties BoxColliderProperties; // optional
  public @org.apache.thrift.annotation.Nullable MSphereColliderProperties SphereColliderProperties; // optional
  public @org.apache.thrift.annotation.Nullable MCapsuleColliderProperties CapsuleColliderProperties; // optional
  public @org.apache.thrift.annotation.Nullable MConeColliderProperties ConeColliderProperties; // optional
  public @org.apache.thrift.annotation.Nullable MCylinderColliderProperties CylinderColliderProperties; // optional
  public @org.apache.thrift.annotation.Nullable MMeshColliderProperties MeshColliderProperties; // optional
  public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 PositionOffset; // optional
  public @org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion RotationOffset; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<MCollider> Colliders; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> Properties; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "ID"),
    /**
     * 
     * @see MColliderType
     */
    TYPE((short)2, "Type"),
    BOX_COLLIDER_PROPERTIES((short)3, "BoxColliderProperties"),
    SPHERE_COLLIDER_PROPERTIES((short)4, "SphereColliderProperties"),
    CAPSULE_COLLIDER_PROPERTIES((short)5, "CapsuleColliderProperties"),
    CONE_COLLIDER_PROPERTIES((short)6, "ConeColliderProperties"),
    CYLINDER_COLLIDER_PROPERTIES((short)7, "CylinderColliderProperties"),
    MESH_COLLIDER_PROPERTIES((short)8, "MeshColliderProperties"),
    POSITION_OFFSET((short)9, "PositionOffset"),
    ROTATION_OFFSET((short)10, "RotationOffset"),
    COLLIDERS((short)11, "Colliders"),
    PROPERTIES((short)12, "Properties");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TYPE
          return TYPE;
        case 3: // BOX_COLLIDER_PROPERTIES
          return BOX_COLLIDER_PROPERTIES;
        case 4: // SPHERE_COLLIDER_PROPERTIES
          return SPHERE_COLLIDER_PROPERTIES;
        case 5: // CAPSULE_COLLIDER_PROPERTIES
          return CAPSULE_COLLIDER_PROPERTIES;
        case 6: // CONE_COLLIDER_PROPERTIES
          return CONE_COLLIDER_PROPERTIES;
        case 7: // CYLINDER_COLLIDER_PROPERTIES
          return CYLINDER_COLLIDER_PROPERTIES;
        case 8: // MESH_COLLIDER_PROPERTIES
          return MESH_COLLIDER_PROPERTIES;
        case 9: // POSITION_OFFSET
          return POSITION_OFFSET;
        case 10: // ROTATION_OFFSET
          return ROTATION_OFFSET;
        case 11: // COLLIDERS
          return COLLIDERS;
        case 12: // PROPERTIES
          return PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.BOX_COLLIDER_PROPERTIES,_Fields.SPHERE_COLLIDER_PROPERTIES,_Fields.CAPSULE_COLLIDER_PROPERTIES,_Fields.CONE_COLLIDER_PROPERTIES,_Fields.CYLINDER_COLLIDER_PROPERTIES,_Fields.MESH_COLLIDER_PROPERTIES,_Fields.POSITION_OFFSET,_Fields.ROTATION_OFFSET,_Fields.COLLIDERS,_Fields.PROPERTIES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("ID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("Type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MColliderType.class)));
    tmpMap.put(_Fields.BOX_COLLIDER_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("BoxColliderProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MBoxColliderProperties.class)));
    tmpMap.put(_Fields.SPHERE_COLLIDER_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("SphereColliderProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MSphereColliderProperties.class)));
    tmpMap.put(_Fields.CAPSULE_COLLIDER_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("CapsuleColliderProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MCapsuleColliderProperties.class)));
    tmpMap.put(_Fields.CONE_COLLIDER_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("ConeColliderProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MConeColliderProperties.class)));
    tmpMap.put(_Fields.CYLINDER_COLLIDER_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("CylinderColliderProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MCylinderColliderProperties.class)));
    tmpMap.put(_Fields.MESH_COLLIDER_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("MeshColliderProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MMeshColliderProperties.class)));
    tmpMap.put(_Fields.POSITION_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("PositionOffset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MVector3.class)));
    tmpMap.put(_Fields.ROTATION_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("RotationOffset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.mosim.mmi.math.MQuaternion.class)));
    tmpMap.put(_Fields.COLLIDERS, new org.apache.thrift.meta_data.FieldMetaData("Colliders", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "MCollider"))));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("Properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MCollider.class, metaDataMap);
  }

  public MCollider() {
  }

  public MCollider(
    java.lang.String ID,
    MColliderType Type)
  {
    this();
    this.ID = ID;
    this.Type = Type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MCollider(MCollider other) {
    if (other.isSetID()) {
      this.ID = other.ID;
    }
    if (other.isSetType()) {
      this.Type = other.Type;
    }
    if (other.isSetBoxColliderProperties()) {
      this.BoxColliderProperties = new MBoxColliderProperties(other.BoxColliderProperties);
    }
    if (other.isSetSphereColliderProperties()) {
      this.SphereColliderProperties = new MSphereColliderProperties(other.SphereColliderProperties);
    }
    if (other.isSetCapsuleColliderProperties()) {
      this.CapsuleColliderProperties = new MCapsuleColliderProperties(other.CapsuleColliderProperties);
    }
    if (other.isSetConeColliderProperties()) {
      this.ConeColliderProperties = new MConeColliderProperties(other.ConeColliderProperties);
    }
    if (other.isSetCylinderColliderProperties()) {
      this.CylinderColliderProperties = new MCylinderColliderProperties(other.CylinderColliderProperties);
    }
    if (other.isSetMeshColliderProperties()) {
      this.MeshColliderProperties = new MMeshColliderProperties(other.MeshColliderProperties);
    }
    if (other.isSetPositionOffset()) {
      this.PositionOffset = new de.mosim.mmi.math.MVector3(other.PositionOffset);
    }
    if (other.isSetRotationOffset()) {
      this.RotationOffset = new de.mosim.mmi.math.MQuaternion(other.RotationOffset);
    }
    if (other.isSetColliders()) {
      java.util.List<MCollider> __this__Colliders = new java.util.ArrayList<MCollider>(other.Colliders.size());
      for (MCollider other_element : other.Colliders) {
        __this__Colliders.add(new MCollider(other_element));
      }
      this.Colliders = __this__Colliders;
    }
    if (other.isSetProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__Properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.Properties);
      this.Properties = __this__Properties;
    }
  }

  public MCollider deepCopy() {
    return new MCollider(this);
  }

  @Override
  public void clear() {
    this.ID = null;
    this.Type = null;
    this.BoxColliderProperties = null;
    this.SphereColliderProperties = null;
    this.CapsuleColliderProperties = null;
    this.ConeColliderProperties = null;
    this.CylinderColliderProperties = null;
    this.MeshColliderProperties = null;
    this.PositionOffset = null;
    this.RotationOffset = null;
    this.Colliders = null;
    this.Properties = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getID() {
    return this.ID;
  }

  public MCollider setID(@org.apache.thrift.annotation.Nullable java.lang.String ID) {
    this.ID = ID;
    return this;
  }

  public void unsetID() {
    this.ID = null;
  }

  /** Returns true if field ID is set (has been assigned a value) and false otherwise */
  public boolean isSetID() {
    return this.ID != null;
  }

  public void setIDIsSet(boolean value) {
    if (!value) {
      this.ID = null;
    }
  }

  /**
   * 
   * @see MColliderType
   */
  @org.apache.thrift.annotation.Nullable
  public MColliderType getType() {
    return this.Type;
  }

  /**
   * 
   * @see MColliderType
   */
  public MCollider setType(@org.apache.thrift.annotation.Nullable MColliderType Type) {
    this.Type = Type;
    return this;
  }

  public void unsetType() {
    this.Type = null;
  }

  /** Returns true if field Type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.Type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.Type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MBoxColliderProperties getBoxColliderProperties() {
    return this.BoxColliderProperties;
  }

  public MCollider setBoxColliderProperties(@org.apache.thrift.annotation.Nullable MBoxColliderProperties BoxColliderProperties) {
    this.BoxColliderProperties = BoxColliderProperties;
    return this;
  }

  public void unsetBoxColliderProperties() {
    this.BoxColliderProperties = null;
  }

  /** Returns true if field BoxColliderProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetBoxColliderProperties() {
    return this.BoxColliderProperties != null;
  }

  public void setBoxColliderPropertiesIsSet(boolean value) {
    if (!value) {
      this.BoxColliderProperties = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MSphereColliderProperties getSphereColliderProperties() {
    return this.SphereColliderProperties;
  }

  public MCollider setSphereColliderProperties(@org.apache.thrift.annotation.Nullable MSphereColliderProperties SphereColliderProperties) {
    this.SphereColliderProperties = SphereColliderProperties;
    return this;
  }

  public void unsetSphereColliderProperties() {
    this.SphereColliderProperties = null;
  }

  /** Returns true if field SphereColliderProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetSphereColliderProperties() {
    return this.SphereColliderProperties != null;
  }

  public void setSphereColliderPropertiesIsSet(boolean value) {
    if (!value) {
      this.SphereColliderProperties = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MCapsuleColliderProperties getCapsuleColliderProperties() {
    return this.CapsuleColliderProperties;
  }

  public MCollider setCapsuleColliderProperties(@org.apache.thrift.annotation.Nullable MCapsuleColliderProperties CapsuleColliderProperties) {
    this.CapsuleColliderProperties = CapsuleColliderProperties;
    return this;
  }

  public void unsetCapsuleColliderProperties() {
    this.CapsuleColliderProperties = null;
  }

  /** Returns true if field CapsuleColliderProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetCapsuleColliderProperties() {
    return this.CapsuleColliderProperties != null;
  }

  public void setCapsuleColliderPropertiesIsSet(boolean value) {
    if (!value) {
      this.CapsuleColliderProperties = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MConeColliderProperties getConeColliderProperties() {
    return this.ConeColliderProperties;
  }

  public MCollider setConeColliderProperties(@org.apache.thrift.annotation.Nullable MConeColliderProperties ConeColliderProperties) {
    this.ConeColliderProperties = ConeColliderProperties;
    return this;
  }

  public void unsetConeColliderProperties() {
    this.ConeColliderProperties = null;
  }

  /** Returns true if field ConeColliderProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetConeColliderProperties() {
    return this.ConeColliderProperties != null;
  }

  public void setConeColliderPropertiesIsSet(boolean value) {
    if (!value) {
      this.ConeColliderProperties = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MCylinderColliderProperties getCylinderColliderProperties() {
    return this.CylinderColliderProperties;
  }

  public MCollider setCylinderColliderProperties(@org.apache.thrift.annotation.Nullable MCylinderColliderProperties CylinderColliderProperties) {
    this.CylinderColliderProperties = CylinderColliderProperties;
    return this;
  }

  public void unsetCylinderColliderProperties() {
    this.CylinderColliderProperties = null;
  }

  /** Returns true if field CylinderColliderProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetCylinderColliderProperties() {
    return this.CylinderColliderProperties != null;
  }

  public void setCylinderColliderPropertiesIsSet(boolean value) {
    if (!value) {
      this.CylinderColliderProperties = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MMeshColliderProperties getMeshColliderProperties() {
    return this.MeshColliderProperties;
  }

  public MCollider setMeshColliderProperties(@org.apache.thrift.annotation.Nullable MMeshColliderProperties MeshColliderProperties) {
    this.MeshColliderProperties = MeshColliderProperties;
    return this;
  }

  public void unsetMeshColliderProperties() {
    this.MeshColliderProperties = null;
  }

  /** Returns true if field MeshColliderProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetMeshColliderProperties() {
    return this.MeshColliderProperties != null;
  }

  public void setMeshColliderPropertiesIsSet(boolean value) {
    if (!value) {
      this.MeshColliderProperties = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public de.mosim.mmi.math.MVector3 getPositionOffset() {
    return this.PositionOffset;
  }

  public MCollider setPositionOffset(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MVector3 PositionOffset) {
    this.PositionOffset = PositionOffset;
    return this;
  }

  public void unsetPositionOffset() {
    this.PositionOffset = null;
  }

  /** Returns true if field PositionOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionOffset() {
    return this.PositionOffset != null;
  }

  public void setPositionOffsetIsSet(boolean value) {
    if (!value) {
      this.PositionOffset = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public de.mosim.mmi.math.MQuaternion getRotationOffset() {
    return this.RotationOffset;
  }

  public MCollider setRotationOffset(@org.apache.thrift.annotation.Nullable de.mosim.mmi.math.MQuaternion RotationOffset) {
    this.RotationOffset = RotationOffset;
    return this;
  }

  public void unsetRotationOffset() {
    this.RotationOffset = null;
  }

  /** Returns true if field RotationOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetRotationOffset() {
    return this.RotationOffset != null;
  }

  public void setRotationOffsetIsSet(boolean value) {
    if (!value) {
      this.RotationOffset = null;
    }
  }

  public int getCollidersSize() {
    return (this.Colliders == null) ? 0 : this.Colliders.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MCollider> getCollidersIterator() {
    return (this.Colliders == null) ? null : this.Colliders.iterator();
  }

  public void addToColliders(MCollider elem) {
    if (this.Colliders == null) {
      this.Colliders = new java.util.ArrayList<MCollider>();
    }
    this.Colliders.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MCollider> getColliders() {
    return this.Colliders;
  }

  public MCollider setColliders(@org.apache.thrift.annotation.Nullable java.util.List<MCollider> Colliders) {
    this.Colliders = Colliders;
    return this;
  }

  public void unsetColliders() {
    this.Colliders = null;
  }

  /** Returns true if field Colliders is set (has been assigned a value) and false otherwise */
  public boolean isSetColliders() {
    return this.Colliders != null;
  }

  public void setCollidersIsSet(boolean value) {
    if (!value) {
      this.Colliders = null;
    }
  }

  public int getPropertiesSize() {
    return (this.Properties == null) ? 0 : this.Properties.size();
  }

  public void putToProperties(java.lang.String key, java.lang.String val) {
    if (this.Properties == null) {
      this.Properties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.Properties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getProperties() {
    return this.Properties;
  }

  public MCollider setProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> Properties) {
    this.Properties = Properties;
    return this;
  }

  public void unsetProperties() {
    this.Properties = null;
  }

  /** Returns true if field Properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.Properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.Properties = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetID();
      } else {
        setID((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((MColliderType)value);
      }
      break;

    case BOX_COLLIDER_PROPERTIES:
      if (value == null) {
        unsetBoxColliderProperties();
      } else {
        setBoxColliderProperties((MBoxColliderProperties)value);
      }
      break;

    case SPHERE_COLLIDER_PROPERTIES:
      if (value == null) {
        unsetSphereColliderProperties();
      } else {
        setSphereColliderProperties((MSphereColliderProperties)value);
      }
      break;

    case CAPSULE_COLLIDER_PROPERTIES:
      if (value == null) {
        unsetCapsuleColliderProperties();
      } else {
        setCapsuleColliderProperties((MCapsuleColliderProperties)value);
      }
      break;

    case CONE_COLLIDER_PROPERTIES:
      if (value == null) {
        unsetConeColliderProperties();
      } else {
        setConeColliderProperties((MConeColliderProperties)value);
      }
      break;

    case CYLINDER_COLLIDER_PROPERTIES:
      if (value == null) {
        unsetCylinderColliderProperties();
      } else {
        setCylinderColliderProperties((MCylinderColliderProperties)value);
      }
      break;

    case MESH_COLLIDER_PROPERTIES:
      if (value == null) {
        unsetMeshColliderProperties();
      } else {
        setMeshColliderProperties((MMeshColliderProperties)value);
      }
      break;

    case POSITION_OFFSET:
      if (value == null) {
        unsetPositionOffset();
      } else {
        setPositionOffset((de.mosim.mmi.math.MVector3)value);
      }
      break;

    case ROTATION_OFFSET:
      if (value == null) {
        unsetRotationOffset();
      } else {
        setRotationOffset((de.mosim.mmi.math.MQuaternion)value);
      }
      break;

    case COLLIDERS:
      if (value == null) {
        unsetColliders();
      } else {
        setColliders((java.util.List<MCollider>)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getID();

    case TYPE:
      return getType();

    case BOX_COLLIDER_PROPERTIES:
      return getBoxColliderProperties();

    case SPHERE_COLLIDER_PROPERTIES:
      return getSphereColliderProperties();

    case CAPSULE_COLLIDER_PROPERTIES:
      return getCapsuleColliderProperties();

    case CONE_COLLIDER_PROPERTIES:
      return getConeColliderProperties();

    case CYLINDER_COLLIDER_PROPERTIES:
      return getCylinderColliderProperties();

    case MESH_COLLIDER_PROPERTIES:
      return getMeshColliderProperties();

    case POSITION_OFFSET:
      return getPositionOffset();

    case ROTATION_OFFSET:
      return getRotationOffset();

    case COLLIDERS:
      return getColliders();

    case PROPERTIES:
      return getProperties();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetID();
    case TYPE:
      return isSetType();
    case BOX_COLLIDER_PROPERTIES:
      return isSetBoxColliderProperties();
    case SPHERE_COLLIDER_PROPERTIES:
      return isSetSphereColliderProperties();
    case CAPSULE_COLLIDER_PROPERTIES:
      return isSetCapsuleColliderProperties();
    case CONE_COLLIDER_PROPERTIES:
      return isSetConeColliderProperties();
    case CYLINDER_COLLIDER_PROPERTIES:
      return isSetCylinderColliderProperties();
    case MESH_COLLIDER_PROPERTIES:
      return isSetMeshColliderProperties();
    case POSITION_OFFSET:
      return isSetPositionOffset();
    case ROTATION_OFFSET:
      return isSetRotationOffset();
    case COLLIDERS:
      return isSetColliders();
    case PROPERTIES:
      return isSetProperties();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MCollider)
      return this.equals((MCollider)that);
    return false;
  }

  public boolean equals(MCollider that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ID = true && this.isSetID();
    boolean that_present_ID = true && that.isSetID();
    if (this_present_ID || that_present_ID) {
      if (!(this_present_ID && that_present_ID))
        return false;
      if (!this.ID.equals(that.ID))
        return false;
    }

    boolean this_present_Type = true && this.isSetType();
    boolean that_present_Type = true && that.isSetType();
    if (this_present_Type || that_present_Type) {
      if (!(this_present_Type && that_present_Type))
        return false;
      if (!this.Type.equals(that.Type))
        return false;
    }

    boolean this_present_BoxColliderProperties = true && this.isSetBoxColliderProperties();
    boolean that_present_BoxColliderProperties = true && that.isSetBoxColliderProperties();
    if (this_present_BoxColliderProperties || that_present_BoxColliderProperties) {
      if (!(this_present_BoxColliderProperties && that_present_BoxColliderProperties))
        return false;
      if (!this.BoxColliderProperties.equals(that.BoxColliderProperties))
        return false;
    }

    boolean this_present_SphereColliderProperties = true && this.isSetSphereColliderProperties();
    boolean that_present_SphereColliderProperties = true && that.isSetSphereColliderProperties();
    if (this_present_SphereColliderProperties || that_present_SphereColliderProperties) {
      if (!(this_present_SphereColliderProperties && that_present_SphereColliderProperties))
        return false;
      if (!this.SphereColliderProperties.equals(that.SphereColliderProperties))
        return false;
    }

    boolean this_present_CapsuleColliderProperties = true && this.isSetCapsuleColliderProperties();
    boolean that_present_CapsuleColliderProperties = true && that.isSetCapsuleColliderProperties();
    if (this_present_CapsuleColliderProperties || that_present_CapsuleColliderProperties) {
      if (!(this_present_CapsuleColliderProperties && that_present_CapsuleColliderProperties))
        return false;
      if (!this.CapsuleColliderProperties.equals(that.CapsuleColliderProperties))
        return false;
    }

    boolean this_present_ConeColliderProperties = true && this.isSetConeColliderProperties();
    boolean that_present_ConeColliderProperties = true && that.isSetConeColliderProperties();
    if (this_present_ConeColliderProperties || that_present_ConeColliderProperties) {
      if (!(this_present_ConeColliderProperties && that_present_ConeColliderProperties))
        return false;
      if (!this.ConeColliderProperties.equals(that.ConeColliderProperties))
        return false;
    }

    boolean this_present_CylinderColliderProperties = true && this.isSetCylinderColliderProperties();
    boolean that_present_CylinderColliderProperties = true && that.isSetCylinderColliderProperties();
    if (this_present_CylinderColliderProperties || that_present_CylinderColliderProperties) {
      if (!(this_present_CylinderColliderProperties && that_present_CylinderColliderProperties))
        return false;
      if (!this.CylinderColliderProperties.equals(that.CylinderColliderProperties))
        return false;
    }

    boolean this_present_MeshColliderProperties = true && this.isSetMeshColliderProperties();
    boolean that_present_MeshColliderProperties = true && that.isSetMeshColliderProperties();
    if (this_present_MeshColliderProperties || that_present_MeshColliderProperties) {
      if (!(this_present_MeshColliderProperties && that_present_MeshColliderProperties))
        return false;
      if (!this.MeshColliderProperties.equals(that.MeshColliderProperties))
        return false;
    }

    boolean this_present_PositionOffset = true && this.isSetPositionOffset();
    boolean that_present_PositionOffset = true && that.isSetPositionOffset();
    if (this_present_PositionOffset || that_present_PositionOffset) {
      if (!(this_present_PositionOffset && that_present_PositionOffset))
        return false;
      if (!this.PositionOffset.equals(that.PositionOffset))
        return false;
    }

    boolean this_present_RotationOffset = true && this.isSetRotationOffset();
    boolean that_present_RotationOffset = true && that.isSetRotationOffset();
    if (this_present_RotationOffset || that_present_RotationOffset) {
      if (!(this_present_RotationOffset && that_present_RotationOffset))
        return false;
      if (!this.RotationOffset.equals(that.RotationOffset))
        return false;
    }

    boolean this_present_Colliders = true && this.isSetColliders();
    boolean that_present_Colliders = true && that.isSetColliders();
    if (this_present_Colliders || that_present_Colliders) {
      if (!(this_present_Colliders && that_present_Colliders))
        return false;
      if (!this.Colliders.equals(that.Colliders))
        return false;
    }

    boolean this_present_Properties = true && this.isSetProperties();
    boolean that_present_Properties = true && that.isSetProperties();
    if (this_present_Properties || that_present_Properties) {
      if (!(this_present_Properties && that_present_Properties))
        return false;
      if (!this.Properties.equals(that.Properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetID()) ? 131071 : 524287);
    if (isSetID())
      hashCode = hashCode * 8191 + ID.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + Type.getValue();

    hashCode = hashCode * 8191 + ((isSetBoxColliderProperties()) ? 131071 : 524287);
    if (isSetBoxColliderProperties())
      hashCode = hashCode * 8191 + BoxColliderProperties.hashCode();

    hashCode = hashCode * 8191 + ((isSetSphereColliderProperties()) ? 131071 : 524287);
    if (isSetSphereColliderProperties())
      hashCode = hashCode * 8191 + SphereColliderProperties.hashCode();

    hashCode = hashCode * 8191 + ((isSetCapsuleColliderProperties()) ? 131071 : 524287);
    if (isSetCapsuleColliderProperties())
      hashCode = hashCode * 8191 + CapsuleColliderProperties.hashCode();

    hashCode = hashCode * 8191 + ((isSetConeColliderProperties()) ? 131071 : 524287);
    if (isSetConeColliderProperties())
      hashCode = hashCode * 8191 + ConeColliderProperties.hashCode();

    hashCode = hashCode * 8191 + ((isSetCylinderColliderProperties()) ? 131071 : 524287);
    if (isSetCylinderColliderProperties())
      hashCode = hashCode * 8191 + CylinderColliderProperties.hashCode();

    hashCode = hashCode * 8191 + ((isSetMeshColliderProperties()) ? 131071 : 524287);
    if (isSetMeshColliderProperties())
      hashCode = hashCode * 8191 + MeshColliderProperties.hashCode();

    hashCode = hashCode * 8191 + ((isSetPositionOffset()) ? 131071 : 524287);
    if (isSetPositionOffset())
      hashCode = hashCode * 8191 + PositionOffset.hashCode();

    hashCode = hashCode * 8191 + ((isSetRotationOffset()) ? 131071 : 524287);
    if (isSetRotationOffset())
      hashCode = hashCode * 8191 + RotationOffset.hashCode();

    hashCode = hashCode * 8191 + ((isSetColliders()) ? 131071 : 524287);
    if (isSetColliders())
      hashCode = hashCode * 8191 + Colliders.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + Properties.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MCollider other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetID()).compareTo(other.isSetID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, other.ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Type, other.Type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBoxColliderProperties()).compareTo(other.isSetBoxColliderProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoxColliderProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BoxColliderProperties, other.BoxColliderProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSphereColliderProperties()).compareTo(other.isSetSphereColliderProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSphereColliderProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SphereColliderProperties, other.SphereColliderProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCapsuleColliderProperties()).compareTo(other.isSetCapsuleColliderProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapsuleColliderProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CapsuleColliderProperties, other.CapsuleColliderProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConeColliderProperties()).compareTo(other.isSetConeColliderProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConeColliderProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ConeColliderProperties, other.ConeColliderProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCylinderColliderProperties()).compareTo(other.isSetCylinderColliderProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCylinderColliderProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CylinderColliderProperties, other.CylinderColliderProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMeshColliderProperties()).compareTo(other.isSetMeshColliderProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeshColliderProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MeshColliderProperties, other.MeshColliderProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPositionOffset()).compareTo(other.isSetPositionOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PositionOffset, other.PositionOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRotationOffset()).compareTo(other.isSetRotationOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRotationOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RotationOffset, other.RotationOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetColliders()).compareTo(other.isSetColliders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColliders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Colliders, other.Colliders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Properties, other.Properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MCollider(");
    boolean first = true;

    sb.append("ID:");
    if (this.ID == null) {
      sb.append("null");
    } else {
      sb.append(this.ID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Type:");
    if (this.Type == null) {
      sb.append("null");
    } else {
      sb.append(this.Type);
    }
    first = false;
    if (isSetBoxColliderProperties()) {
      if (!first) sb.append(", ");
      sb.append("BoxColliderProperties:");
      if (this.BoxColliderProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.BoxColliderProperties);
      }
      first = false;
    }
    if (isSetSphereColliderProperties()) {
      if (!first) sb.append(", ");
      sb.append("SphereColliderProperties:");
      if (this.SphereColliderProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.SphereColliderProperties);
      }
      first = false;
    }
    if (isSetCapsuleColliderProperties()) {
      if (!first) sb.append(", ");
      sb.append("CapsuleColliderProperties:");
      if (this.CapsuleColliderProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.CapsuleColliderProperties);
      }
      first = false;
    }
    if (isSetConeColliderProperties()) {
      if (!first) sb.append(", ");
      sb.append("ConeColliderProperties:");
      if (this.ConeColliderProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.ConeColliderProperties);
      }
      first = false;
    }
    if (isSetCylinderColliderProperties()) {
      if (!first) sb.append(", ");
      sb.append("CylinderColliderProperties:");
      if (this.CylinderColliderProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.CylinderColliderProperties);
      }
      first = false;
    }
    if (isSetMeshColliderProperties()) {
      if (!first) sb.append(", ");
      sb.append("MeshColliderProperties:");
      if (this.MeshColliderProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.MeshColliderProperties);
      }
      first = false;
    }
    if (isSetPositionOffset()) {
      if (!first) sb.append(", ");
      sb.append("PositionOffset:");
      if (this.PositionOffset == null) {
        sb.append("null");
      } else {
        sb.append(this.PositionOffset);
      }
      first = false;
    }
    if (isSetRotationOffset()) {
      if (!first) sb.append(", ");
      sb.append("RotationOffset:");
      if (this.RotationOffset == null) {
        sb.append("null");
      } else {
        sb.append(this.RotationOffset);
      }
      first = false;
    }
    if (isSetColliders()) {
      if (!first) sb.append(", ");
      sb.append("Colliders:");
      if (this.Colliders == null) {
        sb.append("null");
      } else {
        sb.append(this.Colliders);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("Properties:");
      if (this.Properties == null) {
        sb.append("null");
      } else {
        sb.append(this.Properties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID' was not present! Struct: " + toString());
    }
    if (Type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (BoxColliderProperties != null) {
      BoxColliderProperties.validate();
    }
    if (SphereColliderProperties != null) {
      SphereColliderProperties.validate();
    }
    if (CapsuleColliderProperties != null) {
      CapsuleColliderProperties.validate();
    }
    if (ConeColliderProperties != null) {
      ConeColliderProperties.validate();
    }
    if (CylinderColliderProperties != null) {
      CylinderColliderProperties.validate();
    }
    if (MeshColliderProperties != null) {
      MeshColliderProperties.validate();
    }
    if (PositionOffset != null) {
      PositionOffset.validate();
    }
    if (RotationOffset != null) {
      RotationOffset.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MColliderStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MColliderStandardScheme getScheme() {
      return new MColliderStandardScheme();
    }
  }

  private static class MColliderStandardScheme extends org.apache.thrift.scheme.StandardScheme<MCollider> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MCollider struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ID = iprot.readString();
              struct.setIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Type = de.mosim.mmi.scene.MColliderType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BOX_COLLIDER_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.BoxColliderProperties = new MBoxColliderProperties();
              struct.BoxColliderProperties.read(iprot);
              struct.setBoxColliderPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPHERE_COLLIDER_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.SphereColliderProperties = new MSphereColliderProperties();
              struct.SphereColliderProperties.read(iprot);
              struct.setSphereColliderPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CAPSULE_COLLIDER_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.CapsuleColliderProperties = new MCapsuleColliderProperties();
              struct.CapsuleColliderProperties.read(iprot);
              struct.setCapsuleColliderPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONE_COLLIDER_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ConeColliderProperties = new MConeColliderProperties();
              struct.ConeColliderProperties.read(iprot);
              struct.setConeColliderPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CYLINDER_COLLIDER_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.CylinderColliderProperties = new MCylinderColliderProperties();
              struct.CylinderColliderProperties.read(iprot);
              struct.setCylinderColliderPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MESH_COLLIDER_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.MeshColliderProperties = new MMeshColliderProperties();
              struct.MeshColliderProperties.read(iprot);
              struct.setMeshColliderPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POSITION_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.PositionOffset = new de.mosim.mmi.math.MVector3();
              struct.PositionOffset.read(iprot);
              struct.setPositionOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ROTATION_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.RotationOffset = new de.mosim.mmi.math.MQuaternion();
              struct.RotationOffset.read(iprot);
              struct.setRotationOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COLLIDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                struct.Colliders = new java.util.ArrayList<MCollider>(_list208.size);
                @org.apache.thrift.annotation.Nullable MCollider _elem209;
                for (int _i210 = 0; _i210 < _list208.size; ++_i210)
                {
                  _elem209 = new MCollider();
                  _elem209.read(iprot);
                  struct.Colliders.add(_elem209);
                }
                iprot.readListEnd();
              }
              struct.setCollidersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map211 = iprot.readMapBegin();
                struct.Properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map211.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key212;
                @org.apache.thrift.annotation.Nullable java.lang.String _val213;
                for (int _i214 = 0; _i214 < _map211.size; ++_i214)
                {
                  _key212 = iprot.readString();
                  _val213 = iprot.readString();
                  struct.Properties.put(_key212, _val213);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MCollider struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ID != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.ID);
        oprot.writeFieldEnd();
      }
      if (struct.Type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.Type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.BoxColliderProperties != null) {
        if (struct.isSetBoxColliderProperties()) {
          oprot.writeFieldBegin(BOX_COLLIDER_PROPERTIES_FIELD_DESC);
          struct.BoxColliderProperties.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.SphereColliderProperties != null) {
        if (struct.isSetSphereColliderProperties()) {
          oprot.writeFieldBegin(SPHERE_COLLIDER_PROPERTIES_FIELD_DESC);
          struct.SphereColliderProperties.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.CapsuleColliderProperties != null) {
        if (struct.isSetCapsuleColliderProperties()) {
          oprot.writeFieldBegin(CAPSULE_COLLIDER_PROPERTIES_FIELD_DESC);
          struct.CapsuleColliderProperties.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ConeColliderProperties != null) {
        if (struct.isSetConeColliderProperties()) {
          oprot.writeFieldBegin(CONE_COLLIDER_PROPERTIES_FIELD_DESC);
          struct.ConeColliderProperties.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.CylinderColliderProperties != null) {
        if (struct.isSetCylinderColliderProperties()) {
          oprot.writeFieldBegin(CYLINDER_COLLIDER_PROPERTIES_FIELD_DESC);
          struct.CylinderColliderProperties.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.MeshColliderProperties != null) {
        if (struct.isSetMeshColliderProperties()) {
          oprot.writeFieldBegin(MESH_COLLIDER_PROPERTIES_FIELD_DESC);
          struct.MeshColliderProperties.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.PositionOffset != null) {
        if (struct.isSetPositionOffset()) {
          oprot.writeFieldBegin(POSITION_OFFSET_FIELD_DESC);
          struct.PositionOffset.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.RotationOffset != null) {
        if (struct.isSetRotationOffset()) {
          oprot.writeFieldBegin(ROTATION_OFFSET_FIELD_DESC);
          struct.RotationOffset.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.Colliders != null) {
        if (struct.isSetColliders()) {
          oprot.writeFieldBegin(COLLIDERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Colliders.size()));
            for (MCollider _iter215 : struct.Colliders)
            {
              _iter215.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.Properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.Properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter216 : struct.Properties.entrySet())
            {
              oprot.writeString(_iter216.getKey());
              oprot.writeString(_iter216.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MColliderTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MColliderTupleScheme getScheme() {
      return new MColliderTupleScheme();
    }
  }

  private static class MColliderTupleScheme extends org.apache.thrift.scheme.TupleScheme<MCollider> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MCollider struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.ID);
      oprot.writeI32(struct.Type.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBoxColliderProperties()) {
        optionals.set(0);
      }
      if (struct.isSetSphereColliderProperties()) {
        optionals.set(1);
      }
      if (struct.isSetCapsuleColliderProperties()) {
        optionals.set(2);
      }
      if (struct.isSetConeColliderProperties()) {
        optionals.set(3);
      }
      if (struct.isSetCylinderColliderProperties()) {
        optionals.set(4);
      }
      if (struct.isSetMeshColliderProperties()) {
        optionals.set(5);
      }
      if (struct.isSetPositionOffset()) {
        optionals.set(6);
      }
      if (struct.isSetRotationOffset()) {
        optionals.set(7);
      }
      if (struct.isSetColliders()) {
        optionals.set(8);
      }
      if (struct.isSetProperties()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetBoxColliderProperties()) {
        struct.BoxColliderProperties.write(oprot);
      }
      if (struct.isSetSphereColliderProperties()) {
        struct.SphereColliderProperties.write(oprot);
      }
      if (struct.isSetCapsuleColliderProperties()) {
        struct.CapsuleColliderProperties.write(oprot);
      }
      if (struct.isSetConeColliderProperties()) {
        struct.ConeColliderProperties.write(oprot);
      }
      if (struct.isSetCylinderColliderProperties()) {
        struct.CylinderColliderProperties.write(oprot);
      }
      if (struct.isSetMeshColliderProperties()) {
        struct.MeshColliderProperties.write(oprot);
      }
      if (struct.isSetPositionOffset()) {
        struct.PositionOffset.write(oprot);
      }
      if (struct.isSetRotationOffset()) {
        struct.RotationOffset.write(oprot);
      }
      if (struct.isSetColliders()) {
        {
          oprot.writeI32(struct.Colliders.size());
          for (MCollider _iter217 : struct.Colliders)
          {
            _iter217.write(oprot);
          }
        }
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.Properties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter218 : struct.Properties.entrySet())
          {
            oprot.writeString(_iter218.getKey());
            oprot.writeString(_iter218.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MCollider struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.ID = iprot.readString();
      struct.setIDIsSet(true);
      struct.Type = de.mosim.mmi.scene.MColliderType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.BoxColliderProperties = new MBoxColliderProperties();
        struct.BoxColliderProperties.read(iprot);
        struct.setBoxColliderPropertiesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.SphereColliderProperties = new MSphereColliderProperties();
        struct.SphereColliderProperties.read(iprot);
        struct.setSphereColliderPropertiesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.CapsuleColliderProperties = new MCapsuleColliderProperties();
        struct.CapsuleColliderProperties.read(iprot);
        struct.setCapsuleColliderPropertiesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ConeColliderProperties = new MConeColliderProperties();
        struct.ConeColliderProperties.read(iprot);
        struct.setConeColliderPropertiesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.CylinderColliderProperties = new MCylinderColliderProperties();
        struct.CylinderColliderProperties.read(iprot);
        struct.setCylinderColliderPropertiesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.MeshColliderProperties = new MMeshColliderProperties();
        struct.MeshColliderProperties.read(iprot);
        struct.setMeshColliderPropertiesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.PositionOffset = new de.mosim.mmi.math.MVector3();
        struct.PositionOffset.read(iprot);
        struct.setPositionOffsetIsSet(true);
      }
      if (incoming.get(7)) {
        struct.RotationOffset = new de.mosim.mmi.math.MQuaternion();
        struct.RotationOffset.read(iprot);
        struct.setRotationOffsetIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list219 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Colliders = new java.util.ArrayList<MCollider>(_list219.size);
          @org.apache.thrift.annotation.Nullable MCollider _elem220;
          for (int _i221 = 0; _i221 < _list219.size; ++_i221)
          {
            _elem220 = new MCollider();
            _elem220.read(iprot);
            struct.Colliders.add(_elem220);
          }
        }
        struct.setCollidersIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map222 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.Properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map222.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key223;
          @org.apache.thrift.annotation.Nullable java.lang.String _val224;
          for (int _i225 = 0; _i225 < _map222.size; ++_i225)
          {
            _key223 = iprot.readString();
            _val224 = iprot.readString();
            struct.Properties.put(_key223, _val224);
          }
        }
        struct.setPropertiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

