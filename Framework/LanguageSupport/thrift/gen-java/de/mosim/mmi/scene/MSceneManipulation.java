/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.scene;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MSceneManipulation implements org.apache.thrift.TBase<MSceneManipulation, MSceneManipulation._Fields>, java.io.Serializable, Cloneable, Comparable<MSceneManipulation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MSceneManipulation");

  private static final org.apache.thrift.protocol.TField TRANSFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("Transforms", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PHYSICS_INTERACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("PhysicsInteractions", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("Properties", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ATTACHMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("Attachments", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MSceneManipulationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MSceneManipulationTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<MTransformManipulation> Transforms; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<MPhysicsInteraction> PhysicsInteractions; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<MPropertyManipulation> Properties; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<MAttachmentManipulation> Attachments; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRANSFORMS((short)1, "Transforms"),
    PHYSICS_INTERACTIONS((short)2, "PhysicsInteractions"),
    PROPERTIES((short)3, "Properties"),
    ATTACHMENTS((short)4, "Attachments");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRANSFORMS
          return TRANSFORMS;
        case 2: // PHYSICS_INTERACTIONS
          return PHYSICS_INTERACTIONS;
        case 3: // PROPERTIES
          return PROPERTIES;
        case 4: // ATTACHMENTS
          return ATTACHMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TRANSFORMS,_Fields.PHYSICS_INTERACTIONS,_Fields.PROPERTIES,_Fields.ATTACHMENTS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRANSFORMS, new org.apache.thrift.meta_data.FieldMetaData("Transforms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MTransformManipulation.class))));
    tmpMap.put(_Fields.PHYSICS_INTERACTIONS, new org.apache.thrift.meta_data.FieldMetaData("PhysicsInteractions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MPhysicsInteraction.class))));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("Properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MPropertyManipulation.class))));
    tmpMap.put(_Fields.ATTACHMENTS, new org.apache.thrift.meta_data.FieldMetaData("Attachments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MAttachmentManipulation.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MSceneManipulation.class, metaDataMap);
  }

  public MSceneManipulation() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MSceneManipulation(MSceneManipulation other) {
    if (other.isSetTransforms()) {
      java.util.List<MTransformManipulation> __this__Transforms = new java.util.ArrayList<MTransformManipulation>(other.Transforms.size());
      for (MTransformManipulation other_element : other.Transforms) {
        __this__Transforms.add(new MTransformManipulation(other_element));
      }
      this.Transforms = __this__Transforms;
    }
    if (other.isSetPhysicsInteractions()) {
      java.util.List<MPhysicsInteraction> __this__PhysicsInteractions = new java.util.ArrayList<MPhysicsInteraction>(other.PhysicsInteractions.size());
      for (MPhysicsInteraction other_element : other.PhysicsInteractions) {
        __this__PhysicsInteractions.add(new MPhysicsInteraction(other_element));
      }
      this.PhysicsInteractions = __this__PhysicsInteractions;
    }
    if (other.isSetProperties()) {
      java.util.List<MPropertyManipulation> __this__Properties = new java.util.ArrayList<MPropertyManipulation>(other.Properties.size());
      for (MPropertyManipulation other_element : other.Properties) {
        __this__Properties.add(new MPropertyManipulation(other_element));
      }
      this.Properties = __this__Properties;
    }
    if (other.isSetAttachments()) {
      java.util.List<MAttachmentManipulation> __this__Attachments = new java.util.ArrayList<MAttachmentManipulation>(other.Attachments.size());
      for (MAttachmentManipulation other_element : other.Attachments) {
        __this__Attachments.add(new MAttachmentManipulation(other_element));
      }
      this.Attachments = __this__Attachments;
    }
  }

  public MSceneManipulation deepCopy() {
    return new MSceneManipulation(this);
  }

  @Override
  public void clear() {
    this.Transforms = null;
    this.PhysicsInteractions = null;
    this.Properties = null;
    this.Attachments = null;
  }

  public int getTransformsSize() {
    return (this.Transforms == null) ? 0 : this.Transforms.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MTransformManipulation> getTransformsIterator() {
    return (this.Transforms == null) ? null : this.Transforms.iterator();
  }

  public void addToTransforms(MTransformManipulation elem) {
    if (this.Transforms == null) {
      this.Transforms = new java.util.ArrayList<MTransformManipulation>();
    }
    this.Transforms.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MTransformManipulation> getTransforms() {
    return this.Transforms;
  }

  public MSceneManipulation setTransforms(@org.apache.thrift.annotation.Nullable java.util.List<MTransformManipulation> Transforms) {
    this.Transforms = Transforms;
    return this;
  }

  public void unsetTransforms() {
    this.Transforms = null;
  }

  /** Returns true if field Transforms is set (has been assigned a value) and false otherwise */
  public boolean isSetTransforms() {
    return this.Transforms != null;
  }

  public void setTransformsIsSet(boolean value) {
    if (!value) {
      this.Transforms = null;
    }
  }

  public int getPhysicsInteractionsSize() {
    return (this.PhysicsInteractions == null) ? 0 : this.PhysicsInteractions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MPhysicsInteraction> getPhysicsInteractionsIterator() {
    return (this.PhysicsInteractions == null) ? null : this.PhysicsInteractions.iterator();
  }

  public void addToPhysicsInteractions(MPhysicsInteraction elem) {
    if (this.PhysicsInteractions == null) {
      this.PhysicsInteractions = new java.util.ArrayList<MPhysicsInteraction>();
    }
    this.PhysicsInteractions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MPhysicsInteraction> getPhysicsInteractions() {
    return this.PhysicsInteractions;
  }

  public MSceneManipulation setPhysicsInteractions(@org.apache.thrift.annotation.Nullable java.util.List<MPhysicsInteraction> PhysicsInteractions) {
    this.PhysicsInteractions = PhysicsInteractions;
    return this;
  }

  public void unsetPhysicsInteractions() {
    this.PhysicsInteractions = null;
  }

  /** Returns true if field PhysicsInteractions is set (has been assigned a value) and false otherwise */
  public boolean isSetPhysicsInteractions() {
    return this.PhysicsInteractions != null;
  }

  public void setPhysicsInteractionsIsSet(boolean value) {
    if (!value) {
      this.PhysicsInteractions = null;
    }
  }

  public int getPropertiesSize() {
    return (this.Properties == null) ? 0 : this.Properties.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MPropertyManipulation> getPropertiesIterator() {
    return (this.Properties == null) ? null : this.Properties.iterator();
  }

  public void addToProperties(MPropertyManipulation elem) {
    if (this.Properties == null) {
      this.Properties = new java.util.ArrayList<MPropertyManipulation>();
    }
    this.Properties.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MPropertyManipulation> getProperties() {
    return this.Properties;
  }

  public MSceneManipulation setProperties(@org.apache.thrift.annotation.Nullable java.util.List<MPropertyManipulation> Properties) {
    this.Properties = Properties;
    return this;
  }

  public void unsetProperties() {
    this.Properties = null;
  }

  /** Returns true if field Properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.Properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.Properties = null;
    }
  }

  public int getAttachmentsSize() {
    return (this.Attachments == null) ? 0 : this.Attachments.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MAttachmentManipulation> getAttachmentsIterator() {
    return (this.Attachments == null) ? null : this.Attachments.iterator();
  }

  public void addToAttachments(MAttachmentManipulation elem) {
    if (this.Attachments == null) {
      this.Attachments = new java.util.ArrayList<MAttachmentManipulation>();
    }
    this.Attachments.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MAttachmentManipulation> getAttachments() {
    return this.Attachments;
  }

  public MSceneManipulation setAttachments(@org.apache.thrift.annotation.Nullable java.util.List<MAttachmentManipulation> Attachments) {
    this.Attachments = Attachments;
    return this;
  }

  public void unsetAttachments() {
    this.Attachments = null;
  }

  /** Returns true if field Attachments is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachments() {
    return this.Attachments != null;
  }

  public void setAttachmentsIsSet(boolean value) {
    if (!value) {
      this.Attachments = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TRANSFORMS:
      if (value == null) {
        unsetTransforms();
      } else {
        setTransforms((java.util.List<MTransformManipulation>)value);
      }
      break;

    case PHYSICS_INTERACTIONS:
      if (value == null) {
        unsetPhysicsInteractions();
      } else {
        setPhysicsInteractions((java.util.List<MPhysicsInteraction>)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.List<MPropertyManipulation>)value);
      }
      break;

    case ATTACHMENTS:
      if (value == null) {
        unsetAttachments();
      } else {
        setAttachments((java.util.List<MAttachmentManipulation>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TRANSFORMS:
      return getTransforms();

    case PHYSICS_INTERACTIONS:
      return getPhysicsInteractions();

    case PROPERTIES:
      return getProperties();

    case ATTACHMENTS:
      return getAttachments();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TRANSFORMS:
      return isSetTransforms();
    case PHYSICS_INTERACTIONS:
      return isSetPhysicsInteractions();
    case PROPERTIES:
      return isSetProperties();
    case ATTACHMENTS:
      return isSetAttachments();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MSceneManipulation)
      return this.equals((MSceneManipulation)that);
    return false;
  }

  public boolean equals(MSceneManipulation that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Transforms = true && this.isSetTransforms();
    boolean that_present_Transforms = true && that.isSetTransforms();
    if (this_present_Transforms || that_present_Transforms) {
      if (!(this_present_Transforms && that_present_Transforms))
        return false;
      if (!this.Transforms.equals(that.Transforms))
        return false;
    }

    boolean this_present_PhysicsInteractions = true && this.isSetPhysicsInteractions();
    boolean that_present_PhysicsInteractions = true && that.isSetPhysicsInteractions();
    if (this_present_PhysicsInteractions || that_present_PhysicsInteractions) {
      if (!(this_present_PhysicsInteractions && that_present_PhysicsInteractions))
        return false;
      if (!this.PhysicsInteractions.equals(that.PhysicsInteractions))
        return false;
    }

    boolean this_present_Properties = true && this.isSetProperties();
    boolean that_present_Properties = true && that.isSetProperties();
    if (this_present_Properties || that_present_Properties) {
      if (!(this_present_Properties && that_present_Properties))
        return false;
      if (!this.Properties.equals(that.Properties))
        return false;
    }

    boolean this_present_Attachments = true && this.isSetAttachments();
    boolean that_present_Attachments = true && that.isSetAttachments();
    if (this_present_Attachments || that_present_Attachments) {
      if (!(this_present_Attachments && that_present_Attachments))
        return false;
      if (!this.Attachments.equals(that.Attachments))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTransforms()) ? 131071 : 524287);
    if (isSetTransforms())
      hashCode = hashCode * 8191 + Transforms.hashCode();

    hashCode = hashCode * 8191 + ((isSetPhysicsInteractions()) ? 131071 : 524287);
    if (isSetPhysicsInteractions())
      hashCode = hashCode * 8191 + PhysicsInteractions.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + Properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttachments()) ? 131071 : 524287);
    if (isSetAttachments())
      hashCode = hashCode * 8191 + Attachments.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MSceneManipulation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTransforms()).compareTo(other.isSetTransforms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransforms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Transforms, other.Transforms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPhysicsInteractions()).compareTo(other.isSetPhysicsInteractions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhysicsInteractions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PhysicsInteractions, other.PhysicsInteractions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Properties, other.Properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAttachments()).compareTo(other.isSetAttachments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Attachments, other.Attachments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MSceneManipulation(");
    boolean first = true;

    if (isSetTransforms()) {
      sb.append("Transforms:");
      if (this.Transforms == null) {
        sb.append("null");
      } else {
        sb.append(this.Transforms);
      }
      first = false;
    }
    if (isSetPhysicsInteractions()) {
      if (!first) sb.append(", ");
      sb.append("PhysicsInteractions:");
      if (this.PhysicsInteractions == null) {
        sb.append("null");
      } else {
        sb.append(this.PhysicsInteractions);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("Properties:");
      if (this.Properties == null) {
        sb.append("null");
      } else {
        sb.append(this.Properties);
      }
      first = false;
    }
    if (isSetAttachments()) {
      if (!first) sb.append(", ");
      sb.append("Attachments:");
      if (this.Attachments == null) {
        sb.append("null");
      } else {
        sb.append(this.Attachments);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MSceneManipulationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MSceneManipulationStandardScheme getScheme() {
      return new MSceneManipulationStandardScheme();
    }
  }

  private static class MSceneManipulationStandardScheme extends org.apache.thrift.scheme.StandardScheme<MSceneManipulation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MSceneManipulation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRANSFORMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                struct.Transforms = new java.util.ArrayList<MTransformManipulation>(_list176.size);
                @org.apache.thrift.annotation.Nullable MTransformManipulation _elem177;
                for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                {
                  _elem177 = new MTransformManipulation();
                  _elem177.read(iprot);
                  struct.Transforms.add(_elem177);
                }
                iprot.readListEnd();
              }
              struct.setTransformsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PHYSICS_INTERACTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list179 = iprot.readListBegin();
                struct.PhysicsInteractions = new java.util.ArrayList<MPhysicsInteraction>(_list179.size);
                @org.apache.thrift.annotation.Nullable MPhysicsInteraction _elem180;
                for (int _i181 = 0; _i181 < _list179.size; ++_i181)
                {
                  _elem180 = new MPhysicsInteraction();
                  _elem180.read(iprot);
                  struct.PhysicsInteractions.add(_elem180);
                }
                iprot.readListEnd();
              }
              struct.setPhysicsInteractionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list182 = iprot.readListBegin();
                struct.Properties = new java.util.ArrayList<MPropertyManipulation>(_list182.size);
                @org.apache.thrift.annotation.Nullable MPropertyManipulation _elem183;
                for (int _i184 = 0; _i184 < _list182.size; ++_i184)
                {
                  _elem183 = new MPropertyManipulation();
                  _elem183.read(iprot);
                  struct.Properties.add(_elem183);
                }
                iprot.readListEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ATTACHMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list185 = iprot.readListBegin();
                struct.Attachments = new java.util.ArrayList<MAttachmentManipulation>(_list185.size);
                @org.apache.thrift.annotation.Nullable MAttachmentManipulation _elem186;
                for (int _i187 = 0; _i187 < _list185.size; ++_i187)
                {
                  _elem186 = new MAttachmentManipulation();
                  _elem186.read(iprot);
                  struct.Attachments.add(_elem186);
                }
                iprot.readListEnd();
              }
              struct.setAttachmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MSceneManipulation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Transforms != null) {
        if (struct.isSetTransforms()) {
          oprot.writeFieldBegin(TRANSFORMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Transforms.size()));
            for (MTransformManipulation _iter188 : struct.Transforms)
            {
              _iter188.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.PhysicsInteractions != null) {
        if (struct.isSetPhysicsInteractions()) {
          oprot.writeFieldBegin(PHYSICS_INTERACTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.PhysicsInteractions.size()));
            for (MPhysicsInteraction _iter189 : struct.PhysicsInteractions)
            {
              _iter189.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.Properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Properties.size()));
            for (MPropertyManipulation _iter190 : struct.Properties)
            {
              _iter190.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.Attachments != null) {
        if (struct.isSetAttachments()) {
          oprot.writeFieldBegin(ATTACHMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Attachments.size()));
            for (MAttachmentManipulation _iter191 : struct.Attachments)
            {
              _iter191.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MSceneManipulationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MSceneManipulationTupleScheme getScheme() {
      return new MSceneManipulationTupleScheme();
    }
  }

  private static class MSceneManipulationTupleScheme extends org.apache.thrift.scheme.TupleScheme<MSceneManipulation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MSceneManipulation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTransforms()) {
        optionals.set(0);
      }
      if (struct.isSetPhysicsInteractions()) {
        optionals.set(1);
      }
      if (struct.isSetProperties()) {
        optionals.set(2);
      }
      if (struct.isSetAttachments()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTransforms()) {
        {
          oprot.writeI32(struct.Transforms.size());
          for (MTransformManipulation _iter192 : struct.Transforms)
          {
            _iter192.write(oprot);
          }
        }
      }
      if (struct.isSetPhysicsInteractions()) {
        {
          oprot.writeI32(struct.PhysicsInteractions.size());
          for (MPhysicsInteraction _iter193 : struct.PhysicsInteractions)
          {
            _iter193.write(oprot);
          }
        }
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.Properties.size());
          for (MPropertyManipulation _iter194 : struct.Properties)
          {
            _iter194.write(oprot);
          }
        }
      }
      if (struct.isSetAttachments()) {
        {
          oprot.writeI32(struct.Attachments.size());
          for (MAttachmentManipulation _iter195 : struct.Attachments)
          {
            _iter195.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MSceneManipulation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list196 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Transforms = new java.util.ArrayList<MTransformManipulation>(_list196.size);
          @org.apache.thrift.annotation.Nullable MTransformManipulation _elem197;
          for (int _i198 = 0; _i198 < _list196.size; ++_i198)
          {
            _elem197 = new MTransformManipulation();
            _elem197.read(iprot);
            struct.Transforms.add(_elem197);
          }
        }
        struct.setTransformsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list199 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.PhysicsInteractions = new java.util.ArrayList<MPhysicsInteraction>(_list199.size);
          @org.apache.thrift.annotation.Nullable MPhysicsInteraction _elem200;
          for (int _i201 = 0; _i201 < _list199.size; ++_i201)
          {
            _elem200 = new MPhysicsInteraction();
            _elem200.read(iprot);
            struct.PhysicsInteractions.add(_elem200);
          }
        }
        struct.setPhysicsInteractionsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list202 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Properties = new java.util.ArrayList<MPropertyManipulation>(_list202.size);
          @org.apache.thrift.annotation.Nullable MPropertyManipulation _elem203;
          for (int _i204 = 0; _i204 < _list202.size; ++_i204)
          {
            _elem203 = new MPropertyManipulation();
            _elem203.read(iprot);
            struct.Properties.add(_elem203);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Attachments = new java.util.ArrayList<MAttachmentManipulation>(_list205.size);
          @org.apache.thrift.annotation.Nullable MAttachmentManipulation _elem206;
          for (int _i207 = 0; _i207 < _list205.size; ++_i207)
          {
            _elem206 = new MAttachmentManipulation();
            _elem206.read(iprot);
            struct.Attachments.add(_elem206);
          }
        }
        struct.setAttachmentsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

