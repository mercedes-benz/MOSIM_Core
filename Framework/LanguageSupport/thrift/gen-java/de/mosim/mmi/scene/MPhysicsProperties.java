/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.mosim.mmi.scene;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-24")
public class MPhysicsProperties implements org.apache.thrift.TBase<MPhysicsProperties, MPhysicsProperties._Fields>, java.io.Serializable, Cloneable, Comparable<MPhysicsProperties> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MPhysicsProperties");

  private static final org.apache.thrift.protocol.TField MASS_FIELD_DESC = new org.apache.thrift.protocol.TField("Mass", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField CENTER_OF_MASS_FIELD_DESC = new org.apache.thrift.protocol.TField("CenterOfMass", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField INERTIA_FIELD_DESC = new org.apache.thrift.protocol.TField("Inertia", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField VELOCITY_FIELD_DESC = new org.apache.thrift.protocol.TField("Velocity", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField ANGULAR_VELOCITY_FIELD_DESC = new org.apache.thrift.protocol.TField("AngularVelocity", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField NET_FORCE_FIELD_DESC = new org.apache.thrift.protocol.TField("NetForce", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField NET_TORQUE_FIELD_DESC = new org.apache.thrift.protocol.TField("NetTorque", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField MU1_FIELD_DESC = new org.apache.thrift.protocol.TField("Mu1", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField MU2_FIELD_DESC = new org.apache.thrift.protocol.TField("Mu2", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField BOUNCINESS_FIELD_DESC = new org.apache.thrift.protocol.TField("Bounciness", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField MU_TORSION_FIELD_DESC = new org.apache.thrift.protocol.TField("MuTorsion", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField TORSION_SURFACE_RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("TorsionSurfaceRadius", org.apache.thrift.protocol.TType.DOUBLE, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MPhysicsPropertiesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MPhysicsPropertiesTupleSchemeFactory();

  public double Mass; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> CenterOfMass; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> Inertia; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> Velocity; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> AngularVelocity; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> NetForce; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> NetTorque; // optional
  public double Mu1; // optional
  public double Mu2; // optional
  public double Bounciness; // optional
  public double MuTorsion; // optional
  public double TorsionSurfaceRadius; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MASS((short)1, "Mass"),
    CENTER_OF_MASS((short)2, "CenterOfMass"),
    INERTIA((short)3, "Inertia"),
    VELOCITY((short)4, "Velocity"),
    ANGULAR_VELOCITY((short)5, "AngularVelocity"),
    NET_FORCE((short)6, "NetForce"),
    NET_TORQUE((short)7, "NetTorque"),
    MU1((short)8, "Mu1"),
    MU2((short)9, "Mu2"),
    BOUNCINESS((short)10, "Bounciness"),
    MU_TORSION((short)11, "MuTorsion"),
    TORSION_SURFACE_RADIUS((short)12, "TorsionSurfaceRadius");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MASS
          return MASS;
        case 2: // CENTER_OF_MASS
          return CENTER_OF_MASS;
        case 3: // INERTIA
          return INERTIA;
        case 4: // VELOCITY
          return VELOCITY;
        case 5: // ANGULAR_VELOCITY
          return ANGULAR_VELOCITY;
        case 6: // NET_FORCE
          return NET_FORCE;
        case 7: // NET_TORQUE
          return NET_TORQUE;
        case 8: // MU1
          return MU1;
        case 9: // MU2
          return MU2;
        case 10: // BOUNCINESS
          return BOUNCINESS;
        case 11: // MU_TORSION
          return MU_TORSION;
        case 12: // TORSION_SURFACE_RADIUS
          return TORSION_SURFACE_RADIUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MASS_ISSET_ID = 0;
  private static final int __MU1_ISSET_ID = 1;
  private static final int __MU2_ISSET_ID = 2;
  private static final int __BOUNCINESS_ISSET_ID = 3;
  private static final int __MUTORSION_ISSET_ID = 4;
  private static final int __TORSIONSURFACERADIUS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INERTIA,_Fields.VELOCITY,_Fields.ANGULAR_VELOCITY,_Fields.NET_FORCE,_Fields.NET_TORQUE,_Fields.MU1,_Fields.MU2,_Fields.BOUNCINESS,_Fields.MU_TORSION,_Fields.TORSION_SURFACE_RADIUS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MASS, new org.apache.thrift.meta_data.FieldMetaData("Mass", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CENTER_OF_MASS, new org.apache.thrift.meta_data.FieldMetaData("CenterOfMass", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.INERTIA, new org.apache.thrift.meta_data.FieldMetaData("Inertia", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.VELOCITY, new org.apache.thrift.meta_data.FieldMetaData("Velocity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ANGULAR_VELOCITY, new org.apache.thrift.meta_data.FieldMetaData("AngularVelocity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.NET_FORCE, new org.apache.thrift.meta_data.FieldMetaData("NetForce", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.NET_TORQUE, new org.apache.thrift.meta_data.FieldMetaData("NetTorque", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.MU1, new org.apache.thrift.meta_data.FieldMetaData("Mu1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MU2, new org.apache.thrift.meta_data.FieldMetaData("Mu2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BOUNCINESS, new org.apache.thrift.meta_data.FieldMetaData("Bounciness", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MU_TORSION, new org.apache.thrift.meta_data.FieldMetaData("MuTorsion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TORSION_SURFACE_RADIUS, new org.apache.thrift.meta_data.FieldMetaData("TorsionSurfaceRadius", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MPhysicsProperties.class, metaDataMap);
  }

  public MPhysicsProperties() {
  }

  public MPhysicsProperties(
    double Mass,
    java.util.List<java.lang.Double> CenterOfMass)
  {
    this();
    this.Mass = Mass;
    setMassIsSet(true);
    this.CenterOfMass = CenterOfMass;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MPhysicsProperties(MPhysicsProperties other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Mass = other.Mass;
    if (other.isSetCenterOfMass()) {
      java.util.List<java.lang.Double> __this__CenterOfMass = new java.util.ArrayList<java.lang.Double>(other.CenterOfMass);
      this.CenterOfMass = __this__CenterOfMass;
    }
    if (other.isSetInertia()) {
      java.util.List<java.lang.Double> __this__Inertia = new java.util.ArrayList<java.lang.Double>(other.Inertia);
      this.Inertia = __this__Inertia;
    }
    if (other.isSetVelocity()) {
      java.util.List<java.lang.Double> __this__Velocity = new java.util.ArrayList<java.lang.Double>(other.Velocity);
      this.Velocity = __this__Velocity;
    }
    if (other.isSetAngularVelocity()) {
      java.util.List<java.lang.Double> __this__AngularVelocity = new java.util.ArrayList<java.lang.Double>(other.AngularVelocity);
      this.AngularVelocity = __this__AngularVelocity;
    }
    if (other.isSetNetForce()) {
      java.util.List<java.lang.Double> __this__NetForce = new java.util.ArrayList<java.lang.Double>(other.NetForce);
      this.NetForce = __this__NetForce;
    }
    if (other.isSetNetTorque()) {
      java.util.List<java.lang.Double> __this__NetTorque = new java.util.ArrayList<java.lang.Double>(other.NetTorque);
      this.NetTorque = __this__NetTorque;
    }
    this.Mu1 = other.Mu1;
    this.Mu2 = other.Mu2;
    this.Bounciness = other.Bounciness;
    this.MuTorsion = other.MuTorsion;
    this.TorsionSurfaceRadius = other.TorsionSurfaceRadius;
  }

  public MPhysicsProperties deepCopy() {
    return new MPhysicsProperties(this);
  }

  @Override
  public void clear() {
    setMassIsSet(false);
    this.Mass = 0.0;
    this.CenterOfMass = null;
    this.Inertia = null;
    this.Velocity = null;
    this.AngularVelocity = null;
    this.NetForce = null;
    this.NetTorque = null;
    setMu1IsSet(false);
    this.Mu1 = 0.0;
    setMu2IsSet(false);
    this.Mu2 = 0.0;
    setBouncinessIsSet(false);
    this.Bounciness = 0.0;
    setMuTorsionIsSet(false);
    this.MuTorsion = 0.0;
    setTorsionSurfaceRadiusIsSet(false);
    this.TorsionSurfaceRadius = 0.0;
  }

  public double getMass() {
    return this.Mass;
  }

  public MPhysicsProperties setMass(double Mass) {
    this.Mass = Mass;
    setMassIsSet(true);
    return this;
  }

  public void unsetMass() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MASS_ISSET_ID);
  }

  /** Returns true if field Mass is set (has been assigned a value) and false otherwise */
  public boolean isSetMass() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MASS_ISSET_ID);
  }

  public void setMassIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MASS_ISSET_ID, value);
  }

  public int getCenterOfMassSize() {
    return (this.CenterOfMass == null) ? 0 : this.CenterOfMass.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getCenterOfMassIterator() {
    return (this.CenterOfMass == null) ? null : this.CenterOfMass.iterator();
  }

  public void addToCenterOfMass(double elem) {
    if (this.CenterOfMass == null) {
      this.CenterOfMass = new java.util.ArrayList<java.lang.Double>();
    }
    this.CenterOfMass.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getCenterOfMass() {
    return this.CenterOfMass;
  }

  public MPhysicsProperties setCenterOfMass(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> CenterOfMass) {
    this.CenterOfMass = CenterOfMass;
    return this;
  }

  public void unsetCenterOfMass() {
    this.CenterOfMass = null;
  }

  /** Returns true if field CenterOfMass is set (has been assigned a value) and false otherwise */
  public boolean isSetCenterOfMass() {
    return this.CenterOfMass != null;
  }

  public void setCenterOfMassIsSet(boolean value) {
    if (!value) {
      this.CenterOfMass = null;
    }
  }

  public int getInertiaSize() {
    return (this.Inertia == null) ? 0 : this.Inertia.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getInertiaIterator() {
    return (this.Inertia == null) ? null : this.Inertia.iterator();
  }

  public void addToInertia(double elem) {
    if (this.Inertia == null) {
      this.Inertia = new java.util.ArrayList<java.lang.Double>();
    }
    this.Inertia.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getInertia() {
    return this.Inertia;
  }

  public MPhysicsProperties setInertia(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> Inertia) {
    this.Inertia = Inertia;
    return this;
  }

  public void unsetInertia() {
    this.Inertia = null;
  }

  /** Returns true if field Inertia is set (has been assigned a value) and false otherwise */
  public boolean isSetInertia() {
    return this.Inertia != null;
  }

  public void setInertiaIsSet(boolean value) {
    if (!value) {
      this.Inertia = null;
    }
  }

  public int getVelocitySize() {
    return (this.Velocity == null) ? 0 : this.Velocity.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getVelocityIterator() {
    return (this.Velocity == null) ? null : this.Velocity.iterator();
  }

  public void addToVelocity(double elem) {
    if (this.Velocity == null) {
      this.Velocity = new java.util.ArrayList<java.lang.Double>();
    }
    this.Velocity.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getVelocity() {
    return this.Velocity;
  }

  public MPhysicsProperties setVelocity(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> Velocity) {
    this.Velocity = Velocity;
    return this;
  }

  public void unsetVelocity() {
    this.Velocity = null;
  }

  /** Returns true if field Velocity is set (has been assigned a value) and false otherwise */
  public boolean isSetVelocity() {
    return this.Velocity != null;
  }

  public void setVelocityIsSet(boolean value) {
    if (!value) {
      this.Velocity = null;
    }
  }

  public int getAngularVelocitySize() {
    return (this.AngularVelocity == null) ? 0 : this.AngularVelocity.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getAngularVelocityIterator() {
    return (this.AngularVelocity == null) ? null : this.AngularVelocity.iterator();
  }

  public void addToAngularVelocity(double elem) {
    if (this.AngularVelocity == null) {
      this.AngularVelocity = new java.util.ArrayList<java.lang.Double>();
    }
    this.AngularVelocity.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getAngularVelocity() {
    return this.AngularVelocity;
  }

  public MPhysicsProperties setAngularVelocity(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> AngularVelocity) {
    this.AngularVelocity = AngularVelocity;
    return this;
  }

  public void unsetAngularVelocity() {
    this.AngularVelocity = null;
  }

  /** Returns true if field AngularVelocity is set (has been assigned a value) and false otherwise */
  public boolean isSetAngularVelocity() {
    return this.AngularVelocity != null;
  }

  public void setAngularVelocityIsSet(boolean value) {
    if (!value) {
      this.AngularVelocity = null;
    }
  }

  public int getNetForceSize() {
    return (this.NetForce == null) ? 0 : this.NetForce.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getNetForceIterator() {
    return (this.NetForce == null) ? null : this.NetForce.iterator();
  }

  public void addToNetForce(double elem) {
    if (this.NetForce == null) {
      this.NetForce = new java.util.ArrayList<java.lang.Double>();
    }
    this.NetForce.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getNetForce() {
    return this.NetForce;
  }

  public MPhysicsProperties setNetForce(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> NetForce) {
    this.NetForce = NetForce;
    return this;
  }

  public void unsetNetForce() {
    this.NetForce = null;
  }

  /** Returns true if field NetForce is set (has been assigned a value) and false otherwise */
  public boolean isSetNetForce() {
    return this.NetForce != null;
  }

  public void setNetForceIsSet(boolean value) {
    if (!value) {
      this.NetForce = null;
    }
  }

  public int getNetTorqueSize() {
    return (this.NetTorque == null) ? 0 : this.NetTorque.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getNetTorqueIterator() {
    return (this.NetTorque == null) ? null : this.NetTorque.iterator();
  }

  public void addToNetTorque(double elem) {
    if (this.NetTorque == null) {
      this.NetTorque = new java.util.ArrayList<java.lang.Double>();
    }
    this.NetTorque.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getNetTorque() {
    return this.NetTorque;
  }

  public MPhysicsProperties setNetTorque(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> NetTorque) {
    this.NetTorque = NetTorque;
    return this;
  }

  public void unsetNetTorque() {
    this.NetTorque = null;
  }

  /** Returns true if field NetTorque is set (has been assigned a value) and false otherwise */
  public boolean isSetNetTorque() {
    return this.NetTorque != null;
  }

  public void setNetTorqueIsSet(boolean value) {
    if (!value) {
      this.NetTorque = null;
    }
  }

  public double getMu1() {
    return this.Mu1;
  }

  public MPhysicsProperties setMu1(double Mu1) {
    this.Mu1 = Mu1;
    setMu1IsSet(true);
    return this;
  }

  public void unsetMu1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MU1_ISSET_ID);
  }

  /** Returns true if field Mu1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMu1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MU1_ISSET_ID);
  }

  public void setMu1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MU1_ISSET_ID, value);
  }

  public double getMu2() {
    return this.Mu2;
  }

  public MPhysicsProperties setMu2(double Mu2) {
    this.Mu2 = Mu2;
    setMu2IsSet(true);
    return this;
  }

  public void unsetMu2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MU2_ISSET_ID);
  }

  /** Returns true if field Mu2 is set (has been assigned a value) and false otherwise */
  public boolean isSetMu2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MU2_ISSET_ID);
  }

  public void setMu2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MU2_ISSET_ID, value);
  }

  public double getBounciness() {
    return this.Bounciness;
  }

  public MPhysicsProperties setBounciness(double Bounciness) {
    this.Bounciness = Bounciness;
    setBouncinessIsSet(true);
    return this;
  }

  public void unsetBounciness() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOUNCINESS_ISSET_ID);
  }

  /** Returns true if field Bounciness is set (has been assigned a value) and false otherwise */
  public boolean isSetBounciness() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOUNCINESS_ISSET_ID);
  }

  public void setBouncinessIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOUNCINESS_ISSET_ID, value);
  }

  public double getMuTorsion() {
    return this.MuTorsion;
  }

  public MPhysicsProperties setMuTorsion(double MuTorsion) {
    this.MuTorsion = MuTorsion;
    setMuTorsionIsSet(true);
    return this;
  }

  public void unsetMuTorsion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MUTORSION_ISSET_ID);
  }

  /** Returns true if field MuTorsion is set (has been assigned a value) and false otherwise */
  public boolean isSetMuTorsion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MUTORSION_ISSET_ID);
  }

  public void setMuTorsionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MUTORSION_ISSET_ID, value);
  }

  public double getTorsionSurfaceRadius() {
    return this.TorsionSurfaceRadius;
  }

  public MPhysicsProperties setTorsionSurfaceRadius(double TorsionSurfaceRadius) {
    this.TorsionSurfaceRadius = TorsionSurfaceRadius;
    setTorsionSurfaceRadiusIsSet(true);
    return this;
  }

  public void unsetTorsionSurfaceRadius() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TORSIONSURFACERADIUS_ISSET_ID);
  }

  /** Returns true if field TorsionSurfaceRadius is set (has been assigned a value) and false otherwise */
  public boolean isSetTorsionSurfaceRadius() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TORSIONSURFACERADIUS_ISSET_ID);
  }

  public void setTorsionSurfaceRadiusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TORSIONSURFACERADIUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case MASS:
      if (value == null) {
        unsetMass();
      } else {
        setMass((java.lang.Double)value);
      }
      break;

    case CENTER_OF_MASS:
      if (value == null) {
        unsetCenterOfMass();
      } else {
        setCenterOfMass((java.util.List<java.lang.Double>)value);
      }
      break;

    case INERTIA:
      if (value == null) {
        unsetInertia();
      } else {
        setInertia((java.util.List<java.lang.Double>)value);
      }
      break;

    case VELOCITY:
      if (value == null) {
        unsetVelocity();
      } else {
        setVelocity((java.util.List<java.lang.Double>)value);
      }
      break;

    case ANGULAR_VELOCITY:
      if (value == null) {
        unsetAngularVelocity();
      } else {
        setAngularVelocity((java.util.List<java.lang.Double>)value);
      }
      break;

    case NET_FORCE:
      if (value == null) {
        unsetNetForce();
      } else {
        setNetForce((java.util.List<java.lang.Double>)value);
      }
      break;

    case NET_TORQUE:
      if (value == null) {
        unsetNetTorque();
      } else {
        setNetTorque((java.util.List<java.lang.Double>)value);
      }
      break;

    case MU1:
      if (value == null) {
        unsetMu1();
      } else {
        setMu1((java.lang.Double)value);
      }
      break;

    case MU2:
      if (value == null) {
        unsetMu2();
      } else {
        setMu2((java.lang.Double)value);
      }
      break;

    case BOUNCINESS:
      if (value == null) {
        unsetBounciness();
      } else {
        setBounciness((java.lang.Double)value);
      }
      break;

    case MU_TORSION:
      if (value == null) {
        unsetMuTorsion();
      } else {
        setMuTorsion((java.lang.Double)value);
      }
      break;

    case TORSION_SURFACE_RADIUS:
      if (value == null) {
        unsetTorsionSurfaceRadius();
      } else {
        setTorsionSurfaceRadius((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MASS:
      return getMass();

    case CENTER_OF_MASS:
      return getCenterOfMass();

    case INERTIA:
      return getInertia();

    case VELOCITY:
      return getVelocity();

    case ANGULAR_VELOCITY:
      return getAngularVelocity();

    case NET_FORCE:
      return getNetForce();

    case NET_TORQUE:
      return getNetTorque();

    case MU1:
      return getMu1();

    case MU2:
      return getMu2();

    case BOUNCINESS:
      return getBounciness();

    case MU_TORSION:
      return getMuTorsion();

    case TORSION_SURFACE_RADIUS:
      return getTorsionSurfaceRadius();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MASS:
      return isSetMass();
    case CENTER_OF_MASS:
      return isSetCenterOfMass();
    case INERTIA:
      return isSetInertia();
    case VELOCITY:
      return isSetVelocity();
    case ANGULAR_VELOCITY:
      return isSetAngularVelocity();
    case NET_FORCE:
      return isSetNetForce();
    case NET_TORQUE:
      return isSetNetTorque();
    case MU1:
      return isSetMu1();
    case MU2:
      return isSetMu2();
    case BOUNCINESS:
      return isSetBounciness();
    case MU_TORSION:
      return isSetMuTorsion();
    case TORSION_SURFACE_RADIUS:
      return isSetTorsionSurfaceRadius();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MPhysicsProperties)
      return this.equals((MPhysicsProperties)that);
    return false;
  }

  public boolean equals(MPhysicsProperties that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Mass = true;
    boolean that_present_Mass = true;
    if (this_present_Mass || that_present_Mass) {
      if (!(this_present_Mass && that_present_Mass))
        return false;
      if (this.Mass != that.Mass)
        return false;
    }

    boolean this_present_CenterOfMass = true && this.isSetCenterOfMass();
    boolean that_present_CenterOfMass = true && that.isSetCenterOfMass();
    if (this_present_CenterOfMass || that_present_CenterOfMass) {
      if (!(this_present_CenterOfMass && that_present_CenterOfMass))
        return false;
      if (!this.CenterOfMass.equals(that.CenterOfMass))
        return false;
    }

    boolean this_present_Inertia = true && this.isSetInertia();
    boolean that_present_Inertia = true && that.isSetInertia();
    if (this_present_Inertia || that_present_Inertia) {
      if (!(this_present_Inertia && that_present_Inertia))
        return false;
      if (!this.Inertia.equals(that.Inertia))
        return false;
    }

    boolean this_present_Velocity = true && this.isSetVelocity();
    boolean that_present_Velocity = true && that.isSetVelocity();
    if (this_present_Velocity || that_present_Velocity) {
      if (!(this_present_Velocity && that_present_Velocity))
        return false;
      if (!this.Velocity.equals(that.Velocity))
        return false;
    }

    boolean this_present_AngularVelocity = true && this.isSetAngularVelocity();
    boolean that_present_AngularVelocity = true && that.isSetAngularVelocity();
    if (this_present_AngularVelocity || that_present_AngularVelocity) {
      if (!(this_present_AngularVelocity && that_present_AngularVelocity))
        return false;
      if (!this.AngularVelocity.equals(that.AngularVelocity))
        return false;
    }

    boolean this_present_NetForce = true && this.isSetNetForce();
    boolean that_present_NetForce = true && that.isSetNetForce();
    if (this_present_NetForce || that_present_NetForce) {
      if (!(this_present_NetForce && that_present_NetForce))
        return false;
      if (!this.NetForce.equals(that.NetForce))
        return false;
    }

    boolean this_present_NetTorque = true && this.isSetNetTorque();
    boolean that_present_NetTorque = true && that.isSetNetTorque();
    if (this_present_NetTorque || that_present_NetTorque) {
      if (!(this_present_NetTorque && that_present_NetTorque))
        return false;
      if (!this.NetTorque.equals(that.NetTorque))
        return false;
    }

    boolean this_present_Mu1 = true && this.isSetMu1();
    boolean that_present_Mu1 = true && that.isSetMu1();
    if (this_present_Mu1 || that_present_Mu1) {
      if (!(this_present_Mu1 && that_present_Mu1))
        return false;
      if (this.Mu1 != that.Mu1)
        return false;
    }

    boolean this_present_Mu2 = true && this.isSetMu2();
    boolean that_present_Mu2 = true && that.isSetMu2();
    if (this_present_Mu2 || that_present_Mu2) {
      if (!(this_present_Mu2 && that_present_Mu2))
        return false;
      if (this.Mu2 != that.Mu2)
        return false;
    }

    boolean this_present_Bounciness = true && this.isSetBounciness();
    boolean that_present_Bounciness = true && that.isSetBounciness();
    if (this_present_Bounciness || that_present_Bounciness) {
      if (!(this_present_Bounciness && that_present_Bounciness))
        return false;
      if (this.Bounciness != that.Bounciness)
        return false;
    }

    boolean this_present_MuTorsion = true && this.isSetMuTorsion();
    boolean that_present_MuTorsion = true && that.isSetMuTorsion();
    if (this_present_MuTorsion || that_present_MuTorsion) {
      if (!(this_present_MuTorsion && that_present_MuTorsion))
        return false;
      if (this.MuTorsion != that.MuTorsion)
        return false;
    }

    boolean this_present_TorsionSurfaceRadius = true && this.isSetTorsionSurfaceRadius();
    boolean that_present_TorsionSurfaceRadius = true && that.isSetTorsionSurfaceRadius();
    if (this_present_TorsionSurfaceRadius || that_present_TorsionSurfaceRadius) {
      if (!(this_present_TorsionSurfaceRadius && that_present_TorsionSurfaceRadius))
        return false;
      if (this.TorsionSurfaceRadius != that.TorsionSurfaceRadius)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Mass);

    hashCode = hashCode * 8191 + ((isSetCenterOfMass()) ? 131071 : 524287);
    if (isSetCenterOfMass())
      hashCode = hashCode * 8191 + CenterOfMass.hashCode();

    hashCode = hashCode * 8191 + ((isSetInertia()) ? 131071 : 524287);
    if (isSetInertia())
      hashCode = hashCode * 8191 + Inertia.hashCode();

    hashCode = hashCode * 8191 + ((isSetVelocity()) ? 131071 : 524287);
    if (isSetVelocity())
      hashCode = hashCode * 8191 + Velocity.hashCode();

    hashCode = hashCode * 8191 + ((isSetAngularVelocity()) ? 131071 : 524287);
    if (isSetAngularVelocity())
      hashCode = hashCode * 8191 + AngularVelocity.hashCode();

    hashCode = hashCode * 8191 + ((isSetNetForce()) ? 131071 : 524287);
    if (isSetNetForce())
      hashCode = hashCode * 8191 + NetForce.hashCode();

    hashCode = hashCode * 8191 + ((isSetNetTorque()) ? 131071 : 524287);
    if (isSetNetTorque())
      hashCode = hashCode * 8191 + NetTorque.hashCode();

    hashCode = hashCode * 8191 + ((isSetMu1()) ? 131071 : 524287);
    if (isSetMu1())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Mu1);

    hashCode = hashCode * 8191 + ((isSetMu2()) ? 131071 : 524287);
    if (isSetMu2())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Mu2);

    hashCode = hashCode * 8191 + ((isSetBounciness()) ? 131071 : 524287);
    if (isSetBounciness())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Bounciness);

    hashCode = hashCode * 8191 + ((isSetMuTorsion()) ? 131071 : 524287);
    if (isSetMuTorsion())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(MuTorsion);

    hashCode = hashCode * 8191 + ((isSetTorsionSurfaceRadius()) ? 131071 : 524287);
    if (isSetTorsionSurfaceRadius())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(TorsionSurfaceRadius);

    return hashCode;
  }

  @Override
  public int compareTo(MPhysicsProperties other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMass()).compareTo(other.isSetMass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Mass, other.Mass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCenterOfMass()).compareTo(other.isSetCenterOfMass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCenterOfMass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CenterOfMass, other.CenterOfMass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInertia()).compareTo(other.isSetInertia());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInertia()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Inertia, other.Inertia);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVelocity()).compareTo(other.isSetVelocity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVelocity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Velocity, other.Velocity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAngularVelocity()).compareTo(other.isSetAngularVelocity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAngularVelocity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AngularVelocity, other.AngularVelocity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNetForce()).compareTo(other.isSetNetForce());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetForce()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NetForce, other.NetForce);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNetTorque()).compareTo(other.isSetNetTorque());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetTorque()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NetTorque, other.NetTorque);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMu1()).compareTo(other.isSetMu1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMu1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Mu1, other.Mu1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMu2()).compareTo(other.isSetMu2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMu2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Mu2, other.Mu2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBounciness()).compareTo(other.isSetBounciness());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBounciness()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Bounciness, other.Bounciness);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMuTorsion()).compareTo(other.isSetMuTorsion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMuTorsion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MuTorsion, other.MuTorsion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTorsionSurfaceRadius()).compareTo(other.isSetTorsionSurfaceRadius());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTorsionSurfaceRadius()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TorsionSurfaceRadius, other.TorsionSurfaceRadius);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MPhysicsProperties(");
    boolean first = true;

    sb.append("Mass:");
    sb.append(this.Mass);
    first = false;
    if (!first) sb.append(", ");
    sb.append("CenterOfMass:");
    if (this.CenterOfMass == null) {
      sb.append("null");
    } else {
      sb.append(this.CenterOfMass);
    }
    first = false;
    if (isSetInertia()) {
      if (!first) sb.append(", ");
      sb.append("Inertia:");
      if (this.Inertia == null) {
        sb.append("null");
      } else {
        sb.append(this.Inertia);
      }
      first = false;
    }
    if (isSetVelocity()) {
      if (!first) sb.append(", ");
      sb.append("Velocity:");
      if (this.Velocity == null) {
        sb.append("null");
      } else {
        sb.append(this.Velocity);
      }
      first = false;
    }
    if (isSetAngularVelocity()) {
      if (!first) sb.append(", ");
      sb.append("AngularVelocity:");
      if (this.AngularVelocity == null) {
        sb.append("null");
      } else {
        sb.append(this.AngularVelocity);
      }
      first = false;
    }
    if (isSetNetForce()) {
      if (!first) sb.append(", ");
      sb.append("NetForce:");
      if (this.NetForce == null) {
        sb.append("null");
      } else {
        sb.append(this.NetForce);
      }
      first = false;
    }
    if (isSetNetTorque()) {
      if (!first) sb.append(", ");
      sb.append("NetTorque:");
      if (this.NetTorque == null) {
        sb.append("null");
      } else {
        sb.append(this.NetTorque);
      }
      first = false;
    }
    if (isSetMu1()) {
      if (!first) sb.append(", ");
      sb.append("Mu1:");
      sb.append(this.Mu1);
      first = false;
    }
    if (isSetMu2()) {
      if (!first) sb.append(", ");
      sb.append("Mu2:");
      sb.append(this.Mu2);
      first = false;
    }
    if (isSetBounciness()) {
      if (!first) sb.append(", ");
      sb.append("Bounciness:");
      sb.append(this.Bounciness);
      first = false;
    }
    if (isSetMuTorsion()) {
      if (!first) sb.append(", ");
      sb.append("MuTorsion:");
      sb.append(this.MuTorsion);
      first = false;
    }
    if (isSetTorsionSurfaceRadius()) {
      if (!first) sb.append(", ");
      sb.append("TorsionSurfaceRadius:");
      sb.append(this.TorsionSurfaceRadius);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'Mass' because it's a primitive and you chose the non-beans generator.
    if (CenterOfMass == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'CenterOfMass' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MPhysicsPropertiesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MPhysicsPropertiesStandardScheme getScheme() {
      return new MPhysicsPropertiesStandardScheme();
    }
  }

  private static class MPhysicsPropertiesStandardScheme extends org.apache.thrift.scheme.StandardScheme<MPhysicsProperties> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MPhysicsProperties struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MASS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Mass = iprot.readDouble();
              struct.setMassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CENTER_OF_MASS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.CenterOfMass = new java.util.ArrayList<java.lang.Double>(_list16.size);
                double _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readDouble();
                  struct.CenterOfMass.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setCenterOfMassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INERTIA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.Inertia = new java.util.ArrayList<java.lang.Double>(_list19.size);
                double _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = iprot.readDouble();
                  struct.Inertia.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setInertiaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VELOCITY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.Velocity = new java.util.ArrayList<java.lang.Double>(_list22.size);
                double _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = iprot.readDouble();
                  struct.Velocity.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setVelocityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ANGULAR_VELOCITY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list25 = iprot.readListBegin();
                struct.AngularVelocity = new java.util.ArrayList<java.lang.Double>(_list25.size);
                double _elem26;
                for (int _i27 = 0; _i27 < _list25.size; ++_i27)
                {
                  _elem26 = iprot.readDouble();
                  struct.AngularVelocity.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setAngularVelocityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NET_FORCE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.NetForce = new java.util.ArrayList<java.lang.Double>(_list28.size);
                double _elem29;
                for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                {
                  _elem29 = iprot.readDouble();
                  struct.NetForce.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setNetForceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NET_TORQUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
                struct.NetTorque = new java.util.ArrayList<java.lang.Double>(_list31.size);
                double _elem32;
                for (int _i33 = 0; _i33 < _list31.size; ++_i33)
                {
                  _elem32 = iprot.readDouble();
                  struct.NetTorque.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setNetTorqueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MU1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Mu1 = iprot.readDouble();
              struct.setMu1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MU2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Mu2 = iprot.readDouble();
              struct.setMu2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BOUNCINESS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Bounciness = iprot.readDouble();
              struct.setBouncinessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MU_TORSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.MuTorsion = iprot.readDouble();
              struct.setMuTorsionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TORSION_SURFACE_RADIUS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.TorsionSurfaceRadius = iprot.readDouble();
              struct.setTorsionSurfaceRadiusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMass()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'Mass' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MPhysicsProperties struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MASS_FIELD_DESC);
      oprot.writeDouble(struct.Mass);
      oprot.writeFieldEnd();
      if (struct.CenterOfMass != null) {
        oprot.writeFieldBegin(CENTER_OF_MASS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.CenterOfMass.size()));
          for (double _iter34 : struct.CenterOfMass)
          {
            oprot.writeDouble(_iter34);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Inertia != null) {
        if (struct.isSetInertia()) {
          oprot.writeFieldBegin(INERTIA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.Inertia.size()));
            for (double _iter35 : struct.Inertia)
            {
              oprot.writeDouble(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.Velocity != null) {
        if (struct.isSetVelocity()) {
          oprot.writeFieldBegin(VELOCITY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.Velocity.size()));
            for (double _iter36 : struct.Velocity)
            {
              oprot.writeDouble(_iter36);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.AngularVelocity != null) {
        if (struct.isSetAngularVelocity()) {
          oprot.writeFieldBegin(ANGULAR_VELOCITY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.AngularVelocity.size()));
            for (double _iter37 : struct.AngularVelocity)
            {
              oprot.writeDouble(_iter37);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.NetForce != null) {
        if (struct.isSetNetForce()) {
          oprot.writeFieldBegin(NET_FORCE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.NetForce.size()));
            for (double _iter38 : struct.NetForce)
            {
              oprot.writeDouble(_iter38);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.NetTorque != null) {
        if (struct.isSetNetTorque()) {
          oprot.writeFieldBegin(NET_TORQUE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.NetTorque.size()));
            for (double _iter39 : struct.NetTorque)
            {
              oprot.writeDouble(_iter39);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMu1()) {
        oprot.writeFieldBegin(MU1_FIELD_DESC);
        oprot.writeDouble(struct.Mu1);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMu2()) {
        oprot.writeFieldBegin(MU2_FIELD_DESC);
        oprot.writeDouble(struct.Mu2);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBounciness()) {
        oprot.writeFieldBegin(BOUNCINESS_FIELD_DESC);
        oprot.writeDouble(struct.Bounciness);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMuTorsion()) {
        oprot.writeFieldBegin(MU_TORSION_FIELD_DESC);
        oprot.writeDouble(struct.MuTorsion);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTorsionSurfaceRadius()) {
        oprot.writeFieldBegin(TORSION_SURFACE_RADIUS_FIELD_DESC);
        oprot.writeDouble(struct.TorsionSurfaceRadius);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MPhysicsPropertiesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MPhysicsPropertiesTupleScheme getScheme() {
      return new MPhysicsPropertiesTupleScheme();
    }
  }

  private static class MPhysicsPropertiesTupleScheme extends org.apache.thrift.scheme.TupleScheme<MPhysicsProperties> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MPhysicsProperties struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeDouble(struct.Mass);
      {
        oprot.writeI32(struct.CenterOfMass.size());
        for (double _iter40 : struct.CenterOfMass)
        {
          oprot.writeDouble(_iter40);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetInertia()) {
        optionals.set(0);
      }
      if (struct.isSetVelocity()) {
        optionals.set(1);
      }
      if (struct.isSetAngularVelocity()) {
        optionals.set(2);
      }
      if (struct.isSetNetForce()) {
        optionals.set(3);
      }
      if (struct.isSetNetTorque()) {
        optionals.set(4);
      }
      if (struct.isSetMu1()) {
        optionals.set(5);
      }
      if (struct.isSetMu2()) {
        optionals.set(6);
      }
      if (struct.isSetBounciness()) {
        optionals.set(7);
      }
      if (struct.isSetMuTorsion()) {
        optionals.set(8);
      }
      if (struct.isSetTorsionSurfaceRadius()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetInertia()) {
        {
          oprot.writeI32(struct.Inertia.size());
          for (double _iter41 : struct.Inertia)
          {
            oprot.writeDouble(_iter41);
          }
        }
      }
      if (struct.isSetVelocity()) {
        {
          oprot.writeI32(struct.Velocity.size());
          for (double _iter42 : struct.Velocity)
          {
            oprot.writeDouble(_iter42);
          }
        }
      }
      if (struct.isSetAngularVelocity()) {
        {
          oprot.writeI32(struct.AngularVelocity.size());
          for (double _iter43 : struct.AngularVelocity)
          {
            oprot.writeDouble(_iter43);
          }
        }
      }
      if (struct.isSetNetForce()) {
        {
          oprot.writeI32(struct.NetForce.size());
          for (double _iter44 : struct.NetForce)
          {
            oprot.writeDouble(_iter44);
          }
        }
      }
      if (struct.isSetNetTorque()) {
        {
          oprot.writeI32(struct.NetTorque.size());
          for (double _iter45 : struct.NetTorque)
          {
            oprot.writeDouble(_iter45);
          }
        }
      }
      if (struct.isSetMu1()) {
        oprot.writeDouble(struct.Mu1);
      }
      if (struct.isSetMu2()) {
        oprot.writeDouble(struct.Mu2);
      }
      if (struct.isSetBounciness()) {
        oprot.writeDouble(struct.Bounciness);
      }
      if (struct.isSetMuTorsion()) {
        oprot.writeDouble(struct.MuTorsion);
      }
      if (struct.isSetTorsionSurfaceRadius()) {
        oprot.writeDouble(struct.TorsionSurfaceRadius);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MPhysicsProperties struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.Mass = iprot.readDouble();
      struct.setMassIsSet(true);
      {
        org.apache.thrift.protocol.TList _list46 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.CenterOfMass = new java.util.ArrayList<java.lang.Double>(_list46.size);
        double _elem47;
        for (int _i48 = 0; _i48 < _list46.size; ++_i48)
        {
          _elem47 = iprot.readDouble();
          struct.CenterOfMass.add(_elem47);
        }
      }
      struct.setCenterOfMassIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.Inertia = new java.util.ArrayList<java.lang.Double>(_list49.size);
          double _elem50;
          for (int _i51 = 0; _i51 < _list49.size; ++_i51)
          {
            _elem50 = iprot.readDouble();
            struct.Inertia.add(_elem50);
          }
        }
        struct.setInertiaIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.Velocity = new java.util.ArrayList<java.lang.Double>(_list52.size);
          double _elem53;
          for (int _i54 = 0; _i54 < _list52.size; ++_i54)
          {
            _elem53 = iprot.readDouble();
            struct.Velocity.add(_elem53);
          }
        }
        struct.setVelocityIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.AngularVelocity = new java.util.ArrayList<java.lang.Double>(_list55.size);
          double _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = iprot.readDouble();
            struct.AngularVelocity.add(_elem56);
          }
        }
        struct.setAngularVelocityIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.NetForce = new java.util.ArrayList<java.lang.Double>(_list58.size);
          double _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            _elem59 = iprot.readDouble();
            struct.NetForce.add(_elem59);
          }
        }
        struct.setNetForceIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.NetTorque = new java.util.ArrayList<java.lang.Double>(_list61.size);
          double _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = iprot.readDouble();
            struct.NetTorque.add(_elem62);
          }
        }
        struct.setNetTorqueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.Mu1 = iprot.readDouble();
        struct.setMu1IsSet(true);
      }
      if (incoming.get(6)) {
        struct.Mu2 = iprot.readDouble();
        struct.setMu2IsSet(true);
      }
      if (incoming.get(7)) {
        struct.Bounciness = iprot.readDouble();
        struct.setBouncinessIsSet(true);
      }
      if (incoming.get(8)) {
        struct.MuTorsion = iprot.readDouble();
        struct.setMuTorsionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.TorsionSurfaceRadius = iprot.readDouble();
        struct.setTorsionSurfaceRadiusIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

