#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import MMIStandard.math.ttypes

from thrift.transport import TTransport
all_structs = []


class MJointType(object):
    Undefined = 0
    LeftBallTip = 1
    LeftBall = 2
    LeftAnkle = 3
    LeftKnee = 4
    LeftHip = 5
    RightBallTip = 6
    RightBall = 7
    RightAnkle = 8
    RightKnee = 9
    RightHip = 10
    PelvisCentre = 11
    S1L5Joint = 12
    T12L1Joint = 13
    T1T2Joint = 14
    C4C5Joint = 15
    HeadJoint = 16
    HeadTip = 17
    MidEye = 18
    LeftShoulder = 19
    LeftElbow = 20
    LeftWrist = 21
    RightShoulder = 22
    RightElbow = 23
    RightWrist = 24
    LeftThumbMid = 25
    LeftThumbMeta = 26
    LeftThumbCarpal = 27
    LeftThumbTip = 28
    LeftIndexMeta = 29
    LeftIndexProximal = 30
    LeftIndexDistal = 31
    LeftIndexTip = 32
    LeftMiddleMeta = 33
    LeftMiddleProximal = 34
    LeftMiddleDistal = 35
    LeftMiddleTip = 36
    LeftRingMeta = 37
    LeftRingProximal = 38
    LeftRingDistal = 39
    LeftRingTip = 40
    LeftLittleMeta = 41
    LeftLittleProximal = 42
    LeftLittleDistal = 43
    LeftLittleTip = 44
    RightThumbMid = 45
    RightThumbMeta = 46
    RightThumbCarpal = 47
    RightThumbTip = 48
    RightIndexMeta = 49
    RightIndexProximal = 50
    RightIndexDistal = 51
    RightIndexTip = 52
    RightMiddleMeta = 53
    RightMiddleProximal = 54
    RightMiddleDistal = 55
    RightMiddleTip = 56
    RightRingMeta = 57
    RightRingProximal = 58
    RightRingDistal = 59
    RightRingTip = 60
    RightLittleMeta = 61
    RightLittleProximal = 62
    RightLittleDistal = 63
    RightLittleTip = 64
    Root = 65
    LeftEye = 66
    RightEye = 67

    _VALUES_TO_NAMES = {
        0: "Undefined",
        1: "LeftBallTip",
        2: "LeftBall",
        3: "LeftAnkle",
        4: "LeftKnee",
        5: "LeftHip",
        6: "RightBallTip",
        7: "RightBall",
        8: "RightAnkle",
        9: "RightKnee",
        10: "RightHip",
        11: "PelvisCentre",
        12: "S1L5Joint",
        13: "T12L1Joint",
        14: "T1T2Joint",
        15: "C4C5Joint",
        16: "HeadJoint",
        17: "HeadTip",
        18: "MidEye",
        19: "LeftShoulder",
        20: "LeftElbow",
        21: "LeftWrist",
        22: "RightShoulder",
        23: "RightElbow",
        24: "RightWrist",
        25: "LeftThumbMid",
        26: "LeftThumbMeta",
        27: "LeftThumbCarpal",
        28: "LeftThumbTip",
        29: "LeftIndexMeta",
        30: "LeftIndexProximal",
        31: "LeftIndexDistal",
        32: "LeftIndexTip",
        33: "LeftMiddleMeta",
        34: "LeftMiddleProximal",
        35: "LeftMiddleDistal",
        36: "LeftMiddleTip",
        37: "LeftRingMeta",
        38: "LeftRingProximal",
        39: "LeftRingDistal",
        40: "LeftRingTip",
        41: "LeftLittleMeta",
        42: "LeftLittleProximal",
        43: "LeftLittleDistal",
        44: "LeftLittleTip",
        45: "RightThumbMid",
        46: "RightThumbMeta",
        47: "RightThumbCarpal",
        48: "RightThumbTip",
        49: "RightIndexMeta",
        50: "RightIndexProximal",
        51: "RightIndexDistal",
        52: "RightIndexTip",
        53: "RightMiddleMeta",
        54: "RightMiddleProximal",
        55: "RightMiddleDistal",
        56: "RightMiddleTip",
        57: "RightRingMeta",
        58: "RightRingProximal",
        59: "RightRingDistal",
        60: "RightRingTip",
        61: "RightLittleMeta",
        62: "RightLittleProximal",
        63: "RightLittleDistal",
        64: "RightLittleTip",
        65: "Root",
        66: "LeftEye",
        67: "RightEye",
    }

    _NAMES_TO_VALUES = {
        "Undefined": 0,
        "LeftBallTip": 1,
        "LeftBall": 2,
        "LeftAnkle": 3,
        "LeftKnee": 4,
        "LeftHip": 5,
        "RightBallTip": 6,
        "RightBall": 7,
        "RightAnkle": 8,
        "RightKnee": 9,
        "RightHip": 10,
        "PelvisCentre": 11,
        "S1L5Joint": 12,
        "T12L1Joint": 13,
        "T1T2Joint": 14,
        "C4C5Joint": 15,
        "HeadJoint": 16,
        "HeadTip": 17,
        "MidEye": 18,
        "LeftShoulder": 19,
        "LeftElbow": 20,
        "LeftWrist": 21,
        "RightShoulder": 22,
        "RightElbow": 23,
        "RightWrist": 24,
        "LeftThumbMid": 25,
        "LeftThumbMeta": 26,
        "LeftThumbCarpal": 27,
        "LeftThumbTip": 28,
        "LeftIndexMeta": 29,
        "LeftIndexProximal": 30,
        "LeftIndexDistal": 31,
        "LeftIndexTip": 32,
        "LeftMiddleMeta": 33,
        "LeftMiddleProximal": 34,
        "LeftMiddleDistal": 35,
        "LeftMiddleTip": 36,
        "LeftRingMeta": 37,
        "LeftRingProximal": 38,
        "LeftRingDistal": 39,
        "LeftRingTip": 40,
        "LeftLittleMeta": 41,
        "LeftLittleProximal": 42,
        "LeftLittleDistal": 43,
        "LeftLittleTip": 44,
        "RightThumbMid": 45,
        "RightThumbMeta": 46,
        "RightThumbCarpal": 47,
        "RightThumbTip": 48,
        "RightIndexMeta": 49,
        "RightIndexProximal": 50,
        "RightIndexDistal": 51,
        "RightIndexTip": 52,
        "RightMiddleMeta": 53,
        "RightMiddleProximal": 54,
        "RightMiddleDistal": 55,
        "RightMiddleTip": 56,
        "RightRingMeta": 57,
        "RightRingProximal": 58,
        "RightRingDistal": 59,
        "RightRingTip": 60,
        "RightLittleMeta": 61,
        "RightLittleProximal": 62,
        "RightLittleDistal": 63,
        "RightLittleTip": 64,
        "Root": 65,
        "LeftEye": 66,
        "RightEye": 67,
    }


class MEndeffectorType(object):
    LeftHand = 0
    LeftFoot = 1
    RightHand = 2
    RightFoot = 3
    Root = 4

    _VALUES_TO_NAMES = {
        0: "LeftHand",
        1: "LeftFoot",
        2: "RightHand",
        3: "RightFoot",
        4: "Root",
    }

    _NAMES_TO_VALUES = {
        "LeftHand": 0,
        "LeftFoot": 1,
        "RightHand": 2,
        "RightFoot": 3,
        "Root": 4,
    }


class MChannel(object):
    XOffset = 0
    YOffset = 1
    ZOffset = 2
    XRotation = 3
    YRotation = 4
    ZRotation = 5
    WRotation = 6

    _VALUES_TO_NAMES = {
        0: "XOffset",
        1: "YOffset",
        2: "ZOffset",
        3: "XRotation",
        4: "YRotation",
        5: "ZRotation",
        6: "WRotation",
    }

    _NAMES_TO_VALUES = {
        "XOffset": 0,
        "YOffset": 1,
        "ZOffset": 2,
        "XRotation": 3,
        "YRotation": 4,
        "ZRotation": 5,
        "WRotation": 6,
    }


class MAvatarPostureValues(object):
    """
    Attributes:
     - AvatarID
     - PostureData
     - PartialJointList

    """


    def __init__(self, AvatarID=None, PostureData=None, PartialJointList=None,):
        self.AvatarID = AvatarID
        self.PostureData = PostureData
        self.PartialJointList = PartialJointList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.AvatarID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.PostureData = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readDouble()
                        self.PostureData.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.PartialJointList = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readI32()
                        self.PartialJointList.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MAvatarPostureValues')
        if self.AvatarID is not None:
            oprot.writeFieldBegin('AvatarID', TType.STRING, 1)
            oprot.writeString(self.AvatarID.encode('utf-8') if sys.version_info[0] == 2 else self.AvatarID)
            oprot.writeFieldEnd()
        if self.PostureData is not None:
            oprot.writeFieldBegin('PostureData', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.PostureData))
            for iter12 in self.PostureData:
                oprot.writeDouble(iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.PartialJointList is not None:
            oprot.writeFieldBegin('PartialJointList', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.PartialJointList))
            for iter13 in self.PartialJointList:
                oprot.writeI32(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.AvatarID is None:
            raise TProtocolException(message='Required field AvatarID is unset!')
        if self.PostureData is None:
            raise TProtocolException(message='Required field PostureData is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MJoint(object):
    """
    Attributes:
     - ID
     - Type
     - Position
     - Rotation
     - Channels
     - Parent

    """


    def __init__(self, ID=None, Type=None, Position=None, Rotation=None, Channels=None, Parent=None,):
        self.ID = ID
        self.Type = Type
        self.Position = Position
        self.Rotation = Rotation
        self.Channels = Channels
        self.Parent = Parent

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.Type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.Position = MMIStandard.math.ttypes.MVector3()
                    self.Position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.Rotation = MMIStandard.math.ttypes.MQuaternion()
                    self.Rotation.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.Channels = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readI32()
                        self.Channels.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.Parent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MJoint')
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 1)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.Type is not None:
            oprot.writeFieldBegin('Type', TType.I32, 2)
            oprot.writeI32(self.Type)
            oprot.writeFieldEnd()
        if self.Position is not None:
            oprot.writeFieldBegin('Position', TType.STRUCT, 3)
            self.Position.write(oprot)
            oprot.writeFieldEnd()
        if self.Rotation is not None:
            oprot.writeFieldBegin('Rotation', TType.STRUCT, 4)
            self.Rotation.write(oprot)
            oprot.writeFieldEnd()
        if self.Channels is not None:
            oprot.writeFieldBegin('Channels', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.Channels))
            for iter20 in self.Channels:
                oprot.writeI32(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Parent is not None:
            oprot.writeFieldBegin('Parent', TType.STRING, 6)
            oprot.writeString(self.Parent.encode('utf-8') if sys.version_info[0] == 2 else self.Parent)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ID is None:
            raise TProtocolException(message='Required field ID is unset!')
        if self.Type is None:
            raise TProtocolException(message='Required field Type is unset!')
        if self.Position is None:
            raise TProtocolException(message='Required field Position is unset!')
        if self.Rotation is None:
            raise TProtocolException(message='Required field Rotation is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MAvatarPosture(object):
    """
    Attributes:
     - AvatarID
     - Joints

    """


    def __init__(self, AvatarID=None, Joints=None,):
        self.AvatarID = AvatarID
        self.Joints = Joints

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.AvatarID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.Joints = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = MJoint()
                        _elem26.read(iprot)
                        self.Joints.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MAvatarPosture')
        if self.AvatarID is not None:
            oprot.writeFieldBegin('AvatarID', TType.STRING, 1)
            oprot.writeString(self.AvatarID.encode('utf-8') if sys.version_info[0] == 2 else self.AvatarID)
            oprot.writeFieldEnd()
        if self.Joints is not None:
            oprot.writeFieldBegin('Joints', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.Joints))
            for iter27 in self.Joints:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.AvatarID is None:
            raise TProtocolException(message='Required field AvatarID is unset!')
        if self.Joints is None:
            raise TProtocolException(message='Required field Joints is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MHandPose(object):
    """
    Attributes:
     - Joints
     - Properties

    """


    def __init__(self, Joints=None, Properties=None,):
        self.Joints = Joints
        self.Properties = Properties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.Joints = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = MJoint()
                        _elem33.read(iprot)
                        self.Joints.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.Properties = {}
                    (_ktype35, _vtype36, _size34) = iprot.readMapBegin()
                    for _i38 in range(_size34):
                        _key39 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val40 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Properties[_key39] = _val40
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MHandPose')
        if self.Joints is not None:
            oprot.writeFieldBegin('Joints', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.Joints))
            for iter41 in self.Joints:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.Properties))
            for kiter42, viter43 in self.Properties.items():
                oprot.writeString(kiter42.encode('utf-8') if sys.version_info[0] == 2 else kiter42)
                oprot.writeString(viter43.encode('utf-8') if sys.version_info[0] == 2 else viter43)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Joints is None:
            raise TProtocolException(message='Required field Joints is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MAvatarDescription(object):
    """
    Attributes:
     - AvatarID
     - ZeroPosture
     - Properties

    """


    def __init__(self, AvatarID=None, ZeroPosture=None, Properties=None,):
        self.AvatarID = AvatarID
        self.ZeroPosture = ZeroPosture
        self.Properties = Properties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.AvatarID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ZeroPosture = MAvatarPosture()
                    self.ZeroPosture.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.Properties = {}
                    (_ktype45, _vtype46, _size44) = iprot.readMapBegin()
                    for _i48 in range(_size44):
                        _key49 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val50 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Properties[_key49] = _val50
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MAvatarDescription')
        if self.AvatarID is not None:
            oprot.writeFieldBegin('AvatarID', TType.STRING, 1)
            oprot.writeString(self.AvatarID.encode('utf-8') if sys.version_info[0] == 2 else self.AvatarID)
            oprot.writeFieldEnd()
        if self.ZeroPosture is not None:
            oprot.writeFieldBegin('ZeroPosture', TType.STRUCT, 2)
            self.ZeroPosture.write(oprot)
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.Properties))
            for kiter51, viter52 in self.Properties.items():
                oprot.writeString(kiter51.encode('utf-8') if sys.version_info[0] == 2 else kiter51)
                oprot.writeString(viter52.encode('utf-8') if sys.version_info[0] == 2 else viter52)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.AvatarID is None:
            raise TProtocolException(message='Required field AvatarID is unset!')
        if self.ZeroPosture is None:
            raise TProtocolException(message='Required field ZeroPosture is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MAvatar(object):
    """
    Attributes:
     - ID
     - Name
     - Description
     - PostureValues
     - SceneObjects
     - Properties

    """


    def __init__(self, ID=None, Name=None, Description=None, PostureValues=None, SceneObjects=None, Properties=None,):
        self.ID = ID
        self.Name = Name
        self.Description = Description
        self.PostureValues = PostureValues
        self.SceneObjects = SceneObjects
        self.Properties = Properties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.Description = MAvatarDescription()
                    self.Description.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.PostureValues = MAvatarPostureValues()
                    self.PostureValues.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.SceneObjects = []
                    (_etype56, _size53) = iprot.readListBegin()
                    for _i57 in range(_size53):
                        _elem58 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.SceneObjects.append(_elem58)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.Properties = {}
                    (_ktype60, _vtype61, _size59) = iprot.readMapBegin()
                    for _i63 in range(_size59):
                        _key64 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val65 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Properties[_key64] = _val65
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MAvatar')
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 1)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRUCT, 3)
            self.Description.write(oprot)
            oprot.writeFieldEnd()
        if self.PostureValues is not None:
            oprot.writeFieldBegin('PostureValues', TType.STRUCT, 4)
            self.PostureValues.write(oprot)
            oprot.writeFieldEnd()
        if self.SceneObjects is not None:
            oprot.writeFieldBegin('SceneObjects', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.SceneObjects))
            for iter66 in self.SceneObjects:
                oprot.writeString(iter66.encode('utf-8') if sys.version_info[0] == 2 else iter66)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.Properties))
            for kiter67, viter68 in self.Properties.items():
                oprot.writeString(kiter67.encode('utf-8') if sys.version_info[0] == 2 else kiter67)
                oprot.writeString(viter68.encode('utf-8') if sys.version_info[0] == 2 else viter68)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ID is None:
            raise TProtocolException(message='Required field ID is unset!')
        if self.Name is None:
            raise TProtocolException(message='Required field Name is unset!')
        if self.Description is None:
            raise TProtocolException(message='Required field Description is unset!')
        if self.PostureValues is None:
            raise TProtocolException(message='Required field PostureValues is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(MAvatarPostureValues)
MAvatarPostureValues.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'AvatarID', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'PostureData', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'PartialJointList', (TType.I32, None, False), None, ),  # 3
)
all_structs.append(MJoint)
MJoint.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ID', 'UTF8', None, ),  # 1
    (2, TType.I32, 'Type', None, None, ),  # 2
    (3, TType.STRUCT, 'Position', [MMIStandard.math.ttypes.MVector3, None], None, ),  # 3
    (4, TType.STRUCT, 'Rotation', [MMIStandard.math.ttypes.MQuaternion, None], None, ),  # 4
    (5, TType.LIST, 'Channels', (TType.I32, None, False), None, ),  # 5
    (6, TType.STRING, 'Parent', 'UTF8', None, ),  # 6
)
all_structs.append(MAvatarPosture)
MAvatarPosture.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'AvatarID', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'Joints', (TType.STRUCT, [MJoint, None], False), None, ),  # 2
)
all_structs.append(MHandPose)
MHandPose.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'Joints', (TType.STRUCT, [MJoint, None], False), None, ),  # 1
    (2, TType.MAP, 'Properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(MAvatarDescription)
MAvatarDescription.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'AvatarID', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'ZeroPosture', [MAvatarPosture, None], None, ),  # 2
    (3, TType.MAP, 'Properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(MAvatar)
MAvatar.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'Description', [MAvatarDescription, None], None, ),  # 3
    (4, TType.STRUCT, 'PostureValues', [MAvatarPostureValues, None], None, ),  # 4
    (5, TType.LIST, 'SceneObjects', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.MAP, 'Properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 6
)
fix_spec(all_structs)
del all_structs
