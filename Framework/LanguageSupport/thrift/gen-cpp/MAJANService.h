/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MAJANService_H
#define MAJANService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "AJAN_types.h"

namespace MMIStandard {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MAJANServiceIf {
 public:
  virtual ~MAJANServiceIf() {}
  virtual void CreateAgent(std::string& _return, const std::string& name, const std::string& template, const MRDFGraph& knowledge) = 0;
  virtual bool DeleteAgent(const std::string& agentName) = 0;
  virtual void ExecuteAgent(std::string& _return, const std::string& agentName, const std::string& endpoint, const MRDFGraph& content) = 0;
  virtual void ReceiveAsync(const std::string& actionID, const int32_t answer) = 0;
};

class MAJANServiceIfFactory {
 public:
  typedef MAJANServiceIf Handler;

  virtual ~MAJANServiceIfFactory() {}

  virtual MAJANServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MAJANServiceIf* /* handler */) = 0;
};

class MAJANServiceIfSingletonFactory : virtual public MAJANServiceIfFactory {
 public:
  MAJANServiceIfSingletonFactory(const ::std::shared_ptr<MAJANServiceIf>& iface) : iface_(iface) {}
  virtual ~MAJANServiceIfSingletonFactory() {}

  virtual MAJANServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MAJANServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MAJANServiceIf> iface_;
};

class MAJANServiceNull : virtual public MAJANServiceIf {
 public:
  virtual ~MAJANServiceNull() {}
  void CreateAgent(std::string& /* _return */, const std::string& /* name */, const std::string& /* template */, const MRDFGraph& /* knowledge */) {
    return;
  }
  bool DeleteAgent(const std::string& /* agentName */) {
    bool _return = false;
    return _return;
  }
  void ExecuteAgent(std::string& /* _return */, const std::string& /* agentName */, const std::string& /* endpoint */, const MRDFGraph& /* content */) {
    return;
  }
  void ReceiveAsync(const std::string& /* actionID */, const int32_t /* answer */) {
    return;
  }
};

typedef struct _MAJANService_CreateAgent_args__isset {
  _MAJANService_CreateAgent_args__isset() : name(false), template(false), knowledge(false) {}
  bool name :1;
  bool template :1;
  bool knowledge :1;
} _MAJANService_CreateAgent_args__isset;

class MAJANService_CreateAgent_args {
 public:

  MAJANService_CreateAgent_args(const MAJANService_CreateAgent_args&);
  MAJANService_CreateAgent_args& operator=(const MAJANService_CreateAgent_args&);
  MAJANService_CreateAgent_args() : name(), template() {
  }

  virtual ~MAJANService_CreateAgent_args() noexcept;
  std::string name;
  std::string template;
  MRDFGraph knowledge;

  _MAJANService_CreateAgent_args__isset __isset;

  void __set_name(const std::string& val);

  void __set_template(const std::string& val);

  void __set_knowledge(const MRDFGraph& val);

  bool operator == (const MAJANService_CreateAgent_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(template == rhs.template))
      return false;
    if (!(knowledge == rhs.knowledge))
      return false;
    return true;
  }
  bool operator != (const MAJANService_CreateAgent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MAJANService_CreateAgent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MAJANService_CreateAgent_pargs {
 public:


  virtual ~MAJANService_CreateAgent_pargs() noexcept;
  const std::string* name;
  const std::string* template;
  const MRDFGraph* knowledge;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MAJANService_CreateAgent_result__isset {
  _MAJANService_CreateAgent_result__isset() : success(false) {}
  bool success :1;
} _MAJANService_CreateAgent_result__isset;

class MAJANService_CreateAgent_result {
 public:

  MAJANService_CreateAgent_result(const MAJANService_CreateAgent_result&);
  MAJANService_CreateAgent_result& operator=(const MAJANService_CreateAgent_result&);
  MAJANService_CreateAgent_result() : success() {
  }

  virtual ~MAJANService_CreateAgent_result() noexcept;
  std::string success;

  _MAJANService_CreateAgent_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MAJANService_CreateAgent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MAJANService_CreateAgent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MAJANService_CreateAgent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MAJANService_CreateAgent_presult__isset {
  _MAJANService_CreateAgent_presult__isset() : success(false) {}
  bool success :1;
} _MAJANService_CreateAgent_presult__isset;

class MAJANService_CreateAgent_presult {
 public:


  virtual ~MAJANService_CreateAgent_presult() noexcept;
  std::string* success;

  _MAJANService_CreateAgent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MAJANService_DeleteAgent_args__isset {
  _MAJANService_DeleteAgent_args__isset() : agentName(false) {}
  bool agentName :1;
} _MAJANService_DeleteAgent_args__isset;

class MAJANService_DeleteAgent_args {
 public:

  MAJANService_DeleteAgent_args(const MAJANService_DeleteAgent_args&);
  MAJANService_DeleteAgent_args& operator=(const MAJANService_DeleteAgent_args&);
  MAJANService_DeleteAgent_args() : agentName() {
  }

  virtual ~MAJANService_DeleteAgent_args() noexcept;
  std::string agentName;

  _MAJANService_DeleteAgent_args__isset __isset;

  void __set_agentName(const std::string& val);

  bool operator == (const MAJANService_DeleteAgent_args & rhs) const
  {
    if (!(agentName == rhs.agentName))
      return false;
    return true;
  }
  bool operator != (const MAJANService_DeleteAgent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MAJANService_DeleteAgent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MAJANService_DeleteAgent_pargs {
 public:


  virtual ~MAJANService_DeleteAgent_pargs() noexcept;
  const std::string* agentName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MAJANService_DeleteAgent_result__isset {
  _MAJANService_DeleteAgent_result__isset() : success(false) {}
  bool success :1;
} _MAJANService_DeleteAgent_result__isset;

class MAJANService_DeleteAgent_result {
 public:

  MAJANService_DeleteAgent_result(const MAJANService_DeleteAgent_result&);
  MAJANService_DeleteAgent_result& operator=(const MAJANService_DeleteAgent_result&);
  MAJANService_DeleteAgent_result() : success(0) {
  }

  virtual ~MAJANService_DeleteAgent_result() noexcept;
  bool success;

  _MAJANService_DeleteAgent_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const MAJANService_DeleteAgent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MAJANService_DeleteAgent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MAJANService_DeleteAgent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MAJANService_DeleteAgent_presult__isset {
  _MAJANService_DeleteAgent_presult__isset() : success(false) {}
  bool success :1;
} _MAJANService_DeleteAgent_presult__isset;

class MAJANService_DeleteAgent_presult {
 public:


  virtual ~MAJANService_DeleteAgent_presult() noexcept;
  bool* success;

  _MAJANService_DeleteAgent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MAJANService_ExecuteAgent_args__isset {
  _MAJANService_ExecuteAgent_args__isset() : agentName(false), endpoint(false), content(false) {}
  bool agentName :1;
  bool endpoint :1;
  bool content :1;
} _MAJANService_ExecuteAgent_args__isset;

class MAJANService_ExecuteAgent_args {
 public:

  MAJANService_ExecuteAgent_args(const MAJANService_ExecuteAgent_args&);
  MAJANService_ExecuteAgent_args& operator=(const MAJANService_ExecuteAgent_args&);
  MAJANService_ExecuteAgent_args() : agentName(), endpoint() {
  }

  virtual ~MAJANService_ExecuteAgent_args() noexcept;
  std::string agentName;
  std::string endpoint;
  MRDFGraph content;

  _MAJANService_ExecuteAgent_args__isset __isset;

  void __set_agentName(const std::string& val);

  void __set_endpoint(const std::string& val);

  void __set_content(const MRDFGraph& val);

  bool operator == (const MAJANService_ExecuteAgent_args & rhs) const
  {
    if (!(agentName == rhs.agentName))
      return false;
    if (!(endpoint == rhs.endpoint))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const MAJANService_ExecuteAgent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MAJANService_ExecuteAgent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MAJANService_ExecuteAgent_pargs {
 public:


  virtual ~MAJANService_ExecuteAgent_pargs() noexcept;
  const std::string* agentName;
  const std::string* endpoint;
  const MRDFGraph* content;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MAJANService_ExecuteAgent_result__isset {
  _MAJANService_ExecuteAgent_result__isset() : success(false) {}
  bool success :1;
} _MAJANService_ExecuteAgent_result__isset;

class MAJANService_ExecuteAgent_result {
 public:

  MAJANService_ExecuteAgent_result(const MAJANService_ExecuteAgent_result&);
  MAJANService_ExecuteAgent_result& operator=(const MAJANService_ExecuteAgent_result&);
  MAJANService_ExecuteAgent_result() : success() {
  }

  virtual ~MAJANService_ExecuteAgent_result() noexcept;
  std::string success;

  _MAJANService_ExecuteAgent_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MAJANService_ExecuteAgent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MAJANService_ExecuteAgent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MAJANService_ExecuteAgent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MAJANService_ExecuteAgent_presult__isset {
  _MAJANService_ExecuteAgent_presult__isset() : success(false) {}
  bool success :1;
} _MAJANService_ExecuteAgent_presult__isset;

class MAJANService_ExecuteAgent_presult {
 public:


  virtual ~MAJANService_ExecuteAgent_presult() noexcept;
  std::string* success;

  _MAJANService_ExecuteAgent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MAJANService_ReceiveAsync_args__isset {
  _MAJANService_ReceiveAsync_args__isset() : actionID(false), answer(false) {}
  bool actionID :1;
  bool answer :1;
} _MAJANService_ReceiveAsync_args__isset;

class MAJANService_ReceiveAsync_args {
 public:

  MAJANService_ReceiveAsync_args(const MAJANService_ReceiveAsync_args&);
  MAJANService_ReceiveAsync_args& operator=(const MAJANService_ReceiveAsync_args&);
  MAJANService_ReceiveAsync_args() : actionID(), answer(0) {
  }

  virtual ~MAJANService_ReceiveAsync_args() noexcept;
  std::string actionID;
  int32_t answer;

  _MAJANService_ReceiveAsync_args__isset __isset;

  void __set_actionID(const std::string& val);

  void __set_answer(const int32_t val);

  bool operator == (const MAJANService_ReceiveAsync_args & rhs) const
  {
    if (!(actionID == rhs.actionID))
      return false;
    if (!(answer == rhs.answer))
      return false;
    return true;
  }
  bool operator != (const MAJANService_ReceiveAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MAJANService_ReceiveAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MAJANService_ReceiveAsync_pargs {
 public:


  virtual ~MAJANService_ReceiveAsync_pargs() noexcept;
  const std::string* actionID;
  const int32_t* answer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MAJANService_ReceiveAsync_result {
 public:

  MAJANService_ReceiveAsync_result(const MAJANService_ReceiveAsync_result&);
  MAJANService_ReceiveAsync_result& operator=(const MAJANService_ReceiveAsync_result&);
  MAJANService_ReceiveAsync_result() {
  }

  virtual ~MAJANService_ReceiveAsync_result() noexcept;

  bool operator == (const MAJANService_ReceiveAsync_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MAJANService_ReceiveAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MAJANService_ReceiveAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MAJANService_ReceiveAsync_presult {
 public:


  virtual ~MAJANService_ReceiveAsync_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MAJANServiceClient : virtual public MAJANServiceIf {
 public:
  MAJANServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MAJANServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void CreateAgent(std::string& _return, const std::string& name, const std::string& template, const MRDFGraph& knowledge);
  void send_CreateAgent(const std::string& name, const std::string& template, const MRDFGraph& knowledge);
  void recv_CreateAgent(std::string& _return);
  bool DeleteAgent(const std::string& agentName);
  void send_DeleteAgent(const std::string& agentName);
  bool recv_DeleteAgent();
  void ExecuteAgent(std::string& _return, const std::string& agentName, const std::string& endpoint, const MRDFGraph& content);
  void send_ExecuteAgent(const std::string& agentName, const std::string& endpoint, const MRDFGraph& content);
  void recv_ExecuteAgent(std::string& _return);
  void ReceiveAsync(const std::string& actionID, const int32_t answer);
  void send_ReceiveAsync(const std::string& actionID, const int32_t answer);
  void recv_ReceiveAsync();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MAJANServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<MAJANServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MAJANServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_CreateAgent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteAgent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ExecuteAgent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReceiveAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MAJANServiceProcessor(::std::shared_ptr<MAJANServiceIf> iface) :
    iface_(iface) {
    processMap_["CreateAgent"] = &MAJANServiceProcessor::process_CreateAgent;
    processMap_["DeleteAgent"] = &MAJANServiceProcessor::process_DeleteAgent;
    processMap_["ExecuteAgent"] = &MAJANServiceProcessor::process_ExecuteAgent;
    processMap_["ReceiveAsync"] = &MAJANServiceProcessor::process_ReceiveAsync;
  }

  virtual ~MAJANServiceProcessor() {}
};

class MAJANServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MAJANServiceProcessorFactory(const ::std::shared_ptr< MAJANServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MAJANServiceIfFactory > handlerFactory_;
};

class MAJANServiceMultiface : virtual public MAJANServiceIf {
 public:
  MAJANServiceMultiface(std::vector<std::shared_ptr<MAJANServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MAJANServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<MAJANServiceIf> > ifaces_;
  MAJANServiceMultiface() {}
  void add(::std::shared_ptr<MAJANServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void CreateAgent(std::string& _return, const std::string& name, const std::string& template, const MRDFGraph& knowledge) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateAgent(_return, name, template, knowledge);
    }
    ifaces_[i]->CreateAgent(_return, name, template, knowledge);
    return;
  }

  bool DeleteAgent(const std::string& agentName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteAgent(agentName);
    }
    return ifaces_[i]->DeleteAgent(agentName);
  }

  void ExecuteAgent(std::string& _return, const std::string& agentName, const std::string& endpoint, const MRDFGraph& content) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ExecuteAgent(_return, agentName, endpoint, content);
    }
    ifaces_[i]->ExecuteAgent(_return, agentName, endpoint, content);
    return;
  }

  void ReceiveAsync(const std::string& actionID, const int32_t answer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReceiveAsync(actionID, answer);
    }
    ifaces_[i]->ReceiveAsync(actionID, answer);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MAJANServiceConcurrentClient : virtual public MAJANServiceIf {
 public:
  MAJANServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  MAJANServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void CreateAgent(std::string& _return, const std::string& name, const std::string& template, const MRDFGraph& knowledge);
  int32_t send_CreateAgent(const std::string& name, const std::string& template, const MRDFGraph& knowledge);
  void recv_CreateAgent(std::string& _return, const int32_t seqid);
  bool DeleteAgent(const std::string& agentName);
  int32_t send_DeleteAgent(const std::string& agentName);
  bool recv_DeleteAgent(const int32_t seqid);
  void ExecuteAgent(std::string& _return, const std::string& agentName, const std::string& endpoint, const MRDFGraph& content);
  int32_t send_ExecuteAgent(const std::string& agentName, const std::string& endpoint, const MRDFGraph& content);
  void recv_ExecuteAgent(std::string& _return, const int32_t seqid);
  void ReceiveAsync(const std::string& actionID, const int32_t answer);
  int32_t send_ReceiveAsync(const std::string& actionID, const int32_t answer);
  void recv_ReceiveAsync(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
