/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{
  public partial class MAJANService {
    public interface ISync {
      string CreateAgent(string name, string template, MRDFGraph knowledge);
      bool DeleteAgent(string agentName);
      string ExecuteAgent(string agentName, string endpoint, MRDFGraph content);
      void ReceiveAsync(string actionID, int answer);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_CreateAgent(AsyncCallback callback, object state, string name, string template, MRDFGraph knowledge);
      string End_CreateAgent(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteAgent(AsyncCallback callback, object state, string agentName);
      bool End_DeleteAgent(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_ExecuteAgent(AsyncCallback callback, object state, string agentName, string endpoint, MRDFGraph content);
      string End_ExecuteAgent(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_ReceiveAsync(AsyncCallback callback, object state, string actionID, int answer);
      void End_ReceiveAsync(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_CreateAgent(AsyncCallback callback, object state, string name, string template, MRDFGraph knowledge)
      {
        return send_CreateAgent(callback, state, name, template, knowledge);
      }

      public string End_CreateAgent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CreateAgent();
      }

      #endif

      public string CreateAgent(string name, string template, MRDFGraph knowledge)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_CreateAgent(null, null, name, template, knowledge);
        return End_CreateAgent(asyncResult);

        #else
        send_CreateAgent(name, template, knowledge);
        return recv_CreateAgent();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CreateAgent(AsyncCallback callback, object state, string name, string template, MRDFGraph knowledge)
      {
        oprot_.WriteMessageBegin(new TMessage("CreateAgent", TMessageType.Call, seqid_));
        CreateAgent_args args = new CreateAgent_args();
        args.Name = name;
        args.Template = template;
        args.Knowledge = knowledge;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_CreateAgent(string name, string template, MRDFGraph knowledge)
      {
        oprot_.WriteMessageBegin(new TMessage("CreateAgent", TMessageType.Call, seqid_));
        CreateAgent_args args = new CreateAgent_args();
        args.Name = name;
        args.Template = template;
        args.Knowledge = knowledge;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public string recv_CreateAgent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateAgent_result result = new CreateAgent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateAgent failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_DeleteAgent(AsyncCallback callback, object state, string agentName)
      {
        return send_DeleteAgent(callback, state, agentName);
      }

      public bool End_DeleteAgent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DeleteAgent();
      }

      #endif

      public bool DeleteAgent(string agentName)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_DeleteAgent(null, null, agentName);
        return End_DeleteAgent(asyncResult);

        #else
        send_DeleteAgent(agentName);
        return recv_DeleteAgent();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteAgent(AsyncCallback callback, object state, string agentName)
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteAgent", TMessageType.Call, seqid_));
        DeleteAgent_args args = new DeleteAgent_args();
        args.AgentName = agentName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_DeleteAgent(string agentName)
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteAgent", TMessageType.Call, seqid_));
        DeleteAgent_args args = new DeleteAgent_args();
        args.AgentName = agentName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public bool recv_DeleteAgent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteAgent_result result = new DeleteAgent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteAgent failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_ExecuteAgent(AsyncCallback callback, object state, string agentName, string endpoint, MRDFGraph content)
      {
        return send_ExecuteAgent(callback, state, agentName, endpoint, content);
      }

      public string End_ExecuteAgent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ExecuteAgent();
      }

      #endif

      public string ExecuteAgent(string agentName, string endpoint, MRDFGraph content)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_ExecuteAgent(null, null, agentName, endpoint, content);
        return End_ExecuteAgent(asyncResult);

        #else
        send_ExecuteAgent(agentName, endpoint, content);
        return recv_ExecuteAgent();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ExecuteAgent(AsyncCallback callback, object state, string agentName, string endpoint, MRDFGraph content)
      {
        oprot_.WriteMessageBegin(new TMessage("ExecuteAgent", TMessageType.Call, seqid_));
        ExecuteAgent_args args = new ExecuteAgent_args();
        args.AgentName = agentName;
        args.Endpoint = endpoint;
        args.Content = content;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_ExecuteAgent(string agentName, string endpoint, MRDFGraph content)
      {
        oprot_.WriteMessageBegin(new TMessage("ExecuteAgent", TMessageType.Call, seqid_));
        ExecuteAgent_args args = new ExecuteAgent_args();
        args.AgentName = agentName;
        args.Endpoint = endpoint;
        args.Content = content;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public string recv_ExecuteAgent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ExecuteAgent_result result = new ExecuteAgent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ExecuteAgent failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_ReceiveAsync(AsyncCallback callback, object state, string actionID, int answer)
      {
        return send_ReceiveAsync(callback, state, actionID, answer);
      }

      public void End_ReceiveAsync(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_ReceiveAsync();
      }

      #endif

      public void ReceiveAsync(string actionID, int answer)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_ReceiveAsync(null, null, actionID, answer);
        End_ReceiveAsync(asyncResult);

        #else
        send_ReceiveAsync(actionID, answer);
        recv_ReceiveAsync();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ReceiveAsync(AsyncCallback callback, object state, string actionID, int answer)
      {
        oprot_.WriteMessageBegin(new TMessage("ReceiveAsync", TMessageType.Call, seqid_));
        ReceiveAsync_args args = new ReceiveAsync_args();
        args.ActionID = actionID;
        args.Answer = answer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_ReceiveAsync(string actionID, int answer)
      {
        oprot_.WriteMessageBegin(new TMessage("ReceiveAsync", TMessageType.Call, seqid_));
        ReceiveAsync_args args = new ReceiveAsync_args();
        args.ActionID = actionID;
        args.Answer = answer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_ReceiveAsync()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReceiveAsync_result result = new ReceiveAsync_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["CreateAgent"] = CreateAgent_Process;
        processMap_["DeleteAgent"] = DeleteAgent_Process;
        processMap_["ExecuteAgent"] = ExecuteAgent_Process;
        processMap_["ReceiveAsync"] = ReceiveAsync_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void CreateAgent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateAgent_args args = new CreateAgent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateAgent_result result = new CreateAgent_result();
        try
        {
          result.Success = iface_.CreateAgent(args.Name, args.Template, args.Knowledge);
          oprot.WriteMessageBegin(new TMessage("CreateAgent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("CreateAgent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteAgent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteAgent_args args = new DeleteAgent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteAgent_result result = new DeleteAgent_result();
        try
        {
          result.Success = iface_.DeleteAgent(args.AgentName);
          oprot.WriteMessageBegin(new TMessage("DeleteAgent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("DeleteAgent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ExecuteAgent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ExecuteAgent_args args = new ExecuteAgent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ExecuteAgent_result result = new ExecuteAgent_result();
        try
        {
          result.Success = iface_.ExecuteAgent(args.AgentName, args.Endpoint, args.Content);
          oprot.WriteMessageBegin(new TMessage("ExecuteAgent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ExecuteAgent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReceiveAsync_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReceiveAsync_args args = new ReceiveAsync_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReceiveAsync_result result = new ReceiveAsync_result();
        try
        {
          iface_.ReceiveAsync(args.ActionID, args.Answer);
          oprot.WriteMessageBegin(new TMessage("ReceiveAsync", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ReceiveAsync", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateAgent_args : TBase
    {
      private string _name;
      private string _template;
      private MRDFGraph _knowledge;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string Template
      {
        get
        {
          return _template;
        }
        set
        {
          __isset.template = true;
          this._template = value;
        }
      }

      public MRDFGraph Knowledge
      {
        get
        {
          return _knowledge;
        }
        set
        {
          __isset.knowledge = true;
          this._knowledge = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool template;
        public bool knowledge;
      }

      public CreateAgent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Template = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Knowledge = new MRDFGraph();
                  Knowledge.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CreateAgent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          if (Template != null && __isset.template) {
            field.Name = "template";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Template);
            oprot.WriteFieldEnd();
          }
          if (Knowledge != null && __isset.knowledge) {
            field.Name = "knowledge";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Knowledge.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateAgent_args(");
        bool __first = true;
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (Template != null && __isset.template) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Template: ");
          __sb.Append(Template);
        }
        if (Knowledge != null && __isset.knowledge) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Knowledge: ");
          __sb.Append(Knowledge== null ? "<null>" : Knowledge.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateAgent_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CreateAgent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CreateAgent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateAgent_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteAgent_args : TBase
    {
      private string _agentName;

      public string AgentName
      {
        get
        {
          return _agentName;
        }
        set
        {
          __isset.agentName = true;
          this._agentName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool agentName;
      }

      public DeleteAgent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AgentName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DeleteAgent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AgentName != null && __isset.agentName) {
            field.Name = "agentName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AgentName);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DeleteAgent_args(");
        bool __first = true;
        if (AgentName != null && __isset.agentName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AgentName: ");
          __sb.Append(AgentName);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteAgent_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DeleteAgent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DeleteAgent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DeleteAgent_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ExecuteAgent_args : TBase
    {
      private string _agentName;
      private string _endpoint;
      private MRDFGraph _content;

      public string AgentName
      {
        get
        {
          return _agentName;
        }
        set
        {
          __isset.agentName = true;
          this._agentName = value;
        }
      }

      public string Endpoint
      {
        get
        {
          return _endpoint;
        }
        set
        {
          __isset.endpoint = true;
          this._endpoint = value;
        }
      }

      public MRDFGraph Content
      {
        get
        {
          return _content;
        }
        set
        {
          __isset.content = true;
          this._content = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool agentName;
        public bool endpoint;
        public bool content;
      }

      public ExecuteAgent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AgentName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Endpoint = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Content = new MRDFGraph();
                  Content.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ExecuteAgent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AgentName != null && __isset.agentName) {
            field.Name = "agentName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AgentName);
            oprot.WriteFieldEnd();
          }
          if (Endpoint != null && __isset.endpoint) {
            field.Name = "endpoint";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Endpoint);
            oprot.WriteFieldEnd();
          }
          if (Content != null && __isset.content) {
            field.Name = "content";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Content.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ExecuteAgent_args(");
        bool __first = true;
        if (AgentName != null && __isset.agentName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AgentName: ");
          __sb.Append(AgentName);
        }
        if (Endpoint != null && __isset.endpoint) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Endpoint: ");
          __sb.Append(Endpoint);
        }
        if (Content != null && __isset.content) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Content: ");
          __sb.Append(Content== null ? "<null>" : Content.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ExecuteAgent_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ExecuteAgent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ExecuteAgent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ExecuteAgent_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ReceiveAsync_args : TBase
    {
      private string _actionID;
      private int _answer;

      public string ActionID
      {
        get
        {
          return _actionID;
        }
        set
        {
          __isset.actionID = true;
          this._actionID = value;
        }
      }

      public int Answer
      {
        get
        {
          return _answer;
        }
        set
        {
          __isset.answer = true;
          this._answer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool actionID;
        public bool answer;
      }

      public ReceiveAsync_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ActionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Answer = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ReceiveAsync_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ActionID != null && __isset.actionID) {
            field.Name = "actionID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ActionID);
            oprot.WriteFieldEnd();
          }
          if (__isset.answer) {
            field.Name = "answer";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Answer);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ReceiveAsync_args(");
        bool __first = true;
        if (ActionID != null && __isset.actionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActionID: ");
          __sb.Append(ActionID);
        }
        if (__isset.answer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Answer: ");
          __sb.Append(Answer);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ReceiveAsync_result : TBase
    {

      public ReceiveAsync_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ReceiveAsync_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ReceiveAsync_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
