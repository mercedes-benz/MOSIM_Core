/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MotionModelUnit_H
#define MotionModelUnit_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "mmu_types.h"

namespace MMIStandard {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MotionModelUnitIf {
 public:
  virtual ~MotionModelUnitIf() {}
  virtual void Initialize( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MAvatarDescription& avatarDescription, const std::map<std::string, std::string> & properties) = 0;
  virtual void AssignInstruction( ::MMIStandard::MBoolResponse& _return, const MInstruction& motionInstruction, const MSimulationState& simulationState) = 0;
  virtual void DoStep(MSimulationResult& _return, const double time, const MSimulationState& simulationState) = 0;
  virtual void GetBoundaryConstraints(std::vector< ::MMIStandard::MConstraint> & _return, const MInstruction& instruction) = 0;
  virtual void CheckPrerequisites( ::MMIStandard::MBoolResponse& _return, const MInstruction& instruction) = 0;
  virtual void Abort( ::MMIStandard::MBoolResponse& _return, const std::string& instructionId) = 0;
  virtual void Dispose( ::MMIStandard::MBoolResponse& _return, const std::map<std::string, std::string> & parameters) = 0;
  virtual void CreateCheckpoint(std::string& _return) = 0;
  virtual void RestoreCheckpoint( ::MMIStandard::MBoolResponse& _return, const std::string& data) = 0;
  virtual void ExecuteFunction(std::map<std::string, std::string> & _return, const std::string& name, const std::map<std::string, std::string> & parameters) = 0;
};

class MotionModelUnitIfFactory {
 public:
  typedef MotionModelUnitIf Handler;

  virtual ~MotionModelUnitIfFactory() {}

  virtual MotionModelUnitIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MotionModelUnitIf* /* handler */) = 0;
};

class MotionModelUnitIfSingletonFactory : virtual public MotionModelUnitIfFactory {
 public:
  MotionModelUnitIfSingletonFactory(const ::std::shared_ptr<MotionModelUnitIf>& iface) : iface_(iface) {}
  virtual ~MotionModelUnitIfSingletonFactory() {}

  virtual MotionModelUnitIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MotionModelUnitIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MotionModelUnitIf> iface_;
};

class MotionModelUnitNull : virtual public MotionModelUnitIf {
 public:
  virtual ~MotionModelUnitNull() {}
  void Initialize( ::MMIStandard::MBoolResponse& /* _return */, const  ::MMIStandard::MAvatarDescription& /* avatarDescription */, const std::map<std::string, std::string> & /* properties */) {
    return;
  }
  void AssignInstruction( ::MMIStandard::MBoolResponse& /* _return */, const MInstruction& /* motionInstruction */, const MSimulationState& /* simulationState */) {
    return;
  }
  void DoStep(MSimulationResult& /* _return */, const double /* time */, const MSimulationState& /* simulationState */) {
    return;
  }
  void GetBoundaryConstraints(std::vector< ::MMIStandard::MConstraint> & /* _return */, const MInstruction& /* instruction */) {
    return;
  }
  void CheckPrerequisites( ::MMIStandard::MBoolResponse& /* _return */, const MInstruction& /* instruction */) {
    return;
  }
  void Abort( ::MMIStandard::MBoolResponse& /* _return */, const std::string& /* instructionId */) {
    return;
  }
  void Dispose( ::MMIStandard::MBoolResponse& /* _return */, const std::map<std::string, std::string> & /* parameters */) {
    return;
  }
  void CreateCheckpoint(std::string& /* _return */) {
    return;
  }
  void RestoreCheckpoint( ::MMIStandard::MBoolResponse& /* _return */, const std::string& /* data */) {
    return;
  }
  void ExecuteFunction(std::map<std::string, std::string> & /* _return */, const std::string& /* name */, const std::map<std::string, std::string> & /* parameters */) {
    return;
  }
};

typedef struct _MotionModelUnit_Initialize_args__isset {
  _MotionModelUnit_Initialize_args__isset() : avatarDescription(false), properties(false) {}
  bool avatarDescription :1;
  bool properties :1;
} _MotionModelUnit_Initialize_args__isset;

class MotionModelUnit_Initialize_args {
 public:

  MotionModelUnit_Initialize_args(const MotionModelUnit_Initialize_args&);
  MotionModelUnit_Initialize_args& operator=(const MotionModelUnit_Initialize_args&);
  MotionModelUnit_Initialize_args() {
  }

  virtual ~MotionModelUnit_Initialize_args() noexcept;
   ::MMIStandard::MAvatarDescription avatarDescription;
  std::map<std::string, std::string>  properties;

  _MotionModelUnit_Initialize_args__isset __isset;

  void __set_avatarDescription(const  ::MMIStandard::MAvatarDescription& val);

  void __set_properties(const std::map<std::string, std::string> & val);

  bool operator == (const MotionModelUnit_Initialize_args & rhs) const
  {
    if (!(avatarDescription == rhs.avatarDescription))
      return false;
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_Initialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_Initialize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MotionModelUnit_Initialize_pargs {
 public:


  virtual ~MotionModelUnit_Initialize_pargs() noexcept;
  const  ::MMIStandard::MAvatarDescription* avatarDescription;
  const std::map<std::string, std::string> * properties;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_Initialize_result__isset {
  _MotionModelUnit_Initialize_result__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_Initialize_result__isset;

class MotionModelUnit_Initialize_result {
 public:

  MotionModelUnit_Initialize_result(const MotionModelUnit_Initialize_result&);
  MotionModelUnit_Initialize_result& operator=(const MotionModelUnit_Initialize_result&);
  MotionModelUnit_Initialize_result() {
  }

  virtual ~MotionModelUnit_Initialize_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MotionModelUnit_Initialize_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MotionModelUnit_Initialize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_Initialize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_Initialize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_Initialize_presult__isset {
  _MotionModelUnit_Initialize_presult__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_Initialize_presult__isset;

class MotionModelUnit_Initialize_presult {
 public:


  virtual ~MotionModelUnit_Initialize_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MotionModelUnit_Initialize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MotionModelUnit_AssignInstruction_args__isset {
  _MotionModelUnit_AssignInstruction_args__isset() : motionInstruction(false), simulationState(false) {}
  bool motionInstruction :1;
  bool simulationState :1;
} _MotionModelUnit_AssignInstruction_args__isset;

class MotionModelUnit_AssignInstruction_args {
 public:

  MotionModelUnit_AssignInstruction_args(const MotionModelUnit_AssignInstruction_args&);
  MotionModelUnit_AssignInstruction_args& operator=(const MotionModelUnit_AssignInstruction_args&);
  MotionModelUnit_AssignInstruction_args() {
  }

  virtual ~MotionModelUnit_AssignInstruction_args() noexcept;
  MInstruction motionInstruction;
  MSimulationState simulationState;

  _MotionModelUnit_AssignInstruction_args__isset __isset;

  void __set_motionInstruction(const MInstruction& val);

  void __set_simulationState(const MSimulationState& val);

  bool operator == (const MotionModelUnit_AssignInstruction_args & rhs) const
  {
    if (!(motionInstruction == rhs.motionInstruction))
      return false;
    if (!(simulationState == rhs.simulationState))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_AssignInstruction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_AssignInstruction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MotionModelUnit_AssignInstruction_pargs {
 public:


  virtual ~MotionModelUnit_AssignInstruction_pargs() noexcept;
  const MInstruction* motionInstruction;
  const MSimulationState* simulationState;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_AssignInstruction_result__isset {
  _MotionModelUnit_AssignInstruction_result__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_AssignInstruction_result__isset;

class MotionModelUnit_AssignInstruction_result {
 public:

  MotionModelUnit_AssignInstruction_result(const MotionModelUnit_AssignInstruction_result&);
  MotionModelUnit_AssignInstruction_result& operator=(const MotionModelUnit_AssignInstruction_result&);
  MotionModelUnit_AssignInstruction_result() {
  }

  virtual ~MotionModelUnit_AssignInstruction_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MotionModelUnit_AssignInstruction_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MotionModelUnit_AssignInstruction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_AssignInstruction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_AssignInstruction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_AssignInstruction_presult__isset {
  _MotionModelUnit_AssignInstruction_presult__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_AssignInstruction_presult__isset;

class MotionModelUnit_AssignInstruction_presult {
 public:


  virtual ~MotionModelUnit_AssignInstruction_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MotionModelUnit_AssignInstruction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MotionModelUnit_DoStep_args__isset {
  _MotionModelUnit_DoStep_args__isset() : time(false), simulationState(false) {}
  bool time :1;
  bool simulationState :1;
} _MotionModelUnit_DoStep_args__isset;

class MotionModelUnit_DoStep_args {
 public:

  MotionModelUnit_DoStep_args(const MotionModelUnit_DoStep_args&);
  MotionModelUnit_DoStep_args& operator=(const MotionModelUnit_DoStep_args&);
  MotionModelUnit_DoStep_args() : time(0) {
  }

  virtual ~MotionModelUnit_DoStep_args() noexcept;
  double time;
  MSimulationState simulationState;

  _MotionModelUnit_DoStep_args__isset __isset;

  void __set_time(const double val);

  void __set_simulationState(const MSimulationState& val);

  bool operator == (const MotionModelUnit_DoStep_args & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(simulationState == rhs.simulationState))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_DoStep_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_DoStep_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MotionModelUnit_DoStep_pargs {
 public:


  virtual ~MotionModelUnit_DoStep_pargs() noexcept;
  const double* time;
  const MSimulationState* simulationState;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_DoStep_result__isset {
  _MotionModelUnit_DoStep_result__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_DoStep_result__isset;

class MotionModelUnit_DoStep_result {
 public:

  MotionModelUnit_DoStep_result(const MotionModelUnit_DoStep_result&);
  MotionModelUnit_DoStep_result& operator=(const MotionModelUnit_DoStep_result&);
  MotionModelUnit_DoStep_result() {
  }

  virtual ~MotionModelUnit_DoStep_result() noexcept;
  MSimulationResult success;

  _MotionModelUnit_DoStep_result__isset __isset;

  void __set_success(const MSimulationResult& val);

  bool operator == (const MotionModelUnit_DoStep_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_DoStep_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_DoStep_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_DoStep_presult__isset {
  _MotionModelUnit_DoStep_presult__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_DoStep_presult__isset;

class MotionModelUnit_DoStep_presult {
 public:


  virtual ~MotionModelUnit_DoStep_presult() noexcept;
  MSimulationResult* success;

  _MotionModelUnit_DoStep_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MotionModelUnit_GetBoundaryConstraints_args__isset {
  _MotionModelUnit_GetBoundaryConstraints_args__isset() : instruction(false) {}
  bool instruction :1;
} _MotionModelUnit_GetBoundaryConstraints_args__isset;

class MotionModelUnit_GetBoundaryConstraints_args {
 public:

  MotionModelUnit_GetBoundaryConstraints_args(const MotionModelUnit_GetBoundaryConstraints_args&);
  MotionModelUnit_GetBoundaryConstraints_args& operator=(const MotionModelUnit_GetBoundaryConstraints_args&);
  MotionModelUnit_GetBoundaryConstraints_args() {
  }

  virtual ~MotionModelUnit_GetBoundaryConstraints_args() noexcept;
  MInstruction instruction;

  _MotionModelUnit_GetBoundaryConstraints_args__isset __isset;

  void __set_instruction(const MInstruction& val);

  bool operator == (const MotionModelUnit_GetBoundaryConstraints_args & rhs) const
  {
    if (!(instruction == rhs.instruction))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_GetBoundaryConstraints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_GetBoundaryConstraints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MotionModelUnit_GetBoundaryConstraints_pargs {
 public:


  virtual ~MotionModelUnit_GetBoundaryConstraints_pargs() noexcept;
  const MInstruction* instruction;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_GetBoundaryConstraints_result__isset {
  _MotionModelUnit_GetBoundaryConstraints_result__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_GetBoundaryConstraints_result__isset;

class MotionModelUnit_GetBoundaryConstraints_result {
 public:

  MotionModelUnit_GetBoundaryConstraints_result(const MotionModelUnit_GetBoundaryConstraints_result&);
  MotionModelUnit_GetBoundaryConstraints_result& operator=(const MotionModelUnit_GetBoundaryConstraints_result&);
  MotionModelUnit_GetBoundaryConstraints_result() {
  }

  virtual ~MotionModelUnit_GetBoundaryConstraints_result() noexcept;
  std::vector< ::MMIStandard::MConstraint>  success;

  _MotionModelUnit_GetBoundaryConstraints_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MConstraint> & val);

  bool operator == (const MotionModelUnit_GetBoundaryConstraints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_GetBoundaryConstraints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_GetBoundaryConstraints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_GetBoundaryConstraints_presult__isset {
  _MotionModelUnit_GetBoundaryConstraints_presult__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_GetBoundaryConstraints_presult__isset;

class MotionModelUnit_GetBoundaryConstraints_presult {
 public:


  virtual ~MotionModelUnit_GetBoundaryConstraints_presult() noexcept;
  std::vector< ::MMIStandard::MConstraint> * success;

  _MotionModelUnit_GetBoundaryConstraints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MotionModelUnit_CheckPrerequisites_args__isset {
  _MotionModelUnit_CheckPrerequisites_args__isset() : instruction(false) {}
  bool instruction :1;
} _MotionModelUnit_CheckPrerequisites_args__isset;

class MotionModelUnit_CheckPrerequisites_args {
 public:

  MotionModelUnit_CheckPrerequisites_args(const MotionModelUnit_CheckPrerequisites_args&);
  MotionModelUnit_CheckPrerequisites_args& operator=(const MotionModelUnit_CheckPrerequisites_args&);
  MotionModelUnit_CheckPrerequisites_args() {
  }

  virtual ~MotionModelUnit_CheckPrerequisites_args() noexcept;
  MInstruction instruction;

  _MotionModelUnit_CheckPrerequisites_args__isset __isset;

  void __set_instruction(const MInstruction& val);

  bool operator == (const MotionModelUnit_CheckPrerequisites_args & rhs) const
  {
    if (!(instruction == rhs.instruction))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_CheckPrerequisites_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_CheckPrerequisites_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MotionModelUnit_CheckPrerequisites_pargs {
 public:


  virtual ~MotionModelUnit_CheckPrerequisites_pargs() noexcept;
  const MInstruction* instruction;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_CheckPrerequisites_result__isset {
  _MotionModelUnit_CheckPrerequisites_result__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_CheckPrerequisites_result__isset;

class MotionModelUnit_CheckPrerequisites_result {
 public:

  MotionModelUnit_CheckPrerequisites_result(const MotionModelUnit_CheckPrerequisites_result&);
  MotionModelUnit_CheckPrerequisites_result& operator=(const MotionModelUnit_CheckPrerequisites_result&);
  MotionModelUnit_CheckPrerequisites_result() {
  }

  virtual ~MotionModelUnit_CheckPrerequisites_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MotionModelUnit_CheckPrerequisites_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MotionModelUnit_CheckPrerequisites_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_CheckPrerequisites_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_CheckPrerequisites_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_CheckPrerequisites_presult__isset {
  _MotionModelUnit_CheckPrerequisites_presult__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_CheckPrerequisites_presult__isset;

class MotionModelUnit_CheckPrerequisites_presult {
 public:


  virtual ~MotionModelUnit_CheckPrerequisites_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MotionModelUnit_CheckPrerequisites_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MotionModelUnit_Abort_args__isset {
  _MotionModelUnit_Abort_args__isset() : instructionId(false) {}
  bool instructionId :1;
} _MotionModelUnit_Abort_args__isset;

class MotionModelUnit_Abort_args {
 public:

  MotionModelUnit_Abort_args(const MotionModelUnit_Abort_args&);
  MotionModelUnit_Abort_args& operator=(const MotionModelUnit_Abort_args&);
  MotionModelUnit_Abort_args() : instructionId() {
  }

  virtual ~MotionModelUnit_Abort_args() noexcept;
  std::string instructionId;

  _MotionModelUnit_Abort_args__isset __isset;

  void __set_instructionId(const std::string& val);

  bool operator == (const MotionModelUnit_Abort_args & rhs) const
  {
    if (!(instructionId == rhs.instructionId))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_Abort_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_Abort_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MotionModelUnit_Abort_pargs {
 public:


  virtual ~MotionModelUnit_Abort_pargs() noexcept;
  const std::string* instructionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_Abort_result__isset {
  _MotionModelUnit_Abort_result__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_Abort_result__isset;

class MotionModelUnit_Abort_result {
 public:

  MotionModelUnit_Abort_result(const MotionModelUnit_Abort_result&);
  MotionModelUnit_Abort_result& operator=(const MotionModelUnit_Abort_result&);
  MotionModelUnit_Abort_result() {
  }

  virtual ~MotionModelUnit_Abort_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MotionModelUnit_Abort_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MotionModelUnit_Abort_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_Abort_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_Abort_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_Abort_presult__isset {
  _MotionModelUnit_Abort_presult__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_Abort_presult__isset;

class MotionModelUnit_Abort_presult {
 public:


  virtual ~MotionModelUnit_Abort_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MotionModelUnit_Abort_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MotionModelUnit_Dispose_args__isset {
  _MotionModelUnit_Dispose_args__isset() : parameters(false) {}
  bool parameters :1;
} _MotionModelUnit_Dispose_args__isset;

class MotionModelUnit_Dispose_args {
 public:

  MotionModelUnit_Dispose_args(const MotionModelUnit_Dispose_args&);
  MotionModelUnit_Dispose_args& operator=(const MotionModelUnit_Dispose_args&);
  MotionModelUnit_Dispose_args() {
  }

  virtual ~MotionModelUnit_Dispose_args() noexcept;
  std::map<std::string, std::string>  parameters;

  _MotionModelUnit_Dispose_args__isset __isset;

  void __set_parameters(const std::map<std::string, std::string> & val);

  bool operator == (const MotionModelUnit_Dispose_args & rhs) const
  {
    if (!(parameters == rhs.parameters))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_Dispose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_Dispose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MotionModelUnit_Dispose_pargs {
 public:


  virtual ~MotionModelUnit_Dispose_pargs() noexcept;
  const std::map<std::string, std::string> * parameters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_Dispose_result__isset {
  _MotionModelUnit_Dispose_result__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_Dispose_result__isset;

class MotionModelUnit_Dispose_result {
 public:

  MotionModelUnit_Dispose_result(const MotionModelUnit_Dispose_result&);
  MotionModelUnit_Dispose_result& operator=(const MotionModelUnit_Dispose_result&);
  MotionModelUnit_Dispose_result() {
  }

  virtual ~MotionModelUnit_Dispose_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MotionModelUnit_Dispose_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MotionModelUnit_Dispose_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_Dispose_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_Dispose_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_Dispose_presult__isset {
  _MotionModelUnit_Dispose_presult__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_Dispose_presult__isset;

class MotionModelUnit_Dispose_presult {
 public:


  virtual ~MotionModelUnit_Dispose_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MotionModelUnit_Dispose_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MotionModelUnit_CreateCheckpoint_args {
 public:

  MotionModelUnit_CreateCheckpoint_args(const MotionModelUnit_CreateCheckpoint_args&);
  MotionModelUnit_CreateCheckpoint_args& operator=(const MotionModelUnit_CreateCheckpoint_args&);
  MotionModelUnit_CreateCheckpoint_args() {
  }

  virtual ~MotionModelUnit_CreateCheckpoint_args() noexcept;

  bool operator == (const MotionModelUnit_CreateCheckpoint_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MotionModelUnit_CreateCheckpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_CreateCheckpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MotionModelUnit_CreateCheckpoint_pargs {
 public:


  virtual ~MotionModelUnit_CreateCheckpoint_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_CreateCheckpoint_result__isset {
  _MotionModelUnit_CreateCheckpoint_result__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_CreateCheckpoint_result__isset;

class MotionModelUnit_CreateCheckpoint_result {
 public:

  MotionModelUnit_CreateCheckpoint_result(const MotionModelUnit_CreateCheckpoint_result&);
  MotionModelUnit_CreateCheckpoint_result& operator=(const MotionModelUnit_CreateCheckpoint_result&);
  MotionModelUnit_CreateCheckpoint_result() : success() {
  }

  virtual ~MotionModelUnit_CreateCheckpoint_result() noexcept;
  std::string success;

  _MotionModelUnit_CreateCheckpoint_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MotionModelUnit_CreateCheckpoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_CreateCheckpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_CreateCheckpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_CreateCheckpoint_presult__isset {
  _MotionModelUnit_CreateCheckpoint_presult__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_CreateCheckpoint_presult__isset;

class MotionModelUnit_CreateCheckpoint_presult {
 public:


  virtual ~MotionModelUnit_CreateCheckpoint_presult() noexcept;
  std::string* success;

  _MotionModelUnit_CreateCheckpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MotionModelUnit_RestoreCheckpoint_args__isset {
  _MotionModelUnit_RestoreCheckpoint_args__isset() : data(false) {}
  bool data :1;
} _MotionModelUnit_RestoreCheckpoint_args__isset;

class MotionModelUnit_RestoreCheckpoint_args {
 public:

  MotionModelUnit_RestoreCheckpoint_args(const MotionModelUnit_RestoreCheckpoint_args&);
  MotionModelUnit_RestoreCheckpoint_args& operator=(const MotionModelUnit_RestoreCheckpoint_args&);
  MotionModelUnit_RestoreCheckpoint_args() : data() {
  }

  virtual ~MotionModelUnit_RestoreCheckpoint_args() noexcept;
  std::string data;

  _MotionModelUnit_RestoreCheckpoint_args__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const MotionModelUnit_RestoreCheckpoint_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_RestoreCheckpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_RestoreCheckpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MotionModelUnit_RestoreCheckpoint_pargs {
 public:


  virtual ~MotionModelUnit_RestoreCheckpoint_pargs() noexcept;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_RestoreCheckpoint_result__isset {
  _MotionModelUnit_RestoreCheckpoint_result__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_RestoreCheckpoint_result__isset;

class MotionModelUnit_RestoreCheckpoint_result {
 public:

  MotionModelUnit_RestoreCheckpoint_result(const MotionModelUnit_RestoreCheckpoint_result&);
  MotionModelUnit_RestoreCheckpoint_result& operator=(const MotionModelUnit_RestoreCheckpoint_result&);
  MotionModelUnit_RestoreCheckpoint_result() {
  }

  virtual ~MotionModelUnit_RestoreCheckpoint_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MotionModelUnit_RestoreCheckpoint_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MotionModelUnit_RestoreCheckpoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_RestoreCheckpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_RestoreCheckpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_RestoreCheckpoint_presult__isset {
  _MotionModelUnit_RestoreCheckpoint_presult__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_RestoreCheckpoint_presult__isset;

class MotionModelUnit_RestoreCheckpoint_presult {
 public:


  virtual ~MotionModelUnit_RestoreCheckpoint_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MotionModelUnit_RestoreCheckpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MotionModelUnit_ExecuteFunction_args__isset {
  _MotionModelUnit_ExecuteFunction_args__isset() : name(false), parameters(false) {}
  bool name :1;
  bool parameters :1;
} _MotionModelUnit_ExecuteFunction_args__isset;

class MotionModelUnit_ExecuteFunction_args {
 public:

  MotionModelUnit_ExecuteFunction_args(const MotionModelUnit_ExecuteFunction_args&);
  MotionModelUnit_ExecuteFunction_args& operator=(const MotionModelUnit_ExecuteFunction_args&);
  MotionModelUnit_ExecuteFunction_args() : name() {
  }

  virtual ~MotionModelUnit_ExecuteFunction_args() noexcept;
  std::string name;
  std::map<std::string, std::string>  parameters;

  _MotionModelUnit_ExecuteFunction_args__isset __isset;

  void __set_name(const std::string& val);

  void __set_parameters(const std::map<std::string, std::string> & val);

  bool operator == (const MotionModelUnit_ExecuteFunction_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(parameters == rhs.parameters))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_ExecuteFunction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_ExecuteFunction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MotionModelUnit_ExecuteFunction_pargs {
 public:


  virtual ~MotionModelUnit_ExecuteFunction_pargs() noexcept;
  const std::string* name;
  const std::map<std::string, std::string> * parameters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_ExecuteFunction_result__isset {
  _MotionModelUnit_ExecuteFunction_result__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_ExecuteFunction_result__isset;

class MotionModelUnit_ExecuteFunction_result {
 public:

  MotionModelUnit_ExecuteFunction_result(const MotionModelUnit_ExecuteFunction_result&);
  MotionModelUnit_ExecuteFunction_result& operator=(const MotionModelUnit_ExecuteFunction_result&);
  MotionModelUnit_ExecuteFunction_result() {
  }

  virtual ~MotionModelUnit_ExecuteFunction_result() noexcept;
  std::map<std::string, std::string>  success;

  _MotionModelUnit_ExecuteFunction_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const MotionModelUnit_ExecuteFunction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MotionModelUnit_ExecuteFunction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MotionModelUnit_ExecuteFunction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MotionModelUnit_ExecuteFunction_presult__isset {
  _MotionModelUnit_ExecuteFunction_presult__isset() : success(false) {}
  bool success :1;
} _MotionModelUnit_ExecuteFunction_presult__isset;

class MotionModelUnit_ExecuteFunction_presult {
 public:


  virtual ~MotionModelUnit_ExecuteFunction_presult() noexcept;
  std::map<std::string, std::string> * success;

  _MotionModelUnit_ExecuteFunction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MotionModelUnitClient : virtual public MotionModelUnitIf {
 public:
  MotionModelUnitClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MotionModelUnitClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Initialize( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MAvatarDescription& avatarDescription, const std::map<std::string, std::string> & properties);
  void send_Initialize(const  ::MMIStandard::MAvatarDescription& avatarDescription, const std::map<std::string, std::string> & properties);
  void recv_Initialize( ::MMIStandard::MBoolResponse& _return);
  void AssignInstruction( ::MMIStandard::MBoolResponse& _return, const MInstruction& motionInstruction, const MSimulationState& simulationState);
  void send_AssignInstruction(const MInstruction& motionInstruction, const MSimulationState& simulationState);
  void recv_AssignInstruction( ::MMIStandard::MBoolResponse& _return);
  void DoStep(MSimulationResult& _return, const double time, const MSimulationState& simulationState);
  void send_DoStep(const double time, const MSimulationState& simulationState);
  void recv_DoStep(MSimulationResult& _return);
  void GetBoundaryConstraints(std::vector< ::MMIStandard::MConstraint> & _return, const MInstruction& instruction);
  void send_GetBoundaryConstraints(const MInstruction& instruction);
  void recv_GetBoundaryConstraints(std::vector< ::MMIStandard::MConstraint> & _return);
  void CheckPrerequisites( ::MMIStandard::MBoolResponse& _return, const MInstruction& instruction);
  void send_CheckPrerequisites(const MInstruction& instruction);
  void recv_CheckPrerequisites( ::MMIStandard::MBoolResponse& _return);
  void Abort( ::MMIStandard::MBoolResponse& _return, const std::string& instructionId);
  void send_Abort(const std::string& instructionId);
  void recv_Abort( ::MMIStandard::MBoolResponse& _return);
  void Dispose( ::MMIStandard::MBoolResponse& _return, const std::map<std::string, std::string> & parameters);
  void send_Dispose(const std::map<std::string, std::string> & parameters);
  void recv_Dispose( ::MMIStandard::MBoolResponse& _return);
  void CreateCheckpoint(std::string& _return);
  void send_CreateCheckpoint();
  void recv_CreateCheckpoint(std::string& _return);
  void RestoreCheckpoint( ::MMIStandard::MBoolResponse& _return, const std::string& data);
  void send_RestoreCheckpoint(const std::string& data);
  void recv_RestoreCheckpoint( ::MMIStandard::MBoolResponse& _return);
  void ExecuteFunction(std::map<std::string, std::string> & _return, const std::string& name, const std::map<std::string, std::string> & parameters);
  void send_ExecuteFunction(const std::string& name, const std::map<std::string, std::string> & parameters);
  void recv_ExecuteFunction(std::map<std::string, std::string> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MotionModelUnitProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<MotionModelUnitIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MotionModelUnitProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Initialize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AssignInstruction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DoStep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetBoundaryConstraints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CheckPrerequisites(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Abort(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Dispose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateCheckpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RestoreCheckpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ExecuteFunction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MotionModelUnitProcessor(::std::shared_ptr<MotionModelUnitIf> iface) :
    iface_(iface) {
    processMap_["Initialize"] = &MotionModelUnitProcessor::process_Initialize;
    processMap_["AssignInstruction"] = &MotionModelUnitProcessor::process_AssignInstruction;
    processMap_["DoStep"] = &MotionModelUnitProcessor::process_DoStep;
    processMap_["GetBoundaryConstraints"] = &MotionModelUnitProcessor::process_GetBoundaryConstraints;
    processMap_["CheckPrerequisites"] = &MotionModelUnitProcessor::process_CheckPrerequisites;
    processMap_["Abort"] = &MotionModelUnitProcessor::process_Abort;
    processMap_["Dispose"] = &MotionModelUnitProcessor::process_Dispose;
    processMap_["CreateCheckpoint"] = &MotionModelUnitProcessor::process_CreateCheckpoint;
    processMap_["RestoreCheckpoint"] = &MotionModelUnitProcessor::process_RestoreCheckpoint;
    processMap_["ExecuteFunction"] = &MotionModelUnitProcessor::process_ExecuteFunction;
  }

  virtual ~MotionModelUnitProcessor() {}
};

class MotionModelUnitProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MotionModelUnitProcessorFactory(const ::std::shared_ptr< MotionModelUnitIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MotionModelUnitIfFactory > handlerFactory_;
};

class MotionModelUnitMultiface : virtual public MotionModelUnitIf {
 public:
  MotionModelUnitMultiface(std::vector<std::shared_ptr<MotionModelUnitIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MotionModelUnitMultiface() {}
 protected:
  std::vector<std::shared_ptr<MotionModelUnitIf> > ifaces_;
  MotionModelUnitMultiface() {}
  void add(::std::shared_ptr<MotionModelUnitIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Initialize( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MAvatarDescription& avatarDescription, const std::map<std::string, std::string> & properties) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Initialize(_return, avatarDescription, properties);
    }
    ifaces_[i]->Initialize(_return, avatarDescription, properties);
    return;
  }

  void AssignInstruction( ::MMIStandard::MBoolResponse& _return, const MInstruction& motionInstruction, const MSimulationState& simulationState) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AssignInstruction(_return, motionInstruction, simulationState);
    }
    ifaces_[i]->AssignInstruction(_return, motionInstruction, simulationState);
    return;
  }

  void DoStep(MSimulationResult& _return, const double time, const MSimulationState& simulationState) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DoStep(_return, time, simulationState);
    }
    ifaces_[i]->DoStep(_return, time, simulationState);
    return;
  }

  void GetBoundaryConstraints(std::vector< ::MMIStandard::MConstraint> & _return, const MInstruction& instruction) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetBoundaryConstraints(_return, instruction);
    }
    ifaces_[i]->GetBoundaryConstraints(_return, instruction);
    return;
  }

  void CheckPrerequisites( ::MMIStandard::MBoolResponse& _return, const MInstruction& instruction) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CheckPrerequisites(_return, instruction);
    }
    ifaces_[i]->CheckPrerequisites(_return, instruction);
    return;
  }

  void Abort( ::MMIStandard::MBoolResponse& _return, const std::string& instructionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Abort(_return, instructionId);
    }
    ifaces_[i]->Abort(_return, instructionId);
    return;
  }

  void Dispose( ::MMIStandard::MBoolResponse& _return, const std::map<std::string, std::string> & parameters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Dispose(_return, parameters);
    }
    ifaces_[i]->Dispose(_return, parameters);
    return;
  }

  void CreateCheckpoint(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateCheckpoint(_return);
    }
    ifaces_[i]->CreateCheckpoint(_return);
    return;
  }

  void RestoreCheckpoint( ::MMIStandard::MBoolResponse& _return, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RestoreCheckpoint(_return, data);
    }
    ifaces_[i]->RestoreCheckpoint(_return, data);
    return;
  }

  void ExecuteFunction(std::map<std::string, std::string> & _return, const std::string& name, const std::map<std::string, std::string> & parameters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ExecuteFunction(_return, name, parameters);
    }
    ifaces_[i]->ExecuteFunction(_return, name, parameters);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MotionModelUnitConcurrentClient : virtual public MotionModelUnitIf {
 public:
  MotionModelUnitConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  MotionModelUnitConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Initialize( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MAvatarDescription& avatarDescription, const std::map<std::string, std::string> & properties);
  int32_t send_Initialize(const  ::MMIStandard::MAvatarDescription& avatarDescription, const std::map<std::string, std::string> & properties);
  void recv_Initialize( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void AssignInstruction( ::MMIStandard::MBoolResponse& _return, const MInstruction& motionInstruction, const MSimulationState& simulationState);
  int32_t send_AssignInstruction(const MInstruction& motionInstruction, const MSimulationState& simulationState);
  void recv_AssignInstruction( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void DoStep(MSimulationResult& _return, const double time, const MSimulationState& simulationState);
  int32_t send_DoStep(const double time, const MSimulationState& simulationState);
  void recv_DoStep(MSimulationResult& _return, const int32_t seqid);
  void GetBoundaryConstraints(std::vector< ::MMIStandard::MConstraint> & _return, const MInstruction& instruction);
  int32_t send_GetBoundaryConstraints(const MInstruction& instruction);
  void recv_GetBoundaryConstraints(std::vector< ::MMIStandard::MConstraint> & _return, const int32_t seqid);
  void CheckPrerequisites( ::MMIStandard::MBoolResponse& _return, const MInstruction& instruction);
  int32_t send_CheckPrerequisites(const MInstruction& instruction);
  void recv_CheckPrerequisites( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void Abort( ::MMIStandard::MBoolResponse& _return, const std::string& instructionId);
  int32_t send_Abort(const std::string& instructionId);
  void recv_Abort( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void Dispose( ::MMIStandard::MBoolResponse& _return, const std::map<std::string, std::string> & parameters);
  int32_t send_Dispose(const std::map<std::string, std::string> & parameters);
  void recv_Dispose( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void CreateCheckpoint(std::string& _return);
  int32_t send_CreateCheckpoint();
  void recv_CreateCheckpoint(std::string& _return, const int32_t seqid);
  void RestoreCheckpoint( ::MMIStandard::MBoolResponse& _return, const std::string& data);
  int32_t send_RestoreCheckpoint(const std::string& data);
  void recv_RestoreCheckpoint( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void ExecuteFunction(std::map<std::string, std::string> & _return, const std::string& name, const std::map<std::string, std::string> & parameters);
  int32_t send_ExecuteFunction(const std::string& name, const std::map<std::string, std::string> & parameters);
  void recv_ExecuteFunction(std::map<std::string, std::string> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
