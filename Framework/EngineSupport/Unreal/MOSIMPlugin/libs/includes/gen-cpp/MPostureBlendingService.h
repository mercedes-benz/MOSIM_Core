/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MPostureBlendingService_H
#define MPostureBlendingService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "services_types.h"
#include "MMIServiceBase.h"

namespace MMIStandard {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MPostureBlendingServiceIf : virtual public MMIServiceBaseIf {
 public:
  virtual ~MPostureBlendingServiceIf() {}
  virtual void Blend( ::MMIStandard::MAvatarPostureValues& _return, const  ::MMIStandard::MAvatarPostureValues& startPosture, const  ::MMIStandard::MAvatarPostureValues& targetPosture, const double weight, const std::map< ::MMIStandard::MJointType::type, double> & mask, const std::map<std::string, std::string> & properties) = 0;
  virtual void BlendMany(std::vector< ::MMIStandard::MAvatarPostureValues> & _return, const  ::MMIStandard::MAvatarPostureValues& startPosture, const  ::MMIStandard::MAvatarPostureValues& targetPosture, const std::vector<double> & weights, const std::map< ::MMIStandard::MJointType::type, double> & mask, const std::map<std::string, std::string> & properties) = 0;
};

class MPostureBlendingServiceIfFactory : virtual public MMIServiceBaseIfFactory {
 public:
  typedef MPostureBlendingServiceIf Handler;

  virtual ~MPostureBlendingServiceIfFactory() {}

  virtual MPostureBlendingServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) = 0;
};

class MPostureBlendingServiceIfSingletonFactory : virtual public MPostureBlendingServiceIfFactory {
 public:
  MPostureBlendingServiceIfSingletonFactory(const ::std::shared_ptr<MPostureBlendingServiceIf>& iface) : iface_(iface) {}
  virtual ~MPostureBlendingServiceIfSingletonFactory() {}

  virtual MPostureBlendingServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MPostureBlendingServiceIf> iface_;
};

class MPostureBlendingServiceNull : virtual public MPostureBlendingServiceIf , virtual public MMIServiceBaseNull {
 public:
  virtual ~MPostureBlendingServiceNull() {}
  void Blend( ::MMIStandard::MAvatarPostureValues& /* _return */, const  ::MMIStandard::MAvatarPostureValues& /* startPosture */, const  ::MMIStandard::MAvatarPostureValues& /* targetPosture */, const double /* weight */, const std::map< ::MMIStandard::MJointType::type, double> & /* mask */, const std::map<std::string, std::string> & /* properties */) {
    return;
  }
  void BlendMany(std::vector< ::MMIStandard::MAvatarPostureValues> & /* _return */, const  ::MMIStandard::MAvatarPostureValues& /* startPosture */, const  ::MMIStandard::MAvatarPostureValues& /* targetPosture */, const std::vector<double> & /* weights */, const std::map< ::MMIStandard::MJointType::type, double> & /* mask */, const std::map<std::string, std::string> & /* properties */) {
    return;
  }
};

typedef struct _MPostureBlendingService_Blend_args__isset {
  _MPostureBlendingService_Blend_args__isset() : startPosture(false), targetPosture(false), weight(false), mask(false), properties(false) {}
  bool startPosture :1;
  bool targetPosture :1;
  bool weight :1;
  bool mask :1;
  bool properties :1;
} _MPostureBlendingService_Blend_args__isset;

class MPostureBlendingService_Blend_args {
 public:

  MPostureBlendingService_Blend_args(const MPostureBlendingService_Blend_args&);
  MPostureBlendingService_Blend_args& operator=(const MPostureBlendingService_Blend_args&);
  MPostureBlendingService_Blend_args() : weight(0) {
  }

  virtual ~MPostureBlendingService_Blend_args() noexcept;
   ::MMIStandard::MAvatarPostureValues startPosture;
   ::MMIStandard::MAvatarPostureValues targetPosture;
  double weight;
  std::map< ::MMIStandard::MJointType::type, double>  mask;
  std::map<std::string, std::string>  properties;

  _MPostureBlendingService_Blend_args__isset __isset;

  void __set_startPosture(const  ::MMIStandard::MAvatarPostureValues& val);

  void __set_targetPosture(const  ::MMIStandard::MAvatarPostureValues& val);

  void __set_weight(const double val);

  void __set_mask(const std::map< ::MMIStandard::MJointType::type, double> & val);

  void __set_properties(const std::map<std::string, std::string> & val);

  bool operator == (const MPostureBlendingService_Blend_args & rhs) const
  {
    if (!(startPosture == rhs.startPosture))
      return false;
    if (!(targetPosture == rhs.targetPosture))
      return false;
    if (!(weight == rhs.weight))
      return false;
    if (!(mask == rhs.mask))
      return false;
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const MPostureBlendingService_Blend_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MPostureBlendingService_Blend_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MPostureBlendingService_Blend_pargs {
 public:


  virtual ~MPostureBlendingService_Blend_pargs() noexcept;
  const  ::MMIStandard::MAvatarPostureValues* startPosture;
  const  ::MMIStandard::MAvatarPostureValues* targetPosture;
  const double* weight;
  const std::map< ::MMIStandard::MJointType::type, double> * mask;
  const std::map<std::string, std::string> * properties;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MPostureBlendingService_Blend_result__isset {
  _MPostureBlendingService_Blend_result__isset() : success(false) {}
  bool success :1;
} _MPostureBlendingService_Blend_result__isset;

class MPostureBlendingService_Blend_result {
 public:

  MPostureBlendingService_Blend_result(const MPostureBlendingService_Blend_result&);
  MPostureBlendingService_Blend_result& operator=(const MPostureBlendingService_Blend_result&);
  MPostureBlendingService_Blend_result() {
  }

  virtual ~MPostureBlendingService_Blend_result() noexcept;
   ::MMIStandard::MAvatarPostureValues success;

  _MPostureBlendingService_Blend_result__isset __isset;

  void __set_success(const  ::MMIStandard::MAvatarPostureValues& val);

  bool operator == (const MPostureBlendingService_Blend_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MPostureBlendingService_Blend_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MPostureBlendingService_Blend_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MPostureBlendingService_Blend_presult__isset {
  _MPostureBlendingService_Blend_presult__isset() : success(false) {}
  bool success :1;
} _MPostureBlendingService_Blend_presult__isset;

class MPostureBlendingService_Blend_presult {
 public:


  virtual ~MPostureBlendingService_Blend_presult() noexcept;
   ::MMIStandard::MAvatarPostureValues* success;

  _MPostureBlendingService_Blend_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MPostureBlendingService_BlendMany_args__isset {
  _MPostureBlendingService_BlendMany_args__isset() : startPosture(false), targetPosture(false), weights(false), mask(false), properties(false) {}
  bool startPosture :1;
  bool targetPosture :1;
  bool weights :1;
  bool mask :1;
  bool properties :1;
} _MPostureBlendingService_BlendMany_args__isset;

class MPostureBlendingService_BlendMany_args {
 public:

  MPostureBlendingService_BlendMany_args(const MPostureBlendingService_BlendMany_args&);
  MPostureBlendingService_BlendMany_args& operator=(const MPostureBlendingService_BlendMany_args&);
  MPostureBlendingService_BlendMany_args() {
  }

  virtual ~MPostureBlendingService_BlendMany_args() noexcept;
   ::MMIStandard::MAvatarPostureValues startPosture;
   ::MMIStandard::MAvatarPostureValues targetPosture;
  std::vector<double>  weights;
  std::map< ::MMIStandard::MJointType::type, double>  mask;
  std::map<std::string, std::string>  properties;

  _MPostureBlendingService_BlendMany_args__isset __isset;

  void __set_startPosture(const  ::MMIStandard::MAvatarPostureValues& val);

  void __set_targetPosture(const  ::MMIStandard::MAvatarPostureValues& val);

  void __set_weights(const std::vector<double> & val);

  void __set_mask(const std::map< ::MMIStandard::MJointType::type, double> & val);

  void __set_properties(const std::map<std::string, std::string> & val);

  bool operator == (const MPostureBlendingService_BlendMany_args & rhs) const
  {
    if (!(startPosture == rhs.startPosture))
      return false;
    if (!(targetPosture == rhs.targetPosture))
      return false;
    if (!(weights == rhs.weights))
      return false;
    if (!(mask == rhs.mask))
      return false;
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const MPostureBlendingService_BlendMany_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MPostureBlendingService_BlendMany_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MPostureBlendingService_BlendMany_pargs {
 public:


  virtual ~MPostureBlendingService_BlendMany_pargs() noexcept;
  const  ::MMIStandard::MAvatarPostureValues* startPosture;
  const  ::MMIStandard::MAvatarPostureValues* targetPosture;
  const std::vector<double> * weights;
  const std::map< ::MMIStandard::MJointType::type, double> * mask;
  const std::map<std::string, std::string> * properties;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MPostureBlendingService_BlendMany_result__isset {
  _MPostureBlendingService_BlendMany_result__isset() : success(false) {}
  bool success :1;
} _MPostureBlendingService_BlendMany_result__isset;

class MPostureBlendingService_BlendMany_result {
 public:

  MPostureBlendingService_BlendMany_result(const MPostureBlendingService_BlendMany_result&);
  MPostureBlendingService_BlendMany_result& operator=(const MPostureBlendingService_BlendMany_result&);
  MPostureBlendingService_BlendMany_result() {
  }

  virtual ~MPostureBlendingService_BlendMany_result() noexcept;
  std::vector< ::MMIStandard::MAvatarPostureValues>  success;

  _MPostureBlendingService_BlendMany_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MAvatarPostureValues> & val);

  bool operator == (const MPostureBlendingService_BlendMany_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MPostureBlendingService_BlendMany_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MPostureBlendingService_BlendMany_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MPostureBlendingService_BlendMany_presult__isset {
  _MPostureBlendingService_BlendMany_presult__isset() : success(false) {}
  bool success :1;
} _MPostureBlendingService_BlendMany_presult__isset;

class MPostureBlendingService_BlendMany_presult {
 public:


  virtual ~MPostureBlendingService_BlendMany_presult() noexcept;
  std::vector< ::MMIStandard::MAvatarPostureValues> * success;

  _MPostureBlendingService_BlendMany_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MPostureBlendingServiceClient : virtual public MPostureBlendingServiceIf, public MMIServiceBaseClient {
 public:
  MPostureBlendingServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    MMIServiceBaseClient(prot, prot) {}
  MPostureBlendingServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    MMIServiceBaseClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Blend( ::MMIStandard::MAvatarPostureValues& _return, const  ::MMIStandard::MAvatarPostureValues& startPosture, const  ::MMIStandard::MAvatarPostureValues& targetPosture, const double weight, const std::map< ::MMIStandard::MJointType::type, double> & mask, const std::map<std::string, std::string> & properties);
  void send_Blend(const  ::MMIStandard::MAvatarPostureValues& startPosture, const  ::MMIStandard::MAvatarPostureValues& targetPosture, const double weight, const std::map< ::MMIStandard::MJointType::type, double> & mask, const std::map<std::string, std::string> & properties);
  void recv_Blend( ::MMIStandard::MAvatarPostureValues& _return);
  void BlendMany(std::vector< ::MMIStandard::MAvatarPostureValues> & _return, const  ::MMIStandard::MAvatarPostureValues& startPosture, const  ::MMIStandard::MAvatarPostureValues& targetPosture, const std::vector<double> & weights, const std::map< ::MMIStandard::MJointType::type, double> & mask, const std::map<std::string, std::string> & properties);
  void send_BlendMany(const  ::MMIStandard::MAvatarPostureValues& startPosture, const  ::MMIStandard::MAvatarPostureValues& targetPosture, const std::vector<double> & weights, const std::map< ::MMIStandard::MJointType::type, double> & mask, const std::map<std::string, std::string> & properties);
  void recv_BlendMany(std::vector< ::MMIStandard::MAvatarPostureValues> & _return);
};

class MPostureBlendingServiceProcessor : public MMIServiceBaseProcessor {
 protected:
  ::std::shared_ptr<MPostureBlendingServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MPostureBlendingServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Blend(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_BlendMany(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MPostureBlendingServiceProcessor(::std::shared_ptr<MPostureBlendingServiceIf> iface) :
    MMIServiceBaseProcessor(iface),
    iface_(iface) {
    processMap_["Blend"] = &MPostureBlendingServiceProcessor::process_Blend;
    processMap_["BlendMany"] = &MPostureBlendingServiceProcessor::process_BlendMany;
  }

  virtual ~MPostureBlendingServiceProcessor() {}
};

class MPostureBlendingServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MPostureBlendingServiceProcessorFactory(const ::std::shared_ptr< MPostureBlendingServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MPostureBlendingServiceIfFactory > handlerFactory_;
};

class MPostureBlendingServiceMultiface : virtual public MPostureBlendingServiceIf, public MMIServiceBaseMultiface {
 public:
  MPostureBlendingServiceMultiface(std::vector<std::shared_ptr<MPostureBlendingServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<MPostureBlendingServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      MMIServiceBaseMultiface::add(*iter);
    }
  }
  virtual ~MPostureBlendingServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<MPostureBlendingServiceIf> > ifaces_;
  MPostureBlendingServiceMultiface() {}
  void add(::std::shared_ptr<MPostureBlendingServiceIf> iface) {
    MMIServiceBaseMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void Blend( ::MMIStandard::MAvatarPostureValues& _return, const  ::MMIStandard::MAvatarPostureValues& startPosture, const  ::MMIStandard::MAvatarPostureValues& targetPosture, const double weight, const std::map< ::MMIStandard::MJointType::type, double> & mask, const std::map<std::string, std::string> & properties) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Blend(_return, startPosture, targetPosture, weight, mask, properties);
    }
    ifaces_[i]->Blend(_return, startPosture, targetPosture, weight, mask, properties);
    return;
  }

  void BlendMany(std::vector< ::MMIStandard::MAvatarPostureValues> & _return, const  ::MMIStandard::MAvatarPostureValues& startPosture, const  ::MMIStandard::MAvatarPostureValues& targetPosture, const std::vector<double> & weights, const std::map< ::MMIStandard::MJointType::type, double> & mask, const std::map<std::string, std::string> & properties) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->BlendMany(_return, startPosture, targetPosture, weights, mask, properties);
    }
    ifaces_[i]->BlendMany(_return, startPosture, targetPosture, weights, mask, properties);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MPostureBlendingServiceConcurrentClient : virtual public MPostureBlendingServiceIf, public MMIServiceBaseConcurrentClient {
 public:
  MPostureBlendingServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
    MMIServiceBaseConcurrentClient(prot, prot, sync) {}
  MPostureBlendingServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :    MMIServiceBaseConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Blend( ::MMIStandard::MAvatarPostureValues& _return, const  ::MMIStandard::MAvatarPostureValues& startPosture, const  ::MMIStandard::MAvatarPostureValues& targetPosture, const double weight, const std::map< ::MMIStandard::MJointType::type, double> & mask, const std::map<std::string, std::string> & properties);
  int32_t send_Blend(const  ::MMIStandard::MAvatarPostureValues& startPosture, const  ::MMIStandard::MAvatarPostureValues& targetPosture, const double weight, const std::map< ::MMIStandard::MJointType::type, double> & mask, const std::map<std::string, std::string> & properties);
  void recv_Blend( ::MMIStandard::MAvatarPostureValues& _return, const int32_t seqid);
  void BlendMany(std::vector< ::MMIStandard::MAvatarPostureValues> & _return, const  ::MMIStandard::MAvatarPostureValues& startPosture, const  ::MMIStandard::MAvatarPostureValues& targetPosture, const std::vector<double> & weights, const std::map< ::MMIStandard::MJointType::type, double> & mask, const std::map<std::string, std::string> & properties);
  int32_t send_BlendMany(const  ::MMIStandard::MAvatarPostureValues& startPosture, const  ::MMIStandard::MAvatarPostureValues& targetPosture, const std::vector<double> & weights, const std::map< ::MMIStandard::MJointType::type, double> & mask, const std::map<std::string, std::string> & properties);
  void recv_BlendMany(std::vector< ::MMIStandard::MAvatarPostureValues> & _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
