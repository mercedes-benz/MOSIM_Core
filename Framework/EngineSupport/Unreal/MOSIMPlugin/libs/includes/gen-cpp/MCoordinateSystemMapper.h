/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MCoordinateSystemMapper_H
#define MCoordinateSystemMapper_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "services_types.h"
#include "MMIServiceBase.h"

namespace MMIStandard {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MCoordinateSystemMapperIf : virtual public MMIServiceBaseIf {
 public:
  virtual ~MCoordinateSystemMapperIf() {}
  virtual void TransformToMMI_L( ::MMIStandard::MTransform& _return, const  ::MMIStandard::MTransform& transform, const std::vector<MDirection::type> & coordinateSystem) = 0;
  virtual void TransformToMMI( ::MMIStandard::MTransform& _return, const  ::MMIStandard::MTransform& transform, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis) = 0;
  virtual void TransformFromMMI_L( ::MMIStandard::MTransform& _return, const  ::MMIStandard::MTransform& transform, const std::vector<MDirection::type> & coordinateSystem) = 0;
  virtual void TransformFromMMI( ::MMIStandard::MTransform& _return, const  ::MMIStandard::MTransform& transform, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis) = 0;
  virtual void QuaternionToMMI_L( ::MMIStandard::MQuaternion& _return, const  ::MMIStandard::MQuaternion& quat, const std::vector<MDirection::type> & coordinateSystem) = 0;
  virtual void QuaternionToMMI( ::MMIStandard::MQuaternion& _return, const  ::MMIStandard::MQuaternion& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis) = 0;
  virtual void QuaternionFromMMI_L( ::MMIStandard::MQuaternion& _return, const  ::MMIStandard::MQuaternion& quat, const std::vector<MDirection::type> & coordinateSystem) = 0;
  virtual void QuaternionFromMMI( ::MMIStandard::MQuaternion& _return, const  ::MMIStandard::MQuaternion& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis) = 0;
  virtual void VectorToMMI_L( ::MMIStandard::MVector3& _return, const  ::MMIStandard::MVector3& quat, const std::vector<MDirection::type> & coordinateSystem) = 0;
  virtual void VectorToMMI( ::MMIStandard::MVector3& _return, const  ::MMIStandard::MVector3& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis) = 0;
  virtual void VectorFromMMI_L( ::MMIStandard::MVector3& _return, const  ::MMIStandard::MVector3& quat, const std::vector<MDirection::type> & coordinateSystem) = 0;
  virtual void VectorFromMMI( ::MMIStandard::MVector3& _return, const  ::MMIStandard::MVector3& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis) = 0;
};

class MCoordinateSystemMapperIfFactory : virtual public MMIServiceBaseIfFactory {
 public:
  typedef MCoordinateSystemMapperIf Handler;

  virtual ~MCoordinateSystemMapperIfFactory() {}

  virtual MCoordinateSystemMapperIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) = 0;
};

class MCoordinateSystemMapperIfSingletonFactory : virtual public MCoordinateSystemMapperIfFactory {
 public:
  MCoordinateSystemMapperIfSingletonFactory(const ::std::shared_ptr<MCoordinateSystemMapperIf>& iface) : iface_(iface) {}
  virtual ~MCoordinateSystemMapperIfSingletonFactory() {}

  virtual MCoordinateSystemMapperIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MCoordinateSystemMapperIf> iface_;
};

class MCoordinateSystemMapperNull : virtual public MCoordinateSystemMapperIf , virtual public MMIServiceBaseNull {
 public:
  virtual ~MCoordinateSystemMapperNull() {}
  void TransformToMMI_L( ::MMIStandard::MTransform& /* _return */, const  ::MMIStandard::MTransform& /* transform */, const std::vector<MDirection::type> & /* coordinateSystem */) {
    return;
  }
  void TransformToMMI( ::MMIStandard::MTransform& /* _return */, const  ::MMIStandard::MTransform& /* transform */, const MDirection::type /* firstAxis */, const MDirection::type /* secondAxis */, const MDirection::type /* thirdAxis */) {
    return;
  }
  void TransformFromMMI_L( ::MMIStandard::MTransform& /* _return */, const  ::MMIStandard::MTransform& /* transform */, const std::vector<MDirection::type> & /* coordinateSystem */) {
    return;
  }
  void TransformFromMMI( ::MMIStandard::MTransform& /* _return */, const  ::MMIStandard::MTransform& /* transform */, const MDirection::type /* firstAxis */, const MDirection::type /* secondAxis */, const MDirection::type /* thirdAxis */) {
    return;
  }
  void QuaternionToMMI_L( ::MMIStandard::MQuaternion& /* _return */, const  ::MMIStandard::MQuaternion& /* quat */, const std::vector<MDirection::type> & /* coordinateSystem */) {
    return;
  }
  void QuaternionToMMI( ::MMIStandard::MQuaternion& /* _return */, const  ::MMIStandard::MQuaternion& /* quat */, const MDirection::type /* firstAxis */, const MDirection::type /* secondAxis */, const MDirection::type /* thirdAxis */) {
    return;
  }
  void QuaternionFromMMI_L( ::MMIStandard::MQuaternion& /* _return */, const  ::MMIStandard::MQuaternion& /* quat */, const std::vector<MDirection::type> & /* coordinateSystem */) {
    return;
  }
  void QuaternionFromMMI( ::MMIStandard::MQuaternion& /* _return */, const  ::MMIStandard::MQuaternion& /* quat */, const MDirection::type /* firstAxis */, const MDirection::type /* secondAxis */, const MDirection::type /* thirdAxis */) {
    return;
  }
  void VectorToMMI_L( ::MMIStandard::MVector3& /* _return */, const  ::MMIStandard::MVector3& /* quat */, const std::vector<MDirection::type> & /* coordinateSystem */) {
    return;
  }
  void VectorToMMI( ::MMIStandard::MVector3& /* _return */, const  ::MMIStandard::MVector3& /* quat */, const MDirection::type /* firstAxis */, const MDirection::type /* secondAxis */, const MDirection::type /* thirdAxis */) {
    return;
  }
  void VectorFromMMI_L( ::MMIStandard::MVector3& /* _return */, const  ::MMIStandard::MVector3& /* quat */, const std::vector<MDirection::type> & /* coordinateSystem */) {
    return;
  }
  void VectorFromMMI( ::MMIStandard::MVector3& /* _return */, const  ::MMIStandard::MVector3& /* quat */, const MDirection::type /* firstAxis */, const MDirection::type /* secondAxis */, const MDirection::type /* thirdAxis */) {
    return;
  }
};

typedef struct _MCoordinateSystemMapper_TransformToMMI_L_args__isset {
  _MCoordinateSystemMapper_TransformToMMI_L_args__isset() : transform(false), coordinateSystem(false) {}
  bool transform :1;
  bool coordinateSystem :1;
} _MCoordinateSystemMapper_TransformToMMI_L_args__isset;

class MCoordinateSystemMapper_TransformToMMI_L_args {
 public:

  MCoordinateSystemMapper_TransformToMMI_L_args(const MCoordinateSystemMapper_TransformToMMI_L_args&);
  MCoordinateSystemMapper_TransformToMMI_L_args& operator=(const MCoordinateSystemMapper_TransformToMMI_L_args&);
  MCoordinateSystemMapper_TransformToMMI_L_args() {
  }

  virtual ~MCoordinateSystemMapper_TransformToMMI_L_args() noexcept;
   ::MMIStandard::MTransform transform;
  std::vector<MDirection::type>  coordinateSystem;

  _MCoordinateSystemMapper_TransformToMMI_L_args__isset __isset;

  void __set_transform(const  ::MMIStandard::MTransform& val);

  void __set_coordinateSystem(const std::vector<MDirection::type> & val);

  bool operator == (const MCoordinateSystemMapper_TransformToMMI_L_args & rhs) const
  {
    if (!(transform == rhs.transform))
      return false;
    if (!(coordinateSystem == rhs.coordinateSystem))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_TransformToMMI_L_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_TransformToMMI_L_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoordinateSystemMapper_TransformToMMI_L_pargs {
 public:


  virtual ~MCoordinateSystemMapper_TransformToMMI_L_pargs() noexcept;
  const  ::MMIStandard::MTransform* transform;
  const std::vector<MDirection::type> * coordinateSystem;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_TransformToMMI_L_result__isset {
  _MCoordinateSystemMapper_TransformToMMI_L_result__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_TransformToMMI_L_result__isset;

class MCoordinateSystemMapper_TransformToMMI_L_result {
 public:

  MCoordinateSystemMapper_TransformToMMI_L_result(const MCoordinateSystemMapper_TransformToMMI_L_result&);
  MCoordinateSystemMapper_TransformToMMI_L_result& operator=(const MCoordinateSystemMapper_TransformToMMI_L_result&);
  MCoordinateSystemMapper_TransformToMMI_L_result() {
  }

  virtual ~MCoordinateSystemMapper_TransformToMMI_L_result() noexcept;
   ::MMIStandard::MTransform success;

  _MCoordinateSystemMapper_TransformToMMI_L_result__isset __isset;

  void __set_success(const  ::MMIStandard::MTransform& val);

  bool operator == (const MCoordinateSystemMapper_TransformToMMI_L_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_TransformToMMI_L_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_TransformToMMI_L_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_TransformToMMI_L_presult__isset {
  _MCoordinateSystemMapper_TransformToMMI_L_presult__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_TransformToMMI_L_presult__isset;

class MCoordinateSystemMapper_TransformToMMI_L_presult {
 public:


  virtual ~MCoordinateSystemMapper_TransformToMMI_L_presult() noexcept;
   ::MMIStandard::MTransform* success;

  _MCoordinateSystemMapper_TransformToMMI_L_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MCoordinateSystemMapper_TransformToMMI_args__isset {
  _MCoordinateSystemMapper_TransformToMMI_args__isset() : transform(false), firstAxis(false), secondAxis(false), thirdAxis(false) {}
  bool transform :1;
  bool firstAxis :1;
  bool secondAxis :1;
  bool thirdAxis :1;
} _MCoordinateSystemMapper_TransformToMMI_args__isset;

class MCoordinateSystemMapper_TransformToMMI_args {
 public:

  MCoordinateSystemMapper_TransformToMMI_args(const MCoordinateSystemMapper_TransformToMMI_args&);
  MCoordinateSystemMapper_TransformToMMI_args& operator=(const MCoordinateSystemMapper_TransformToMMI_args&);
  MCoordinateSystemMapper_TransformToMMI_args() : firstAxis((MDirection::type)0), secondAxis((MDirection::type)0), thirdAxis((MDirection::type)0) {
  }

  virtual ~MCoordinateSystemMapper_TransformToMMI_args() noexcept;
   ::MMIStandard::MTransform transform;
  MDirection::type firstAxis;
  MDirection::type secondAxis;
  MDirection::type thirdAxis;

  _MCoordinateSystemMapper_TransformToMMI_args__isset __isset;

  void __set_transform(const  ::MMIStandard::MTransform& val);

  void __set_firstAxis(const MDirection::type val);

  void __set_secondAxis(const MDirection::type val);

  void __set_thirdAxis(const MDirection::type val);

  bool operator == (const MCoordinateSystemMapper_TransformToMMI_args & rhs) const
  {
    if (!(transform == rhs.transform))
      return false;
    if (!(firstAxis == rhs.firstAxis))
      return false;
    if (!(secondAxis == rhs.secondAxis))
      return false;
    if (!(thirdAxis == rhs.thirdAxis))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_TransformToMMI_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_TransformToMMI_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoordinateSystemMapper_TransformToMMI_pargs {
 public:


  virtual ~MCoordinateSystemMapper_TransformToMMI_pargs() noexcept;
  const  ::MMIStandard::MTransform* transform;
  const MDirection::type* firstAxis;
  const MDirection::type* secondAxis;
  const MDirection::type* thirdAxis;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_TransformToMMI_result__isset {
  _MCoordinateSystemMapper_TransformToMMI_result__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_TransformToMMI_result__isset;

class MCoordinateSystemMapper_TransformToMMI_result {
 public:

  MCoordinateSystemMapper_TransformToMMI_result(const MCoordinateSystemMapper_TransformToMMI_result&);
  MCoordinateSystemMapper_TransformToMMI_result& operator=(const MCoordinateSystemMapper_TransformToMMI_result&);
  MCoordinateSystemMapper_TransformToMMI_result() {
  }

  virtual ~MCoordinateSystemMapper_TransformToMMI_result() noexcept;
   ::MMIStandard::MTransform success;

  _MCoordinateSystemMapper_TransformToMMI_result__isset __isset;

  void __set_success(const  ::MMIStandard::MTransform& val);

  bool operator == (const MCoordinateSystemMapper_TransformToMMI_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_TransformToMMI_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_TransformToMMI_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_TransformToMMI_presult__isset {
  _MCoordinateSystemMapper_TransformToMMI_presult__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_TransformToMMI_presult__isset;

class MCoordinateSystemMapper_TransformToMMI_presult {
 public:


  virtual ~MCoordinateSystemMapper_TransformToMMI_presult() noexcept;
   ::MMIStandard::MTransform* success;

  _MCoordinateSystemMapper_TransformToMMI_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MCoordinateSystemMapper_TransformFromMMI_L_args__isset {
  _MCoordinateSystemMapper_TransformFromMMI_L_args__isset() : transform(false), coordinateSystem(false) {}
  bool transform :1;
  bool coordinateSystem :1;
} _MCoordinateSystemMapper_TransformFromMMI_L_args__isset;

class MCoordinateSystemMapper_TransformFromMMI_L_args {
 public:

  MCoordinateSystemMapper_TransformFromMMI_L_args(const MCoordinateSystemMapper_TransformFromMMI_L_args&);
  MCoordinateSystemMapper_TransformFromMMI_L_args& operator=(const MCoordinateSystemMapper_TransformFromMMI_L_args&);
  MCoordinateSystemMapper_TransformFromMMI_L_args() {
  }

  virtual ~MCoordinateSystemMapper_TransformFromMMI_L_args() noexcept;
   ::MMIStandard::MTransform transform;
  std::vector<MDirection::type>  coordinateSystem;

  _MCoordinateSystemMapper_TransformFromMMI_L_args__isset __isset;

  void __set_transform(const  ::MMIStandard::MTransform& val);

  void __set_coordinateSystem(const std::vector<MDirection::type> & val);

  bool operator == (const MCoordinateSystemMapper_TransformFromMMI_L_args & rhs) const
  {
    if (!(transform == rhs.transform))
      return false;
    if (!(coordinateSystem == rhs.coordinateSystem))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_TransformFromMMI_L_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_TransformFromMMI_L_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoordinateSystemMapper_TransformFromMMI_L_pargs {
 public:


  virtual ~MCoordinateSystemMapper_TransformFromMMI_L_pargs() noexcept;
  const  ::MMIStandard::MTransform* transform;
  const std::vector<MDirection::type> * coordinateSystem;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_TransformFromMMI_L_result__isset {
  _MCoordinateSystemMapper_TransformFromMMI_L_result__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_TransformFromMMI_L_result__isset;

class MCoordinateSystemMapper_TransformFromMMI_L_result {
 public:

  MCoordinateSystemMapper_TransformFromMMI_L_result(const MCoordinateSystemMapper_TransformFromMMI_L_result&);
  MCoordinateSystemMapper_TransformFromMMI_L_result& operator=(const MCoordinateSystemMapper_TransformFromMMI_L_result&);
  MCoordinateSystemMapper_TransformFromMMI_L_result() {
  }

  virtual ~MCoordinateSystemMapper_TransformFromMMI_L_result() noexcept;
   ::MMIStandard::MTransform success;

  _MCoordinateSystemMapper_TransformFromMMI_L_result__isset __isset;

  void __set_success(const  ::MMIStandard::MTransform& val);

  bool operator == (const MCoordinateSystemMapper_TransformFromMMI_L_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_TransformFromMMI_L_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_TransformFromMMI_L_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_TransformFromMMI_L_presult__isset {
  _MCoordinateSystemMapper_TransformFromMMI_L_presult__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_TransformFromMMI_L_presult__isset;

class MCoordinateSystemMapper_TransformFromMMI_L_presult {
 public:


  virtual ~MCoordinateSystemMapper_TransformFromMMI_L_presult() noexcept;
   ::MMIStandard::MTransform* success;

  _MCoordinateSystemMapper_TransformFromMMI_L_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MCoordinateSystemMapper_TransformFromMMI_args__isset {
  _MCoordinateSystemMapper_TransformFromMMI_args__isset() : transform(false), firstAxis(false), secondAxis(false), thirdAxis(false) {}
  bool transform :1;
  bool firstAxis :1;
  bool secondAxis :1;
  bool thirdAxis :1;
} _MCoordinateSystemMapper_TransformFromMMI_args__isset;

class MCoordinateSystemMapper_TransformFromMMI_args {
 public:

  MCoordinateSystemMapper_TransformFromMMI_args(const MCoordinateSystemMapper_TransformFromMMI_args&);
  MCoordinateSystemMapper_TransformFromMMI_args& operator=(const MCoordinateSystemMapper_TransformFromMMI_args&);
  MCoordinateSystemMapper_TransformFromMMI_args() : firstAxis((MDirection::type)0), secondAxis((MDirection::type)0), thirdAxis((MDirection::type)0) {
  }

  virtual ~MCoordinateSystemMapper_TransformFromMMI_args() noexcept;
   ::MMIStandard::MTransform transform;
  MDirection::type firstAxis;
  MDirection::type secondAxis;
  MDirection::type thirdAxis;

  _MCoordinateSystemMapper_TransformFromMMI_args__isset __isset;

  void __set_transform(const  ::MMIStandard::MTransform& val);

  void __set_firstAxis(const MDirection::type val);

  void __set_secondAxis(const MDirection::type val);

  void __set_thirdAxis(const MDirection::type val);

  bool operator == (const MCoordinateSystemMapper_TransformFromMMI_args & rhs) const
  {
    if (!(transform == rhs.transform))
      return false;
    if (!(firstAxis == rhs.firstAxis))
      return false;
    if (!(secondAxis == rhs.secondAxis))
      return false;
    if (!(thirdAxis == rhs.thirdAxis))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_TransformFromMMI_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_TransformFromMMI_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoordinateSystemMapper_TransformFromMMI_pargs {
 public:


  virtual ~MCoordinateSystemMapper_TransformFromMMI_pargs() noexcept;
  const  ::MMIStandard::MTransform* transform;
  const MDirection::type* firstAxis;
  const MDirection::type* secondAxis;
  const MDirection::type* thirdAxis;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_TransformFromMMI_result__isset {
  _MCoordinateSystemMapper_TransformFromMMI_result__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_TransformFromMMI_result__isset;

class MCoordinateSystemMapper_TransformFromMMI_result {
 public:

  MCoordinateSystemMapper_TransformFromMMI_result(const MCoordinateSystemMapper_TransformFromMMI_result&);
  MCoordinateSystemMapper_TransformFromMMI_result& operator=(const MCoordinateSystemMapper_TransformFromMMI_result&);
  MCoordinateSystemMapper_TransformFromMMI_result() {
  }

  virtual ~MCoordinateSystemMapper_TransformFromMMI_result() noexcept;
   ::MMIStandard::MTransform success;

  _MCoordinateSystemMapper_TransformFromMMI_result__isset __isset;

  void __set_success(const  ::MMIStandard::MTransform& val);

  bool operator == (const MCoordinateSystemMapper_TransformFromMMI_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_TransformFromMMI_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_TransformFromMMI_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_TransformFromMMI_presult__isset {
  _MCoordinateSystemMapper_TransformFromMMI_presult__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_TransformFromMMI_presult__isset;

class MCoordinateSystemMapper_TransformFromMMI_presult {
 public:


  virtual ~MCoordinateSystemMapper_TransformFromMMI_presult() noexcept;
   ::MMIStandard::MTransform* success;

  _MCoordinateSystemMapper_TransformFromMMI_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MCoordinateSystemMapper_QuaternionToMMI_L_args__isset {
  _MCoordinateSystemMapper_QuaternionToMMI_L_args__isset() : quat(false), coordinateSystem(false) {}
  bool quat :1;
  bool coordinateSystem :1;
} _MCoordinateSystemMapper_QuaternionToMMI_L_args__isset;

class MCoordinateSystemMapper_QuaternionToMMI_L_args {
 public:

  MCoordinateSystemMapper_QuaternionToMMI_L_args(const MCoordinateSystemMapper_QuaternionToMMI_L_args&);
  MCoordinateSystemMapper_QuaternionToMMI_L_args& operator=(const MCoordinateSystemMapper_QuaternionToMMI_L_args&);
  MCoordinateSystemMapper_QuaternionToMMI_L_args() {
  }

  virtual ~MCoordinateSystemMapper_QuaternionToMMI_L_args() noexcept;
   ::MMIStandard::MQuaternion quat;
  std::vector<MDirection::type>  coordinateSystem;

  _MCoordinateSystemMapper_QuaternionToMMI_L_args__isset __isset;

  void __set_quat(const  ::MMIStandard::MQuaternion& val);

  void __set_coordinateSystem(const std::vector<MDirection::type> & val);

  bool operator == (const MCoordinateSystemMapper_QuaternionToMMI_L_args & rhs) const
  {
    if (!(quat == rhs.quat))
      return false;
    if (!(coordinateSystem == rhs.coordinateSystem))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_QuaternionToMMI_L_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_QuaternionToMMI_L_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoordinateSystemMapper_QuaternionToMMI_L_pargs {
 public:


  virtual ~MCoordinateSystemMapper_QuaternionToMMI_L_pargs() noexcept;
  const  ::MMIStandard::MQuaternion* quat;
  const std::vector<MDirection::type> * coordinateSystem;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_QuaternionToMMI_L_result__isset {
  _MCoordinateSystemMapper_QuaternionToMMI_L_result__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_QuaternionToMMI_L_result__isset;

class MCoordinateSystemMapper_QuaternionToMMI_L_result {
 public:

  MCoordinateSystemMapper_QuaternionToMMI_L_result(const MCoordinateSystemMapper_QuaternionToMMI_L_result&);
  MCoordinateSystemMapper_QuaternionToMMI_L_result& operator=(const MCoordinateSystemMapper_QuaternionToMMI_L_result&);
  MCoordinateSystemMapper_QuaternionToMMI_L_result() {
  }

  virtual ~MCoordinateSystemMapper_QuaternionToMMI_L_result() noexcept;
   ::MMIStandard::MQuaternion success;

  _MCoordinateSystemMapper_QuaternionToMMI_L_result__isset __isset;

  void __set_success(const  ::MMIStandard::MQuaternion& val);

  bool operator == (const MCoordinateSystemMapper_QuaternionToMMI_L_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_QuaternionToMMI_L_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_QuaternionToMMI_L_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_QuaternionToMMI_L_presult__isset {
  _MCoordinateSystemMapper_QuaternionToMMI_L_presult__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_QuaternionToMMI_L_presult__isset;

class MCoordinateSystemMapper_QuaternionToMMI_L_presult {
 public:


  virtual ~MCoordinateSystemMapper_QuaternionToMMI_L_presult() noexcept;
   ::MMIStandard::MQuaternion* success;

  _MCoordinateSystemMapper_QuaternionToMMI_L_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MCoordinateSystemMapper_QuaternionToMMI_args__isset {
  _MCoordinateSystemMapper_QuaternionToMMI_args__isset() : quat(false), firstAxis(false), secondAxis(false), thirdAxis(false) {}
  bool quat :1;
  bool firstAxis :1;
  bool secondAxis :1;
  bool thirdAxis :1;
} _MCoordinateSystemMapper_QuaternionToMMI_args__isset;

class MCoordinateSystemMapper_QuaternionToMMI_args {
 public:

  MCoordinateSystemMapper_QuaternionToMMI_args(const MCoordinateSystemMapper_QuaternionToMMI_args&);
  MCoordinateSystemMapper_QuaternionToMMI_args& operator=(const MCoordinateSystemMapper_QuaternionToMMI_args&);
  MCoordinateSystemMapper_QuaternionToMMI_args() : firstAxis((MDirection::type)0), secondAxis((MDirection::type)0), thirdAxis((MDirection::type)0) {
  }

  virtual ~MCoordinateSystemMapper_QuaternionToMMI_args() noexcept;
   ::MMIStandard::MQuaternion quat;
  MDirection::type firstAxis;
  MDirection::type secondAxis;
  MDirection::type thirdAxis;

  _MCoordinateSystemMapper_QuaternionToMMI_args__isset __isset;

  void __set_quat(const  ::MMIStandard::MQuaternion& val);

  void __set_firstAxis(const MDirection::type val);

  void __set_secondAxis(const MDirection::type val);

  void __set_thirdAxis(const MDirection::type val);

  bool operator == (const MCoordinateSystemMapper_QuaternionToMMI_args & rhs) const
  {
    if (!(quat == rhs.quat))
      return false;
    if (!(firstAxis == rhs.firstAxis))
      return false;
    if (!(secondAxis == rhs.secondAxis))
      return false;
    if (!(thirdAxis == rhs.thirdAxis))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_QuaternionToMMI_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_QuaternionToMMI_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoordinateSystemMapper_QuaternionToMMI_pargs {
 public:


  virtual ~MCoordinateSystemMapper_QuaternionToMMI_pargs() noexcept;
  const  ::MMIStandard::MQuaternion* quat;
  const MDirection::type* firstAxis;
  const MDirection::type* secondAxis;
  const MDirection::type* thirdAxis;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_QuaternionToMMI_result__isset {
  _MCoordinateSystemMapper_QuaternionToMMI_result__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_QuaternionToMMI_result__isset;

class MCoordinateSystemMapper_QuaternionToMMI_result {
 public:

  MCoordinateSystemMapper_QuaternionToMMI_result(const MCoordinateSystemMapper_QuaternionToMMI_result&);
  MCoordinateSystemMapper_QuaternionToMMI_result& operator=(const MCoordinateSystemMapper_QuaternionToMMI_result&);
  MCoordinateSystemMapper_QuaternionToMMI_result() {
  }

  virtual ~MCoordinateSystemMapper_QuaternionToMMI_result() noexcept;
   ::MMIStandard::MQuaternion success;

  _MCoordinateSystemMapper_QuaternionToMMI_result__isset __isset;

  void __set_success(const  ::MMIStandard::MQuaternion& val);

  bool operator == (const MCoordinateSystemMapper_QuaternionToMMI_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_QuaternionToMMI_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_QuaternionToMMI_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_QuaternionToMMI_presult__isset {
  _MCoordinateSystemMapper_QuaternionToMMI_presult__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_QuaternionToMMI_presult__isset;

class MCoordinateSystemMapper_QuaternionToMMI_presult {
 public:


  virtual ~MCoordinateSystemMapper_QuaternionToMMI_presult() noexcept;
   ::MMIStandard::MQuaternion* success;

  _MCoordinateSystemMapper_QuaternionToMMI_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MCoordinateSystemMapper_QuaternionFromMMI_L_args__isset {
  _MCoordinateSystemMapper_QuaternionFromMMI_L_args__isset() : quat(false), coordinateSystem(false) {}
  bool quat :1;
  bool coordinateSystem :1;
} _MCoordinateSystemMapper_QuaternionFromMMI_L_args__isset;

class MCoordinateSystemMapper_QuaternionFromMMI_L_args {
 public:

  MCoordinateSystemMapper_QuaternionFromMMI_L_args(const MCoordinateSystemMapper_QuaternionFromMMI_L_args&);
  MCoordinateSystemMapper_QuaternionFromMMI_L_args& operator=(const MCoordinateSystemMapper_QuaternionFromMMI_L_args&);
  MCoordinateSystemMapper_QuaternionFromMMI_L_args() {
  }

  virtual ~MCoordinateSystemMapper_QuaternionFromMMI_L_args() noexcept;
   ::MMIStandard::MQuaternion quat;
  std::vector<MDirection::type>  coordinateSystem;

  _MCoordinateSystemMapper_QuaternionFromMMI_L_args__isset __isset;

  void __set_quat(const  ::MMIStandard::MQuaternion& val);

  void __set_coordinateSystem(const std::vector<MDirection::type> & val);

  bool operator == (const MCoordinateSystemMapper_QuaternionFromMMI_L_args & rhs) const
  {
    if (!(quat == rhs.quat))
      return false;
    if (!(coordinateSystem == rhs.coordinateSystem))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_QuaternionFromMMI_L_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_QuaternionFromMMI_L_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoordinateSystemMapper_QuaternionFromMMI_L_pargs {
 public:


  virtual ~MCoordinateSystemMapper_QuaternionFromMMI_L_pargs() noexcept;
  const  ::MMIStandard::MQuaternion* quat;
  const std::vector<MDirection::type> * coordinateSystem;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_QuaternionFromMMI_L_result__isset {
  _MCoordinateSystemMapper_QuaternionFromMMI_L_result__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_QuaternionFromMMI_L_result__isset;

class MCoordinateSystemMapper_QuaternionFromMMI_L_result {
 public:

  MCoordinateSystemMapper_QuaternionFromMMI_L_result(const MCoordinateSystemMapper_QuaternionFromMMI_L_result&);
  MCoordinateSystemMapper_QuaternionFromMMI_L_result& operator=(const MCoordinateSystemMapper_QuaternionFromMMI_L_result&);
  MCoordinateSystemMapper_QuaternionFromMMI_L_result() {
  }

  virtual ~MCoordinateSystemMapper_QuaternionFromMMI_L_result() noexcept;
   ::MMIStandard::MQuaternion success;

  _MCoordinateSystemMapper_QuaternionFromMMI_L_result__isset __isset;

  void __set_success(const  ::MMIStandard::MQuaternion& val);

  bool operator == (const MCoordinateSystemMapper_QuaternionFromMMI_L_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_QuaternionFromMMI_L_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_QuaternionFromMMI_L_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_QuaternionFromMMI_L_presult__isset {
  _MCoordinateSystemMapper_QuaternionFromMMI_L_presult__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_QuaternionFromMMI_L_presult__isset;

class MCoordinateSystemMapper_QuaternionFromMMI_L_presult {
 public:


  virtual ~MCoordinateSystemMapper_QuaternionFromMMI_L_presult() noexcept;
   ::MMIStandard::MQuaternion* success;

  _MCoordinateSystemMapper_QuaternionFromMMI_L_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MCoordinateSystemMapper_QuaternionFromMMI_args__isset {
  _MCoordinateSystemMapper_QuaternionFromMMI_args__isset() : quat(false), firstAxis(false), secondAxis(false), thirdAxis(false) {}
  bool quat :1;
  bool firstAxis :1;
  bool secondAxis :1;
  bool thirdAxis :1;
} _MCoordinateSystemMapper_QuaternionFromMMI_args__isset;

class MCoordinateSystemMapper_QuaternionFromMMI_args {
 public:

  MCoordinateSystemMapper_QuaternionFromMMI_args(const MCoordinateSystemMapper_QuaternionFromMMI_args&);
  MCoordinateSystemMapper_QuaternionFromMMI_args& operator=(const MCoordinateSystemMapper_QuaternionFromMMI_args&);
  MCoordinateSystemMapper_QuaternionFromMMI_args() : firstAxis((MDirection::type)0), secondAxis((MDirection::type)0), thirdAxis((MDirection::type)0) {
  }

  virtual ~MCoordinateSystemMapper_QuaternionFromMMI_args() noexcept;
   ::MMIStandard::MQuaternion quat;
  MDirection::type firstAxis;
  MDirection::type secondAxis;
  MDirection::type thirdAxis;

  _MCoordinateSystemMapper_QuaternionFromMMI_args__isset __isset;

  void __set_quat(const  ::MMIStandard::MQuaternion& val);

  void __set_firstAxis(const MDirection::type val);

  void __set_secondAxis(const MDirection::type val);

  void __set_thirdAxis(const MDirection::type val);

  bool operator == (const MCoordinateSystemMapper_QuaternionFromMMI_args & rhs) const
  {
    if (!(quat == rhs.quat))
      return false;
    if (!(firstAxis == rhs.firstAxis))
      return false;
    if (!(secondAxis == rhs.secondAxis))
      return false;
    if (!(thirdAxis == rhs.thirdAxis))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_QuaternionFromMMI_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_QuaternionFromMMI_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoordinateSystemMapper_QuaternionFromMMI_pargs {
 public:


  virtual ~MCoordinateSystemMapper_QuaternionFromMMI_pargs() noexcept;
  const  ::MMIStandard::MQuaternion* quat;
  const MDirection::type* firstAxis;
  const MDirection::type* secondAxis;
  const MDirection::type* thirdAxis;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_QuaternionFromMMI_result__isset {
  _MCoordinateSystemMapper_QuaternionFromMMI_result__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_QuaternionFromMMI_result__isset;

class MCoordinateSystemMapper_QuaternionFromMMI_result {
 public:

  MCoordinateSystemMapper_QuaternionFromMMI_result(const MCoordinateSystemMapper_QuaternionFromMMI_result&);
  MCoordinateSystemMapper_QuaternionFromMMI_result& operator=(const MCoordinateSystemMapper_QuaternionFromMMI_result&);
  MCoordinateSystemMapper_QuaternionFromMMI_result() {
  }

  virtual ~MCoordinateSystemMapper_QuaternionFromMMI_result() noexcept;
   ::MMIStandard::MQuaternion success;

  _MCoordinateSystemMapper_QuaternionFromMMI_result__isset __isset;

  void __set_success(const  ::MMIStandard::MQuaternion& val);

  bool operator == (const MCoordinateSystemMapper_QuaternionFromMMI_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_QuaternionFromMMI_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_QuaternionFromMMI_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_QuaternionFromMMI_presult__isset {
  _MCoordinateSystemMapper_QuaternionFromMMI_presult__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_QuaternionFromMMI_presult__isset;

class MCoordinateSystemMapper_QuaternionFromMMI_presult {
 public:


  virtual ~MCoordinateSystemMapper_QuaternionFromMMI_presult() noexcept;
   ::MMIStandard::MQuaternion* success;

  _MCoordinateSystemMapper_QuaternionFromMMI_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MCoordinateSystemMapper_VectorToMMI_L_args__isset {
  _MCoordinateSystemMapper_VectorToMMI_L_args__isset() : quat(false), coordinateSystem(false) {}
  bool quat :1;
  bool coordinateSystem :1;
} _MCoordinateSystemMapper_VectorToMMI_L_args__isset;

class MCoordinateSystemMapper_VectorToMMI_L_args {
 public:

  MCoordinateSystemMapper_VectorToMMI_L_args(const MCoordinateSystemMapper_VectorToMMI_L_args&);
  MCoordinateSystemMapper_VectorToMMI_L_args& operator=(const MCoordinateSystemMapper_VectorToMMI_L_args&);
  MCoordinateSystemMapper_VectorToMMI_L_args() {
  }

  virtual ~MCoordinateSystemMapper_VectorToMMI_L_args() noexcept;
   ::MMIStandard::MVector3 quat;
  std::vector<MDirection::type>  coordinateSystem;

  _MCoordinateSystemMapper_VectorToMMI_L_args__isset __isset;

  void __set_quat(const  ::MMIStandard::MVector3& val);

  void __set_coordinateSystem(const std::vector<MDirection::type> & val);

  bool operator == (const MCoordinateSystemMapper_VectorToMMI_L_args & rhs) const
  {
    if (!(quat == rhs.quat))
      return false;
    if (!(coordinateSystem == rhs.coordinateSystem))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_VectorToMMI_L_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_VectorToMMI_L_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoordinateSystemMapper_VectorToMMI_L_pargs {
 public:


  virtual ~MCoordinateSystemMapper_VectorToMMI_L_pargs() noexcept;
  const  ::MMIStandard::MVector3* quat;
  const std::vector<MDirection::type> * coordinateSystem;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_VectorToMMI_L_result__isset {
  _MCoordinateSystemMapper_VectorToMMI_L_result__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_VectorToMMI_L_result__isset;

class MCoordinateSystemMapper_VectorToMMI_L_result {
 public:

  MCoordinateSystemMapper_VectorToMMI_L_result(const MCoordinateSystemMapper_VectorToMMI_L_result&);
  MCoordinateSystemMapper_VectorToMMI_L_result& operator=(const MCoordinateSystemMapper_VectorToMMI_L_result&);
  MCoordinateSystemMapper_VectorToMMI_L_result() {
  }

  virtual ~MCoordinateSystemMapper_VectorToMMI_L_result() noexcept;
   ::MMIStandard::MVector3 success;

  _MCoordinateSystemMapper_VectorToMMI_L_result__isset __isset;

  void __set_success(const  ::MMIStandard::MVector3& val);

  bool operator == (const MCoordinateSystemMapper_VectorToMMI_L_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_VectorToMMI_L_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_VectorToMMI_L_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_VectorToMMI_L_presult__isset {
  _MCoordinateSystemMapper_VectorToMMI_L_presult__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_VectorToMMI_L_presult__isset;

class MCoordinateSystemMapper_VectorToMMI_L_presult {
 public:


  virtual ~MCoordinateSystemMapper_VectorToMMI_L_presult() noexcept;
   ::MMIStandard::MVector3* success;

  _MCoordinateSystemMapper_VectorToMMI_L_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MCoordinateSystemMapper_VectorToMMI_args__isset {
  _MCoordinateSystemMapper_VectorToMMI_args__isset() : quat(false), firstAxis(false), secondAxis(false), thirdAxis(false) {}
  bool quat :1;
  bool firstAxis :1;
  bool secondAxis :1;
  bool thirdAxis :1;
} _MCoordinateSystemMapper_VectorToMMI_args__isset;

class MCoordinateSystemMapper_VectorToMMI_args {
 public:

  MCoordinateSystemMapper_VectorToMMI_args(const MCoordinateSystemMapper_VectorToMMI_args&);
  MCoordinateSystemMapper_VectorToMMI_args& operator=(const MCoordinateSystemMapper_VectorToMMI_args&);
  MCoordinateSystemMapper_VectorToMMI_args() : firstAxis((MDirection::type)0), secondAxis((MDirection::type)0), thirdAxis((MDirection::type)0) {
  }

  virtual ~MCoordinateSystemMapper_VectorToMMI_args() noexcept;
   ::MMIStandard::MVector3 quat;
  MDirection::type firstAxis;
  MDirection::type secondAxis;
  MDirection::type thirdAxis;

  _MCoordinateSystemMapper_VectorToMMI_args__isset __isset;

  void __set_quat(const  ::MMIStandard::MVector3& val);

  void __set_firstAxis(const MDirection::type val);

  void __set_secondAxis(const MDirection::type val);

  void __set_thirdAxis(const MDirection::type val);

  bool operator == (const MCoordinateSystemMapper_VectorToMMI_args & rhs) const
  {
    if (!(quat == rhs.quat))
      return false;
    if (!(firstAxis == rhs.firstAxis))
      return false;
    if (!(secondAxis == rhs.secondAxis))
      return false;
    if (!(thirdAxis == rhs.thirdAxis))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_VectorToMMI_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_VectorToMMI_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoordinateSystemMapper_VectorToMMI_pargs {
 public:


  virtual ~MCoordinateSystemMapper_VectorToMMI_pargs() noexcept;
  const  ::MMIStandard::MVector3* quat;
  const MDirection::type* firstAxis;
  const MDirection::type* secondAxis;
  const MDirection::type* thirdAxis;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_VectorToMMI_result__isset {
  _MCoordinateSystemMapper_VectorToMMI_result__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_VectorToMMI_result__isset;

class MCoordinateSystemMapper_VectorToMMI_result {
 public:

  MCoordinateSystemMapper_VectorToMMI_result(const MCoordinateSystemMapper_VectorToMMI_result&);
  MCoordinateSystemMapper_VectorToMMI_result& operator=(const MCoordinateSystemMapper_VectorToMMI_result&);
  MCoordinateSystemMapper_VectorToMMI_result() {
  }

  virtual ~MCoordinateSystemMapper_VectorToMMI_result() noexcept;
   ::MMIStandard::MVector3 success;

  _MCoordinateSystemMapper_VectorToMMI_result__isset __isset;

  void __set_success(const  ::MMIStandard::MVector3& val);

  bool operator == (const MCoordinateSystemMapper_VectorToMMI_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_VectorToMMI_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_VectorToMMI_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_VectorToMMI_presult__isset {
  _MCoordinateSystemMapper_VectorToMMI_presult__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_VectorToMMI_presult__isset;

class MCoordinateSystemMapper_VectorToMMI_presult {
 public:


  virtual ~MCoordinateSystemMapper_VectorToMMI_presult() noexcept;
   ::MMIStandard::MVector3* success;

  _MCoordinateSystemMapper_VectorToMMI_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MCoordinateSystemMapper_VectorFromMMI_L_args__isset {
  _MCoordinateSystemMapper_VectorFromMMI_L_args__isset() : quat(false), coordinateSystem(false) {}
  bool quat :1;
  bool coordinateSystem :1;
} _MCoordinateSystemMapper_VectorFromMMI_L_args__isset;

class MCoordinateSystemMapper_VectorFromMMI_L_args {
 public:

  MCoordinateSystemMapper_VectorFromMMI_L_args(const MCoordinateSystemMapper_VectorFromMMI_L_args&);
  MCoordinateSystemMapper_VectorFromMMI_L_args& operator=(const MCoordinateSystemMapper_VectorFromMMI_L_args&);
  MCoordinateSystemMapper_VectorFromMMI_L_args() {
  }

  virtual ~MCoordinateSystemMapper_VectorFromMMI_L_args() noexcept;
   ::MMIStandard::MVector3 quat;
  std::vector<MDirection::type>  coordinateSystem;

  _MCoordinateSystemMapper_VectorFromMMI_L_args__isset __isset;

  void __set_quat(const  ::MMIStandard::MVector3& val);

  void __set_coordinateSystem(const std::vector<MDirection::type> & val);

  bool operator == (const MCoordinateSystemMapper_VectorFromMMI_L_args & rhs) const
  {
    if (!(quat == rhs.quat))
      return false;
    if (!(coordinateSystem == rhs.coordinateSystem))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_VectorFromMMI_L_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_VectorFromMMI_L_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoordinateSystemMapper_VectorFromMMI_L_pargs {
 public:


  virtual ~MCoordinateSystemMapper_VectorFromMMI_L_pargs() noexcept;
  const  ::MMIStandard::MVector3* quat;
  const std::vector<MDirection::type> * coordinateSystem;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_VectorFromMMI_L_result__isset {
  _MCoordinateSystemMapper_VectorFromMMI_L_result__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_VectorFromMMI_L_result__isset;

class MCoordinateSystemMapper_VectorFromMMI_L_result {
 public:

  MCoordinateSystemMapper_VectorFromMMI_L_result(const MCoordinateSystemMapper_VectorFromMMI_L_result&);
  MCoordinateSystemMapper_VectorFromMMI_L_result& operator=(const MCoordinateSystemMapper_VectorFromMMI_L_result&);
  MCoordinateSystemMapper_VectorFromMMI_L_result() {
  }

  virtual ~MCoordinateSystemMapper_VectorFromMMI_L_result() noexcept;
   ::MMIStandard::MVector3 success;

  _MCoordinateSystemMapper_VectorFromMMI_L_result__isset __isset;

  void __set_success(const  ::MMIStandard::MVector3& val);

  bool operator == (const MCoordinateSystemMapper_VectorFromMMI_L_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_VectorFromMMI_L_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_VectorFromMMI_L_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_VectorFromMMI_L_presult__isset {
  _MCoordinateSystemMapper_VectorFromMMI_L_presult__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_VectorFromMMI_L_presult__isset;

class MCoordinateSystemMapper_VectorFromMMI_L_presult {
 public:


  virtual ~MCoordinateSystemMapper_VectorFromMMI_L_presult() noexcept;
   ::MMIStandard::MVector3* success;

  _MCoordinateSystemMapper_VectorFromMMI_L_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MCoordinateSystemMapper_VectorFromMMI_args__isset {
  _MCoordinateSystemMapper_VectorFromMMI_args__isset() : quat(false), firstAxis(false), secondAxis(false), thirdAxis(false) {}
  bool quat :1;
  bool firstAxis :1;
  bool secondAxis :1;
  bool thirdAxis :1;
} _MCoordinateSystemMapper_VectorFromMMI_args__isset;

class MCoordinateSystemMapper_VectorFromMMI_args {
 public:

  MCoordinateSystemMapper_VectorFromMMI_args(const MCoordinateSystemMapper_VectorFromMMI_args&);
  MCoordinateSystemMapper_VectorFromMMI_args& operator=(const MCoordinateSystemMapper_VectorFromMMI_args&);
  MCoordinateSystemMapper_VectorFromMMI_args() : firstAxis((MDirection::type)0), secondAxis((MDirection::type)0), thirdAxis((MDirection::type)0) {
  }

  virtual ~MCoordinateSystemMapper_VectorFromMMI_args() noexcept;
   ::MMIStandard::MVector3 quat;
  MDirection::type firstAxis;
  MDirection::type secondAxis;
  MDirection::type thirdAxis;

  _MCoordinateSystemMapper_VectorFromMMI_args__isset __isset;

  void __set_quat(const  ::MMIStandard::MVector3& val);

  void __set_firstAxis(const MDirection::type val);

  void __set_secondAxis(const MDirection::type val);

  void __set_thirdAxis(const MDirection::type val);

  bool operator == (const MCoordinateSystemMapper_VectorFromMMI_args & rhs) const
  {
    if (!(quat == rhs.quat))
      return false;
    if (!(firstAxis == rhs.firstAxis))
      return false;
    if (!(secondAxis == rhs.secondAxis))
      return false;
    if (!(thirdAxis == rhs.thirdAxis))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_VectorFromMMI_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_VectorFromMMI_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoordinateSystemMapper_VectorFromMMI_pargs {
 public:


  virtual ~MCoordinateSystemMapper_VectorFromMMI_pargs() noexcept;
  const  ::MMIStandard::MVector3* quat;
  const MDirection::type* firstAxis;
  const MDirection::type* secondAxis;
  const MDirection::type* thirdAxis;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_VectorFromMMI_result__isset {
  _MCoordinateSystemMapper_VectorFromMMI_result__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_VectorFromMMI_result__isset;

class MCoordinateSystemMapper_VectorFromMMI_result {
 public:

  MCoordinateSystemMapper_VectorFromMMI_result(const MCoordinateSystemMapper_VectorFromMMI_result&);
  MCoordinateSystemMapper_VectorFromMMI_result& operator=(const MCoordinateSystemMapper_VectorFromMMI_result&);
  MCoordinateSystemMapper_VectorFromMMI_result() {
  }

  virtual ~MCoordinateSystemMapper_VectorFromMMI_result() noexcept;
   ::MMIStandard::MVector3 success;

  _MCoordinateSystemMapper_VectorFromMMI_result__isset __isset;

  void __set_success(const  ::MMIStandard::MVector3& val);

  bool operator == (const MCoordinateSystemMapper_VectorFromMMI_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MCoordinateSystemMapper_VectorFromMMI_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoordinateSystemMapper_VectorFromMMI_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MCoordinateSystemMapper_VectorFromMMI_presult__isset {
  _MCoordinateSystemMapper_VectorFromMMI_presult__isset() : success(false) {}
  bool success :1;
} _MCoordinateSystemMapper_VectorFromMMI_presult__isset;

class MCoordinateSystemMapper_VectorFromMMI_presult {
 public:


  virtual ~MCoordinateSystemMapper_VectorFromMMI_presult() noexcept;
   ::MMIStandard::MVector3* success;

  _MCoordinateSystemMapper_VectorFromMMI_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MCoordinateSystemMapperClient : virtual public MCoordinateSystemMapperIf, public MMIServiceBaseClient {
 public:
  MCoordinateSystemMapperClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    MMIServiceBaseClient(prot, prot) {}
  MCoordinateSystemMapperClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    MMIServiceBaseClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void TransformToMMI_L( ::MMIStandard::MTransform& _return, const  ::MMIStandard::MTransform& transform, const std::vector<MDirection::type> & coordinateSystem);
  void send_TransformToMMI_L(const  ::MMIStandard::MTransform& transform, const std::vector<MDirection::type> & coordinateSystem);
  void recv_TransformToMMI_L( ::MMIStandard::MTransform& _return);
  void TransformToMMI( ::MMIStandard::MTransform& _return, const  ::MMIStandard::MTransform& transform, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void send_TransformToMMI(const  ::MMIStandard::MTransform& transform, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void recv_TransformToMMI( ::MMIStandard::MTransform& _return);
  void TransformFromMMI_L( ::MMIStandard::MTransform& _return, const  ::MMIStandard::MTransform& transform, const std::vector<MDirection::type> & coordinateSystem);
  void send_TransformFromMMI_L(const  ::MMIStandard::MTransform& transform, const std::vector<MDirection::type> & coordinateSystem);
  void recv_TransformFromMMI_L( ::MMIStandard::MTransform& _return);
  void TransformFromMMI( ::MMIStandard::MTransform& _return, const  ::MMIStandard::MTransform& transform, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void send_TransformFromMMI(const  ::MMIStandard::MTransform& transform, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void recv_TransformFromMMI( ::MMIStandard::MTransform& _return);
  void QuaternionToMMI_L( ::MMIStandard::MQuaternion& _return, const  ::MMIStandard::MQuaternion& quat, const std::vector<MDirection::type> & coordinateSystem);
  void send_QuaternionToMMI_L(const  ::MMIStandard::MQuaternion& quat, const std::vector<MDirection::type> & coordinateSystem);
  void recv_QuaternionToMMI_L( ::MMIStandard::MQuaternion& _return);
  void QuaternionToMMI( ::MMIStandard::MQuaternion& _return, const  ::MMIStandard::MQuaternion& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void send_QuaternionToMMI(const  ::MMIStandard::MQuaternion& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void recv_QuaternionToMMI( ::MMIStandard::MQuaternion& _return);
  void QuaternionFromMMI_L( ::MMIStandard::MQuaternion& _return, const  ::MMIStandard::MQuaternion& quat, const std::vector<MDirection::type> & coordinateSystem);
  void send_QuaternionFromMMI_L(const  ::MMIStandard::MQuaternion& quat, const std::vector<MDirection::type> & coordinateSystem);
  void recv_QuaternionFromMMI_L( ::MMIStandard::MQuaternion& _return);
  void QuaternionFromMMI( ::MMIStandard::MQuaternion& _return, const  ::MMIStandard::MQuaternion& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void send_QuaternionFromMMI(const  ::MMIStandard::MQuaternion& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void recv_QuaternionFromMMI( ::MMIStandard::MQuaternion& _return);
  void VectorToMMI_L( ::MMIStandard::MVector3& _return, const  ::MMIStandard::MVector3& quat, const std::vector<MDirection::type> & coordinateSystem);
  void send_VectorToMMI_L(const  ::MMIStandard::MVector3& quat, const std::vector<MDirection::type> & coordinateSystem);
  void recv_VectorToMMI_L( ::MMIStandard::MVector3& _return);
  void VectorToMMI( ::MMIStandard::MVector3& _return, const  ::MMIStandard::MVector3& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void send_VectorToMMI(const  ::MMIStandard::MVector3& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void recv_VectorToMMI( ::MMIStandard::MVector3& _return);
  void VectorFromMMI_L( ::MMIStandard::MVector3& _return, const  ::MMIStandard::MVector3& quat, const std::vector<MDirection::type> & coordinateSystem);
  void send_VectorFromMMI_L(const  ::MMIStandard::MVector3& quat, const std::vector<MDirection::type> & coordinateSystem);
  void recv_VectorFromMMI_L( ::MMIStandard::MVector3& _return);
  void VectorFromMMI( ::MMIStandard::MVector3& _return, const  ::MMIStandard::MVector3& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void send_VectorFromMMI(const  ::MMIStandard::MVector3& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void recv_VectorFromMMI( ::MMIStandard::MVector3& _return);
};

class MCoordinateSystemMapperProcessor : public MMIServiceBaseProcessor {
 protected:
  ::std::shared_ptr<MCoordinateSystemMapperIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MCoordinateSystemMapperProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_TransformToMMI_L(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TransformToMMI(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TransformFromMMI_L(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TransformFromMMI(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QuaternionToMMI_L(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QuaternionToMMI(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QuaternionFromMMI_L(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QuaternionFromMMI(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_VectorToMMI_L(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_VectorToMMI(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_VectorFromMMI_L(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_VectorFromMMI(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MCoordinateSystemMapperProcessor(::std::shared_ptr<MCoordinateSystemMapperIf> iface) :
    MMIServiceBaseProcessor(iface),
    iface_(iface) {
    processMap_["TransformToMMI_L"] = &MCoordinateSystemMapperProcessor::process_TransformToMMI_L;
    processMap_["TransformToMMI"] = &MCoordinateSystemMapperProcessor::process_TransformToMMI;
    processMap_["TransformFromMMI_L"] = &MCoordinateSystemMapperProcessor::process_TransformFromMMI_L;
    processMap_["TransformFromMMI"] = &MCoordinateSystemMapperProcessor::process_TransformFromMMI;
    processMap_["QuaternionToMMI_L"] = &MCoordinateSystemMapperProcessor::process_QuaternionToMMI_L;
    processMap_["QuaternionToMMI"] = &MCoordinateSystemMapperProcessor::process_QuaternionToMMI;
    processMap_["QuaternionFromMMI_L"] = &MCoordinateSystemMapperProcessor::process_QuaternionFromMMI_L;
    processMap_["QuaternionFromMMI"] = &MCoordinateSystemMapperProcessor::process_QuaternionFromMMI;
    processMap_["VectorToMMI_L"] = &MCoordinateSystemMapperProcessor::process_VectorToMMI_L;
    processMap_["VectorToMMI"] = &MCoordinateSystemMapperProcessor::process_VectorToMMI;
    processMap_["VectorFromMMI_L"] = &MCoordinateSystemMapperProcessor::process_VectorFromMMI_L;
    processMap_["VectorFromMMI"] = &MCoordinateSystemMapperProcessor::process_VectorFromMMI;
  }

  virtual ~MCoordinateSystemMapperProcessor() {}
};

class MCoordinateSystemMapperProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MCoordinateSystemMapperProcessorFactory(const ::std::shared_ptr< MCoordinateSystemMapperIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MCoordinateSystemMapperIfFactory > handlerFactory_;
};

class MCoordinateSystemMapperMultiface : virtual public MCoordinateSystemMapperIf, public MMIServiceBaseMultiface {
 public:
  MCoordinateSystemMapperMultiface(std::vector<std::shared_ptr<MCoordinateSystemMapperIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<MCoordinateSystemMapperIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      MMIServiceBaseMultiface::add(*iter);
    }
  }
  virtual ~MCoordinateSystemMapperMultiface() {}
 protected:
  std::vector<std::shared_ptr<MCoordinateSystemMapperIf> > ifaces_;
  MCoordinateSystemMapperMultiface() {}
  void add(::std::shared_ptr<MCoordinateSystemMapperIf> iface) {
    MMIServiceBaseMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void TransformToMMI_L( ::MMIStandard::MTransform& _return, const  ::MMIStandard::MTransform& transform, const std::vector<MDirection::type> & coordinateSystem) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TransformToMMI_L(_return, transform, coordinateSystem);
    }
    ifaces_[i]->TransformToMMI_L(_return, transform, coordinateSystem);
    return;
  }

  void TransformToMMI( ::MMIStandard::MTransform& _return, const  ::MMIStandard::MTransform& transform, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TransformToMMI(_return, transform, firstAxis, secondAxis, thirdAxis);
    }
    ifaces_[i]->TransformToMMI(_return, transform, firstAxis, secondAxis, thirdAxis);
    return;
  }

  void TransformFromMMI_L( ::MMIStandard::MTransform& _return, const  ::MMIStandard::MTransform& transform, const std::vector<MDirection::type> & coordinateSystem) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TransformFromMMI_L(_return, transform, coordinateSystem);
    }
    ifaces_[i]->TransformFromMMI_L(_return, transform, coordinateSystem);
    return;
  }

  void TransformFromMMI( ::MMIStandard::MTransform& _return, const  ::MMIStandard::MTransform& transform, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TransformFromMMI(_return, transform, firstAxis, secondAxis, thirdAxis);
    }
    ifaces_[i]->TransformFromMMI(_return, transform, firstAxis, secondAxis, thirdAxis);
    return;
  }

  void QuaternionToMMI_L( ::MMIStandard::MQuaternion& _return, const  ::MMIStandard::MQuaternion& quat, const std::vector<MDirection::type> & coordinateSystem) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QuaternionToMMI_L(_return, quat, coordinateSystem);
    }
    ifaces_[i]->QuaternionToMMI_L(_return, quat, coordinateSystem);
    return;
  }

  void QuaternionToMMI( ::MMIStandard::MQuaternion& _return, const  ::MMIStandard::MQuaternion& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QuaternionToMMI(_return, quat, firstAxis, secondAxis, thirdAxis);
    }
    ifaces_[i]->QuaternionToMMI(_return, quat, firstAxis, secondAxis, thirdAxis);
    return;
  }

  void QuaternionFromMMI_L( ::MMIStandard::MQuaternion& _return, const  ::MMIStandard::MQuaternion& quat, const std::vector<MDirection::type> & coordinateSystem) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QuaternionFromMMI_L(_return, quat, coordinateSystem);
    }
    ifaces_[i]->QuaternionFromMMI_L(_return, quat, coordinateSystem);
    return;
  }

  void QuaternionFromMMI( ::MMIStandard::MQuaternion& _return, const  ::MMIStandard::MQuaternion& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QuaternionFromMMI(_return, quat, firstAxis, secondAxis, thirdAxis);
    }
    ifaces_[i]->QuaternionFromMMI(_return, quat, firstAxis, secondAxis, thirdAxis);
    return;
  }

  void VectorToMMI_L( ::MMIStandard::MVector3& _return, const  ::MMIStandard::MVector3& quat, const std::vector<MDirection::type> & coordinateSystem) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->VectorToMMI_L(_return, quat, coordinateSystem);
    }
    ifaces_[i]->VectorToMMI_L(_return, quat, coordinateSystem);
    return;
  }

  void VectorToMMI( ::MMIStandard::MVector3& _return, const  ::MMIStandard::MVector3& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->VectorToMMI(_return, quat, firstAxis, secondAxis, thirdAxis);
    }
    ifaces_[i]->VectorToMMI(_return, quat, firstAxis, secondAxis, thirdAxis);
    return;
  }

  void VectorFromMMI_L( ::MMIStandard::MVector3& _return, const  ::MMIStandard::MVector3& quat, const std::vector<MDirection::type> & coordinateSystem) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->VectorFromMMI_L(_return, quat, coordinateSystem);
    }
    ifaces_[i]->VectorFromMMI_L(_return, quat, coordinateSystem);
    return;
  }

  void VectorFromMMI( ::MMIStandard::MVector3& _return, const  ::MMIStandard::MVector3& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->VectorFromMMI(_return, quat, firstAxis, secondAxis, thirdAxis);
    }
    ifaces_[i]->VectorFromMMI(_return, quat, firstAxis, secondAxis, thirdAxis);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MCoordinateSystemMapperConcurrentClient : virtual public MCoordinateSystemMapperIf, public MMIServiceBaseConcurrentClient {
 public:
  MCoordinateSystemMapperConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
    MMIServiceBaseConcurrentClient(prot, prot, sync) {}
  MCoordinateSystemMapperConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :    MMIServiceBaseConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void TransformToMMI_L( ::MMIStandard::MTransform& _return, const  ::MMIStandard::MTransform& transform, const std::vector<MDirection::type> & coordinateSystem);
  int32_t send_TransformToMMI_L(const  ::MMIStandard::MTransform& transform, const std::vector<MDirection::type> & coordinateSystem);
  void recv_TransformToMMI_L( ::MMIStandard::MTransform& _return, const int32_t seqid);
  void TransformToMMI( ::MMIStandard::MTransform& _return, const  ::MMIStandard::MTransform& transform, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  int32_t send_TransformToMMI(const  ::MMIStandard::MTransform& transform, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void recv_TransformToMMI( ::MMIStandard::MTransform& _return, const int32_t seqid);
  void TransformFromMMI_L( ::MMIStandard::MTransform& _return, const  ::MMIStandard::MTransform& transform, const std::vector<MDirection::type> & coordinateSystem);
  int32_t send_TransformFromMMI_L(const  ::MMIStandard::MTransform& transform, const std::vector<MDirection::type> & coordinateSystem);
  void recv_TransformFromMMI_L( ::MMIStandard::MTransform& _return, const int32_t seqid);
  void TransformFromMMI( ::MMIStandard::MTransform& _return, const  ::MMIStandard::MTransform& transform, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  int32_t send_TransformFromMMI(const  ::MMIStandard::MTransform& transform, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void recv_TransformFromMMI( ::MMIStandard::MTransform& _return, const int32_t seqid);
  void QuaternionToMMI_L( ::MMIStandard::MQuaternion& _return, const  ::MMIStandard::MQuaternion& quat, const std::vector<MDirection::type> & coordinateSystem);
  int32_t send_QuaternionToMMI_L(const  ::MMIStandard::MQuaternion& quat, const std::vector<MDirection::type> & coordinateSystem);
  void recv_QuaternionToMMI_L( ::MMIStandard::MQuaternion& _return, const int32_t seqid);
  void QuaternionToMMI( ::MMIStandard::MQuaternion& _return, const  ::MMIStandard::MQuaternion& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  int32_t send_QuaternionToMMI(const  ::MMIStandard::MQuaternion& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void recv_QuaternionToMMI( ::MMIStandard::MQuaternion& _return, const int32_t seqid);
  void QuaternionFromMMI_L( ::MMIStandard::MQuaternion& _return, const  ::MMIStandard::MQuaternion& quat, const std::vector<MDirection::type> & coordinateSystem);
  int32_t send_QuaternionFromMMI_L(const  ::MMIStandard::MQuaternion& quat, const std::vector<MDirection::type> & coordinateSystem);
  void recv_QuaternionFromMMI_L( ::MMIStandard::MQuaternion& _return, const int32_t seqid);
  void QuaternionFromMMI( ::MMIStandard::MQuaternion& _return, const  ::MMIStandard::MQuaternion& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  int32_t send_QuaternionFromMMI(const  ::MMIStandard::MQuaternion& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void recv_QuaternionFromMMI( ::MMIStandard::MQuaternion& _return, const int32_t seqid);
  void VectorToMMI_L( ::MMIStandard::MVector3& _return, const  ::MMIStandard::MVector3& quat, const std::vector<MDirection::type> & coordinateSystem);
  int32_t send_VectorToMMI_L(const  ::MMIStandard::MVector3& quat, const std::vector<MDirection::type> & coordinateSystem);
  void recv_VectorToMMI_L( ::MMIStandard::MVector3& _return, const int32_t seqid);
  void VectorToMMI( ::MMIStandard::MVector3& _return, const  ::MMIStandard::MVector3& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  int32_t send_VectorToMMI(const  ::MMIStandard::MVector3& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void recv_VectorToMMI( ::MMIStandard::MVector3& _return, const int32_t seqid);
  void VectorFromMMI_L( ::MMIStandard::MVector3& _return, const  ::MMIStandard::MVector3& quat, const std::vector<MDirection::type> & coordinateSystem);
  int32_t send_VectorFromMMI_L(const  ::MMIStandard::MVector3& quat, const std::vector<MDirection::type> & coordinateSystem);
  void recv_VectorFromMMI_L( ::MMIStandard::MVector3& _return, const int32_t seqid);
  void VectorFromMMI( ::MMIStandard::MVector3& _return, const  ::MMIStandard::MVector3& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  int32_t send_VectorFromMMI(const  ::MMIStandard::MVector3& quat, const MDirection::type firstAxis, const MDirection::type secondAxis, const MDirection::type thirdAxis);
  void recv_VectorFromMMI( ::MMIStandard::MVector3& _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
