/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "register_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace MMIStandard {


MAdapterDescription::~MAdapterDescription() noexcept {
}


void MAdapterDescription::__set_Name(const std::string& val) {
  this->Name = val;
}

void MAdapterDescription::__set_ID(const std::string& val) {
  this->ID = val;
}

void MAdapterDescription::__set_Language(const std::string& val) {
  this->Language = val;
}

void MAdapterDescription::__set_Addresses(const std::vector< ::MMIStandard::MIPAddress> & val) {
  this->Addresses = val;
}

void MAdapterDescription::__set_Properties(const std::map<std::string, std::string> & val) {
  this->Properties = val;
__isset.Properties = true;
}

void MAdapterDescription::__set_Parameters(const std::vector< ::MMIStandard::MParameter> & val) {
  this->Parameters = val;
__isset.Parameters = true;
}
std::ostream& operator<<(std::ostream& out, const MAdapterDescription& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MAdapterDescription::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_Name = false;
  bool isset_ID = false;
  bool isset_Language = false;
  bool isset_Addresses = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          isset_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ID);
          isset_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Language);
          isset_Language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Addresses.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->Addresses.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->Addresses[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_Addresses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->Properties.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _ktype6;
            ::apache::thrift::protocol::TType _vtype7;
            xfer += iprot->readMapBegin(_ktype6, _vtype7, _size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              std::string _key10;
              xfer += iprot->readString(_key10);
              std::string& _val11 = this->Properties[_key10];
              xfer += iprot->readString(_val11);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.Properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Parameters.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->Parameters.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->Parameters[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_Name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Language)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Addresses)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MAdapterDescription::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MAdapterDescription");

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ID", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Language", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Language);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Addresses", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Addresses.size()));
    std::vector< ::MMIStandard::MIPAddress> ::const_iterator _iter17;
    for (_iter17 = this->Addresses.begin(); _iter17 != this->Addresses.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.Properties) {
    xfer += oprot->writeFieldBegin("Properties", ::apache::thrift::protocol::T_MAP, 5);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->Properties.size()));
      std::map<std::string, std::string> ::const_iterator _iter18;
      for (_iter18 = this->Properties.begin(); _iter18 != this->Properties.end(); ++_iter18)
      {
        xfer += oprot->writeString(_iter18->first);
        xfer += oprot->writeString(_iter18->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Parameters) {
    xfer += oprot->writeFieldBegin("Parameters", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Parameters.size()));
      std::vector< ::MMIStandard::MParameter> ::const_iterator _iter19;
      for (_iter19 = this->Parameters.begin(); _iter19 != this->Parameters.end(); ++_iter19)
      {
        xfer += (*_iter19).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MAdapterDescription &a, MAdapterDescription &b) {
  using ::std::swap;
  swap(a.Name, b.Name);
  swap(a.ID, b.ID);
  swap(a.Language, b.Language);
  swap(a.Addresses, b.Addresses);
  swap(a.Properties, b.Properties);
  swap(a.Parameters, b.Parameters);
  swap(a.__isset, b.__isset);
}

MAdapterDescription::MAdapterDescription(const MAdapterDescription& other20) {
  Name = other20.Name;
  ID = other20.ID;
  Language = other20.Language;
  Addresses = other20.Addresses;
  Properties = other20.Properties;
  Parameters = other20.Parameters;
  __isset = other20.__isset;
}
MAdapterDescription& MAdapterDescription::operator=(const MAdapterDescription& other21) {
  Name = other21.Name;
  ID = other21.ID;
  Language = other21.Language;
  Addresses = other21.Addresses;
  Properties = other21.Properties;
  Parameters = other21.Parameters;
  __isset = other21.__isset;
  return *this;
}
void MAdapterDescription::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MAdapterDescription(";
  out << "Name=" << to_string(Name);
  out << ", " << "ID=" << to_string(ID);
  out << ", " << "Language=" << to_string(Language);
  out << ", " << "Addresses=" << to_string(Addresses);
  out << ", " << "Properties="; (__isset.Properties ? (out << to_string(Properties)) : (out << "<null>"));
  out << ", " << "Parameters="; (__isset.Parameters ? (out << to_string(Parameters)) : (out << "<null>"));
  out << ")";
}

} // namespace
