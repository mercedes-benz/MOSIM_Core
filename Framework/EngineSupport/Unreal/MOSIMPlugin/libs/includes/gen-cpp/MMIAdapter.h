/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MMIAdapter_H
#define MMIAdapter_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "register_types.h"

namespace MMIStandard {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MMIAdapterIf {
 public:
  virtual ~MMIAdapterIf() {}
  virtual void Initialize( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MAvatarDescription& avatarDescription, const std::map<std::string, std::string> & properties, const std::string& mmuID, const std::string& sessionID) = 0;
  virtual void AssignInstruction( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MInstruction& instruction, const  ::MMIStandard::MSimulationState& simulationState, const std::string& mmuID, const std::string& sessionID) = 0;
  virtual void DoStep( ::MMIStandard::MSimulationResult& _return, const double time, const  ::MMIStandard::MSimulationState& simulationState, const std::string& mmuID, const std::string& sessionID) = 0;
  virtual void GetBoundaryConstraints(std::vector< ::MMIStandard::MConstraint> & _return, const  ::MMIStandard::MInstruction& instruction, const std::string& mmuID, const std::string& sessionID) = 0;
  virtual void CheckPrerequisites( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MInstruction& instruction, const std::string& mmuID, const std::string& sessionID) = 0;
  virtual void Abort( ::MMIStandard::MBoolResponse& _return, const std::string& instructionID, const std::string& mmuID, const std::string& sessionID) = 0;
  virtual void Dispose( ::MMIStandard::MBoolResponse& _return, const std::string& mmuID, const std::string& sessionID) = 0;
  virtual void ExecuteFunction(std::map<std::string, std::string> & _return, const std::string& name, const std::map<std::string, std::string> & parameters, const std::string& mmuID, const std::string& sessionID) = 0;
  virtual void GetStatus(std::map<std::string, std::string> & _return) = 0;
  virtual void GetAdapterDescription(MAdapterDescription& _return) = 0;
  virtual void CreateSession( ::MMIStandard::MBoolResponse& _return, const std::string& sessionID) = 0;
  virtual void CloseSession( ::MMIStandard::MBoolResponse& _return, const std::string& sessionID) = 0;
  virtual void PushScene( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MSceneUpdate& sceneUpdates, const std::string& sessionID) = 0;
  virtual void GetLoadableMMUs(std::vector< ::MMIStandard::MMUDescription> & _return) = 0;
  virtual void GetMMus(std::vector< ::MMIStandard::MMUDescription> & _return, const std::string& sessionID) = 0;
  virtual void GetDescription( ::MMIStandard::MMUDescription& _return, const std::string& mmuID, const std::string& sessionID) = 0;
  virtual void GetScene(std::vector< ::MMIStandard::MSceneObject> & _return, const std::string& sessionID) = 0;
  virtual void GetSceneChanges( ::MMIStandard::MSceneUpdate& _return, const std::string& sessionID) = 0;
  virtual void LoadMMUs(std::map<std::string, std::string> & _return, const std::vector<std::string> & mmus, const std::string& sessionID) = 0;
  virtual void CreateCheckpoint(std::string& _return, const std::string& mmuID, const std::string& sessionID) = 0;
  virtual void RestoreCheckpoint( ::MMIStandard::MBoolResponse& _return, const std::string& mmuID, const std::string& sessionID, const std::string& checkpointData) = 0;
};

class MMIAdapterIfFactory {
 public:
  typedef MMIAdapterIf Handler;

  virtual ~MMIAdapterIfFactory() {}

  virtual MMIAdapterIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MMIAdapterIf* /* handler */) = 0;
};

class MMIAdapterIfSingletonFactory : virtual public MMIAdapterIfFactory {
 public:
  MMIAdapterIfSingletonFactory(const ::std::shared_ptr<MMIAdapterIf>& iface) : iface_(iface) {}
  virtual ~MMIAdapterIfSingletonFactory() {}

  virtual MMIAdapterIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MMIAdapterIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MMIAdapterIf> iface_;
};

class MMIAdapterNull : virtual public MMIAdapterIf {
 public:
  virtual ~MMIAdapterNull() {}
  void Initialize( ::MMIStandard::MBoolResponse& /* _return */, const  ::MMIStandard::MAvatarDescription& /* avatarDescription */, const std::map<std::string, std::string> & /* properties */, const std::string& /* mmuID */, const std::string& /* sessionID */) {
    return;
  }
  void AssignInstruction( ::MMIStandard::MBoolResponse& /* _return */, const  ::MMIStandard::MInstruction& /* instruction */, const  ::MMIStandard::MSimulationState& /* simulationState */, const std::string& /* mmuID */, const std::string& /* sessionID */) {
    return;
  }
  void DoStep( ::MMIStandard::MSimulationResult& /* _return */, const double /* time */, const  ::MMIStandard::MSimulationState& /* simulationState */, const std::string& /* mmuID */, const std::string& /* sessionID */) {
    return;
  }
  void GetBoundaryConstraints(std::vector< ::MMIStandard::MConstraint> & /* _return */, const  ::MMIStandard::MInstruction& /* instruction */, const std::string& /* mmuID */, const std::string& /* sessionID */) {
    return;
  }
  void CheckPrerequisites( ::MMIStandard::MBoolResponse& /* _return */, const  ::MMIStandard::MInstruction& /* instruction */, const std::string& /* mmuID */, const std::string& /* sessionID */) {
    return;
  }
  void Abort( ::MMIStandard::MBoolResponse& /* _return */, const std::string& /* instructionID */, const std::string& /* mmuID */, const std::string& /* sessionID */) {
    return;
  }
  void Dispose( ::MMIStandard::MBoolResponse& /* _return */, const std::string& /* mmuID */, const std::string& /* sessionID */) {
    return;
  }
  void ExecuteFunction(std::map<std::string, std::string> & /* _return */, const std::string& /* name */, const std::map<std::string, std::string> & /* parameters */, const std::string& /* mmuID */, const std::string& /* sessionID */) {
    return;
  }
  void GetStatus(std::map<std::string, std::string> & /* _return */) {
    return;
  }
  void GetAdapterDescription(MAdapterDescription& /* _return */) {
    return;
  }
  void CreateSession( ::MMIStandard::MBoolResponse& /* _return */, const std::string& /* sessionID */) {
    return;
  }
  void CloseSession( ::MMIStandard::MBoolResponse& /* _return */, const std::string& /* sessionID */) {
    return;
  }
  void PushScene( ::MMIStandard::MBoolResponse& /* _return */, const  ::MMIStandard::MSceneUpdate& /* sceneUpdates */, const std::string& /* sessionID */) {
    return;
  }
  void GetLoadableMMUs(std::vector< ::MMIStandard::MMUDescription> & /* _return */) {
    return;
  }
  void GetMMus(std::vector< ::MMIStandard::MMUDescription> & /* _return */, const std::string& /* sessionID */) {
    return;
  }
  void GetDescription( ::MMIStandard::MMUDescription& /* _return */, const std::string& /* mmuID */, const std::string& /* sessionID */) {
    return;
  }
  void GetScene(std::vector< ::MMIStandard::MSceneObject> & /* _return */, const std::string& /* sessionID */) {
    return;
  }
  void GetSceneChanges( ::MMIStandard::MSceneUpdate& /* _return */, const std::string& /* sessionID */) {
    return;
  }
  void LoadMMUs(std::map<std::string, std::string> & /* _return */, const std::vector<std::string> & /* mmus */, const std::string& /* sessionID */) {
    return;
  }
  void CreateCheckpoint(std::string& /* _return */, const std::string& /* mmuID */, const std::string& /* sessionID */) {
    return;
  }
  void RestoreCheckpoint( ::MMIStandard::MBoolResponse& /* _return */, const std::string& /* mmuID */, const std::string& /* sessionID */, const std::string& /* checkpointData */) {
    return;
  }
};

typedef struct _MMIAdapter_Initialize_args__isset {
  _MMIAdapter_Initialize_args__isset() : avatarDescription(false), properties(false), mmuID(false), sessionID(false) {}
  bool avatarDescription :1;
  bool properties :1;
  bool mmuID :1;
  bool sessionID :1;
} _MMIAdapter_Initialize_args__isset;

class MMIAdapter_Initialize_args {
 public:

  MMIAdapter_Initialize_args(const MMIAdapter_Initialize_args&);
  MMIAdapter_Initialize_args& operator=(const MMIAdapter_Initialize_args&);
  MMIAdapter_Initialize_args() : mmuID(), sessionID() {
  }

  virtual ~MMIAdapter_Initialize_args() noexcept;
   ::MMIStandard::MAvatarDescription avatarDescription;
  std::map<std::string, std::string>  properties;
  std::string mmuID;
  std::string sessionID;

  _MMIAdapter_Initialize_args__isset __isset;

  void __set_avatarDescription(const  ::MMIStandard::MAvatarDescription& val);

  void __set_properties(const std::map<std::string, std::string> & val);

  void __set_mmuID(const std::string& val);

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_Initialize_args & rhs) const
  {
    if (!(avatarDescription == rhs.avatarDescription))
      return false;
    if (!(properties == rhs.properties))
      return false;
    if (!(mmuID == rhs.mmuID))
      return false;
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_Initialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_Initialize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_Initialize_pargs {
 public:


  virtual ~MMIAdapter_Initialize_pargs() noexcept;
  const  ::MMIStandard::MAvatarDescription* avatarDescription;
  const std::map<std::string, std::string> * properties;
  const std::string* mmuID;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_Initialize_result__isset {
  _MMIAdapter_Initialize_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_Initialize_result__isset;

class MMIAdapter_Initialize_result {
 public:

  MMIAdapter_Initialize_result(const MMIAdapter_Initialize_result&);
  MMIAdapter_Initialize_result& operator=(const MMIAdapter_Initialize_result&);
  MMIAdapter_Initialize_result() {
  }

  virtual ~MMIAdapter_Initialize_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MMIAdapter_Initialize_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MMIAdapter_Initialize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_Initialize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_Initialize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_Initialize_presult__isset {
  _MMIAdapter_Initialize_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_Initialize_presult__isset;

class MMIAdapter_Initialize_presult {
 public:


  virtual ~MMIAdapter_Initialize_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MMIAdapter_Initialize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_AssignInstruction_args__isset {
  _MMIAdapter_AssignInstruction_args__isset() : instruction(false), simulationState(false), mmuID(false), sessionID(false) {}
  bool instruction :1;
  bool simulationState :1;
  bool mmuID :1;
  bool sessionID :1;
} _MMIAdapter_AssignInstruction_args__isset;

class MMIAdapter_AssignInstruction_args {
 public:

  MMIAdapter_AssignInstruction_args(const MMIAdapter_AssignInstruction_args&);
  MMIAdapter_AssignInstruction_args& operator=(const MMIAdapter_AssignInstruction_args&);
  MMIAdapter_AssignInstruction_args() : mmuID(), sessionID() {
  }

  virtual ~MMIAdapter_AssignInstruction_args() noexcept;
   ::MMIStandard::MInstruction instruction;
   ::MMIStandard::MSimulationState simulationState;
  std::string mmuID;
  std::string sessionID;

  _MMIAdapter_AssignInstruction_args__isset __isset;

  void __set_instruction(const  ::MMIStandard::MInstruction& val);

  void __set_simulationState(const  ::MMIStandard::MSimulationState& val);

  void __set_mmuID(const std::string& val);

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_AssignInstruction_args & rhs) const
  {
    if (!(instruction == rhs.instruction))
      return false;
    if (!(simulationState == rhs.simulationState))
      return false;
    if (!(mmuID == rhs.mmuID))
      return false;
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_AssignInstruction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_AssignInstruction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_AssignInstruction_pargs {
 public:


  virtual ~MMIAdapter_AssignInstruction_pargs() noexcept;
  const  ::MMIStandard::MInstruction* instruction;
  const  ::MMIStandard::MSimulationState* simulationState;
  const std::string* mmuID;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_AssignInstruction_result__isset {
  _MMIAdapter_AssignInstruction_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_AssignInstruction_result__isset;

class MMIAdapter_AssignInstruction_result {
 public:

  MMIAdapter_AssignInstruction_result(const MMIAdapter_AssignInstruction_result&);
  MMIAdapter_AssignInstruction_result& operator=(const MMIAdapter_AssignInstruction_result&);
  MMIAdapter_AssignInstruction_result() {
  }

  virtual ~MMIAdapter_AssignInstruction_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MMIAdapter_AssignInstruction_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MMIAdapter_AssignInstruction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_AssignInstruction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_AssignInstruction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_AssignInstruction_presult__isset {
  _MMIAdapter_AssignInstruction_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_AssignInstruction_presult__isset;

class MMIAdapter_AssignInstruction_presult {
 public:


  virtual ~MMIAdapter_AssignInstruction_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MMIAdapter_AssignInstruction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_DoStep_args__isset {
  _MMIAdapter_DoStep_args__isset() : time(false), simulationState(false), mmuID(false), sessionID(false) {}
  bool time :1;
  bool simulationState :1;
  bool mmuID :1;
  bool sessionID :1;
} _MMIAdapter_DoStep_args__isset;

class MMIAdapter_DoStep_args {
 public:

  MMIAdapter_DoStep_args(const MMIAdapter_DoStep_args&);
  MMIAdapter_DoStep_args& operator=(const MMIAdapter_DoStep_args&);
  MMIAdapter_DoStep_args() : time(0), mmuID(), sessionID() {
  }

  virtual ~MMIAdapter_DoStep_args() noexcept;
  double time;
   ::MMIStandard::MSimulationState simulationState;
  std::string mmuID;
  std::string sessionID;

  _MMIAdapter_DoStep_args__isset __isset;

  void __set_time(const double val);

  void __set_simulationState(const  ::MMIStandard::MSimulationState& val);

  void __set_mmuID(const std::string& val);

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_DoStep_args & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(simulationState == rhs.simulationState))
      return false;
    if (!(mmuID == rhs.mmuID))
      return false;
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_DoStep_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_DoStep_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_DoStep_pargs {
 public:


  virtual ~MMIAdapter_DoStep_pargs() noexcept;
  const double* time;
  const  ::MMIStandard::MSimulationState* simulationState;
  const std::string* mmuID;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_DoStep_result__isset {
  _MMIAdapter_DoStep_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_DoStep_result__isset;

class MMIAdapter_DoStep_result {
 public:

  MMIAdapter_DoStep_result(const MMIAdapter_DoStep_result&);
  MMIAdapter_DoStep_result& operator=(const MMIAdapter_DoStep_result&);
  MMIAdapter_DoStep_result() {
  }

  virtual ~MMIAdapter_DoStep_result() noexcept;
   ::MMIStandard::MSimulationResult success;

  _MMIAdapter_DoStep_result__isset __isset;

  void __set_success(const  ::MMIStandard::MSimulationResult& val);

  bool operator == (const MMIAdapter_DoStep_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_DoStep_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_DoStep_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_DoStep_presult__isset {
  _MMIAdapter_DoStep_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_DoStep_presult__isset;

class MMIAdapter_DoStep_presult {
 public:


  virtual ~MMIAdapter_DoStep_presult() noexcept;
   ::MMIStandard::MSimulationResult* success;

  _MMIAdapter_DoStep_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_GetBoundaryConstraints_args__isset {
  _MMIAdapter_GetBoundaryConstraints_args__isset() : instruction(false), mmuID(false), sessionID(false) {}
  bool instruction :1;
  bool mmuID :1;
  bool sessionID :1;
} _MMIAdapter_GetBoundaryConstraints_args__isset;

class MMIAdapter_GetBoundaryConstraints_args {
 public:

  MMIAdapter_GetBoundaryConstraints_args(const MMIAdapter_GetBoundaryConstraints_args&);
  MMIAdapter_GetBoundaryConstraints_args& operator=(const MMIAdapter_GetBoundaryConstraints_args&);
  MMIAdapter_GetBoundaryConstraints_args() : mmuID(), sessionID() {
  }

  virtual ~MMIAdapter_GetBoundaryConstraints_args() noexcept;
   ::MMIStandard::MInstruction instruction;
  std::string mmuID;
  std::string sessionID;

  _MMIAdapter_GetBoundaryConstraints_args__isset __isset;

  void __set_instruction(const  ::MMIStandard::MInstruction& val);

  void __set_mmuID(const std::string& val);

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_GetBoundaryConstraints_args & rhs) const
  {
    if (!(instruction == rhs.instruction))
      return false;
    if (!(mmuID == rhs.mmuID))
      return false;
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_GetBoundaryConstraints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_GetBoundaryConstraints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_GetBoundaryConstraints_pargs {
 public:


  virtual ~MMIAdapter_GetBoundaryConstraints_pargs() noexcept;
  const  ::MMIStandard::MInstruction* instruction;
  const std::string* mmuID;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_GetBoundaryConstraints_result__isset {
  _MMIAdapter_GetBoundaryConstraints_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_GetBoundaryConstraints_result__isset;

class MMIAdapter_GetBoundaryConstraints_result {
 public:

  MMIAdapter_GetBoundaryConstraints_result(const MMIAdapter_GetBoundaryConstraints_result&);
  MMIAdapter_GetBoundaryConstraints_result& operator=(const MMIAdapter_GetBoundaryConstraints_result&);
  MMIAdapter_GetBoundaryConstraints_result() {
  }

  virtual ~MMIAdapter_GetBoundaryConstraints_result() noexcept;
  std::vector< ::MMIStandard::MConstraint>  success;

  _MMIAdapter_GetBoundaryConstraints_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MConstraint> & val);

  bool operator == (const MMIAdapter_GetBoundaryConstraints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_GetBoundaryConstraints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_GetBoundaryConstraints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_GetBoundaryConstraints_presult__isset {
  _MMIAdapter_GetBoundaryConstraints_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_GetBoundaryConstraints_presult__isset;

class MMIAdapter_GetBoundaryConstraints_presult {
 public:


  virtual ~MMIAdapter_GetBoundaryConstraints_presult() noexcept;
  std::vector< ::MMIStandard::MConstraint> * success;

  _MMIAdapter_GetBoundaryConstraints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_CheckPrerequisites_args__isset {
  _MMIAdapter_CheckPrerequisites_args__isset() : instruction(false), mmuID(false), sessionID(false) {}
  bool instruction :1;
  bool mmuID :1;
  bool sessionID :1;
} _MMIAdapter_CheckPrerequisites_args__isset;

class MMIAdapter_CheckPrerequisites_args {
 public:

  MMIAdapter_CheckPrerequisites_args(const MMIAdapter_CheckPrerequisites_args&);
  MMIAdapter_CheckPrerequisites_args& operator=(const MMIAdapter_CheckPrerequisites_args&);
  MMIAdapter_CheckPrerequisites_args() : mmuID(), sessionID() {
  }

  virtual ~MMIAdapter_CheckPrerequisites_args() noexcept;
   ::MMIStandard::MInstruction instruction;
  std::string mmuID;
  std::string sessionID;

  _MMIAdapter_CheckPrerequisites_args__isset __isset;

  void __set_instruction(const  ::MMIStandard::MInstruction& val);

  void __set_mmuID(const std::string& val);

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_CheckPrerequisites_args & rhs) const
  {
    if (!(instruction == rhs.instruction))
      return false;
    if (!(mmuID == rhs.mmuID))
      return false;
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_CheckPrerequisites_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_CheckPrerequisites_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_CheckPrerequisites_pargs {
 public:


  virtual ~MMIAdapter_CheckPrerequisites_pargs() noexcept;
  const  ::MMIStandard::MInstruction* instruction;
  const std::string* mmuID;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_CheckPrerequisites_result__isset {
  _MMIAdapter_CheckPrerequisites_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_CheckPrerequisites_result__isset;

class MMIAdapter_CheckPrerequisites_result {
 public:

  MMIAdapter_CheckPrerequisites_result(const MMIAdapter_CheckPrerequisites_result&);
  MMIAdapter_CheckPrerequisites_result& operator=(const MMIAdapter_CheckPrerequisites_result&);
  MMIAdapter_CheckPrerequisites_result() {
  }

  virtual ~MMIAdapter_CheckPrerequisites_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MMIAdapter_CheckPrerequisites_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MMIAdapter_CheckPrerequisites_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_CheckPrerequisites_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_CheckPrerequisites_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_CheckPrerequisites_presult__isset {
  _MMIAdapter_CheckPrerequisites_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_CheckPrerequisites_presult__isset;

class MMIAdapter_CheckPrerequisites_presult {
 public:


  virtual ~MMIAdapter_CheckPrerequisites_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MMIAdapter_CheckPrerequisites_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_Abort_args__isset {
  _MMIAdapter_Abort_args__isset() : instructionID(false), mmuID(false), sessionID(false) {}
  bool instructionID :1;
  bool mmuID :1;
  bool sessionID :1;
} _MMIAdapter_Abort_args__isset;

class MMIAdapter_Abort_args {
 public:

  MMIAdapter_Abort_args(const MMIAdapter_Abort_args&);
  MMIAdapter_Abort_args& operator=(const MMIAdapter_Abort_args&);
  MMIAdapter_Abort_args() : instructionID(), mmuID(), sessionID() {
  }

  virtual ~MMIAdapter_Abort_args() noexcept;
  std::string instructionID;
  std::string mmuID;
  std::string sessionID;

  _MMIAdapter_Abort_args__isset __isset;

  void __set_instructionID(const std::string& val);

  void __set_mmuID(const std::string& val);

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_Abort_args & rhs) const
  {
    if (!(instructionID == rhs.instructionID))
      return false;
    if (!(mmuID == rhs.mmuID))
      return false;
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_Abort_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_Abort_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_Abort_pargs {
 public:


  virtual ~MMIAdapter_Abort_pargs() noexcept;
  const std::string* instructionID;
  const std::string* mmuID;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_Abort_result__isset {
  _MMIAdapter_Abort_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_Abort_result__isset;

class MMIAdapter_Abort_result {
 public:

  MMIAdapter_Abort_result(const MMIAdapter_Abort_result&);
  MMIAdapter_Abort_result& operator=(const MMIAdapter_Abort_result&);
  MMIAdapter_Abort_result() {
  }

  virtual ~MMIAdapter_Abort_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MMIAdapter_Abort_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MMIAdapter_Abort_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_Abort_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_Abort_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_Abort_presult__isset {
  _MMIAdapter_Abort_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_Abort_presult__isset;

class MMIAdapter_Abort_presult {
 public:


  virtual ~MMIAdapter_Abort_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MMIAdapter_Abort_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_Dispose_args__isset {
  _MMIAdapter_Dispose_args__isset() : mmuID(false), sessionID(false) {}
  bool mmuID :1;
  bool sessionID :1;
} _MMIAdapter_Dispose_args__isset;

class MMIAdapter_Dispose_args {
 public:

  MMIAdapter_Dispose_args(const MMIAdapter_Dispose_args&);
  MMIAdapter_Dispose_args& operator=(const MMIAdapter_Dispose_args&);
  MMIAdapter_Dispose_args() : mmuID(), sessionID() {
  }

  virtual ~MMIAdapter_Dispose_args() noexcept;
  std::string mmuID;
  std::string sessionID;

  _MMIAdapter_Dispose_args__isset __isset;

  void __set_mmuID(const std::string& val);

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_Dispose_args & rhs) const
  {
    if (!(mmuID == rhs.mmuID))
      return false;
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_Dispose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_Dispose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_Dispose_pargs {
 public:


  virtual ~MMIAdapter_Dispose_pargs() noexcept;
  const std::string* mmuID;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_Dispose_result__isset {
  _MMIAdapter_Dispose_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_Dispose_result__isset;

class MMIAdapter_Dispose_result {
 public:

  MMIAdapter_Dispose_result(const MMIAdapter_Dispose_result&);
  MMIAdapter_Dispose_result& operator=(const MMIAdapter_Dispose_result&);
  MMIAdapter_Dispose_result() {
  }

  virtual ~MMIAdapter_Dispose_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MMIAdapter_Dispose_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MMIAdapter_Dispose_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_Dispose_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_Dispose_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_Dispose_presult__isset {
  _MMIAdapter_Dispose_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_Dispose_presult__isset;

class MMIAdapter_Dispose_presult {
 public:


  virtual ~MMIAdapter_Dispose_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MMIAdapter_Dispose_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_ExecuteFunction_args__isset {
  _MMIAdapter_ExecuteFunction_args__isset() : name(false), parameters(false), mmuID(false), sessionID(false) {}
  bool name :1;
  bool parameters :1;
  bool mmuID :1;
  bool sessionID :1;
} _MMIAdapter_ExecuteFunction_args__isset;

class MMIAdapter_ExecuteFunction_args {
 public:

  MMIAdapter_ExecuteFunction_args(const MMIAdapter_ExecuteFunction_args&);
  MMIAdapter_ExecuteFunction_args& operator=(const MMIAdapter_ExecuteFunction_args&);
  MMIAdapter_ExecuteFunction_args() : name(), mmuID(), sessionID() {
  }

  virtual ~MMIAdapter_ExecuteFunction_args() noexcept;
  std::string name;
  std::map<std::string, std::string>  parameters;
  std::string mmuID;
  std::string sessionID;

  _MMIAdapter_ExecuteFunction_args__isset __isset;

  void __set_name(const std::string& val);

  void __set_parameters(const std::map<std::string, std::string> & val);

  void __set_mmuID(const std::string& val);

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_ExecuteFunction_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(parameters == rhs.parameters))
      return false;
    if (!(mmuID == rhs.mmuID))
      return false;
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_ExecuteFunction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_ExecuteFunction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_ExecuteFunction_pargs {
 public:


  virtual ~MMIAdapter_ExecuteFunction_pargs() noexcept;
  const std::string* name;
  const std::map<std::string, std::string> * parameters;
  const std::string* mmuID;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_ExecuteFunction_result__isset {
  _MMIAdapter_ExecuteFunction_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_ExecuteFunction_result__isset;

class MMIAdapter_ExecuteFunction_result {
 public:

  MMIAdapter_ExecuteFunction_result(const MMIAdapter_ExecuteFunction_result&);
  MMIAdapter_ExecuteFunction_result& operator=(const MMIAdapter_ExecuteFunction_result&);
  MMIAdapter_ExecuteFunction_result() {
  }

  virtual ~MMIAdapter_ExecuteFunction_result() noexcept;
  std::map<std::string, std::string>  success;

  _MMIAdapter_ExecuteFunction_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const MMIAdapter_ExecuteFunction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_ExecuteFunction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_ExecuteFunction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_ExecuteFunction_presult__isset {
  _MMIAdapter_ExecuteFunction_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_ExecuteFunction_presult__isset;

class MMIAdapter_ExecuteFunction_presult {
 public:


  virtual ~MMIAdapter_ExecuteFunction_presult() noexcept;
  std::map<std::string, std::string> * success;

  _MMIAdapter_ExecuteFunction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MMIAdapter_GetStatus_args {
 public:

  MMIAdapter_GetStatus_args(const MMIAdapter_GetStatus_args&);
  MMIAdapter_GetStatus_args& operator=(const MMIAdapter_GetStatus_args&);
  MMIAdapter_GetStatus_args() {
  }

  virtual ~MMIAdapter_GetStatus_args() noexcept;

  bool operator == (const MMIAdapter_GetStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MMIAdapter_GetStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_GetStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_GetStatus_pargs {
 public:


  virtual ~MMIAdapter_GetStatus_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_GetStatus_result__isset {
  _MMIAdapter_GetStatus_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_GetStatus_result__isset;

class MMIAdapter_GetStatus_result {
 public:

  MMIAdapter_GetStatus_result(const MMIAdapter_GetStatus_result&);
  MMIAdapter_GetStatus_result& operator=(const MMIAdapter_GetStatus_result&);
  MMIAdapter_GetStatus_result() {
  }

  virtual ~MMIAdapter_GetStatus_result() noexcept;
  std::map<std::string, std::string>  success;

  _MMIAdapter_GetStatus_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const MMIAdapter_GetStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_GetStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_GetStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_GetStatus_presult__isset {
  _MMIAdapter_GetStatus_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_GetStatus_presult__isset;

class MMIAdapter_GetStatus_presult {
 public:


  virtual ~MMIAdapter_GetStatus_presult() noexcept;
  std::map<std::string, std::string> * success;

  _MMIAdapter_GetStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MMIAdapter_GetAdapterDescription_args {
 public:

  MMIAdapter_GetAdapterDescription_args(const MMIAdapter_GetAdapterDescription_args&);
  MMIAdapter_GetAdapterDescription_args& operator=(const MMIAdapter_GetAdapterDescription_args&);
  MMIAdapter_GetAdapterDescription_args() {
  }

  virtual ~MMIAdapter_GetAdapterDescription_args() noexcept;

  bool operator == (const MMIAdapter_GetAdapterDescription_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MMIAdapter_GetAdapterDescription_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_GetAdapterDescription_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_GetAdapterDescription_pargs {
 public:


  virtual ~MMIAdapter_GetAdapterDescription_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_GetAdapterDescription_result__isset {
  _MMIAdapter_GetAdapterDescription_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_GetAdapterDescription_result__isset;

class MMIAdapter_GetAdapterDescription_result {
 public:

  MMIAdapter_GetAdapterDescription_result(const MMIAdapter_GetAdapterDescription_result&);
  MMIAdapter_GetAdapterDescription_result& operator=(const MMIAdapter_GetAdapterDescription_result&);
  MMIAdapter_GetAdapterDescription_result() {
  }

  virtual ~MMIAdapter_GetAdapterDescription_result() noexcept;
  MAdapterDescription success;

  _MMIAdapter_GetAdapterDescription_result__isset __isset;

  void __set_success(const MAdapterDescription& val);

  bool operator == (const MMIAdapter_GetAdapterDescription_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_GetAdapterDescription_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_GetAdapterDescription_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_GetAdapterDescription_presult__isset {
  _MMIAdapter_GetAdapterDescription_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_GetAdapterDescription_presult__isset;

class MMIAdapter_GetAdapterDescription_presult {
 public:


  virtual ~MMIAdapter_GetAdapterDescription_presult() noexcept;
  MAdapterDescription* success;

  _MMIAdapter_GetAdapterDescription_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_CreateSession_args__isset {
  _MMIAdapter_CreateSession_args__isset() : sessionID(false) {}
  bool sessionID :1;
} _MMIAdapter_CreateSession_args__isset;

class MMIAdapter_CreateSession_args {
 public:

  MMIAdapter_CreateSession_args(const MMIAdapter_CreateSession_args&);
  MMIAdapter_CreateSession_args& operator=(const MMIAdapter_CreateSession_args&);
  MMIAdapter_CreateSession_args() : sessionID() {
  }

  virtual ~MMIAdapter_CreateSession_args() noexcept;
  std::string sessionID;

  _MMIAdapter_CreateSession_args__isset __isset;

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_CreateSession_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_CreateSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_CreateSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_CreateSession_pargs {
 public:


  virtual ~MMIAdapter_CreateSession_pargs() noexcept;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_CreateSession_result__isset {
  _MMIAdapter_CreateSession_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_CreateSession_result__isset;

class MMIAdapter_CreateSession_result {
 public:

  MMIAdapter_CreateSession_result(const MMIAdapter_CreateSession_result&);
  MMIAdapter_CreateSession_result& operator=(const MMIAdapter_CreateSession_result&);
  MMIAdapter_CreateSession_result() {
  }

  virtual ~MMIAdapter_CreateSession_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MMIAdapter_CreateSession_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MMIAdapter_CreateSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_CreateSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_CreateSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_CreateSession_presult__isset {
  _MMIAdapter_CreateSession_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_CreateSession_presult__isset;

class MMIAdapter_CreateSession_presult {
 public:


  virtual ~MMIAdapter_CreateSession_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MMIAdapter_CreateSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_CloseSession_args__isset {
  _MMIAdapter_CloseSession_args__isset() : sessionID(false) {}
  bool sessionID :1;
} _MMIAdapter_CloseSession_args__isset;

class MMIAdapter_CloseSession_args {
 public:

  MMIAdapter_CloseSession_args(const MMIAdapter_CloseSession_args&);
  MMIAdapter_CloseSession_args& operator=(const MMIAdapter_CloseSession_args&);
  MMIAdapter_CloseSession_args() : sessionID() {
  }

  virtual ~MMIAdapter_CloseSession_args() noexcept;
  std::string sessionID;

  _MMIAdapter_CloseSession_args__isset __isset;

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_CloseSession_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_CloseSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_CloseSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_CloseSession_pargs {
 public:


  virtual ~MMIAdapter_CloseSession_pargs() noexcept;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_CloseSession_result__isset {
  _MMIAdapter_CloseSession_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_CloseSession_result__isset;

class MMIAdapter_CloseSession_result {
 public:

  MMIAdapter_CloseSession_result(const MMIAdapter_CloseSession_result&);
  MMIAdapter_CloseSession_result& operator=(const MMIAdapter_CloseSession_result&);
  MMIAdapter_CloseSession_result() {
  }

  virtual ~MMIAdapter_CloseSession_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MMIAdapter_CloseSession_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MMIAdapter_CloseSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_CloseSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_CloseSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_CloseSession_presult__isset {
  _MMIAdapter_CloseSession_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_CloseSession_presult__isset;

class MMIAdapter_CloseSession_presult {
 public:


  virtual ~MMIAdapter_CloseSession_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MMIAdapter_CloseSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_PushScene_args__isset {
  _MMIAdapter_PushScene_args__isset() : sceneUpdates(false), sessionID(false) {}
  bool sceneUpdates :1;
  bool sessionID :1;
} _MMIAdapter_PushScene_args__isset;

class MMIAdapter_PushScene_args {
 public:

  MMIAdapter_PushScene_args(const MMIAdapter_PushScene_args&);
  MMIAdapter_PushScene_args& operator=(const MMIAdapter_PushScene_args&);
  MMIAdapter_PushScene_args() : sessionID() {
  }

  virtual ~MMIAdapter_PushScene_args() noexcept;
   ::MMIStandard::MSceneUpdate sceneUpdates;
  std::string sessionID;

  _MMIAdapter_PushScene_args__isset __isset;

  void __set_sceneUpdates(const  ::MMIStandard::MSceneUpdate& val);

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_PushScene_args & rhs) const
  {
    if (!(sceneUpdates == rhs.sceneUpdates))
      return false;
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_PushScene_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_PushScene_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_PushScene_pargs {
 public:


  virtual ~MMIAdapter_PushScene_pargs() noexcept;
  const  ::MMIStandard::MSceneUpdate* sceneUpdates;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_PushScene_result__isset {
  _MMIAdapter_PushScene_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_PushScene_result__isset;

class MMIAdapter_PushScene_result {
 public:

  MMIAdapter_PushScene_result(const MMIAdapter_PushScene_result&);
  MMIAdapter_PushScene_result& operator=(const MMIAdapter_PushScene_result&);
  MMIAdapter_PushScene_result() {
  }

  virtual ~MMIAdapter_PushScene_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MMIAdapter_PushScene_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MMIAdapter_PushScene_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_PushScene_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_PushScene_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_PushScene_presult__isset {
  _MMIAdapter_PushScene_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_PushScene_presult__isset;

class MMIAdapter_PushScene_presult {
 public:


  virtual ~MMIAdapter_PushScene_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MMIAdapter_PushScene_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MMIAdapter_GetLoadableMMUs_args {
 public:

  MMIAdapter_GetLoadableMMUs_args(const MMIAdapter_GetLoadableMMUs_args&);
  MMIAdapter_GetLoadableMMUs_args& operator=(const MMIAdapter_GetLoadableMMUs_args&);
  MMIAdapter_GetLoadableMMUs_args() {
  }

  virtual ~MMIAdapter_GetLoadableMMUs_args() noexcept;

  bool operator == (const MMIAdapter_GetLoadableMMUs_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MMIAdapter_GetLoadableMMUs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_GetLoadableMMUs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_GetLoadableMMUs_pargs {
 public:


  virtual ~MMIAdapter_GetLoadableMMUs_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_GetLoadableMMUs_result__isset {
  _MMIAdapter_GetLoadableMMUs_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_GetLoadableMMUs_result__isset;

class MMIAdapter_GetLoadableMMUs_result {
 public:

  MMIAdapter_GetLoadableMMUs_result(const MMIAdapter_GetLoadableMMUs_result&);
  MMIAdapter_GetLoadableMMUs_result& operator=(const MMIAdapter_GetLoadableMMUs_result&);
  MMIAdapter_GetLoadableMMUs_result() {
  }

  virtual ~MMIAdapter_GetLoadableMMUs_result() noexcept;
  std::vector< ::MMIStandard::MMUDescription>  success;

  _MMIAdapter_GetLoadableMMUs_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MMUDescription> & val);

  bool operator == (const MMIAdapter_GetLoadableMMUs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_GetLoadableMMUs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_GetLoadableMMUs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_GetLoadableMMUs_presult__isset {
  _MMIAdapter_GetLoadableMMUs_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_GetLoadableMMUs_presult__isset;

class MMIAdapter_GetLoadableMMUs_presult {
 public:


  virtual ~MMIAdapter_GetLoadableMMUs_presult() noexcept;
  std::vector< ::MMIStandard::MMUDescription> * success;

  _MMIAdapter_GetLoadableMMUs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_GetMMus_args__isset {
  _MMIAdapter_GetMMus_args__isset() : sessionID(false) {}
  bool sessionID :1;
} _MMIAdapter_GetMMus_args__isset;

class MMIAdapter_GetMMus_args {
 public:

  MMIAdapter_GetMMus_args(const MMIAdapter_GetMMus_args&);
  MMIAdapter_GetMMus_args& operator=(const MMIAdapter_GetMMus_args&);
  MMIAdapter_GetMMus_args() : sessionID() {
  }

  virtual ~MMIAdapter_GetMMus_args() noexcept;
  std::string sessionID;

  _MMIAdapter_GetMMus_args__isset __isset;

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_GetMMus_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_GetMMus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_GetMMus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_GetMMus_pargs {
 public:


  virtual ~MMIAdapter_GetMMus_pargs() noexcept;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_GetMMus_result__isset {
  _MMIAdapter_GetMMus_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_GetMMus_result__isset;

class MMIAdapter_GetMMus_result {
 public:

  MMIAdapter_GetMMus_result(const MMIAdapter_GetMMus_result&);
  MMIAdapter_GetMMus_result& operator=(const MMIAdapter_GetMMus_result&);
  MMIAdapter_GetMMus_result() {
  }

  virtual ~MMIAdapter_GetMMus_result() noexcept;
  std::vector< ::MMIStandard::MMUDescription>  success;

  _MMIAdapter_GetMMus_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MMUDescription> & val);

  bool operator == (const MMIAdapter_GetMMus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_GetMMus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_GetMMus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_GetMMus_presult__isset {
  _MMIAdapter_GetMMus_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_GetMMus_presult__isset;

class MMIAdapter_GetMMus_presult {
 public:


  virtual ~MMIAdapter_GetMMus_presult() noexcept;
  std::vector< ::MMIStandard::MMUDescription> * success;

  _MMIAdapter_GetMMus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_GetDescription_args__isset {
  _MMIAdapter_GetDescription_args__isset() : mmuID(false), sessionID(false) {}
  bool mmuID :1;
  bool sessionID :1;
} _MMIAdapter_GetDescription_args__isset;

class MMIAdapter_GetDescription_args {
 public:

  MMIAdapter_GetDescription_args(const MMIAdapter_GetDescription_args&);
  MMIAdapter_GetDescription_args& operator=(const MMIAdapter_GetDescription_args&);
  MMIAdapter_GetDescription_args() : mmuID(), sessionID() {
  }

  virtual ~MMIAdapter_GetDescription_args() noexcept;
  std::string mmuID;
  std::string sessionID;

  _MMIAdapter_GetDescription_args__isset __isset;

  void __set_mmuID(const std::string& val);

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_GetDescription_args & rhs) const
  {
    if (!(mmuID == rhs.mmuID))
      return false;
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_GetDescription_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_GetDescription_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_GetDescription_pargs {
 public:


  virtual ~MMIAdapter_GetDescription_pargs() noexcept;
  const std::string* mmuID;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_GetDescription_result__isset {
  _MMIAdapter_GetDescription_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_GetDescription_result__isset;

class MMIAdapter_GetDescription_result {
 public:

  MMIAdapter_GetDescription_result(const MMIAdapter_GetDescription_result&);
  MMIAdapter_GetDescription_result& operator=(const MMIAdapter_GetDescription_result&);
  MMIAdapter_GetDescription_result() {
  }

  virtual ~MMIAdapter_GetDescription_result() noexcept;
   ::MMIStandard::MMUDescription success;

  _MMIAdapter_GetDescription_result__isset __isset;

  void __set_success(const  ::MMIStandard::MMUDescription& val);

  bool operator == (const MMIAdapter_GetDescription_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_GetDescription_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_GetDescription_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_GetDescription_presult__isset {
  _MMIAdapter_GetDescription_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_GetDescription_presult__isset;

class MMIAdapter_GetDescription_presult {
 public:


  virtual ~MMIAdapter_GetDescription_presult() noexcept;
   ::MMIStandard::MMUDescription* success;

  _MMIAdapter_GetDescription_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_GetScene_args__isset {
  _MMIAdapter_GetScene_args__isset() : sessionID(false) {}
  bool sessionID :1;
} _MMIAdapter_GetScene_args__isset;

class MMIAdapter_GetScene_args {
 public:

  MMIAdapter_GetScene_args(const MMIAdapter_GetScene_args&);
  MMIAdapter_GetScene_args& operator=(const MMIAdapter_GetScene_args&);
  MMIAdapter_GetScene_args() : sessionID() {
  }

  virtual ~MMIAdapter_GetScene_args() noexcept;
  std::string sessionID;

  _MMIAdapter_GetScene_args__isset __isset;

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_GetScene_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_GetScene_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_GetScene_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_GetScene_pargs {
 public:


  virtual ~MMIAdapter_GetScene_pargs() noexcept;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_GetScene_result__isset {
  _MMIAdapter_GetScene_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_GetScene_result__isset;

class MMIAdapter_GetScene_result {
 public:

  MMIAdapter_GetScene_result(const MMIAdapter_GetScene_result&);
  MMIAdapter_GetScene_result& operator=(const MMIAdapter_GetScene_result&);
  MMIAdapter_GetScene_result() {
  }

  virtual ~MMIAdapter_GetScene_result() noexcept;
  std::vector< ::MMIStandard::MSceneObject>  success;

  _MMIAdapter_GetScene_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MSceneObject> & val);

  bool operator == (const MMIAdapter_GetScene_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_GetScene_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_GetScene_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_GetScene_presult__isset {
  _MMIAdapter_GetScene_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_GetScene_presult__isset;

class MMIAdapter_GetScene_presult {
 public:


  virtual ~MMIAdapter_GetScene_presult() noexcept;
  std::vector< ::MMIStandard::MSceneObject> * success;

  _MMIAdapter_GetScene_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_GetSceneChanges_args__isset {
  _MMIAdapter_GetSceneChanges_args__isset() : sessionID(false) {}
  bool sessionID :1;
} _MMIAdapter_GetSceneChanges_args__isset;

class MMIAdapter_GetSceneChanges_args {
 public:

  MMIAdapter_GetSceneChanges_args(const MMIAdapter_GetSceneChanges_args&);
  MMIAdapter_GetSceneChanges_args& operator=(const MMIAdapter_GetSceneChanges_args&);
  MMIAdapter_GetSceneChanges_args() : sessionID() {
  }

  virtual ~MMIAdapter_GetSceneChanges_args() noexcept;
  std::string sessionID;

  _MMIAdapter_GetSceneChanges_args__isset __isset;

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_GetSceneChanges_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_GetSceneChanges_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_GetSceneChanges_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_GetSceneChanges_pargs {
 public:


  virtual ~MMIAdapter_GetSceneChanges_pargs() noexcept;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_GetSceneChanges_result__isset {
  _MMIAdapter_GetSceneChanges_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_GetSceneChanges_result__isset;

class MMIAdapter_GetSceneChanges_result {
 public:

  MMIAdapter_GetSceneChanges_result(const MMIAdapter_GetSceneChanges_result&);
  MMIAdapter_GetSceneChanges_result& operator=(const MMIAdapter_GetSceneChanges_result&);
  MMIAdapter_GetSceneChanges_result() {
  }

  virtual ~MMIAdapter_GetSceneChanges_result() noexcept;
   ::MMIStandard::MSceneUpdate success;

  _MMIAdapter_GetSceneChanges_result__isset __isset;

  void __set_success(const  ::MMIStandard::MSceneUpdate& val);

  bool operator == (const MMIAdapter_GetSceneChanges_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_GetSceneChanges_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_GetSceneChanges_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_GetSceneChanges_presult__isset {
  _MMIAdapter_GetSceneChanges_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_GetSceneChanges_presult__isset;

class MMIAdapter_GetSceneChanges_presult {
 public:


  virtual ~MMIAdapter_GetSceneChanges_presult() noexcept;
   ::MMIStandard::MSceneUpdate* success;

  _MMIAdapter_GetSceneChanges_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_LoadMMUs_args__isset {
  _MMIAdapter_LoadMMUs_args__isset() : mmus(false), sessionID(false) {}
  bool mmus :1;
  bool sessionID :1;
} _MMIAdapter_LoadMMUs_args__isset;

class MMIAdapter_LoadMMUs_args {
 public:

  MMIAdapter_LoadMMUs_args(const MMIAdapter_LoadMMUs_args&);
  MMIAdapter_LoadMMUs_args& operator=(const MMIAdapter_LoadMMUs_args&);
  MMIAdapter_LoadMMUs_args() : sessionID() {
  }

  virtual ~MMIAdapter_LoadMMUs_args() noexcept;
  std::vector<std::string>  mmus;
  std::string sessionID;

  _MMIAdapter_LoadMMUs_args__isset __isset;

  void __set_mmus(const std::vector<std::string> & val);

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_LoadMMUs_args & rhs) const
  {
    if (!(mmus == rhs.mmus))
      return false;
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_LoadMMUs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_LoadMMUs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_LoadMMUs_pargs {
 public:


  virtual ~MMIAdapter_LoadMMUs_pargs() noexcept;
  const std::vector<std::string> * mmus;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_LoadMMUs_result__isset {
  _MMIAdapter_LoadMMUs_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_LoadMMUs_result__isset;

class MMIAdapter_LoadMMUs_result {
 public:

  MMIAdapter_LoadMMUs_result(const MMIAdapter_LoadMMUs_result&);
  MMIAdapter_LoadMMUs_result& operator=(const MMIAdapter_LoadMMUs_result&);
  MMIAdapter_LoadMMUs_result() {
  }

  virtual ~MMIAdapter_LoadMMUs_result() noexcept;
  std::map<std::string, std::string>  success;

  _MMIAdapter_LoadMMUs_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const MMIAdapter_LoadMMUs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_LoadMMUs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_LoadMMUs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_LoadMMUs_presult__isset {
  _MMIAdapter_LoadMMUs_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_LoadMMUs_presult__isset;

class MMIAdapter_LoadMMUs_presult {
 public:


  virtual ~MMIAdapter_LoadMMUs_presult() noexcept;
  std::map<std::string, std::string> * success;

  _MMIAdapter_LoadMMUs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_CreateCheckpoint_args__isset {
  _MMIAdapter_CreateCheckpoint_args__isset() : mmuID(false), sessionID(false) {}
  bool mmuID :1;
  bool sessionID :1;
} _MMIAdapter_CreateCheckpoint_args__isset;

class MMIAdapter_CreateCheckpoint_args {
 public:

  MMIAdapter_CreateCheckpoint_args(const MMIAdapter_CreateCheckpoint_args&);
  MMIAdapter_CreateCheckpoint_args& operator=(const MMIAdapter_CreateCheckpoint_args&);
  MMIAdapter_CreateCheckpoint_args() : mmuID(), sessionID() {
  }

  virtual ~MMIAdapter_CreateCheckpoint_args() noexcept;
  std::string mmuID;
  std::string sessionID;

  _MMIAdapter_CreateCheckpoint_args__isset __isset;

  void __set_mmuID(const std::string& val);

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIAdapter_CreateCheckpoint_args & rhs) const
  {
    if (!(mmuID == rhs.mmuID))
      return false;
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_CreateCheckpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_CreateCheckpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_CreateCheckpoint_pargs {
 public:


  virtual ~MMIAdapter_CreateCheckpoint_pargs() noexcept;
  const std::string* mmuID;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_CreateCheckpoint_result__isset {
  _MMIAdapter_CreateCheckpoint_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_CreateCheckpoint_result__isset;

class MMIAdapter_CreateCheckpoint_result {
 public:

  MMIAdapter_CreateCheckpoint_result(const MMIAdapter_CreateCheckpoint_result&);
  MMIAdapter_CreateCheckpoint_result& operator=(const MMIAdapter_CreateCheckpoint_result&);
  MMIAdapter_CreateCheckpoint_result() : success() {
  }

  virtual ~MMIAdapter_CreateCheckpoint_result() noexcept;
  std::string success;

  _MMIAdapter_CreateCheckpoint_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MMIAdapter_CreateCheckpoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_CreateCheckpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_CreateCheckpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_CreateCheckpoint_presult__isset {
  _MMIAdapter_CreateCheckpoint_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_CreateCheckpoint_presult__isset;

class MMIAdapter_CreateCheckpoint_presult {
 public:


  virtual ~MMIAdapter_CreateCheckpoint_presult() noexcept;
  std::string* success;

  _MMIAdapter_CreateCheckpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIAdapter_RestoreCheckpoint_args__isset {
  _MMIAdapter_RestoreCheckpoint_args__isset() : mmuID(false), sessionID(false), checkpointData(false) {}
  bool mmuID :1;
  bool sessionID :1;
  bool checkpointData :1;
} _MMIAdapter_RestoreCheckpoint_args__isset;

class MMIAdapter_RestoreCheckpoint_args {
 public:

  MMIAdapter_RestoreCheckpoint_args(const MMIAdapter_RestoreCheckpoint_args&);
  MMIAdapter_RestoreCheckpoint_args& operator=(const MMIAdapter_RestoreCheckpoint_args&);
  MMIAdapter_RestoreCheckpoint_args() : mmuID(), sessionID(), checkpointData() {
  }

  virtual ~MMIAdapter_RestoreCheckpoint_args() noexcept;
  std::string mmuID;
  std::string sessionID;
  std::string checkpointData;

  _MMIAdapter_RestoreCheckpoint_args__isset __isset;

  void __set_mmuID(const std::string& val);

  void __set_sessionID(const std::string& val);

  void __set_checkpointData(const std::string& val);

  bool operator == (const MMIAdapter_RestoreCheckpoint_args & rhs) const
  {
    if (!(mmuID == rhs.mmuID))
      return false;
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(checkpointData == rhs.checkpointData))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_RestoreCheckpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_RestoreCheckpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIAdapter_RestoreCheckpoint_pargs {
 public:


  virtual ~MMIAdapter_RestoreCheckpoint_pargs() noexcept;
  const std::string* mmuID;
  const std::string* sessionID;
  const std::string* checkpointData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_RestoreCheckpoint_result__isset {
  _MMIAdapter_RestoreCheckpoint_result__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_RestoreCheckpoint_result__isset;

class MMIAdapter_RestoreCheckpoint_result {
 public:

  MMIAdapter_RestoreCheckpoint_result(const MMIAdapter_RestoreCheckpoint_result&);
  MMIAdapter_RestoreCheckpoint_result& operator=(const MMIAdapter_RestoreCheckpoint_result&);
  MMIAdapter_RestoreCheckpoint_result() {
  }

  virtual ~MMIAdapter_RestoreCheckpoint_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MMIAdapter_RestoreCheckpoint_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MMIAdapter_RestoreCheckpoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIAdapter_RestoreCheckpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIAdapter_RestoreCheckpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIAdapter_RestoreCheckpoint_presult__isset {
  _MMIAdapter_RestoreCheckpoint_presult__isset() : success(false) {}
  bool success :1;
} _MMIAdapter_RestoreCheckpoint_presult__isset;

class MMIAdapter_RestoreCheckpoint_presult {
 public:


  virtual ~MMIAdapter_RestoreCheckpoint_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MMIAdapter_RestoreCheckpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MMIAdapterClient : virtual public MMIAdapterIf {
 public:
  MMIAdapterClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MMIAdapterClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Initialize( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MAvatarDescription& avatarDescription, const std::map<std::string, std::string> & properties, const std::string& mmuID, const std::string& sessionID);
  void send_Initialize(const  ::MMIStandard::MAvatarDescription& avatarDescription, const std::map<std::string, std::string> & properties, const std::string& mmuID, const std::string& sessionID);
  void recv_Initialize( ::MMIStandard::MBoolResponse& _return);
  void AssignInstruction( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MInstruction& instruction, const  ::MMIStandard::MSimulationState& simulationState, const std::string& mmuID, const std::string& sessionID);
  void send_AssignInstruction(const  ::MMIStandard::MInstruction& instruction, const  ::MMIStandard::MSimulationState& simulationState, const std::string& mmuID, const std::string& sessionID);
  void recv_AssignInstruction( ::MMIStandard::MBoolResponse& _return);
  void DoStep( ::MMIStandard::MSimulationResult& _return, const double time, const  ::MMIStandard::MSimulationState& simulationState, const std::string& mmuID, const std::string& sessionID);
  void send_DoStep(const double time, const  ::MMIStandard::MSimulationState& simulationState, const std::string& mmuID, const std::string& sessionID);
  void recv_DoStep( ::MMIStandard::MSimulationResult& _return);
  void GetBoundaryConstraints(std::vector< ::MMIStandard::MConstraint> & _return, const  ::MMIStandard::MInstruction& instruction, const std::string& mmuID, const std::string& sessionID);
  void send_GetBoundaryConstraints(const  ::MMIStandard::MInstruction& instruction, const std::string& mmuID, const std::string& sessionID);
  void recv_GetBoundaryConstraints(std::vector< ::MMIStandard::MConstraint> & _return);
  void CheckPrerequisites( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MInstruction& instruction, const std::string& mmuID, const std::string& sessionID);
  void send_CheckPrerequisites(const  ::MMIStandard::MInstruction& instruction, const std::string& mmuID, const std::string& sessionID);
  void recv_CheckPrerequisites( ::MMIStandard::MBoolResponse& _return);
  void Abort( ::MMIStandard::MBoolResponse& _return, const std::string& instructionID, const std::string& mmuID, const std::string& sessionID);
  void send_Abort(const std::string& instructionID, const std::string& mmuID, const std::string& sessionID);
  void recv_Abort( ::MMIStandard::MBoolResponse& _return);
  void Dispose( ::MMIStandard::MBoolResponse& _return, const std::string& mmuID, const std::string& sessionID);
  void send_Dispose(const std::string& mmuID, const std::string& sessionID);
  void recv_Dispose( ::MMIStandard::MBoolResponse& _return);
  void ExecuteFunction(std::map<std::string, std::string> & _return, const std::string& name, const std::map<std::string, std::string> & parameters, const std::string& mmuID, const std::string& sessionID);
  void send_ExecuteFunction(const std::string& name, const std::map<std::string, std::string> & parameters, const std::string& mmuID, const std::string& sessionID);
  void recv_ExecuteFunction(std::map<std::string, std::string> & _return);
  void GetStatus(std::map<std::string, std::string> & _return);
  void send_GetStatus();
  void recv_GetStatus(std::map<std::string, std::string> & _return);
  void GetAdapterDescription(MAdapterDescription& _return);
  void send_GetAdapterDescription();
  void recv_GetAdapterDescription(MAdapterDescription& _return);
  void CreateSession( ::MMIStandard::MBoolResponse& _return, const std::string& sessionID);
  void send_CreateSession(const std::string& sessionID);
  void recv_CreateSession( ::MMIStandard::MBoolResponse& _return);
  void CloseSession( ::MMIStandard::MBoolResponse& _return, const std::string& sessionID);
  void send_CloseSession(const std::string& sessionID);
  void recv_CloseSession( ::MMIStandard::MBoolResponse& _return);
  void PushScene( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MSceneUpdate& sceneUpdates, const std::string& sessionID);
  void send_PushScene(const  ::MMIStandard::MSceneUpdate& sceneUpdates, const std::string& sessionID);
  void recv_PushScene( ::MMIStandard::MBoolResponse& _return);
  void GetLoadableMMUs(std::vector< ::MMIStandard::MMUDescription> & _return);
  void send_GetLoadableMMUs();
  void recv_GetLoadableMMUs(std::vector< ::MMIStandard::MMUDescription> & _return);
  void GetMMus(std::vector< ::MMIStandard::MMUDescription> & _return, const std::string& sessionID);
  void send_GetMMus(const std::string& sessionID);
  void recv_GetMMus(std::vector< ::MMIStandard::MMUDescription> & _return);
  void GetDescription( ::MMIStandard::MMUDescription& _return, const std::string& mmuID, const std::string& sessionID);
  void send_GetDescription(const std::string& mmuID, const std::string& sessionID);
  void recv_GetDescription( ::MMIStandard::MMUDescription& _return);
  void GetScene(std::vector< ::MMIStandard::MSceneObject> & _return, const std::string& sessionID);
  void send_GetScene(const std::string& sessionID);
  void recv_GetScene(std::vector< ::MMIStandard::MSceneObject> & _return);
  void GetSceneChanges( ::MMIStandard::MSceneUpdate& _return, const std::string& sessionID);
  void send_GetSceneChanges(const std::string& sessionID);
  void recv_GetSceneChanges( ::MMIStandard::MSceneUpdate& _return);
  void LoadMMUs(std::map<std::string, std::string> & _return, const std::vector<std::string> & mmus, const std::string& sessionID);
  void send_LoadMMUs(const std::vector<std::string> & mmus, const std::string& sessionID);
  void recv_LoadMMUs(std::map<std::string, std::string> & _return);
  void CreateCheckpoint(std::string& _return, const std::string& mmuID, const std::string& sessionID);
  void send_CreateCheckpoint(const std::string& mmuID, const std::string& sessionID);
  void recv_CreateCheckpoint(std::string& _return);
  void RestoreCheckpoint( ::MMIStandard::MBoolResponse& _return, const std::string& mmuID, const std::string& sessionID, const std::string& checkpointData);
  void send_RestoreCheckpoint(const std::string& mmuID, const std::string& sessionID, const std::string& checkpointData);
  void recv_RestoreCheckpoint( ::MMIStandard::MBoolResponse& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MMIAdapterProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<MMIAdapterIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MMIAdapterProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Initialize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AssignInstruction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DoStep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetBoundaryConstraints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CheckPrerequisites(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Abort(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Dispose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ExecuteFunction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAdapterDescription(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CloseSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushScene(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetLoadableMMUs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMMus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDescription(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetScene(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSceneChanges(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LoadMMUs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateCheckpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RestoreCheckpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MMIAdapterProcessor(::std::shared_ptr<MMIAdapterIf> iface) :
    iface_(iface) {
    processMap_["Initialize"] = &MMIAdapterProcessor::process_Initialize;
    processMap_["AssignInstruction"] = &MMIAdapterProcessor::process_AssignInstruction;
    processMap_["DoStep"] = &MMIAdapterProcessor::process_DoStep;
    processMap_["GetBoundaryConstraints"] = &MMIAdapterProcessor::process_GetBoundaryConstraints;
    processMap_["CheckPrerequisites"] = &MMIAdapterProcessor::process_CheckPrerequisites;
    processMap_["Abort"] = &MMIAdapterProcessor::process_Abort;
    processMap_["Dispose"] = &MMIAdapterProcessor::process_Dispose;
    processMap_["ExecuteFunction"] = &MMIAdapterProcessor::process_ExecuteFunction;
    processMap_["GetStatus"] = &MMIAdapterProcessor::process_GetStatus;
    processMap_["GetAdapterDescription"] = &MMIAdapterProcessor::process_GetAdapterDescription;
    processMap_["CreateSession"] = &MMIAdapterProcessor::process_CreateSession;
    processMap_["CloseSession"] = &MMIAdapterProcessor::process_CloseSession;
    processMap_["PushScene"] = &MMIAdapterProcessor::process_PushScene;
    processMap_["GetLoadableMMUs"] = &MMIAdapterProcessor::process_GetLoadableMMUs;
    processMap_["GetMMus"] = &MMIAdapterProcessor::process_GetMMus;
    processMap_["GetDescription"] = &MMIAdapterProcessor::process_GetDescription;
    processMap_["GetScene"] = &MMIAdapterProcessor::process_GetScene;
    processMap_["GetSceneChanges"] = &MMIAdapterProcessor::process_GetSceneChanges;
    processMap_["LoadMMUs"] = &MMIAdapterProcessor::process_LoadMMUs;
    processMap_["CreateCheckpoint"] = &MMIAdapterProcessor::process_CreateCheckpoint;
    processMap_["RestoreCheckpoint"] = &MMIAdapterProcessor::process_RestoreCheckpoint;
  }

  virtual ~MMIAdapterProcessor() {}
};

class MMIAdapterProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MMIAdapterProcessorFactory(const ::std::shared_ptr< MMIAdapterIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MMIAdapterIfFactory > handlerFactory_;
};

class MMIAdapterMultiface : virtual public MMIAdapterIf {
 public:
  MMIAdapterMultiface(std::vector<std::shared_ptr<MMIAdapterIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MMIAdapterMultiface() {}
 protected:
  std::vector<std::shared_ptr<MMIAdapterIf> > ifaces_;
  MMIAdapterMultiface() {}
  void add(::std::shared_ptr<MMIAdapterIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Initialize( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MAvatarDescription& avatarDescription, const std::map<std::string, std::string> & properties, const std::string& mmuID, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Initialize(_return, avatarDescription, properties, mmuID, sessionID);
    }
    ifaces_[i]->Initialize(_return, avatarDescription, properties, mmuID, sessionID);
    return;
  }

  void AssignInstruction( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MInstruction& instruction, const  ::MMIStandard::MSimulationState& simulationState, const std::string& mmuID, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AssignInstruction(_return, instruction, simulationState, mmuID, sessionID);
    }
    ifaces_[i]->AssignInstruction(_return, instruction, simulationState, mmuID, sessionID);
    return;
  }

  void DoStep( ::MMIStandard::MSimulationResult& _return, const double time, const  ::MMIStandard::MSimulationState& simulationState, const std::string& mmuID, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DoStep(_return, time, simulationState, mmuID, sessionID);
    }
    ifaces_[i]->DoStep(_return, time, simulationState, mmuID, sessionID);
    return;
  }

  void GetBoundaryConstraints(std::vector< ::MMIStandard::MConstraint> & _return, const  ::MMIStandard::MInstruction& instruction, const std::string& mmuID, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetBoundaryConstraints(_return, instruction, mmuID, sessionID);
    }
    ifaces_[i]->GetBoundaryConstraints(_return, instruction, mmuID, sessionID);
    return;
  }

  void CheckPrerequisites( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MInstruction& instruction, const std::string& mmuID, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CheckPrerequisites(_return, instruction, mmuID, sessionID);
    }
    ifaces_[i]->CheckPrerequisites(_return, instruction, mmuID, sessionID);
    return;
  }

  void Abort( ::MMIStandard::MBoolResponse& _return, const std::string& instructionID, const std::string& mmuID, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Abort(_return, instructionID, mmuID, sessionID);
    }
    ifaces_[i]->Abort(_return, instructionID, mmuID, sessionID);
    return;
  }

  void Dispose( ::MMIStandard::MBoolResponse& _return, const std::string& mmuID, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Dispose(_return, mmuID, sessionID);
    }
    ifaces_[i]->Dispose(_return, mmuID, sessionID);
    return;
  }

  void ExecuteFunction(std::map<std::string, std::string> & _return, const std::string& name, const std::map<std::string, std::string> & parameters, const std::string& mmuID, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ExecuteFunction(_return, name, parameters, mmuID, sessionID);
    }
    ifaces_[i]->ExecuteFunction(_return, name, parameters, mmuID, sessionID);
    return;
  }

  void GetStatus(std::map<std::string, std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetStatus(_return);
    }
    ifaces_[i]->GetStatus(_return);
    return;
  }

  void GetAdapterDescription(MAdapterDescription& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAdapterDescription(_return);
    }
    ifaces_[i]->GetAdapterDescription(_return);
    return;
  }

  void CreateSession( ::MMIStandard::MBoolResponse& _return, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateSession(_return, sessionID);
    }
    ifaces_[i]->CreateSession(_return, sessionID);
    return;
  }

  void CloseSession( ::MMIStandard::MBoolResponse& _return, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CloseSession(_return, sessionID);
    }
    ifaces_[i]->CloseSession(_return, sessionID);
    return;
  }

  void PushScene( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MSceneUpdate& sceneUpdates, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushScene(_return, sceneUpdates, sessionID);
    }
    ifaces_[i]->PushScene(_return, sceneUpdates, sessionID);
    return;
  }

  void GetLoadableMMUs(std::vector< ::MMIStandard::MMUDescription> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetLoadableMMUs(_return);
    }
    ifaces_[i]->GetLoadableMMUs(_return);
    return;
  }

  void GetMMus(std::vector< ::MMIStandard::MMUDescription> & _return, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMMus(_return, sessionID);
    }
    ifaces_[i]->GetMMus(_return, sessionID);
    return;
  }

  void GetDescription( ::MMIStandard::MMUDescription& _return, const std::string& mmuID, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDescription(_return, mmuID, sessionID);
    }
    ifaces_[i]->GetDescription(_return, mmuID, sessionID);
    return;
  }

  void GetScene(std::vector< ::MMIStandard::MSceneObject> & _return, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetScene(_return, sessionID);
    }
    ifaces_[i]->GetScene(_return, sessionID);
    return;
  }

  void GetSceneChanges( ::MMIStandard::MSceneUpdate& _return, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSceneChanges(_return, sessionID);
    }
    ifaces_[i]->GetSceneChanges(_return, sessionID);
    return;
  }

  void LoadMMUs(std::map<std::string, std::string> & _return, const std::vector<std::string> & mmus, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LoadMMUs(_return, mmus, sessionID);
    }
    ifaces_[i]->LoadMMUs(_return, mmus, sessionID);
    return;
  }

  void CreateCheckpoint(std::string& _return, const std::string& mmuID, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateCheckpoint(_return, mmuID, sessionID);
    }
    ifaces_[i]->CreateCheckpoint(_return, mmuID, sessionID);
    return;
  }

  void RestoreCheckpoint( ::MMIStandard::MBoolResponse& _return, const std::string& mmuID, const std::string& sessionID, const std::string& checkpointData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RestoreCheckpoint(_return, mmuID, sessionID, checkpointData);
    }
    ifaces_[i]->RestoreCheckpoint(_return, mmuID, sessionID, checkpointData);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MMIAdapterConcurrentClient : virtual public MMIAdapterIf {
 public:
  MMIAdapterConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  MMIAdapterConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Initialize( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MAvatarDescription& avatarDescription, const std::map<std::string, std::string> & properties, const std::string& mmuID, const std::string& sessionID);
  int32_t send_Initialize(const  ::MMIStandard::MAvatarDescription& avatarDescription, const std::map<std::string, std::string> & properties, const std::string& mmuID, const std::string& sessionID);
  void recv_Initialize( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void AssignInstruction( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MInstruction& instruction, const  ::MMIStandard::MSimulationState& simulationState, const std::string& mmuID, const std::string& sessionID);
  int32_t send_AssignInstruction(const  ::MMIStandard::MInstruction& instruction, const  ::MMIStandard::MSimulationState& simulationState, const std::string& mmuID, const std::string& sessionID);
  void recv_AssignInstruction( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void DoStep( ::MMIStandard::MSimulationResult& _return, const double time, const  ::MMIStandard::MSimulationState& simulationState, const std::string& mmuID, const std::string& sessionID);
  int32_t send_DoStep(const double time, const  ::MMIStandard::MSimulationState& simulationState, const std::string& mmuID, const std::string& sessionID);
  void recv_DoStep( ::MMIStandard::MSimulationResult& _return, const int32_t seqid);
  void GetBoundaryConstraints(std::vector< ::MMIStandard::MConstraint> & _return, const  ::MMIStandard::MInstruction& instruction, const std::string& mmuID, const std::string& sessionID);
  int32_t send_GetBoundaryConstraints(const  ::MMIStandard::MInstruction& instruction, const std::string& mmuID, const std::string& sessionID);
  void recv_GetBoundaryConstraints(std::vector< ::MMIStandard::MConstraint> & _return, const int32_t seqid);
  void CheckPrerequisites( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MInstruction& instruction, const std::string& mmuID, const std::string& sessionID);
  int32_t send_CheckPrerequisites(const  ::MMIStandard::MInstruction& instruction, const std::string& mmuID, const std::string& sessionID);
  void recv_CheckPrerequisites( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void Abort( ::MMIStandard::MBoolResponse& _return, const std::string& instructionID, const std::string& mmuID, const std::string& sessionID);
  int32_t send_Abort(const std::string& instructionID, const std::string& mmuID, const std::string& sessionID);
  void recv_Abort( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void Dispose( ::MMIStandard::MBoolResponse& _return, const std::string& mmuID, const std::string& sessionID);
  int32_t send_Dispose(const std::string& mmuID, const std::string& sessionID);
  void recv_Dispose( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void ExecuteFunction(std::map<std::string, std::string> & _return, const std::string& name, const std::map<std::string, std::string> & parameters, const std::string& mmuID, const std::string& sessionID);
  int32_t send_ExecuteFunction(const std::string& name, const std::map<std::string, std::string> & parameters, const std::string& mmuID, const std::string& sessionID);
  void recv_ExecuteFunction(std::map<std::string, std::string> & _return, const int32_t seqid);
  void GetStatus(std::map<std::string, std::string> & _return);
  int32_t send_GetStatus();
  void recv_GetStatus(std::map<std::string, std::string> & _return, const int32_t seqid);
  void GetAdapterDescription(MAdapterDescription& _return);
  int32_t send_GetAdapterDescription();
  void recv_GetAdapterDescription(MAdapterDescription& _return, const int32_t seqid);
  void CreateSession( ::MMIStandard::MBoolResponse& _return, const std::string& sessionID);
  int32_t send_CreateSession(const std::string& sessionID);
  void recv_CreateSession( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void CloseSession( ::MMIStandard::MBoolResponse& _return, const std::string& sessionID);
  int32_t send_CloseSession(const std::string& sessionID);
  void recv_CloseSession( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void PushScene( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MSceneUpdate& sceneUpdates, const std::string& sessionID);
  int32_t send_PushScene(const  ::MMIStandard::MSceneUpdate& sceneUpdates, const std::string& sessionID);
  void recv_PushScene( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void GetLoadableMMUs(std::vector< ::MMIStandard::MMUDescription> & _return);
  int32_t send_GetLoadableMMUs();
  void recv_GetLoadableMMUs(std::vector< ::MMIStandard::MMUDescription> & _return, const int32_t seqid);
  void GetMMus(std::vector< ::MMIStandard::MMUDescription> & _return, const std::string& sessionID);
  int32_t send_GetMMus(const std::string& sessionID);
  void recv_GetMMus(std::vector< ::MMIStandard::MMUDescription> & _return, const int32_t seqid);
  void GetDescription( ::MMIStandard::MMUDescription& _return, const std::string& mmuID, const std::string& sessionID);
  int32_t send_GetDescription(const std::string& mmuID, const std::string& sessionID);
  void recv_GetDescription( ::MMIStandard::MMUDescription& _return, const int32_t seqid);
  void GetScene(std::vector< ::MMIStandard::MSceneObject> & _return, const std::string& sessionID);
  int32_t send_GetScene(const std::string& sessionID);
  void recv_GetScene(std::vector< ::MMIStandard::MSceneObject> & _return, const int32_t seqid);
  void GetSceneChanges( ::MMIStandard::MSceneUpdate& _return, const std::string& sessionID);
  int32_t send_GetSceneChanges(const std::string& sessionID);
  void recv_GetSceneChanges( ::MMIStandard::MSceneUpdate& _return, const int32_t seqid);
  void LoadMMUs(std::map<std::string, std::string> & _return, const std::vector<std::string> & mmus, const std::string& sessionID);
  int32_t send_LoadMMUs(const std::vector<std::string> & mmus, const std::string& sessionID);
  void recv_LoadMMUs(std::map<std::string, std::string> & _return, const int32_t seqid);
  void CreateCheckpoint(std::string& _return, const std::string& mmuID, const std::string& sessionID);
  int32_t send_CreateCheckpoint(const std::string& mmuID, const std::string& sessionID);
  void recv_CreateCheckpoint(std::string& _return, const int32_t seqid);
  void RestoreCheckpoint( ::MMIStandard::MBoolResponse& _return, const std::string& mmuID, const std::string& sessionID, const std::string& checkpointData);
  int32_t send_RestoreCheckpoint(const std::string& mmuID, const std::string& sessionID, const std::string& checkpointData);
  void recv_RestoreCheckpoint( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
