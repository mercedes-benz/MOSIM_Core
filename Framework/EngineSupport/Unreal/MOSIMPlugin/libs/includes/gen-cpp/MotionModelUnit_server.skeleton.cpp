// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MotionModelUnit.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::MMIStandard;

class MotionModelUnitHandler : virtual public MotionModelUnitIf {
 public:
  MotionModelUnitHandler() {
    // Your initialization goes here
  }

  void Initialize( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MAvatarDescription& avatarDescription, const std::map<std::string, std::string> & properties) {
    // Your implementation goes here
    printf("Initialize\n");
  }

  void AssignInstruction( ::MMIStandard::MBoolResponse& _return, const MInstruction& motionInstruction, const MSimulationState& simulationState) {
    // Your implementation goes here
    printf("AssignInstruction\n");
  }

  void DoStep(MSimulationResult& _return, const double time, const MSimulationState& simulationState) {
    // Your implementation goes here
    printf("DoStep\n");
  }

  void GetBoundaryConstraints(std::vector< ::MMIStandard::MConstraint> & _return, const MInstruction& instruction) {
    // Your implementation goes here
    printf("GetBoundaryConstraints\n");
  }

  void CheckPrerequisites( ::MMIStandard::MBoolResponse& _return, const MInstruction& instruction) {
    // Your implementation goes here
    printf("CheckPrerequisites\n");
  }

  void Abort( ::MMIStandard::MBoolResponse& _return, const std::string& instructionId) {
    // Your implementation goes here
    printf("Abort\n");
  }

  void Dispose( ::MMIStandard::MBoolResponse& _return, const std::map<std::string, std::string> & parameters) {
    // Your implementation goes here
    printf("Dispose\n");
  }

  void CreateCheckpoint(std::string& _return) {
    // Your implementation goes here
    printf("CreateCheckpoint\n");
  }

  void RestoreCheckpoint( ::MMIStandard::MBoolResponse& _return, const std::string& data) {
    // Your implementation goes here
    printf("RestoreCheckpoint\n");
  }

  void ExecuteFunction(std::map<std::string, std::string> & _return, const std::string& name, const std::map<std::string, std::string> & parameters) {
    // Your implementation goes here
    printf("ExecuteFunction\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<MotionModelUnitHandler> handler(new MotionModelUnitHandler());
  ::std::shared_ptr<TProcessor> processor(new MotionModelUnitProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

