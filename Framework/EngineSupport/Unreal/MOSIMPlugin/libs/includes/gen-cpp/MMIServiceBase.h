/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MMIServiceBase_H
#define MMIServiceBase_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "services_types.h"

namespace MMIStandard {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MMIServiceBaseIf {
 public:
  virtual ~MMIServiceBaseIf() {}
  virtual void GetStatus(std::map<std::string, std::string> & _return) = 0;
  virtual void GetDescription( ::MMIStandard::MServiceDescription& _return) = 0;
  virtual void Setup( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MAvatarDescription& avatar, const std::map<std::string, std::string> & properties) = 0;
  virtual void Consume(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & properties) = 0;
  virtual void Dispose( ::MMIStandard::MBoolResponse& _return, const std::map<std::string, std::string> & properties) = 0;
  virtual void Restart( ::MMIStandard::MBoolResponse& _return, const std::map<std::string, std::string> & properties) = 0;
};

class MMIServiceBaseIfFactory {
 public:
  typedef MMIServiceBaseIf Handler;

  virtual ~MMIServiceBaseIfFactory() {}

  virtual MMIServiceBaseIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) = 0;
};

class MMIServiceBaseIfSingletonFactory : virtual public MMIServiceBaseIfFactory {
 public:
  MMIServiceBaseIfSingletonFactory(const ::std::shared_ptr<MMIServiceBaseIf>& iface) : iface_(iface) {}
  virtual ~MMIServiceBaseIfSingletonFactory() {}

  virtual MMIServiceBaseIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MMIServiceBaseIf> iface_;
};

class MMIServiceBaseNull : virtual public MMIServiceBaseIf {
 public:
  virtual ~MMIServiceBaseNull() {}
  void GetStatus(std::map<std::string, std::string> & /* _return */) {
    return;
  }
  void GetDescription( ::MMIStandard::MServiceDescription& /* _return */) {
    return;
  }
  void Setup( ::MMIStandard::MBoolResponse& /* _return */, const  ::MMIStandard::MAvatarDescription& /* avatar */, const std::map<std::string, std::string> & /* properties */) {
    return;
  }
  void Consume(std::map<std::string, std::string> & /* _return */, const std::map<std::string, std::string> & /* properties */) {
    return;
  }
  void Dispose( ::MMIStandard::MBoolResponse& /* _return */, const std::map<std::string, std::string> & /* properties */) {
    return;
  }
  void Restart( ::MMIStandard::MBoolResponse& /* _return */, const std::map<std::string, std::string> & /* properties */) {
    return;
  }
};


class MMIServiceBase_GetStatus_args {
 public:

  MMIServiceBase_GetStatus_args(const MMIServiceBase_GetStatus_args&);
  MMIServiceBase_GetStatus_args& operator=(const MMIServiceBase_GetStatus_args&);
  MMIServiceBase_GetStatus_args() {
  }

  virtual ~MMIServiceBase_GetStatus_args() noexcept;

  bool operator == (const MMIServiceBase_GetStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MMIServiceBase_GetStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIServiceBase_GetStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIServiceBase_GetStatus_pargs {
 public:


  virtual ~MMIServiceBase_GetStatus_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIServiceBase_GetStatus_result__isset {
  _MMIServiceBase_GetStatus_result__isset() : success(false) {}
  bool success :1;
} _MMIServiceBase_GetStatus_result__isset;

class MMIServiceBase_GetStatus_result {
 public:

  MMIServiceBase_GetStatus_result(const MMIServiceBase_GetStatus_result&);
  MMIServiceBase_GetStatus_result& operator=(const MMIServiceBase_GetStatus_result&);
  MMIServiceBase_GetStatus_result() {
  }

  virtual ~MMIServiceBase_GetStatus_result() noexcept;
  std::map<std::string, std::string>  success;

  _MMIServiceBase_GetStatus_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const MMIServiceBase_GetStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIServiceBase_GetStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIServiceBase_GetStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIServiceBase_GetStatus_presult__isset {
  _MMIServiceBase_GetStatus_presult__isset() : success(false) {}
  bool success :1;
} _MMIServiceBase_GetStatus_presult__isset;

class MMIServiceBase_GetStatus_presult {
 public:


  virtual ~MMIServiceBase_GetStatus_presult() noexcept;
  std::map<std::string, std::string> * success;

  _MMIServiceBase_GetStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MMIServiceBase_GetDescription_args {
 public:

  MMIServiceBase_GetDescription_args(const MMIServiceBase_GetDescription_args&);
  MMIServiceBase_GetDescription_args& operator=(const MMIServiceBase_GetDescription_args&);
  MMIServiceBase_GetDescription_args() {
  }

  virtual ~MMIServiceBase_GetDescription_args() noexcept;

  bool operator == (const MMIServiceBase_GetDescription_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MMIServiceBase_GetDescription_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIServiceBase_GetDescription_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIServiceBase_GetDescription_pargs {
 public:


  virtual ~MMIServiceBase_GetDescription_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIServiceBase_GetDescription_result__isset {
  _MMIServiceBase_GetDescription_result__isset() : success(false) {}
  bool success :1;
} _MMIServiceBase_GetDescription_result__isset;

class MMIServiceBase_GetDescription_result {
 public:

  MMIServiceBase_GetDescription_result(const MMIServiceBase_GetDescription_result&);
  MMIServiceBase_GetDescription_result& operator=(const MMIServiceBase_GetDescription_result&);
  MMIServiceBase_GetDescription_result() {
  }

  virtual ~MMIServiceBase_GetDescription_result() noexcept;
   ::MMIStandard::MServiceDescription success;

  _MMIServiceBase_GetDescription_result__isset __isset;

  void __set_success(const  ::MMIStandard::MServiceDescription& val);

  bool operator == (const MMIServiceBase_GetDescription_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIServiceBase_GetDescription_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIServiceBase_GetDescription_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIServiceBase_GetDescription_presult__isset {
  _MMIServiceBase_GetDescription_presult__isset() : success(false) {}
  bool success :1;
} _MMIServiceBase_GetDescription_presult__isset;

class MMIServiceBase_GetDescription_presult {
 public:


  virtual ~MMIServiceBase_GetDescription_presult() noexcept;
   ::MMIStandard::MServiceDescription* success;

  _MMIServiceBase_GetDescription_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIServiceBase_Setup_args__isset {
  _MMIServiceBase_Setup_args__isset() : avatar(false), properties(false) {}
  bool avatar :1;
  bool properties :1;
} _MMIServiceBase_Setup_args__isset;

class MMIServiceBase_Setup_args {
 public:

  MMIServiceBase_Setup_args(const MMIServiceBase_Setup_args&);
  MMIServiceBase_Setup_args& operator=(const MMIServiceBase_Setup_args&);
  MMIServiceBase_Setup_args() {
  }

  virtual ~MMIServiceBase_Setup_args() noexcept;
   ::MMIStandard::MAvatarDescription avatar;
  std::map<std::string, std::string>  properties;

  _MMIServiceBase_Setup_args__isset __isset;

  void __set_avatar(const  ::MMIStandard::MAvatarDescription& val);

  void __set_properties(const std::map<std::string, std::string> & val);

  bool operator == (const MMIServiceBase_Setup_args & rhs) const
  {
    if (!(avatar == rhs.avatar))
      return false;
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const MMIServiceBase_Setup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIServiceBase_Setup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIServiceBase_Setup_pargs {
 public:


  virtual ~MMIServiceBase_Setup_pargs() noexcept;
  const  ::MMIStandard::MAvatarDescription* avatar;
  const std::map<std::string, std::string> * properties;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIServiceBase_Setup_result__isset {
  _MMIServiceBase_Setup_result__isset() : success(false) {}
  bool success :1;
} _MMIServiceBase_Setup_result__isset;

class MMIServiceBase_Setup_result {
 public:

  MMIServiceBase_Setup_result(const MMIServiceBase_Setup_result&);
  MMIServiceBase_Setup_result& operator=(const MMIServiceBase_Setup_result&);
  MMIServiceBase_Setup_result() {
  }

  virtual ~MMIServiceBase_Setup_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MMIServiceBase_Setup_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MMIServiceBase_Setup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIServiceBase_Setup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIServiceBase_Setup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIServiceBase_Setup_presult__isset {
  _MMIServiceBase_Setup_presult__isset() : success(false) {}
  bool success :1;
} _MMIServiceBase_Setup_presult__isset;

class MMIServiceBase_Setup_presult {
 public:


  virtual ~MMIServiceBase_Setup_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MMIServiceBase_Setup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIServiceBase_Consume_args__isset {
  _MMIServiceBase_Consume_args__isset() : properties(false) {}
  bool properties :1;
} _MMIServiceBase_Consume_args__isset;

class MMIServiceBase_Consume_args {
 public:

  MMIServiceBase_Consume_args(const MMIServiceBase_Consume_args&);
  MMIServiceBase_Consume_args& operator=(const MMIServiceBase_Consume_args&);
  MMIServiceBase_Consume_args() {
  }

  virtual ~MMIServiceBase_Consume_args() noexcept;
  std::map<std::string, std::string>  properties;

  _MMIServiceBase_Consume_args__isset __isset;

  void __set_properties(const std::map<std::string, std::string> & val);

  bool operator == (const MMIServiceBase_Consume_args & rhs) const
  {
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const MMIServiceBase_Consume_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIServiceBase_Consume_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIServiceBase_Consume_pargs {
 public:


  virtual ~MMIServiceBase_Consume_pargs() noexcept;
  const std::map<std::string, std::string> * properties;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIServiceBase_Consume_result__isset {
  _MMIServiceBase_Consume_result__isset() : success(false) {}
  bool success :1;
} _MMIServiceBase_Consume_result__isset;

class MMIServiceBase_Consume_result {
 public:

  MMIServiceBase_Consume_result(const MMIServiceBase_Consume_result&);
  MMIServiceBase_Consume_result& operator=(const MMIServiceBase_Consume_result&);
  MMIServiceBase_Consume_result() {
  }

  virtual ~MMIServiceBase_Consume_result() noexcept;
  std::map<std::string, std::string>  success;

  _MMIServiceBase_Consume_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const MMIServiceBase_Consume_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIServiceBase_Consume_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIServiceBase_Consume_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIServiceBase_Consume_presult__isset {
  _MMIServiceBase_Consume_presult__isset() : success(false) {}
  bool success :1;
} _MMIServiceBase_Consume_presult__isset;

class MMIServiceBase_Consume_presult {
 public:


  virtual ~MMIServiceBase_Consume_presult() noexcept;
  std::map<std::string, std::string> * success;

  _MMIServiceBase_Consume_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIServiceBase_Dispose_args__isset {
  _MMIServiceBase_Dispose_args__isset() : properties(false) {}
  bool properties :1;
} _MMIServiceBase_Dispose_args__isset;

class MMIServiceBase_Dispose_args {
 public:

  MMIServiceBase_Dispose_args(const MMIServiceBase_Dispose_args&);
  MMIServiceBase_Dispose_args& operator=(const MMIServiceBase_Dispose_args&);
  MMIServiceBase_Dispose_args() {
  }

  virtual ~MMIServiceBase_Dispose_args() noexcept;
  std::map<std::string, std::string>  properties;

  _MMIServiceBase_Dispose_args__isset __isset;

  void __set_properties(const std::map<std::string, std::string> & val);

  bool operator == (const MMIServiceBase_Dispose_args & rhs) const
  {
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const MMIServiceBase_Dispose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIServiceBase_Dispose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIServiceBase_Dispose_pargs {
 public:


  virtual ~MMIServiceBase_Dispose_pargs() noexcept;
  const std::map<std::string, std::string> * properties;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIServiceBase_Dispose_result__isset {
  _MMIServiceBase_Dispose_result__isset() : success(false) {}
  bool success :1;
} _MMIServiceBase_Dispose_result__isset;

class MMIServiceBase_Dispose_result {
 public:

  MMIServiceBase_Dispose_result(const MMIServiceBase_Dispose_result&);
  MMIServiceBase_Dispose_result& operator=(const MMIServiceBase_Dispose_result&);
  MMIServiceBase_Dispose_result() {
  }

  virtual ~MMIServiceBase_Dispose_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MMIServiceBase_Dispose_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MMIServiceBase_Dispose_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIServiceBase_Dispose_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIServiceBase_Dispose_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIServiceBase_Dispose_presult__isset {
  _MMIServiceBase_Dispose_presult__isset() : success(false) {}
  bool success :1;
} _MMIServiceBase_Dispose_presult__isset;

class MMIServiceBase_Dispose_presult {
 public:


  virtual ~MMIServiceBase_Dispose_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MMIServiceBase_Dispose_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIServiceBase_Restart_args__isset {
  _MMIServiceBase_Restart_args__isset() : properties(false) {}
  bool properties :1;
} _MMIServiceBase_Restart_args__isset;

class MMIServiceBase_Restart_args {
 public:

  MMIServiceBase_Restart_args(const MMIServiceBase_Restart_args&);
  MMIServiceBase_Restart_args& operator=(const MMIServiceBase_Restart_args&);
  MMIServiceBase_Restart_args() {
  }

  virtual ~MMIServiceBase_Restart_args() noexcept;
  std::map<std::string, std::string>  properties;

  _MMIServiceBase_Restart_args__isset __isset;

  void __set_properties(const std::map<std::string, std::string> & val);

  bool operator == (const MMIServiceBase_Restart_args & rhs) const
  {
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const MMIServiceBase_Restart_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIServiceBase_Restart_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIServiceBase_Restart_pargs {
 public:


  virtual ~MMIServiceBase_Restart_pargs() noexcept;
  const std::map<std::string, std::string> * properties;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIServiceBase_Restart_result__isset {
  _MMIServiceBase_Restart_result__isset() : success(false) {}
  bool success :1;
} _MMIServiceBase_Restart_result__isset;

class MMIServiceBase_Restart_result {
 public:

  MMIServiceBase_Restart_result(const MMIServiceBase_Restart_result&);
  MMIServiceBase_Restart_result& operator=(const MMIServiceBase_Restart_result&);
  MMIServiceBase_Restart_result() {
  }

  virtual ~MMIServiceBase_Restart_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MMIServiceBase_Restart_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MMIServiceBase_Restart_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIServiceBase_Restart_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIServiceBase_Restart_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIServiceBase_Restart_presult__isset {
  _MMIServiceBase_Restart_presult__isset() : success(false) {}
  bool success :1;
} _MMIServiceBase_Restart_presult__isset;

class MMIServiceBase_Restart_presult {
 public:


  virtual ~MMIServiceBase_Restart_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MMIServiceBase_Restart_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MMIServiceBaseClient : virtual public MMIServiceBaseIf {
 public:
  MMIServiceBaseClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MMIServiceBaseClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetStatus(std::map<std::string, std::string> & _return);
  void send_GetStatus();
  void recv_GetStatus(std::map<std::string, std::string> & _return);
  void GetDescription( ::MMIStandard::MServiceDescription& _return);
  void send_GetDescription();
  void recv_GetDescription( ::MMIStandard::MServiceDescription& _return);
  void Setup( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MAvatarDescription& avatar, const std::map<std::string, std::string> & properties);
  void send_Setup(const  ::MMIStandard::MAvatarDescription& avatar, const std::map<std::string, std::string> & properties);
  void recv_Setup( ::MMIStandard::MBoolResponse& _return);
  void Consume(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & properties);
  void send_Consume(const std::map<std::string, std::string> & properties);
  void recv_Consume(std::map<std::string, std::string> & _return);
  void Dispose( ::MMIStandard::MBoolResponse& _return, const std::map<std::string, std::string> & properties);
  void send_Dispose(const std::map<std::string, std::string> & properties);
  void recv_Dispose( ::MMIStandard::MBoolResponse& _return);
  void Restart( ::MMIStandard::MBoolResponse& _return, const std::map<std::string, std::string> & properties);
  void send_Restart(const std::map<std::string, std::string> & properties);
  void recv_Restart( ::MMIStandard::MBoolResponse& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MMIServiceBaseProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<MMIServiceBaseIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MMIServiceBaseProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDescription(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Setup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Consume(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Dispose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Restart(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MMIServiceBaseProcessor(::std::shared_ptr<MMIServiceBaseIf> iface) :
    iface_(iface) {
    processMap_["GetStatus"] = &MMIServiceBaseProcessor::process_GetStatus;
    processMap_["GetDescription"] = &MMIServiceBaseProcessor::process_GetDescription;
    processMap_["Setup"] = &MMIServiceBaseProcessor::process_Setup;
    processMap_["Consume"] = &MMIServiceBaseProcessor::process_Consume;
    processMap_["Dispose"] = &MMIServiceBaseProcessor::process_Dispose;
    processMap_["Restart"] = &MMIServiceBaseProcessor::process_Restart;
  }

  virtual ~MMIServiceBaseProcessor() {}
};

class MMIServiceBaseProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MMIServiceBaseProcessorFactory(const ::std::shared_ptr< MMIServiceBaseIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MMIServiceBaseIfFactory > handlerFactory_;
};

class MMIServiceBaseMultiface : virtual public MMIServiceBaseIf {
 public:
  MMIServiceBaseMultiface(std::vector<std::shared_ptr<MMIServiceBaseIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MMIServiceBaseMultiface() {}
 protected:
  std::vector<std::shared_ptr<MMIServiceBaseIf> > ifaces_;
  MMIServiceBaseMultiface() {}
  void add(::std::shared_ptr<MMIServiceBaseIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetStatus(std::map<std::string, std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetStatus(_return);
    }
    ifaces_[i]->GetStatus(_return);
    return;
  }

  void GetDescription( ::MMIStandard::MServiceDescription& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDescription(_return);
    }
    ifaces_[i]->GetDescription(_return);
    return;
  }

  void Setup( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MAvatarDescription& avatar, const std::map<std::string, std::string> & properties) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Setup(_return, avatar, properties);
    }
    ifaces_[i]->Setup(_return, avatar, properties);
    return;
  }

  void Consume(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & properties) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Consume(_return, properties);
    }
    ifaces_[i]->Consume(_return, properties);
    return;
  }

  void Dispose( ::MMIStandard::MBoolResponse& _return, const std::map<std::string, std::string> & properties) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Dispose(_return, properties);
    }
    ifaces_[i]->Dispose(_return, properties);
    return;
  }

  void Restart( ::MMIStandard::MBoolResponse& _return, const std::map<std::string, std::string> & properties) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Restart(_return, properties);
    }
    ifaces_[i]->Restart(_return, properties);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MMIServiceBaseConcurrentClient : virtual public MMIServiceBaseIf {
 public:
  MMIServiceBaseConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  MMIServiceBaseConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetStatus(std::map<std::string, std::string> & _return);
  int32_t send_GetStatus();
  void recv_GetStatus(std::map<std::string, std::string> & _return, const int32_t seqid);
  void GetDescription( ::MMIStandard::MServiceDescription& _return);
  int32_t send_GetDescription();
  void recv_GetDescription( ::MMIStandard::MServiceDescription& _return, const int32_t seqid);
  void Setup( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MAvatarDescription& avatar, const std::map<std::string, std::string> & properties);
  int32_t send_Setup(const  ::MMIStandard::MAvatarDescription& avatar, const std::map<std::string, std::string> & properties);
  void recv_Setup( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void Consume(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & properties);
  int32_t send_Consume(const std::map<std::string, std::string> & properties);
  void recv_Consume(std::map<std::string, std::string> & _return, const int32_t seqid);
  void Dispose( ::MMIStandard::MBoolResponse& _return, const std::map<std::string, std::string> & properties);
  int32_t send_Dispose(const std::map<std::string, std::string> & properties);
  void recv_Dispose( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void Restart( ::MMIStandard::MBoolResponse& _return, const std::map<std::string, std::string> & properties);
  int32_t send_Restart(const std::map<std::string, std::string> & properties);
  void recv_Restart( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
