/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MSkeletonAccess_H
#define MSkeletonAccess_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "services_types.h"
#include "MMIServiceBase.h"

namespace MMIStandard {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MSkeletonAccessIf : virtual public MMIServiceBaseIf {
 public:
  virtual ~MSkeletonAccessIf() {}
  virtual void InitializeAnthropometry(const  ::MMIStandard::MAvatarDescription& description) = 0;
  virtual void GetAvatarDescription( ::MMIStandard::MAvatarDescription& _return, const std::string& avatarID) = 0;
  virtual void SetAnimatedJoints(const std::string& avatarID, const std::vector< ::MMIStandard::MJointType::type> & joints) = 0;
  virtual void SetChannelData(const  ::MMIStandard::MAvatarPostureValues& values) = 0;
  virtual void GetCurrentGlobalPosture( ::MMIStandard::MAvatarPosture& _return, const std::string& avatarID) = 0;
  virtual void GetCurrentLocalPosture( ::MMIStandard::MAvatarPosture& _return, const std::string& avatarID) = 0;
  virtual void GetCurrentPostureValues( ::MMIStandard::MAvatarPostureValues& _return, const std::string& avatarID) = 0;
  virtual void GetCurrentPostureValuesPartial( ::MMIStandard::MAvatarPostureValues& _return, const std::string& avatarID, const std::vector< ::MMIStandard::MJointType::type> & joints) = 0;
  virtual void GetCurrentJointPositions(std::vector< ::MMIStandard::MVector3> & _return, const std::string& avatarID) = 0;
  virtual void GetRootPosition( ::MMIStandard::MVector3& _return, const std::string& avatarID) = 0;
  virtual void GetRootRotation( ::MMIStandard::MQuaternion& _return, const std::string& avatarID) = 0;
  virtual void GetGlobalJointPosition( ::MMIStandard::MVector3& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint) = 0;
  virtual void GetGlobalJointRotation( ::MMIStandard::MQuaternion& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint) = 0;
  virtual void GetLocalJointPosition( ::MMIStandard::MVector3& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint) = 0;
  virtual void GetLocalJointRotation( ::MMIStandard::MQuaternion& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint) = 0;
  virtual void SetRootPosition(const std::string& avatarId, const  ::MMIStandard::MVector3& position) = 0;
  virtual void SetRootRotation(const std::string& avatarId, const  ::MMIStandard::MQuaternion& rotation) = 0;
  virtual void SetGlobalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MVector3& position) = 0;
  virtual void SetGlobalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MQuaternion& rotation) = 0;
  virtual void SetLocalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MVector3& position) = 0;
  virtual void SetLocalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MQuaternion& rotation) = 0;
  virtual void RecomputeCurrentPostureValues( ::MMIStandard::MAvatarPostureValues& _return, const std::string& avatarId) = 0;
};

class MSkeletonAccessIfFactory : virtual public MMIServiceBaseIfFactory {
 public:
  typedef MSkeletonAccessIf Handler;

  virtual ~MSkeletonAccessIfFactory() {}

  virtual MSkeletonAccessIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) = 0;
};

class MSkeletonAccessIfSingletonFactory : virtual public MSkeletonAccessIfFactory {
 public:
  MSkeletonAccessIfSingletonFactory(const ::std::shared_ptr<MSkeletonAccessIf>& iface) : iface_(iface) {}
  virtual ~MSkeletonAccessIfSingletonFactory() {}

  virtual MSkeletonAccessIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MSkeletonAccessIf> iface_;
};

class MSkeletonAccessNull : virtual public MSkeletonAccessIf , virtual public MMIServiceBaseNull {
 public:
  virtual ~MSkeletonAccessNull() {}
  void InitializeAnthropometry(const  ::MMIStandard::MAvatarDescription& /* description */) {
    return;
  }
  void GetAvatarDescription( ::MMIStandard::MAvatarDescription& /* _return */, const std::string& /* avatarID */) {
    return;
  }
  void SetAnimatedJoints(const std::string& /* avatarID */, const std::vector< ::MMIStandard::MJointType::type> & /* joints */) {
    return;
  }
  void SetChannelData(const  ::MMIStandard::MAvatarPostureValues& /* values */) {
    return;
  }
  void GetCurrentGlobalPosture( ::MMIStandard::MAvatarPosture& /* _return */, const std::string& /* avatarID */) {
    return;
  }
  void GetCurrentLocalPosture( ::MMIStandard::MAvatarPosture& /* _return */, const std::string& /* avatarID */) {
    return;
  }
  void GetCurrentPostureValues( ::MMIStandard::MAvatarPostureValues& /* _return */, const std::string& /* avatarID */) {
    return;
  }
  void GetCurrentPostureValuesPartial( ::MMIStandard::MAvatarPostureValues& /* _return */, const std::string& /* avatarID */, const std::vector< ::MMIStandard::MJointType::type> & /* joints */) {
    return;
  }
  void GetCurrentJointPositions(std::vector< ::MMIStandard::MVector3> & /* _return */, const std::string& /* avatarID */) {
    return;
  }
  void GetRootPosition( ::MMIStandard::MVector3& /* _return */, const std::string& /* avatarID */) {
    return;
  }
  void GetRootRotation( ::MMIStandard::MQuaternion& /* _return */, const std::string& /* avatarID */) {
    return;
  }
  void GetGlobalJointPosition( ::MMIStandard::MVector3& /* _return */, const std::string& /* avatarId */, const  ::MMIStandard::MJointType::type /* joint */) {
    return;
  }
  void GetGlobalJointRotation( ::MMIStandard::MQuaternion& /* _return */, const std::string& /* avatarId */, const  ::MMIStandard::MJointType::type /* joint */) {
    return;
  }
  void GetLocalJointPosition( ::MMIStandard::MVector3& /* _return */, const std::string& /* avatarId */, const  ::MMIStandard::MJointType::type /* joint */) {
    return;
  }
  void GetLocalJointRotation( ::MMIStandard::MQuaternion& /* _return */, const std::string& /* avatarId */, const  ::MMIStandard::MJointType::type /* joint */) {
    return;
  }
  void SetRootPosition(const std::string& /* avatarId */, const  ::MMIStandard::MVector3& /* position */) {
    return;
  }
  void SetRootRotation(const std::string& /* avatarId */, const  ::MMIStandard::MQuaternion& /* rotation */) {
    return;
  }
  void SetGlobalJointPosition(const std::string& /* avatarId */, const  ::MMIStandard::MJointType::type /* joint */, const  ::MMIStandard::MVector3& /* position */) {
    return;
  }
  void SetGlobalJointRotation(const std::string& /* avatarId */, const  ::MMIStandard::MJointType::type /* joint */, const  ::MMIStandard::MQuaternion& /* rotation */) {
    return;
  }
  void SetLocalJointPosition(const std::string& /* avatarId */, const  ::MMIStandard::MJointType::type /* joint */, const  ::MMIStandard::MVector3& /* position */) {
    return;
  }
  void SetLocalJointRotation(const std::string& /* avatarId */, const  ::MMIStandard::MJointType::type /* joint */, const  ::MMIStandard::MQuaternion& /* rotation */) {
    return;
  }
  void RecomputeCurrentPostureValues( ::MMIStandard::MAvatarPostureValues& /* _return */, const std::string& /* avatarId */) {
    return;
  }
};

typedef struct _MSkeletonAccess_InitializeAnthropometry_args__isset {
  _MSkeletonAccess_InitializeAnthropometry_args__isset() : description(false) {}
  bool description :1;
} _MSkeletonAccess_InitializeAnthropometry_args__isset;

class MSkeletonAccess_InitializeAnthropometry_args {
 public:

  MSkeletonAccess_InitializeAnthropometry_args(const MSkeletonAccess_InitializeAnthropometry_args&);
  MSkeletonAccess_InitializeAnthropometry_args& operator=(const MSkeletonAccess_InitializeAnthropometry_args&);
  MSkeletonAccess_InitializeAnthropometry_args() {
  }

  virtual ~MSkeletonAccess_InitializeAnthropometry_args() noexcept;
   ::MMIStandard::MAvatarDescription description;

  _MSkeletonAccess_InitializeAnthropometry_args__isset __isset;

  void __set_description(const  ::MMIStandard::MAvatarDescription& val);

  bool operator == (const MSkeletonAccess_InitializeAnthropometry_args & rhs) const
  {
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_InitializeAnthropometry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_InitializeAnthropometry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_InitializeAnthropometry_pargs {
 public:


  virtual ~MSkeletonAccess_InitializeAnthropometry_pargs() noexcept;
  const  ::MMIStandard::MAvatarDescription* description;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_InitializeAnthropometry_result {
 public:

  MSkeletonAccess_InitializeAnthropometry_result(const MSkeletonAccess_InitializeAnthropometry_result&);
  MSkeletonAccess_InitializeAnthropometry_result& operator=(const MSkeletonAccess_InitializeAnthropometry_result&);
  MSkeletonAccess_InitializeAnthropometry_result() {
  }

  virtual ~MSkeletonAccess_InitializeAnthropometry_result() noexcept;

  bool operator == (const MSkeletonAccess_InitializeAnthropometry_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSkeletonAccess_InitializeAnthropometry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_InitializeAnthropometry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_InitializeAnthropometry_presult {
 public:


  virtual ~MSkeletonAccess_InitializeAnthropometry_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_GetAvatarDescription_args__isset {
  _MSkeletonAccess_GetAvatarDescription_args__isset() : avatarID(false) {}
  bool avatarID :1;
} _MSkeletonAccess_GetAvatarDescription_args__isset;

class MSkeletonAccess_GetAvatarDescription_args {
 public:

  MSkeletonAccess_GetAvatarDescription_args(const MSkeletonAccess_GetAvatarDescription_args&);
  MSkeletonAccess_GetAvatarDescription_args& operator=(const MSkeletonAccess_GetAvatarDescription_args&);
  MSkeletonAccess_GetAvatarDescription_args() : avatarID() {
  }

  virtual ~MSkeletonAccess_GetAvatarDescription_args() noexcept;
  std::string avatarID;

  _MSkeletonAccess_GetAvatarDescription_args__isset __isset;

  void __set_avatarID(const std::string& val);

  bool operator == (const MSkeletonAccess_GetAvatarDescription_args & rhs) const
  {
    if (!(avatarID == rhs.avatarID))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetAvatarDescription_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetAvatarDescription_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_GetAvatarDescription_pargs {
 public:


  virtual ~MSkeletonAccess_GetAvatarDescription_pargs() noexcept;
  const std::string* avatarID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetAvatarDescription_result__isset {
  _MSkeletonAccess_GetAvatarDescription_result__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetAvatarDescription_result__isset;

class MSkeletonAccess_GetAvatarDescription_result {
 public:

  MSkeletonAccess_GetAvatarDescription_result(const MSkeletonAccess_GetAvatarDescription_result&);
  MSkeletonAccess_GetAvatarDescription_result& operator=(const MSkeletonAccess_GetAvatarDescription_result&);
  MSkeletonAccess_GetAvatarDescription_result() {
  }

  virtual ~MSkeletonAccess_GetAvatarDescription_result() noexcept;
   ::MMIStandard::MAvatarDescription success;

  _MSkeletonAccess_GetAvatarDescription_result__isset __isset;

  void __set_success(const  ::MMIStandard::MAvatarDescription& val);

  bool operator == (const MSkeletonAccess_GetAvatarDescription_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetAvatarDescription_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetAvatarDescription_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetAvatarDescription_presult__isset {
  _MSkeletonAccess_GetAvatarDescription_presult__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetAvatarDescription_presult__isset;

class MSkeletonAccess_GetAvatarDescription_presult {
 public:


  virtual ~MSkeletonAccess_GetAvatarDescription_presult() noexcept;
   ::MMIStandard::MAvatarDescription* success;

  _MSkeletonAccess_GetAvatarDescription_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_SetAnimatedJoints_args__isset {
  _MSkeletonAccess_SetAnimatedJoints_args__isset() : avatarID(false), joints(false) {}
  bool avatarID :1;
  bool joints :1;
} _MSkeletonAccess_SetAnimatedJoints_args__isset;

class MSkeletonAccess_SetAnimatedJoints_args {
 public:

  MSkeletonAccess_SetAnimatedJoints_args(const MSkeletonAccess_SetAnimatedJoints_args&);
  MSkeletonAccess_SetAnimatedJoints_args& operator=(const MSkeletonAccess_SetAnimatedJoints_args&);
  MSkeletonAccess_SetAnimatedJoints_args() : avatarID() {
  }

  virtual ~MSkeletonAccess_SetAnimatedJoints_args() noexcept;
  std::string avatarID;
  std::vector< ::MMIStandard::MJointType::type>  joints;

  _MSkeletonAccess_SetAnimatedJoints_args__isset __isset;

  void __set_avatarID(const std::string& val);

  void __set_joints(const std::vector< ::MMIStandard::MJointType::type> & val);

  bool operator == (const MSkeletonAccess_SetAnimatedJoints_args & rhs) const
  {
    if (!(avatarID == rhs.avatarID))
      return false;
    if (!(joints == rhs.joints))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_SetAnimatedJoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_SetAnimatedJoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetAnimatedJoints_pargs {
 public:


  virtual ~MSkeletonAccess_SetAnimatedJoints_pargs() noexcept;
  const std::string* avatarID;
  const std::vector< ::MMIStandard::MJointType::type> * joints;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetAnimatedJoints_result {
 public:

  MSkeletonAccess_SetAnimatedJoints_result(const MSkeletonAccess_SetAnimatedJoints_result&);
  MSkeletonAccess_SetAnimatedJoints_result& operator=(const MSkeletonAccess_SetAnimatedJoints_result&);
  MSkeletonAccess_SetAnimatedJoints_result() {
  }

  virtual ~MSkeletonAccess_SetAnimatedJoints_result() noexcept;

  bool operator == (const MSkeletonAccess_SetAnimatedJoints_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSkeletonAccess_SetAnimatedJoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_SetAnimatedJoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetAnimatedJoints_presult {
 public:


  virtual ~MSkeletonAccess_SetAnimatedJoints_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_SetChannelData_args__isset {
  _MSkeletonAccess_SetChannelData_args__isset() : values(false) {}
  bool values :1;
} _MSkeletonAccess_SetChannelData_args__isset;

class MSkeletonAccess_SetChannelData_args {
 public:

  MSkeletonAccess_SetChannelData_args(const MSkeletonAccess_SetChannelData_args&);
  MSkeletonAccess_SetChannelData_args& operator=(const MSkeletonAccess_SetChannelData_args&);
  MSkeletonAccess_SetChannelData_args() {
  }

  virtual ~MSkeletonAccess_SetChannelData_args() noexcept;
   ::MMIStandard::MAvatarPostureValues values;

  _MSkeletonAccess_SetChannelData_args__isset __isset;

  void __set_values(const  ::MMIStandard::MAvatarPostureValues& val);

  bool operator == (const MSkeletonAccess_SetChannelData_args & rhs) const
  {
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_SetChannelData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_SetChannelData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetChannelData_pargs {
 public:


  virtual ~MSkeletonAccess_SetChannelData_pargs() noexcept;
  const  ::MMIStandard::MAvatarPostureValues* values;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetChannelData_result {
 public:

  MSkeletonAccess_SetChannelData_result(const MSkeletonAccess_SetChannelData_result&);
  MSkeletonAccess_SetChannelData_result& operator=(const MSkeletonAccess_SetChannelData_result&);
  MSkeletonAccess_SetChannelData_result() {
  }

  virtual ~MSkeletonAccess_SetChannelData_result() noexcept;

  bool operator == (const MSkeletonAccess_SetChannelData_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSkeletonAccess_SetChannelData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_SetChannelData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetChannelData_presult {
 public:


  virtual ~MSkeletonAccess_SetChannelData_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_GetCurrentGlobalPosture_args__isset {
  _MSkeletonAccess_GetCurrentGlobalPosture_args__isset() : avatarID(false) {}
  bool avatarID :1;
} _MSkeletonAccess_GetCurrentGlobalPosture_args__isset;

class MSkeletonAccess_GetCurrentGlobalPosture_args {
 public:

  MSkeletonAccess_GetCurrentGlobalPosture_args(const MSkeletonAccess_GetCurrentGlobalPosture_args&);
  MSkeletonAccess_GetCurrentGlobalPosture_args& operator=(const MSkeletonAccess_GetCurrentGlobalPosture_args&);
  MSkeletonAccess_GetCurrentGlobalPosture_args() : avatarID() {
  }

  virtual ~MSkeletonAccess_GetCurrentGlobalPosture_args() noexcept;
  std::string avatarID;

  _MSkeletonAccess_GetCurrentGlobalPosture_args__isset __isset;

  void __set_avatarID(const std::string& val);

  bool operator == (const MSkeletonAccess_GetCurrentGlobalPosture_args & rhs) const
  {
    if (!(avatarID == rhs.avatarID))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetCurrentGlobalPosture_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetCurrentGlobalPosture_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_GetCurrentGlobalPosture_pargs {
 public:


  virtual ~MSkeletonAccess_GetCurrentGlobalPosture_pargs() noexcept;
  const std::string* avatarID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetCurrentGlobalPosture_result__isset {
  _MSkeletonAccess_GetCurrentGlobalPosture_result__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetCurrentGlobalPosture_result__isset;

class MSkeletonAccess_GetCurrentGlobalPosture_result {
 public:

  MSkeletonAccess_GetCurrentGlobalPosture_result(const MSkeletonAccess_GetCurrentGlobalPosture_result&);
  MSkeletonAccess_GetCurrentGlobalPosture_result& operator=(const MSkeletonAccess_GetCurrentGlobalPosture_result&);
  MSkeletonAccess_GetCurrentGlobalPosture_result() {
  }

  virtual ~MSkeletonAccess_GetCurrentGlobalPosture_result() noexcept;
   ::MMIStandard::MAvatarPosture success;

  _MSkeletonAccess_GetCurrentGlobalPosture_result__isset __isset;

  void __set_success(const  ::MMIStandard::MAvatarPosture& val);

  bool operator == (const MSkeletonAccess_GetCurrentGlobalPosture_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetCurrentGlobalPosture_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetCurrentGlobalPosture_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetCurrentGlobalPosture_presult__isset {
  _MSkeletonAccess_GetCurrentGlobalPosture_presult__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetCurrentGlobalPosture_presult__isset;

class MSkeletonAccess_GetCurrentGlobalPosture_presult {
 public:


  virtual ~MSkeletonAccess_GetCurrentGlobalPosture_presult() noexcept;
   ::MMIStandard::MAvatarPosture* success;

  _MSkeletonAccess_GetCurrentGlobalPosture_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_GetCurrentLocalPosture_args__isset {
  _MSkeletonAccess_GetCurrentLocalPosture_args__isset() : avatarID(false) {}
  bool avatarID :1;
} _MSkeletonAccess_GetCurrentLocalPosture_args__isset;

class MSkeletonAccess_GetCurrentLocalPosture_args {
 public:

  MSkeletonAccess_GetCurrentLocalPosture_args(const MSkeletonAccess_GetCurrentLocalPosture_args&);
  MSkeletonAccess_GetCurrentLocalPosture_args& operator=(const MSkeletonAccess_GetCurrentLocalPosture_args&);
  MSkeletonAccess_GetCurrentLocalPosture_args() : avatarID() {
  }

  virtual ~MSkeletonAccess_GetCurrentLocalPosture_args() noexcept;
  std::string avatarID;

  _MSkeletonAccess_GetCurrentLocalPosture_args__isset __isset;

  void __set_avatarID(const std::string& val);

  bool operator == (const MSkeletonAccess_GetCurrentLocalPosture_args & rhs) const
  {
    if (!(avatarID == rhs.avatarID))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetCurrentLocalPosture_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetCurrentLocalPosture_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_GetCurrentLocalPosture_pargs {
 public:


  virtual ~MSkeletonAccess_GetCurrentLocalPosture_pargs() noexcept;
  const std::string* avatarID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetCurrentLocalPosture_result__isset {
  _MSkeletonAccess_GetCurrentLocalPosture_result__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetCurrentLocalPosture_result__isset;

class MSkeletonAccess_GetCurrentLocalPosture_result {
 public:

  MSkeletonAccess_GetCurrentLocalPosture_result(const MSkeletonAccess_GetCurrentLocalPosture_result&);
  MSkeletonAccess_GetCurrentLocalPosture_result& operator=(const MSkeletonAccess_GetCurrentLocalPosture_result&);
  MSkeletonAccess_GetCurrentLocalPosture_result() {
  }

  virtual ~MSkeletonAccess_GetCurrentLocalPosture_result() noexcept;
   ::MMIStandard::MAvatarPosture success;

  _MSkeletonAccess_GetCurrentLocalPosture_result__isset __isset;

  void __set_success(const  ::MMIStandard::MAvatarPosture& val);

  bool operator == (const MSkeletonAccess_GetCurrentLocalPosture_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetCurrentLocalPosture_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetCurrentLocalPosture_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetCurrentLocalPosture_presult__isset {
  _MSkeletonAccess_GetCurrentLocalPosture_presult__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetCurrentLocalPosture_presult__isset;

class MSkeletonAccess_GetCurrentLocalPosture_presult {
 public:


  virtual ~MSkeletonAccess_GetCurrentLocalPosture_presult() noexcept;
   ::MMIStandard::MAvatarPosture* success;

  _MSkeletonAccess_GetCurrentLocalPosture_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_GetCurrentPostureValues_args__isset {
  _MSkeletonAccess_GetCurrentPostureValues_args__isset() : avatarID(false) {}
  bool avatarID :1;
} _MSkeletonAccess_GetCurrentPostureValues_args__isset;

class MSkeletonAccess_GetCurrentPostureValues_args {
 public:

  MSkeletonAccess_GetCurrentPostureValues_args(const MSkeletonAccess_GetCurrentPostureValues_args&);
  MSkeletonAccess_GetCurrentPostureValues_args& operator=(const MSkeletonAccess_GetCurrentPostureValues_args&);
  MSkeletonAccess_GetCurrentPostureValues_args() : avatarID() {
  }

  virtual ~MSkeletonAccess_GetCurrentPostureValues_args() noexcept;
  std::string avatarID;

  _MSkeletonAccess_GetCurrentPostureValues_args__isset __isset;

  void __set_avatarID(const std::string& val);

  bool operator == (const MSkeletonAccess_GetCurrentPostureValues_args & rhs) const
  {
    if (!(avatarID == rhs.avatarID))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetCurrentPostureValues_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetCurrentPostureValues_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_GetCurrentPostureValues_pargs {
 public:


  virtual ~MSkeletonAccess_GetCurrentPostureValues_pargs() noexcept;
  const std::string* avatarID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetCurrentPostureValues_result__isset {
  _MSkeletonAccess_GetCurrentPostureValues_result__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetCurrentPostureValues_result__isset;

class MSkeletonAccess_GetCurrentPostureValues_result {
 public:

  MSkeletonAccess_GetCurrentPostureValues_result(const MSkeletonAccess_GetCurrentPostureValues_result&);
  MSkeletonAccess_GetCurrentPostureValues_result& operator=(const MSkeletonAccess_GetCurrentPostureValues_result&);
  MSkeletonAccess_GetCurrentPostureValues_result() {
  }

  virtual ~MSkeletonAccess_GetCurrentPostureValues_result() noexcept;
   ::MMIStandard::MAvatarPostureValues success;

  _MSkeletonAccess_GetCurrentPostureValues_result__isset __isset;

  void __set_success(const  ::MMIStandard::MAvatarPostureValues& val);

  bool operator == (const MSkeletonAccess_GetCurrentPostureValues_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetCurrentPostureValues_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetCurrentPostureValues_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetCurrentPostureValues_presult__isset {
  _MSkeletonAccess_GetCurrentPostureValues_presult__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetCurrentPostureValues_presult__isset;

class MSkeletonAccess_GetCurrentPostureValues_presult {
 public:


  virtual ~MSkeletonAccess_GetCurrentPostureValues_presult() noexcept;
   ::MMIStandard::MAvatarPostureValues* success;

  _MSkeletonAccess_GetCurrentPostureValues_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_GetCurrentPostureValuesPartial_args__isset {
  _MSkeletonAccess_GetCurrentPostureValuesPartial_args__isset() : avatarID(false), joints(false) {}
  bool avatarID :1;
  bool joints :1;
} _MSkeletonAccess_GetCurrentPostureValuesPartial_args__isset;

class MSkeletonAccess_GetCurrentPostureValuesPartial_args {
 public:

  MSkeletonAccess_GetCurrentPostureValuesPartial_args(const MSkeletonAccess_GetCurrentPostureValuesPartial_args&);
  MSkeletonAccess_GetCurrentPostureValuesPartial_args& operator=(const MSkeletonAccess_GetCurrentPostureValuesPartial_args&);
  MSkeletonAccess_GetCurrentPostureValuesPartial_args() : avatarID() {
  }

  virtual ~MSkeletonAccess_GetCurrentPostureValuesPartial_args() noexcept;
  std::string avatarID;
  std::vector< ::MMIStandard::MJointType::type>  joints;

  _MSkeletonAccess_GetCurrentPostureValuesPartial_args__isset __isset;

  void __set_avatarID(const std::string& val);

  void __set_joints(const std::vector< ::MMIStandard::MJointType::type> & val);

  bool operator == (const MSkeletonAccess_GetCurrentPostureValuesPartial_args & rhs) const
  {
    if (!(avatarID == rhs.avatarID))
      return false;
    if (!(joints == rhs.joints))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetCurrentPostureValuesPartial_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetCurrentPostureValuesPartial_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_GetCurrentPostureValuesPartial_pargs {
 public:


  virtual ~MSkeletonAccess_GetCurrentPostureValuesPartial_pargs() noexcept;
  const std::string* avatarID;
  const std::vector< ::MMIStandard::MJointType::type> * joints;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetCurrentPostureValuesPartial_result__isset {
  _MSkeletonAccess_GetCurrentPostureValuesPartial_result__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetCurrentPostureValuesPartial_result__isset;

class MSkeletonAccess_GetCurrentPostureValuesPartial_result {
 public:

  MSkeletonAccess_GetCurrentPostureValuesPartial_result(const MSkeletonAccess_GetCurrentPostureValuesPartial_result&);
  MSkeletonAccess_GetCurrentPostureValuesPartial_result& operator=(const MSkeletonAccess_GetCurrentPostureValuesPartial_result&);
  MSkeletonAccess_GetCurrentPostureValuesPartial_result() {
  }

  virtual ~MSkeletonAccess_GetCurrentPostureValuesPartial_result() noexcept;
   ::MMIStandard::MAvatarPostureValues success;

  _MSkeletonAccess_GetCurrentPostureValuesPartial_result__isset __isset;

  void __set_success(const  ::MMIStandard::MAvatarPostureValues& val);

  bool operator == (const MSkeletonAccess_GetCurrentPostureValuesPartial_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetCurrentPostureValuesPartial_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetCurrentPostureValuesPartial_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetCurrentPostureValuesPartial_presult__isset {
  _MSkeletonAccess_GetCurrentPostureValuesPartial_presult__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetCurrentPostureValuesPartial_presult__isset;

class MSkeletonAccess_GetCurrentPostureValuesPartial_presult {
 public:


  virtual ~MSkeletonAccess_GetCurrentPostureValuesPartial_presult() noexcept;
   ::MMIStandard::MAvatarPostureValues* success;

  _MSkeletonAccess_GetCurrentPostureValuesPartial_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_GetCurrentJointPositions_args__isset {
  _MSkeletonAccess_GetCurrentJointPositions_args__isset() : avatarID(false) {}
  bool avatarID :1;
} _MSkeletonAccess_GetCurrentJointPositions_args__isset;

class MSkeletonAccess_GetCurrentJointPositions_args {
 public:

  MSkeletonAccess_GetCurrentJointPositions_args(const MSkeletonAccess_GetCurrentJointPositions_args&);
  MSkeletonAccess_GetCurrentJointPositions_args& operator=(const MSkeletonAccess_GetCurrentJointPositions_args&);
  MSkeletonAccess_GetCurrentJointPositions_args() : avatarID() {
  }

  virtual ~MSkeletonAccess_GetCurrentJointPositions_args() noexcept;
  std::string avatarID;

  _MSkeletonAccess_GetCurrentJointPositions_args__isset __isset;

  void __set_avatarID(const std::string& val);

  bool operator == (const MSkeletonAccess_GetCurrentJointPositions_args & rhs) const
  {
    if (!(avatarID == rhs.avatarID))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetCurrentJointPositions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetCurrentJointPositions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_GetCurrentJointPositions_pargs {
 public:


  virtual ~MSkeletonAccess_GetCurrentJointPositions_pargs() noexcept;
  const std::string* avatarID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetCurrentJointPositions_result__isset {
  _MSkeletonAccess_GetCurrentJointPositions_result__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetCurrentJointPositions_result__isset;

class MSkeletonAccess_GetCurrentJointPositions_result {
 public:

  MSkeletonAccess_GetCurrentJointPositions_result(const MSkeletonAccess_GetCurrentJointPositions_result&);
  MSkeletonAccess_GetCurrentJointPositions_result& operator=(const MSkeletonAccess_GetCurrentJointPositions_result&);
  MSkeletonAccess_GetCurrentJointPositions_result() {
  }

  virtual ~MSkeletonAccess_GetCurrentJointPositions_result() noexcept;
  std::vector< ::MMIStandard::MVector3>  success;

  _MSkeletonAccess_GetCurrentJointPositions_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MVector3> & val);

  bool operator == (const MSkeletonAccess_GetCurrentJointPositions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetCurrentJointPositions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetCurrentJointPositions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetCurrentJointPositions_presult__isset {
  _MSkeletonAccess_GetCurrentJointPositions_presult__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetCurrentJointPositions_presult__isset;

class MSkeletonAccess_GetCurrentJointPositions_presult {
 public:


  virtual ~MSkeletonAccess_GetCurrentJointPositions_presult() noexcept;
  std::vector< ::MMIStandard::MVector3> * success;

  _MSkeletonAccess_GetCurrentJointPositions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_GetRootPosition_args__isset {
  _MSkeletonAccess_GetRootPosition_args__isset() : avatarID(false) {}
  bool avatarID :1;
} _MSkeletonAccess_GetRootPosition_args__isset;

class MSkeletonAccess_GetRootPosition_args {
 public:

  MSkeletonAccess_GetRootPosition_args(const MSkeletonAccess_GetRootPosition_args&);
  MSkeletonAccess_GetRootPosition_args& operator=(const MSkeletonAccess_GetRootPosition_args&);
  MSkeletonAccess_GetRootPosition_args() : avatarID() {
  }

  virtual ~MSkeletonAccess_GetRootPosition_args() noexcept;
  std::string avatarID;

  _MSkeletonAccess_GetRootPosition_args__isset __isset;

  void __set_avatarID(const std::string& val);

  bool operator == (const MSkeletonAccess_GetRootPosition_args & rhs) const
  {
    if (!(avatarID == rhs.avatarID))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetRootPosition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetRootPosition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_GetRootPosition_pargs {
 public:


  virtual ~MSkeletonAccess_GetRootPosition_pargs() noexcept;
  const std::string* avatarID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetRootPosition_result__isset {
  _MSkeletonAccess_GetRootPosition_result__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetRootPosition_result__isset;

class MSkeletonAccess_GetRootPosition_result {
 public:

  MSkeletonAccess_GetRootPosition_result(const MSkeletonAccess_GetRootPosition_result&);
  MSkeletonAccess_GetRootPosition_result& operator=(const MSkeletonAccess_GetRootPosition_result&);
  MSkeletonAccess_GetRootPosition_result() {
  }

  virtual ~MSkeletonAccess_GetRootPosition_result() noexcept;
   ::MMIStandard::MVector3 success;

  _MSkeletonAccess_GetRootPosition_result__isset __isset;

  void __set_success(const  ::MMIStandard::MVector3& val);

  bool operator == (const MSkeletonAccess_GetRootPosition_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetRootPosition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetRootPosition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetRootPosition_presult__isset {
  _MSkeletonAccess_GetRootPosition_presult__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetRootPosition_presult__isset;

class MSkeletonAccess_GetRootPosition_presult {
 public:


  virtual ~MSkeletonAccess_GetRootPosition_presult() noexcept;
   ::MMIStandard::MVector3* success;

  _MSkeletonAccess_GetRootPosition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_GetRootRotation_args__isset {
  _MSkeletonAccess_GetRootRotation_args__isset() : avatarID(false) {}
  bool avatarID :1;
} _MSkeletonAccess_GetRootRotation_args__isset;

class MSkeletonAccess_GetRootRotation_args {
 public:

  MSkeletonAccess_GetRootRotation_args(const MSkeletonAccess_GetRootRotation_args&);
  MSkeletonAccess_GetRootRotation_args& operator=(const MSkeletonAccess_GetRootRotation_args&);
  MSkeletonAccess_GetRootRotation_args() : avatarID() {
  }

  virtual ~MSkeletonAccess_GetRootRotation_args() noexcept;
  std::string avatarID;

  _MSkeletonAccess_GetRootRotation_args__isset __isset;

  void __set_avatarID(const std::string& val);

  bool operator == (const MSkeletonAccess_GetRootRotation_args & rhs) const
  {
    if (!(avatarID == rhs.avatarID))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetRootRotation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetRootRotation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_GetRootRotation_pargs {
 public:


  virtual ~MSkeletonAccess_GetRootRotation_pargs() noexcept;
  const std::string* avatarID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetRootRotation_result__isset {
  _MSkeletonAccess_GetRootRotation_result__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetRootRotation_result__isset;

class MSkeletonAccess_GetRootRotation_result {
 public:

  MSkeletonAccess_GetRootRotation_result(const MSkeletonAccess_GetRootRotation_result&);
  MSkeletonAccess_GetRootRotation_result& operator=(const MSkeletonAccess_GetRootRotation_result&);
  MSkeletonAccess_GetRootRotation_result() {
  }

  virtual ~MSkeletonAccess_GetRootRotation_result() noexcept;
   ::MMIStandard::MQuaternion success;

  _MSkeletonAccess_GetRootRotation_result__isset __isset;

  void __set_success(const  ::MMIStandard::MQuaternion& val);

  bool operator == (const MSkeletonAccess_GetRootRotation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetRootRotation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetRootRotation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetRootRotation_presult__isset {
  _MSkeletonAccess_GetRootRotation_presult__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetRootRotation_presult__isset;

class MSkeletonAccess_GetRootRotation_presult {
 public:


  virtual ~MSkeletonAccess_GetRootRotation_presult() noexcept;
   ::MMIStandard::MQuaternion* success;

  _MSkeletonAccess_GetRootRotation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_GetGlobalJointPosition_args__isset {
  _MSkeletonAccess_GetGlobalJointPosition_args__isset() : avatarId(false), joint(false) {}
  bool avatarId :1;
  bool joint :1;
} _MSkeletonAccess_GetGlobalJointPosition_args__isset;

class MSkeletonAccess_GetGlobalJointPosition_args {
 public:

  MSkeletonAccess_GetGlobalJointPosition_args(const MSkeletonAccess_GetGlobalJointPosition_args&);
  MSkeletonAccess_GetGlobalJointPosition_args& operator=(const MSkeletonAccess_GetGlobalJointPosition_args&);
  MSkeletonAccess_GetGlobalJointPosition_args() : avatarId(), joint(( ::MMIStandard::MJointType::type)0) {
  }

  virtual ~MSkeletonAccess_GetGlobalJointPosition_args() noexcept;
  std::string avatarId;
   ::MMIStandard::MJointType::type joint;

  _MSkeletonAccess_GetGlobalJointPosition_args__isset __isset;

  void __set_avatarId(const std::string& val);

  void __set_joint(const  ::MMIStandard::MJointType::type val);

  bool operator == (const MSkeletonAccess_GetGlobalJointPosition_args & rhs) const
  {
    if (!(avatarId == rhs.avatarId))
      return false;
    if (!(joint == rhs.joint))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetGlobalJointPosition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetGlobalJointPosition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_GetGlobalJointPosition_pargs {
 public:


  virtual ~MSkeletonAccess_GetGlobalJointPosition_pargs() noexcept;
  const std::string* avatarId;
  const  ::MMIStandard::MJointType::type* joint;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetGlobalJointPosition_result__isset {
  _MSkeletonAccess_GetGlobalJointPosition_result__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetGlobalJointPosition_result__isset;

class MSkeletonAccess_GetGlobalJointPosition_result {
 public:

  MSkeletonAccess_GetGlobalJointPosition_result(const MSkeletonAccess_GetGlobalJointPosition_result&);
  MSkeletonAccess_GetGlobalJointPosition_result& operator=(const MSkeletonAccess_GetGlobalJointPosition_result&);
  MSkeletonAccess_GetGlobalJointPosition_result() {
  }

  virtual ~MSkeletonAccess_GetGlobalJointPosition_result() noexcept;
   ::MMIStandard::MVector3 success;

  _MSkeletonAccess_GetGlobalJointPosition_result__isset __isset;

  void __set_success(const  ::MMIStandard::MVector3& val);

  bool operator == (const MSkeletonAccess_GetGlobalJointPosition_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetGlobalJointPosition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetGlobalJointPosition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetGlobalJointPosition_presult__isset {
  _MSkeletonAccess_GetGlobalJointPosition_presult__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetGlobalJointPosition_presult__isset;

class MSkeletonAccess_GetGlobalJointPosition_presult {
 public:


  virtual ~MSkeletonAccess_GetGlobalJointPosition_presult() noexcept;
   ::MMIStandard::MVector3* success;

  _MSkeletonAccess_GetGlobalJointPosition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_GetGlobalJointRotation_args__isset {
  _MSkeletonAccess_GetGlobalJointRotation_args__isset() : avatarId(false), joint(false) {}
  bool avatarId :1;
  bool joint :1;
} _MSkeletonAccess_GetGlobalJointRotation_args__isset;

class MSkeletonAccess_GetGlobalJointRotation_args {
 public:

  MSkeletonAccess_GetGlobalJointRotation_args(const MSkeletonAccess_GetGlobalJointRotation_args&);
  MSkeletonAccess_GetGlobalJointRotation_args& operator=(const MSkeletonAccess_GetGlobalJointRotation_args&);
  MSkeletonAccess_GetGlobalJointRotation_args() : avatarId(), joint(( ::MMIStandard::MJointType::type)0) {
  }

  virtual ~MSkeletonAccess_GetGlobalJointRotation_args() noexcept;
  std::string avatarId;
   ::MMIStandard::MJointType::type joint;

  _MSkeletonAccess_GetGlobalJointRotation_args__isset __isset;

  void __set_avatarId(const std::string& val);

  void __set_joint(const  ::MMIStandard::MJointType::type val);

  bool operator == (const MSkeletonAccess_GetGlobalJointRotation_args & rhs) const
  {
    if (!(avatarId == rhs.avatarId))
      return false;
    if (!(joint == rhs.joint))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetGlobalJointRotation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetGlobalJointRotation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_GetGlobalJointRotation_pargs {
 public:


  virtual ~MSkeletonAccess_GetGlobalJointRotation_pargs() noexcept;
  const std::string* avatarId;
  const  ::MMIStandard::MJointType::type* joint;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetGlobalJointRotation_result__isset {
  _MSkeletonAccess_GetGlobalJointRotation_result__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetGlobalJointRotation_result__isset;

class MSkeletonAccess_GetGlobalJointRotation_result {
 public:

  MSkeletonAccess_GetGlobalJointRotation_result(const MSkeletonAccess_GetGlobalJointRotation_result&);
  MSkeletonAccess_GetGlobalJointRotation_result& operator=(const MSkeletonAccess_GetGlobalJointRotation_result&);
  MSkeletonAccess_GetGlobalJointRotation_result() {
  }

  virtual ~MSkeletonAccess_GetGlobalJointRotation_result() noexcept;
   ::MMIStandard::MQuaternion success;

  _MSkeletonAccess_GetGlobalJointRotation_result__isset __isset;

  void __set_success(const  ::MMIStandard::MQuaternion& val);

  bool operator == (const MSkeletonAccess_GetGlobalJointRotation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetGlobalJointRotation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetGlobalJointRotation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetGlobalJointRotation_presult__isset {
  _MSkeletonAccess_GetGlobalJointRotation_presult__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetGlobalJointRotation_presult__isset;

class MSkeletonAccess_GetGlobalJointRotation_presult {
 public:


  virtual ~MSkeletonAccess_GetGlobalJointRotation_presult() noexcept;
   ::MMIStandard::MQuaternion* success;

  _MSkeletonAccess_GetGlobalJointRotation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_GetLocalJointPosition_args__isset {
  _MSkeletonAccess_GetLocalJointPosition_args__isset() : avatarId(false), joint(false) {}
  bool avatarId :1;
  bool joint :1;
} _MSkeletonAccess_GetLocalJointPosition_args__isset;

class MSkeletonAccess_GetLocalJointPosition_args {
 public:

  MSkeletonAccess_GetLocalJointPosition_args(const MSkeletonAccess_GetLocalJointPosition_args&);
  MSkeletonAccess_GetLocalJointPosition_args& operator=(const MSkeletonAccess_GetLocalJointPosition_args&);
  MSkeletonAccess_GetLocalJointPosition_args() : avatarId(), joint(( ::MMIStandard::MJointType::type)0) {
  }

  virtual ~MSkeletonAccess_GetLocalJointPosition_args() noexcept;
  std::string avatarId;
   ::MMIStandard::MJointType::type joint;

  _MSkeletonAccess_GetLocalJointPosition_args__isset __isset;

  void __set_avatarId(const std::string& val);

  void __set_joint(const  ::MMIStandard::MJointType::type val);

  bool operator == (const MSkeletonAccess_GetLocalJointPosition_args & rhs) const
  {
    if (!(avatarId == rhs.avatarId))
      return false;
    if (!(joint == rhs.joint))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetLocalJointPosition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetLocalJointPosition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_GetLocalJointPosition_pargs {
 public:


  virtual ~MSkeletonAccess_GetLocalJointPosition_pargs() noexcept;
  const std::string* avatarId;
  const  ::MMIStandard::MJointType::type* joint;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetLocalJointPosition_result__isset {
  _MSkeletonAccess_GetLocalJointPosition_result__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetLocalJointPosition_result__isset;

class MSkeletonAccess_GetLocalJointPosition_result {
 public:

  MSkeletonAccess_GetLocalJointPosition_result(const MSkeletonAccess_GetLocalJointPosition_result&);
  MSkeletonAccess_GetLocalJointPosition_result& operator=(const MSkeletonAccess_GetLocalJointPosition_result&);
  MSkeletonAccess_GetLocalJointPosition_result() {
  }

  virtual ~MSkeletonAccess_GetLocalJointPosition_result() noexcept;
   ::MMIStandard::MVector3 success;

  _MSkeletonAccess_GetLocalJointPosition_result__isset __isset;

  void __set_success(const  ::MMIStandard::MVector3& val);

  bool operator == (const MSkeletonAccess_GetLocalJointPosition_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetLocalJointPosition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetLocalJointPosition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetLocalJointPosition_presult__isset {
  _MSkeletonAccess_GetLocalJointPosition_presult__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetLocalJointPosition_presult__isset;

class MSkeletonAccess_GetLocalJointPosition_presult {
 public:


  virtual ~MSkeletonAccess_GetLocalJointPosition_presult() noexcept;
   ::MMIStandard::MVector3* success;

  _MSkeletonAccess_GetLocalJointPosition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_GetLocalJointRotation_args__isset {
  _MSkeletonAccess_GetLocalJointRotation_args__isset() : avatarId(false), joint(false) {}
  bool avatarId :1;
  bool joint :1;
} _MSkeletonAccess_GetLocalJointRotation_args__isset;

class MSkeletonAccess_GetLocalJointRotation_args {
 public:

  MSkeletonAccess_GetLocalJointRotation_args(const MSkeletonAccess_GetLocalJointRotation_args&);
  MSkeletonAccess_GetLocalJointRotation_args& operator=(const MSkeletonAccess_GetLocalJointRotation_args&);
  MSkeletonAccess_GetLocalJointRotation_args() : avatarId(), joint(( ::MMIStandard::MJointType::type)0) {
  }

  virtual ~MSkeletonAccess_GetLocalJointRotation_args() noexcept;
  std::string avatarId;
   ::MMIStandard::MJointType::type joint;

  _MSkeletonAccess_GetLocalJointRotation_args__isset __isset;

  void __set_avatarId(const std::string& val);

  void __set_joint(const  ::MMIStandard::MJointType::type val);

  bool operator == (const MSkeletonAccess_GetLocalJointRotation_args & rhs) const
  {
    if (!(avatarId == rhs.avatarId))
      return false;
    if (!(joint == rhs.joint))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetLocalJointRotation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetLocalJointRotation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_GetLocalJointRotation_pargs {
 public:


  virtual ~MSkeletonAccess_GetLocalJointRotation_pargs() noexcept;
  const std::string* avatarId;
  const  ::MMIStandard::MJointType::type* joint;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetLocalJointRotation_result__isset {
  _MSkeletonAccess_GetLocalJointRotation_result__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetLocalJointRotation_result__isset;

class MSkeletonAccess_GetLocalJointRotation_result {
 public:

  MSkeletonAccess_GetLocalJointRotation_result(const MSkeletonAccess_GetLocalJointRotation_result&);
  MSkeletonAccess_GetLocalJointRotation_result& operator=(const MSkeletonAccess_GetLocalJointRotation_result&);
  MSkeletonAccess_GetLocalJointRotation_result() {
  }

  virtual ~MSkeletonAccess_GetLocalJointRotation_result() noexcept;
   ::MMIStandard::MQuaternion success;

  _MSkeletonAccess_GetLocalJointRotation_result__isset __isset;

  void __set_success(const  ::MMIStandard::MQuaternion& val);

  bool operator == (const MSkeletonAccess_GetLocalJointRotation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_GetLocalJointRotation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_GetLocalJointRotation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_GetLocalJointRotation_presult__isset {
  _MSkeletonAccess_GetLocalJointRotation_presult__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_GetLocalJointRotation_presult__isset;

class MSkeletonAccess_GetLocalJointRotation_presult {
 public:


  virtual ~MSkeletonAccess_GetLocalJointRotation_presult() noexcept;
   ::MMIStandard::MQuaternion* success;

  _MSkeletonAccess_GetLocalJointRotation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_SetRootPosition_args__isset {
  _MSkeletonAccess_SetRootPosition_args__isset() : avatarId(false), position(false) {}
  bool avatarId :1;
  bool position :1;
} _MSkeletonAccess_SetRootPosition_args__isset;

class MSkeletonAccess_SetRootPosition_args {
 public:

  MSkeletonAccess_SetRootPosition_args(const MSkeletonAccess_SetRootPosition_args&);
  MSkeletonAccess_SetRootPosition_args& operator=(const MSkeletonAccess_SetRootPosition_args&);
  MSkeletonAccess_SetRootPosition_args() : avatarId() {
  }

  virtual ~MSkeletonAccess_SetRootPosition_args() noexcept;
  std::string avatarId;
   ::MMIStandard::MVector3 position;

  _MSkeletonAccess_SetRootPosition_args__isset __isset;

  void __set_avatarId(const std::string& val);

  void __set_position(const  ::MMIStandard::MVector3& val);

  bool operator == (const MSkeletonAccess_SetRootPosition_args & rhs) const
  {
    if (!(avatarId == rhs.avatarId))
      return false;
    if (!(position == rhs.position))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_SetRootPosition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_SetRootPosition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetRootPosition_pargs {
 public:


  virtual ~MSkeletonAccess_SetRootPosition_pargs() noexcept;
  const std::string* avatarId;
  const  ::MMIStandard::MVector3* position;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetRootPosition_result {
 public:

  MSkeletonAccess_SetRootPosition_result(const MSkeletonAccess_SetRootPosition_result&);
  MSkeletonAccess_SetRootPosition_result& operator=(const MSkeletonAccess_SetRootPosition_result&);
  MSkeletonAccess_SetRootPosition_result() {
  }

  virtual ~MSkeletonAccess_SetRootPosition_result() noexcept;

  bool operator == (const MSkeletonAccess_SetRootPosition_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSkeletonAccess_SetRootPosition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_SetRootPosition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetRootPosition_presult {
 public:


  virtual ~MSkeletonAccess_SetRootPosition_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_SetRootRotation_args__isset {
  _MSkeletonAccess_SetRootRotation_args__isset() : avatarId(false), rotation(false) {}
  bool avatarId :1;
  bool rotation :1;
} _MSkeletonAccess_SetRootRotation_args__isset;

class MSkeletonAccess_SetRootRotation_args {
 public:

  MSkeletonAccess_SetRootRotation_args(const MSkeletonAccess_SetRootRotation_args&);
  MSkeletonAccess_SetRootRotation_args& operator=(const MSkeletonAccess_SetRootRotation_args&);
  MSkeletonAccess_SetRootRotation_args() : avatarId() {
  }

  virtual ~MSkeletonAccess_SetRootRotation_args() noexcept;
  std::string avatarId;
   ::MMIStandard::MQuaternion rotation;

  _MSkeletonAccess_SetRootRotation_args__isset __isset;

  void __set_avatarId(const std::string& val);

  void __set_rotation(const  ::MMIStandard::MQuaternion& val);

  bool operator == (const MSkeletonAccess_SetRootRotation_args & rhs) const
  {
    if (!(avatarId == rhs.avatarId))
      return false;
    if (!(rotation == rhs.rotation))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_SetRootRotation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_SetRootRotation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetRootRotation_pargs {
 public:


  virtual ~MSkeletonAccess_SetRootRotation_pargs() noexcept;
  const std::string* avatarId;
  const  ::MMIStandard::MQuaternion* rotation;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetRootRotation_result {
 public:

  MSkeletonAccess_SetRootRotation_result(const MSkeletonAccess_SetRootRotation_result&);
  MSkeletonAccess_SetRootRotation_result& operator=(const MSkeletonAccess_SetRootRotation_result&);
  MSkeletonAccess_SetRootRotation_result() {
  }

  virtual ~MSkeletonAccess_SetRootRotation_result() noexcept;

  bool operator == (const MSkeletonAccess_SetRootRotation_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSkeletonAccess_SetRootRotation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_SetRootRotation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetRootRotation_presult {
 public:


  virtual ~MSkeletonAccess_SetRootRotation_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_SetGlobalJointPosition_args__isset {
  _MSkeletonAccess_SetGlobalJointPosition_args__isset() : avatarId(false), joint(false), position(false) {}
  bool avatarId :1;
  bool joint :1;
  bool position :1;
} _MSkeletonAccess_SetGlobalJointPosition_args__isset;

class MSkeletonAccess_SetGlobalJointPosition_args {
 public:

  MSkeletonAccess_SetGlobalJointPosition_args(const MSkeletonAccess_SetGlobalJointPosition_args&);
  MSkeletonAccess_SetGlobalJointPosition_args& operator=(const MSkeletonAccess_SetGlobalJointPosition_args&);
  MSkeletonAccess_SetGlobalJointPosition_args() : avatarId(), joint(( ::MMIStandard::MJointType::type)0) {
  }

  virtual ~MSkeletonAccess_SetGlobalJointPosition_args() noexcept;
  std::string avatarId;
   ::MMIStandard::MJointType::type joint;
   ::MMIStandard::MVector3 position;

  _MSkeletonAccess_SetGlobalJointPosition_args__isset __isset;

  void __set_avatarId(const std::string& val);

  void __set_joint(const  ::MMIStandard::MJointType::type val);

  void __set_position(const  ::MMIStandard::MVector3& val);

  bool operator == (const MSkeletonAccess_SetGlobalJointPosition_args & rhs) const
  {
    if (!(avatarId == rhs.avatarId))
      return false;
    if (!(joint == rhs.joint))
      return false;
    if (!(position == rhs.position))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_SetGlobalJointPosition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_SetGlobalJointPosition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetGlobalJointPosition_pargs {
 public:


  virtual ~MSkeletonAccess_SetGlobalJointPosition_pargs() noexcept;
  const std::string* avatarId;
  const  ::MMIStandard::MJointType::type* joint;
  const  ::MMIStandard::MVector3* position;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetGlobalJointPosition_result {
 public:

  MSkeletonAccess_SetGlobalJointPosition_result(const MSkeletonAccess_SetGlobalJointPosition_result&);
  MSkeletonAccess_SetGlobalJointPosition_result& operator=(const MSkeletonAccess_SetGlobalJointPosition_result&);
  MSkeletonAccess_SetGlobalJointPosition_result() {
  }

  virtual ~MSkeletonAccess_SetGlobalJointPosition_result() noexcept;

  bool operator == (const MSkeletonAccess_SetGlobalJointPosition_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSkeletonAccess_SetGlobalJointPosition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_SetGlobalJointPosition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetGlobalJointPosition_presult {
 public:


  virtual ~MSkeletonAccess_SetGlobalJointPosition_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_SetGlobalJointRotation_args__isset {
  _MSkeletonAccess_SetGlobalJointRotation_args__isset() : avatarId(false), joint(false), rotation(false) {}
  bool avatarId :1;
  bool joint :1;
  bool rotation :1;
} _MSkeletonAccess_SetGlobalJointRotation_args__isset;

class MSkeletonAccess_SetGlobalJointRotation_args {
 public:

  MSkeletonAccess_SetGlobalJointRotation_args(const MSkeletonAccess_SetGlobalJointRotation_args&);
  MSkeletonAccess_SetGlobalJointRotation_args& operator=(const MSkeletonAccess_SetGlobalJointRotation_args&);
  MSkeletonAccess_SetGlobalJointRotation_args() : avatarId(), joint(( ::MMIStandard::MJointType::type)0) {
  }

  virtual ~MSkeletonAccess_SetGlobalJointRotation_args() noexcept;
  std::string avatarId;
   ::MMIStandard::MJointType::type joint;
   ::MMIStandard::MQuaternion rotation;

  _MSkeletonAccess_SetGlobalJointRotation_args__isset __isset;

  void __set_avatarId(const std::string& val);

  void __set_joint(const  ::MMIStandard::MJointType::type val);

  void __set_rotation(const  ::MMIStandard::MQuaternion& val);

  bool operator == (const MSkeletonAccess_SetGlobalJointRotation_args & rhs) const
  {
    if (!(avatarId == rhs.avatarId))
      return false;
    if (!(joint == rhs.joint))
      return false;
    if (!(rotation == rhs.rotation))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_SetGlobalJointRotation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_SetGlobalJointRotation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetGlobalJointRotation_pargs {
 public:


  virtual ~MSkeletonAccess_SetGlobalJointRotation_pargs() noexcept;
  const std::string* avatarId;
  const  ::MMIStandard::MJointType::type* joint;
  const  ::MMIStandard::MQuaternion* rotation;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetGlobalJointRotation_result {
 public:

  MSkeletonAccess_SetGlobalJointRotation_result(const MSkeletonAccess_SetGlobalJointRotation_result&);
  MSkeletonAccess_SetGlobalJointRotation_result& operator=(const MSkeletonAccess_SetGlobalJointRotation_result&);
  MSkeletonAccess_SetGlobalJointRotation_result() {
  }

  virtual ~MSkeletonAccess_SetGlobalJointRotation_result() noexcept;

  bool operator == (const MSkeletonAccess_SetGlobalJointRotation_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSkeletonAccess_SetGlobalJointRotation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_SetGlobalJointRotation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetGlobalJointRotation_presult {
 public:


  virtual ~MSkeletonAccess_SetGlobalJointRotation_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_SetLocalJointPosition_args__isset {
  _MSkeletonAccess_SetLocalJointPosition_args__isset() : avatarId(false), joint(false), position(false) {}
  bool avatarId :1;
  bool joint :1;
  bool position :1;
} _MSkeletonAccess_SetLocalJointPosition_args__isset;

class MSkeletonAccess_SetLocalJointPosition_args {
 public:

  MSkeletonAccess_SetLocalJointPosition_args(const MSkeletonAccess_SetLocalJointPosition_args&);
  MSkeletonAccess_SetLocalJointPosition_args& operator=(const MSkeletonAccess_SetLocalJointPosition_args&);
  MSkeletonAccess_SetLocalJointPosition_args() : avatarId(), joint(( ::MMIStandard::MJointType::type)0) {
  }

  virtual ~MSkeletonAccess_SetLocalJointPosition_args() noexcept;
  std::string avatarId;
   ::MMIStandard::MJointType::type joint;
   ::MMIStandard::MVector3 position;

  _MSkeletonAccess_SetLocalJointPosition_args__isset __isset;

  void __set_avatarId(const std::string& val);

  void __set_joint(const  ::MMIStandard::MJointType::type val);

  void __set_position(const  ::MMIStandard::MVector3& val);

  bool operator == (const MSkeletonAccess_SetLocalJointPosition_args & rhs) const
  {
    if (!(avatarId == rhs.avatarId))
      return false;
    if (!(joint == rhs.joint))
      return false;
    if (!(position == rhs.position))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_SetLocalJointPosition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_SetLocalJointPosition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetLocalJointPosition_pargs {
 public:


  virtual ~MSkeletonAccess_SetLocalJointPosition_pargs() noexcept;
  const std::string* avatarId;
  const  ::MMIStandard::MJointType::type* joint;
  const  ::MMIStandard::MVector3* position;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetLocalJointPosition_result {
 public:

  MSkeletonAccess_SetLocalJointPosition_result(const MSkeletonAccess_SetLocalJointPosition_result&);
  MSkeletonAccess_SetLocalJointPosition_result& operator=(const MSkeletonAccess_SetLocalJointPosition_result&);
  MSkeletonAccess_SetLocalJointPosition_result() {
  }

  virtual ~MSkeletonAccess_SetLocalJointPosition_result() noexcept;

  bool operator == (const MSkeletonAccess_SetLocalJointPosition_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSkeletonAccess_SetLocalJointPosition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_SetLocalJointPosition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetLocalJointPosition_presult {
 public:


  virtual ~MSkeletonAccess_SetLocalJointPosition_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_SetLocalJointRotation_args__isset {
  _MSkeletonAccess_SetLocalJointRotation_args__isset() : avatarId(false), joint(false), rotation(false) {}
  bool avatarId :1;
  bool joint :1;
  bool rotation :1;
} _MSkeletonAccess_SetLocalJointRotation_args__isset;

class MSkeletonAccess_SetLocalJointRotation_args {
 public:

  MSkeletonAccess_SetLocalJointRotation_args(const MSkeletonAccess_SetLocalJointRotation_args&);
  MSkeletonAccess_SetLocalJointRotation_args& operator=(const MSkeletonAccess_SetLocalJointRotation_args&);
  MSkeletonAccess_SetLocalJointRotation_args() : avatarId(), joint(( ::MMIStandard::MJointType::type)0) {
  }

  virtual ~MSkeletonAccess_SetLocalJointRotation_args() noexcept;
  std::string avatarId;
   ::MMIStandard::MJointType::type joint;
   ::MMIStandard::MQuaternion rotation;

  _MSkeletonAccess_SetLocalJointRotation_args__isset __isset;

  void __set_avatarId(const std::string& val);

  void __set_joint(const  ::MMIStandard::MJointType::type val);

  void __set_rotation(const  ::MMIStandard::MQuaternion& val);

  bool operator == (const MSkeletonAccess_SetLocalJointRotation_args & rhs) const
  {
    if (!(avatarId == rhs.avatarId))
      return false;
    if (!(joint == rhs.joint))
      return false;
    if (!(rotation == rhs.rotation))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_SetLocalJointRotation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_SetLocalJointRotation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetLocalJointRotation_pargs {
 public:


  virtual ~MSkeletonAccess_SetLocalJointRotation_pargs() noexcept;
  const std::string* avatarId;
  const  ::MMIStandard::MJointType::type* joint;
  const  ::MMIStandard::MQuaternion* rotation;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetLocalJointRotation_result {
 public:

  MSkeletonAccess_SetLocalJointRotation_result(const MSkeletonAccess_SetLocalJointRotation_result&);
  MSkeletonAccess_SetLocalJointRotation_result& operator=(const MSkeletonAccess_SetLocalJointRotation_result&);
  MSkeletonAccess_SetLocalJointRotation_result() {
  }

  virtual ~MSkeletonAccess_SetLocalJointRotation_result() noexcept;

  bool operator == (const MSkeletonAccess_SetLocalJointRotation_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSkeletonAccess_SetLocalJointRotation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_SetLocalJointRotation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_SetLocalJointRotation_presult {
 public:


  virtual ~MSkeletonAccess_SetLocalJointRotation_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSkeletonAccess_RecomputeCurrentPostureValues_args__isset {
  _MSkeletonAccess_RecomputeCurrentPostureValues_args__isset() : avatarId(false) {}
  bool avatarId :1;
} _MSkeletonAccess_RecomputeCurrentPostureValues_args__isset;

class MSkeletonAccess_RecomputeCurrentPostureValues_args {
 public:

  MSkeletonAccess_RecomputeCurrentPostureValues_args(const MSkeletonAccess_RecomputeCurrentPostureValues_args&);
  MSkeletonAccess_RecomputeCurrentPostureValues_args& operator=(const MSkeletonAccess_RecomputeCurrentPostureValues_args&);
  MSkeletonAccess_RecomputeCurrentPostureValues_args() : avatarId() {
  }

  virtual ~MSkeletonAccess_RecomputeCurrentPostureValues_args() noexcept;
  std::string avatarId;

  _MSkeletonAccess_RecomputeCurrentPostureValues_args__isset __isset;

  void __set_avatarId(const std::string& val);

  bool operator == (const MSkeletonAccess_RecomputeCurrentPostureValues_args & rhs) const
  {
    if (!(avatarId == rhs.avatarId))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_RecomputeCurrentPostureValues_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_RecomputeCurrentPostureValues_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSkeletonAccess_RecomputeCurrentPostureValues_pargs {
 public:


  virtual ~MSkeletonAccess_RecomputeCurrentPostureValues_pargs() noexcept;
  const std::string* avatarId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_RecomputeCurrentPostureValues_result__isset {
  _MSkeletonAccess_RecomputeCurrentPostureValues_result__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_RecomputeCurrentPostureValues_result__isset;

class MSkeletonAccess_RecomputeCurrentPostureValues_result {
 public:

  MSkeletonAccess_RecomputeCurrentPostureValues_result(const MSkeletonAccess_RecomputeCurrentPostureValues_result&);
  MSkeletonAccess_RecomputeCurrentPostureValues_result& operator=(const MSkeletonAccess_RecomputeCurrentPostureValues_result&);
  MSkeletonAccess_RecomputeCurrentPostureValues_result() {
  }

  virtual ~MSkeletonAccess_RecomputeCurrentPostureValues_result() noexcept;
   ::MMIStandard::MAvatarPostureValues success;

  _MSkeletonAccess_RecomputeCurrentPostureValues_result__isset __isset;

  void __set_success(const  ::MMIStandard::MAvatarPostureValues& val);

  bool operator == (const MSkeletonAccess_RecomputeCurrentPostureValues_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSkeletonAccess_RecomputeCurrentPostureValues_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSkeletonAccess_RecomputeCurrentPostureValues_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSkeletonAccess_RecomputeCurrentPostureValues_presult__isset {
  _MSkeletonAccess_RecomputeCurrentPostureValues_presult__isset() : success(false) {}
  bool success :1;
} _MSkeletonAccess_RecomputeCurrentPostureValues_presult__isset;

class MSkeletonAccess_RecomputeCurrentPostureValues_presult {
 public:


  virtual ~MSkeletonAccess_RecomputeCurrentPostureValues_presult() noexcept;
   ::MMIStandard::MAvatarPostureValues* success;

  _MSkeletonAccess_RecomputeCurrentPostureValues_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MSkeletonAccessClient : virtual public MSkeletonAccessIf, public MMIServiceBaseClient {
 public:
  MSkeletonAccessClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    MMIServiceBaseClient(prot, prot) {}
  MSkeletonAccessClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    MMIServiceBaseClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void InitializeAnthropometry(const  ::MMIStandard::MAvatarDescription& description);
  void send_InitializeAnthropometry(const  ::MMIStandard::MAvatarDescription& description);
  void recv_InitializeAnthropometry();
  void GetAvatarDescription( ::MMIStandard::MAvatarDescription& _return, const std::string& avatarID);
  void send_GetAvatarDescription(const std::string& avatarID);
  void recv_GetAvatarDescription( ::MMIStandard::MAvatarDescription& _return);
  void SetAnimatedJoints(const std::string& avatarID, const std::vector< ::MMIStandard::MJointType::type> & joints);
  void send_SetAnimatedJoints(const std::string& avatarID, const std::vector< ::MMIStandard::MJointType::type> & joints);
  void recv_SetAnimatedJoints();
  void SetChannelData(const  ::MMIStandard::MAvatarPostureValues& values);
  void send_SetChannelData(const  ::MMIStandard::MAvatarPostureValues& values);
  void recv_SetChannelData();
  void GetCurrentGlobalPosture( ::MMIStandard::MAvatarPosture& _return, const std::string& avatarID);
  void send_GetCurrentGlobalPosture(const std::string& avatarID);
  void recv_GetCurrentGlobalPosture( ::MMIStandard::MAvatarPosture& _return);
  void GetCurrentLocalPosture( ::MMIStandard::MAvatarPosture& _return, const std::string& avatarID);
  void send_GetCurrentLocalPosture(const std::string& avatarID);
  void recv_GetCurrentLocalPosture( ::MMIStandard::MAvatarPosture& _return);
  void GetCurrentPostureValues( ::MMIStandard::MAvatarPostureValues& _return, const std::string& avatarID);
  void send_GetCurrentPostureValues(const std::string& avatarID);
  void recv_GetCurrentPostureValues( ::MMIStandard::MAvatarPostureValues& _return);
  void GetCurrentPostureValuesPartial( ::MMIStandard::MAvatarPostureValues& _return, const std::string& avatarID, const std::vector< ::MMIStandard::MJointType::type> & joints);
  void send_GetCurrentPostureValuesPartial(const std::string& avatarID, const std::vector< ::MMIStandard::MJointType::type> & joints);
  void recv_GetCurrentPostureValuesPartial( ::MMIStandard::MAvatarPostureValues& _return);
  void GetCurrentJointPositions(std::vector< ::MMIStandard::MVector3> & _return, const std::string& avatarID);
  void send_GetCurrentJointPositions(const std::string& avatarID);
  void recv_GetCurrentJointPositions(std::vector< ::MMIStandard::MVector3> & _return);
  void GetRootPosition( ::MMIStandard::MVector3& _return, const std::string& avatarID);
  void send_GetRootPosition(const std::string& avatarID);
  void recv_GetRootPosition( ::MMIStandard::MVector3& _return);
  void GetRootRotation( ::MMIStandard::MQuaternion& _return, const std::string& avatarID);
  void send_GetRootRotation(const std::string& avatarID);
  void recv_GetRootRotation( ::MMIStandard::MQuaternion& _return);
  void GetGlobalJointPosition( ::MMIStandard::MVector3& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint);
  void send_GetGlobalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint);
  void recv_GetGlobalJointPosition( ::MMIStandard::MVector3& _return);
  void GetGlobalJointRotation( ::MMIStandard::MQuaternion& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint);
  void send_GetGlobalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint);
  void recv_GetGlobalJointRotation( ::MMIStandard::MQuaternion& _return);
  void GetLocalJointPosition( ::MMIStandard::MVector3& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint);
  void send_GetLocalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint);
  void recv_GetLocalJointPosition( ::MMIStandard::MVector3& _return);
  void GetLocalJointRotation( ::MMIStandard::MQuaternion& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint);
  void send_GetLocalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint);
  void recv_GetLocalJointRotation( ::MMIStandard::MQuaternion& _return);
  void SetRootPosition(const std::string& avatarId, const  ::MMIStandard::MVector3& position);
  void send_SetRootPosition(const std::string& avatarId, const  ::MMIStandard::MVector3& position);
  void recv_SetRootPosition();
  void SetRootRotation(const std::string& avatarId, const  ::MMIStandard::MQuaternion& rotation);
  void send_SetRootRotation(const std::string& avatarId, const  ::MMIStandard::MQuaternion& rotation);
  void recv_SetRootRotation();
  void SetGlobalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MVector3& position);
  void send_SetGlobalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MVector3& position);
  void recv_SetGlobalJointPosition();
  void SetGlobalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MQuaternion& rotation);
  void send_SetGlobalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MQuaternion& rotation);
  void recv_SetGlobalJointRotation();
  void SetLocalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MVector3& position);
  void send_SetLocalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MVector3& position);
  void recv_SetLocalJointPosition();
  void SetLocalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MQuaternion& rotation);
  void send_SetLocalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MQuaternion& rotation);
  void recv_SetLocalJointRotation();
  void RecomputeCurrentPostureValues( ::MMIStandard::MAvatarPostureValues& _return, const std::string& avatarId);
  void send_RecomputeCurrentPostureValues(const std::string& avatarId);
  void recv_RecomputeCurrentPostureValues( ::MMIStandard::MAvatarPostureValues& _return);
};

class MSkeletonAccessProcessor : public MMIServiceBaseProcessor {
 protected:
  ::std::shared_ptr<MSkeletonAccessIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MSkeletonAccessProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_InitializeAnthropometry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAvatarDescription(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetAnimatedJoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetChannelData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCurrentGlobalPosture(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCurrentLocalPosture(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCurrentPostureValues(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCurrentPostureValuesPartial(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCurrentJointPositions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRootPosition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRootRotation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetGlobalJointPosition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetGlobalJointRotation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetLocalJointPosition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetLocalJointRotation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetRootPosition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetRootRotation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetGlobalJointPosition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetGlobalJointRotation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetLocalJointPosition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetLocalJointRotation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RecomputeCurrentPostureValues(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MSkeletonAccessProcessor(::std::shared_ptr<MSkeletonAccessIf> iface) :
    MMIServiceBaseProcessor(iface),
    iface_(iface) {
    processMap_["InitializeAnthropometry"] = &MSkeletonAccessProcessor::process_InitializeAnthropometry;
    processMap_["GetAvatarDescription"] = &MSkeletonAccessProcessor::process_GetAvatarDescription;
    processMap_["SetAnimatedJoints"] = &MSkeletonAccessProcessor::process_SetAnimatedJoints;
    processMap_["SetChannelData"] = &MSkeletonAccessProcessor::process_SetChannelData;
    processMap_["GetCurrentGlobalPosture"] = &MSkeletonAccessProcessor::process_GetCurrentGlobalPosture;
    processMap_["GetCurrentLocalPosture"] = &MSkeletonAccessProcessor::process_GetCurrentLocalPosture;
    processMap_["GetCurrentPostureValues"] = &MSkeletonAccessProcessor::process_GetCurrentPostureValues;
    processMap_["GetCurrentPostureValuesPartial"] = &MSkeletonAccessProcessor::process_GetCurrentPostureValuesPartial;
    processMap_["GetCurrentJointPositions"] = &MSkeletonAccessProcessor::process_GetCurrentJointPositions;
    processMap_["GetRootPosition"] = &MSkeletonAccessProcessor::process_GetRootPosition;
    processMap_["GetRootRotation"] = &MSkeletonAccessProcessor::process_GetRootRotation;
    processMap_["GetGlobalJointPosition"] = &MSkeletonAccessProcessor::process_GetGlobalJointPosition;
    processMap_["GetGlobalJointRotation"] = &MSkeletonAccessProcessor::process_GetGlobalJointRotation;
    processMap_["GetLocalJointPosition"] = &MSkeletonAccessProcessor::process_GetLocalJointPosition;
    processMap_["GetLocalJointRotation"] = &MSkeletonAccessProcessor::process_GetLocalJointRotation;
    processMap_["SetRootPosition"] = &MSkeletonAccessProcessor::process_SetRootPosition;
    processMap_["SetRootRotation"] = &MSkeletonAccessProcessor::process_SetRootRotation;
    processMap_["SetGlobalJointPosition"] = &MSkeletonAccessProcessor::process_SetGlobalJointPosition;
    processMap_["SetGlobalJointRotation"] = &MSkeletonAccessProcessor::process_SetGlobalJointRotation;
    processMap_["SetLocalJointPosition"] = &MSkeletonAccessProcessor::process_SetLocalJointPosition;
    processMap_["SetLocalJointRotation"] = &MSkeletonAccessProcessor::process_SetLocalJointRotation;
    processMap_["RecomputeCurrentPostureValues"] = &MSkeletonAccessProcessor::process_RecomputeCurrentPostureValues;
  }

  virtual ~MSkeletonAccessProcessor() {}
};

class MSkeletonAccessProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MSkeletonAccessProcessorFactory(const ::std::shared_ptr< MSkeletonAccessIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MSkeletonAccessIfFactory > handlerFactory_;
};

class MSkeletonAccessMultiface : virtual public MSkeletonAccessIf, public MMIServiceBaseMultiface {
 public:
  MSkeletonAccessMultiface(std::vector<std::shared_ptr<MSkeletonAccessIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<MSkeletonAccessIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      MMIServiceBaseMultiface::add(*iter);
    }
  }
  virtual ~MSkeletonAccessMultiface() {}
 protected:
  std::vector<std::shared_ptr<MSkeletonAccessIf> > ifaces_;
  MSkeletonAccessMultiface() {}
  void add(::std::shared_ptr<MSkeletonAccessIf> iface) {
    MMIServiceBaseMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void InitializeAnthropometry(const  ::MMIStandard::MAvatarDescription& description) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->InitializeAnthropometry(description);
    }
    ifaces_[i]->InitializeAnthropometry(description);
  }

  void GetAvatarDescription( ::MMIStandard::MAvatarDescription& _return, const std::string& avatarID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAvatarDescription(_return, avatarID);
    }
    ifaces_[i]->GetAvatarDescription(_return, avatarID);
    return;
  }

  void SetAnimatedJoints(const std::string& avatarID, const std::vector< ::MMIStandard::MJointType::type> & joints) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetAnimatedJoints(avatarID, joints);
    }
    ifaces_[i]->SetAnimatedJoints(avatarID, joints);
  }

  void SetChannelData(const  ::MMIStandard::MAvatarPostureValues& values) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetChannelData(values);
    }
    ifaces_[i]->SetChannelData(values);
  }

  void GetCurrentGlobalPosture( ::MMIStandard::MAvatarPosture& _return, const std::string& avatarID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCurrentGlobalPosture(_return, avatarID);
    }
    ifaces_[i]->GetCurrentGlobalPosture(_return, avatarID);
    return;
  }

  void GetCurrentLocalPosture( ::MMIStandard::MAvatarPosture& _return, const std::string& avatarID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCurrentLocalPosture(_return, avatarID);
    }
    ifaces_[i]->GetCurrentLocalPosture(_return, avatarID);
    return;
  }

  void GetCurrentPostureValues( ::MMIStandard::MAvatarPostureValues& _return, const std::string& avatarID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCurrentPostureValues(_return, avatarID);
    }
    ifaces_[i]->GetCurrentPostureValues(_return, avatarID);
    return;
  }

  void GetCurrentPostureValuesPartial( ::MMIStandard::MAvatarPostureValues& _return, const std::string& avatarID, const std::vector< ::MMIStandard::MJointType::type> & joints) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCurrentPostureValuesPartial(_return, avatarID, joints);
    }
    ifaces_[i]->GetCurrentPostureValuesPartial(_return, avatarID, joints);
    return;
  }

  void GetCurrentJointPositions(std::vector< ::MMIStandard::MVector3> & _return, const std::string& avatarID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCurrentJointPositions(_return, avatarID);
    }
    ifaces_[i]->GetCurrentJointPositions(_return, avatarID);
    return;
  }

  void GetRootPosition( ::MMIStandard::MVector3& _return, const std::string& avatarID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRootPosition(_return, avatarID);
    }
    ifaces_[i]->GetRootPosition(_return, avatarID);
    return;
  }

  void GetRootRotation( ::MMIStandard::MQuaternion& _return, const std::string& avatarID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRootRotation(_return, avatarID);
    }
    ifaces_[i]->GetRootRotation(_return, avatarID);
    return;
  }

  void GetGlobalJointPosition( ::MMIStandard::MVector3& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetGlobalJointPosition(_return, avatarId, joint);
    }
    ifaces_[i]->GetGlobalJointPosition(_return, avatarId, joint);
    return;
  }

  void GetGlobalJointRotation( ::MMIStandard::MQuaternion& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetGlobalJointRotation(_return, avatarId, joint);
    }
    ifaces_[i]->GetGlobalJointRotation(_return, avatarId, joint);
    return;
  }

  void GetLocalJointPosition( ::MMIStandard::MVector3& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetLocalJointPosition(_return, avatarId, joint);
    }
    ifaces_[i]->GetLocalJointPosition(_return, avatarId, joint);
    return;
  }

  void GetLocalJointRotation( ::MMIStandard::MQuaternion& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetLocalJointRotation(_return, avatarId, joint);
    }
    ifaces_[i]->GetLocalJointRotation(_return, avatarId, joint);
    return;
  }

  void SetRootPosition(const std::string& avatarId, const  ::MMIStandard::MVector3& position) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetRootPosition(avatarId, position);
    }
    ifaces_[i]->SetRootPosition(avatarId, position);
  }

  void SetRootRotation(const std::string& avatarId, const  ::MMIStandard::MQuaternion& rotation) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetRootRotation(avatarId, rotation);
    }
    ifaces_[i]->SetRootRotation(avatarId, rotation);
  }

  void SetGlobalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MVector3& position) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetGlobalJointPosition(avatarId, joint, position);
    }
    ifaces_[i]->SetGlobalJointPosition(avatarId, joint, position);
  }

  void SetGlobalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MQuaternion& rotation) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetGlobalJointRotation(avatarId, joint, rotation);
    }
    ifaces_[i]->SetGlobalJointRotation(avatarId, joint, rotation);
  }

  void SetLocalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MVector3& position) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetLocalJointPosition(avatarId, joint, position);
    }
    ifaces_[i]->SetLocalJointPosition(avatarId, joint, position);
  }

  void SetLocalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MQuaternion& rotation) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetLocalJointRotation(avatarId, joint, rotation);
    }
    ifaces_[i]->SetLocalJointRotation(avatarId, joint, rotation);
  }

  void RecomputeCurrentPostureValues( ::MMIStandard::MAvatarPostureValues& _return, const std::string& avatarId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RecomputeCurrentPostureValues(_return, avatarId);
    }
    ifaces_[i]->RecomputeCurrentPostureValues(_return, avatarId);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MSkeletonAccessConcurrentClient : virtual public MSkeletonAccessIf, public MMIServiceBaseConcurrentClient {
 public:
  MSkeletonAccessConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
    MMIServiceBaseConcurrentClient(prot, prot, sync) {}
  MSkeletonAccessConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :    MMIServiceBaseConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void InitializeAnthropometry(const  ::MMIStandard::MAvatarDescription& description);
  int32_t send_InitializeAnthropometry(const  ::MMIStandard::MAvatarDescription& description);
  void recv_InitializeAnthropometry(const int32_t seqid);
  void GetAvatarDescription( ::MMIStandard::MAvatarDescription& _return, const std::string& avatarID);
  int32_t send_GetAvatarDescription(const std::string& avatarID);
  void recv_GetAvatarDescription( ::MMIStandard::MAvatarDescription& _return, const int32_t seqid);
  void SetAnimatedJoints(const std::string& avatarID, const std::vector< ::MMIStandard::MJointType::type> & joints);
  int32_t send_SetAnimatedJoints(const std::string& avatarID, const std::vector< ::MMIStandard::MJointType::type> & joints);
  void recv_SetAnimatedJoints(const int32_t seqid);
  void SetChannelData(const  ::MMIStandard::MAvatarPostureValues& values);
  int32_t send_SetChannelData(const  ::MMIStandard::MAvatarPostureValues& values);
  void recv_SetChannelData(const int32_t seqid);
  void GetCurrentGlobalPosture( ::MMIStandard::MAvatarPosture& _return, const std::string& avatarID);
  int32_t send_GetCurrentGlobalPosture(const std::string& avatarID);
  void recv_GetCurrentGlobalPosture( ::MMIStandard::MAvatarPosture& _return, const int32_t seqid);
  void GetCurrentLocalPosture( ::MMIStandard::MAvatarPosture& _return, const std::string& avatarID);
  int32_t send_GetCurrentLocalPosture(const std::string& avatarID);
  void recv_GetCurrentLocalPosture( ::MMIStandard::MAvatarPosture& _return, const int32_t seqid);
  void GetCurrentPostureValues( ::MMIStandard::MAvatarPostureValues& _return, const std::string& avatarID);
  int32_t send_GetCurrentPostureValues(const std::string& avatarID);
  void recv_GetCurrentPostureValues( ::MMIStandard::MAvatarPostureValues& _return, const int32_t seqid);
  void GetCurrentPostureValuesPartial( ::MMIStandard::MAvatarPostureValues& _return, const std::string& avatarID, const std::vector< ::MMIStandard::MJointType::type> & joints);
  int32_t send_GetCurrentPostureValuesPartial(const std::string& avatarID, const std::vector< ::MMIStandard::MJointType::type> & joints);
  void recv_GetCurrentPostureValuesPartial( ::MMIStandard::MAvatarPostureValues& _return, const int32_t seqid);
  void GetCurrentJointPositions(std::vector< ::MMIStandard::MVector3> & _return, const std::string& avatarID);
  int32_t send_GetCurrentJointPositions(const std::string& avatarID);
  void recv_GetCurrentJointPositions(std::vector< ::MMIStandard::MVector3> & _return, const int32_t seqid);
  void GetRootPosition( ::MMIStandard::MVector3& _return, const std::string& avatarID);
  int32_t send_GetRootPosition(const std::string& avatarID);
  void recv_GetRootPosition( ::MMIStandard::MVector3& _return, const int32_t seqid);
  void GetRootRotation( ::MMIStandard::MQuaternion& _return, const std::string& avatarID);
  int32_t send_GetRootRotation(const std::string& avatarID);
  void recv_GetRootRotation( ::MMIStandard::MQuaternion& _return, const int32_t seqid);
  void GetGlobalJointPosition( ::MMIStandard::MVector3& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint);
  int32_t send_GetGlobalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint);
  void recv_GetGlobalJointPosition( ::MMIStandard::MVector3& _return, const int32_t seqid);
  void GetGlobalJointRotation( ::MMIStandard::MQuaternion& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint);
  int32_t send_GetGlobalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint);
  void recv_GetGlobalJointRotation( ::MMIStandard::MQuaternion& _return, const int32_t seqid);
  void GetLocalJointPosition( ::MMIStandard::MVector3& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint);
  int32_t send_GetLocalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint);
  void recv_GetLocalJointPosition( ::MMIStandard::MVector3& _return, const int32_t seqid);
  void GetLocalJointRotation( ::MMIStandard::MQuaternion& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint);
  int32_t send_GetLocalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint);
  void recv_GetLocalJointRotation( ::MMIStandard::MQuaternion& _return, const int32_t seqid);
  void SetRootPosition(const std::string& avatarId, const  ::MMIStandard::MVector3& position);
  int32_t send_SetRootPosition(const std::string& avatarId, const  ::MMIStandard::MVector3& position);
  void recv_SetRootPosition(const int32_t seqid);
  void SetRootRotation(const std::string& avatarId, const  ::MMIStandard::MQuaternion& rotation);
  int32_t send_SetRootRotation(const std::string& avatarId, const  ::MMIStandard::MQuaternion& rotation);
  void recv_SetRootRotation(const int32_t seqid);
  void SetGlobalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MVector3& position);
  int32_t send_SetGlobalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MVector3& position);
  void recv_SetGlobalJointPosition(const int32_t seqid);
  void SetGlobalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MQuaternion& rotation);
  int32_t send_SetGlobalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MQuaternion& rotation);
  void recv_SetGlobalJointRotation(const int32_t seqid);
  void SetLocalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MVector3& position);
  int32_t send_SetLocalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MVector3& position);
  void recv_SetLocalJointPosition(const int32_t seqid);
  void SetLocalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MQuaternion& rotation);
  int32_t send_SetLocalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MQuaternion& rotation);
  void recv_SetLocalJointRotation(const int32_t seqid);
  void RecomputeCurrentPostureValues( ::MMIStandard::MAvatarPostureValues& _return, const std::string& avatarId);
  int32_t send_RecomputeCurrentPostureValues(const std::string& avatarId);
  void recv_RecomputeCurrentPostureValues( ::MMIStandard::MAvatarPostureValues& _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
