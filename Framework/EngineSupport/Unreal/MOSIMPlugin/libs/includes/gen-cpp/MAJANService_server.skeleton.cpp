// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MAJANService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::MMIStandard;

class MAJANServiceHandler : virtual public MAJANServiceIf {
 public:
  MAJANServiceHandler() {
    // Your initialization goes here
  }

  void CreateAgent(std::string& _return, const std::string& name, const std::string& templateAgent, const MRDFGraph& knowledge) {
    // Your implementation goes here
    printf("CreateAgent\n");
  }

  bool DeleteAgent(const std::string& agentName) {
    // Your implementation goes here
    printf("DeleteAgent\n");
  }

  void ExecuteAgent(std::string& _return, const std::string& agentName, const std::string& endpoint, const MRDFGraph& content) {
    // Your implementation goes here
    printf("ExecuteAgent\n");
  }

  void ReceiveAsync(const std::string& actionID, const int32_t answer) {
    // Your implementation goes here
    printf("ReceiveAsync\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<MAJANServiceHandler> handler(new MAJANServiceHandler());
  ::std::shared_ptr<TProcessor> processor(new MAJANServiceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

