// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MSceneAccess.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::MMIStandard;

class MSceneAccessHandler : virtual public MSceneAccessIf {
 public:
  MSceneAccessHandler() {
    // Your initialization goes here
  }

  void GetSceneObjects(std::vector< ::MMIStandard::MSceneObject> & _return) {
    // Your implementation goes here
    printf("GetSceneObjects\n");
  }

  void GetSceneObjectByID( ::MMIStandard::MSceneObject& _return, const std::string& id) {
    // Your implementation goes here
    printf("GetSceneObjectByID\n");
  }

  void GetSceneObjectByName( ::MMIStandard::MSceneObject& _return, const std::string& name) {
    // Your implementation goes here
    printf("GetSceneObjectByName\n");
  }

  void GetSceneObjectsInRange(std::vector< ::MMIStandard::MSceneObject> & _return, const  ::MMIStandard::MVector3& position, const double range) {
    // Your implementation goes here
    printf("GetSceneObjectsInRange\n");
  }

  void GetColliders(std::vector< ::MMIStandard::MCollider> & _return) {
    // Your implementation goes here
    printf("GetColliders\n");
  }

  void GetColliderById( ::MMIStandard::MCollider& _return, const std::string& id) {
    // Your implementation goes here
    printf("GetColliderById\n");
  }

  void GetCollidersInRange(std::vector< ::MMIStandard::MCollider> & _return, const  ::MMIStandard::MVector3& position, const double range) {
    // Your implementation goes here
    printf("GetCollidersInRange\n");
  }

  void GetMeshes(std::vector< ::MMIStandard::MMesh> & _return) {
    // Your implementation goes here
    printf("GetMeshes\n");
  }

  void GetMeshByID( ::MMIStandard::MMesh& _return, const std::string& id) {
    // Your implementation goes here
    printf("GetMeshByID\n");
  }

  void GetTransforms(std::vector< ::MMIStandard::MTransform> & _return) {
    // Your implementation goes here
    printf("GetTransforms\n");
  }

  void GetTransformByID( ::MMIStandard::MTransform& _return, const std::string& id) {
    // Your implementation goes here
    printf("GetTransformByID\n");
  }

  void GetAvatars(std::vector< ::MMIStandard::MAvatar> & _return) {
    // Your implementation goes here
    printf("GetAvatars\n");
  }

  void GetAvatarByID( ::MMIStandard::MAvatar& _return, const std::string& id) {
    // Your implementation goes here
    printf("GetAvatarByID\n");
  }

  void GetAvatarByName( ::MMIStandard::MAvatar& _return, const std::string& name) {
    // Your implementation goes here
    printf("GetAvatarByName\n");
  }

  void GetAvatarsInRange(std::vector< ::MMIStandard::MAvatar> & _return, const  ::MMIStandard::MVector3& position, const double distance) {
    // Your implementation goes here
    printf("GetAvatarsInRange\n");
  }

  double GetSimulationTime() {
    // Your implementation goes here
    printf("GetSimulationTime\n");
  }

  void GetSceneChanges( ::MMIStandard::MSceneUpdate& _return) {
    // Your implementation goes here
    printf("GetSceneChanges\n");
  }

  void GetFullScene( ::MMIStandard::MSceneUpdate& _return) {
    // Your implementation goes here
    printf("GetFullScene\n");
  }

  void GetNavigationMesh( ::MMIStandard::MNavigationMesh& _return) {
    // Your implementation goes here
    printf("GetNavigationMesh\n");
  }

  void GetData(std::string& _return, const std::string& fileFormat, const std::string& selection) {
    // Your implementation goes here
    printf("GetData\n");
  }

  void GetAttachments(std::vector< ::MMIStandard::MAttachment> & _return) {
    // Your implementation goes here
    printf("GetAttachments\n");
  }

  void GetAttachmentsByID(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& id) {
    // Your implementation goes here
    printf("GetAttachmentsByID\n");
  }

  void GetAttachmentsByName(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& name) {
    // Your implementation goes here
    printf("GetAttachmentsByName\n");
  }

  void GetAttachmentsChildrenRecursive(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& id) {
    // Your implementation goes here
    printf("GetAttachmentsChildrenRecursive\n");
  }

  void GetAttachmentsParentsRecursive(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& id) {
    // Your implementation goes here
    printf("GetAttachmentsParentsRecursive\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<MSceneAccessHandler> handler(new MSceneAccessHandler());
  ::std::shared_ptr<TProcessor> processor(new MSceneAccessProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

