/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MSceneAccess_H
#define MSceneAccess_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "services_types.h"
#include "MMIServiceBase.h"

namespace MMIStandard {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MSceneAccessIf : virtual public MMIServiceBaseIf {
 public:
  virtual ~MSceneAccessIf() {}
  virtual void GetSceneObjects(std::vector< ::MMIStandard::MSceneObject> & _return) = 0;
  virtual void GetSceneObjectByID( ::MMIStandard::MSceneObject& _return, const std::string& id) = 0;
  virtual void GetSceneObjectByName( ::MMIStandard::MSceneObject& _return, const std::string& name) = 0;
  virtual void GetSceneObjectsInRange(std::vector< ::MMIStandard::MSceneObject> & _return, const  ::MMIStandard::MVector3& position, const double range) = 0;
  virtual void GetColliders(std::vector< ::MMIStandard::MCollider> & _return) = 0;
  virtual void GetColliderById( ::MMIStandard::MCollider& _return, const std::string& id) = 0;
  virtual void GetCollidersInRange(std::vector< ::MMIStandard::MCollider> & _return, const  ::MMIStandard::MVector3& position, const double range) = 0;
  virtual void GetMeshes(std::vector< ::MMIStandard::MMesh> & _return) = 0;
  virtual void GetMeshByID( ::MMIStandard::MMesh& _return, const std::string& id) = 0;
  virtual void GetTransforms(std::vector< ::MMIStandard::MTransform> & _return) = 0;
  virtual void GetTransformByID( ::MMIStandard::MTransform& _return, const std::string& id) = 0;
  virtual void GetAvatars(std::vector< ::MMIStandard::MAvatar> & _return) = 0;
  virtual void GetAvatarByID( ::MMIStandard::MAvatar& _return, const std::string& id) = 0;
  virtual void GetAvatarByName( ::MMIStandard::MAvatar& _return, const std::string& name) = 0;
  virtual void GetAvatarsInRange(std::vector< ::MMIStandard::MAvatar> & _return, const  ::MMIStandard::MVector3& position, const double distance) = 0;
  virtual double GetSimulationTime() = 0;
  virtual void GetSceneChanges( ::MMIStandard::MSceneUpdate& _return) = 0;
  virtual void GetFullScene( ::MMIStandard::MSceneUpdate& _return) = 0;
  virtual void GetNavigationMesh( ::MMIStandard::MNavigationMesh& _return) = 0;
  virtual void GetData(std::string& _return, const std::string& fileFormat, const std::string& selection) = 0;
  virtual void GetAttachments(std::vector< ::MMIStandard::MAttachment> & _return) = 0;
  virtual void GetAttachmentsByID(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& id) = 0;
  virtual void GetAttachmentsByName(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& name) = 0;
  virtual void GetAttachmentsChildrenRecursive(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& id) = 0;
  virtual void GetAttachmentsParentsRecursive(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& id) = 0;
};

class MSceneAccessIfFactory : virtual public MMIServiceBaseIfFactory {
 public:
  typedef MSceneAccessIf Handler;

  virtual ~MSceneAccessIfFactory() {}

  virtual MSceneAccessIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) = 0;
};

class MSceneAccessIfSingletonFactory : virtual public MSceneAccessIfFactory {
 public:
  MSceneAccessIfSingletonFactory(const ::std::shared_ptr<MSceneAccessIf>& iface) : iface_(iface) {}
  virtual ~MSceneAccessIfSingletonFactory() {}

  virtual MSceneAccessIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MSceneAccessIf> iface_;
};

class MSceneAccessNull : virtual public MSceneAccessIf , virtual public MMIServiceBaseNull {
 public:
  virtual ~MSceneAccessNull() {}
  void GetSceneObjects(std::vector< ::MMIStandard::MSceneObject> & /* _return */) {
    return;
  }
  void GetSceneObjectByID( ::MMIStandard::MSceneObject& /* _return */, const std::string& /* id */) {
    return;
  }
  void GetSceneObjectByName( ::MMIStandard::MSceneObject& /* _return */, const std::string& /* name */) {
    return;
  }
  void GetSceneObjectsInRange(std::vector< ::MMIStandard::MSceneObject> & /* _return */, const  ::MMIStandard::MVector3& /* position */, const double /* range */) {
    return;
  }
  void GetColliders(std::vector< ::MMIStandard::MCollider> & /* _return */) {
    return;
  }
  void GetColliderById( ::MMIStandard::MCollider& /* _return */, const std::string& /* id */) {
    return;
  }
  void GetCollidersInRange(std::vector< ::MMIStandard::MCollider> & /* _return */, const  ::MMIStandard::MVector3& /* position */, const double /* range */) {
    return;
  }
  void GetMeshes(std::vector< ::MMIStandard::MMesh> & /* _return */) {
    return;
  }
  void GetMeshByID( ::MMIStandard::MMesh& /* _return */, const std::string& /* id */) {
    return;
  }
  void GetTransforms(std::vector< ::MMIStandard::MTransform> & /* _return */) {
    return;
  }
  void GetTransformByID( ::MMIStandard::MTransform& /* _return */, const std::string& /* id */) {
    return;
  }
  void GetAvatars(std::vector< ::MMIStandard::MAvatar> & /* _return */) {
    return;
  }
  void GetAvatarByID( ::MMIStandard::MAvatar& /* _return */, const std::string& /* id */) {
    return;
  }
  void GetAvatarByName( ::MMIStandard::MAvatar& /* _return */, const std::string& /* name */) {
    return;
  }
  void GetAvatarsInRange(std::vector< ::MMIStandard::MAvatar> & /* _return */, const  ::MMIStandard::MVector3& /* position */, const double /* distance */) {
    return;
  }
  double GetSimulationTime() {
    double _return = (double)0;
    return _return;
  }
  void GetSceneChanges( ::MMIStandard::MSceneUpdate& /* _return */) {
    return;
  }
  void GetFullScene( ::MMIStandard::MSceneUpdate& /* _return */) {
    return;
  }
  void GetNavigationMesh( ::MMIStandard::MNavigationMesh& /* _return */) {
    return;
  }
  void GetData(std::string& /* _return */, const std::string& /* fileFormat */, const std::string& /* selection */) {
    return;
  }
  void GetAttachments(std::vector< ::MMIStandard::MAttachment> & /* _return */) {
    return;
  }
  void GetAttachmentsByID(std::vector< ::MMIStandard::MAttachment> & /* _return */, const std::string& /* id */) {
    return;
  }
  void GetAttachmentsByName(std::vector< ::MMIStandard::MAttachment> & /* _return */, const std::string& /* name */) {
    return;
  }
  void GetAttachmentsChildrenRecursive(std::vector< ::MMIStandard::MAttachment> & /* _return */, const std::string& /* id */) {
    return;
  }
  void GetAttachmentsParentsRecursive(std::vector< ::MMIStandard::MAttachment> & /* _return */, const std::string& /* id */) {
    return;
  }
};


class MSceneAccess_GetSceneObjects_args {
 public:

  MSceneAccess_GetSceneObjects_args(const MSceneAccess_GetSceneObjects_args&);
  MSceneAccess_GetSceneObjects_args& operator=(const MSceneAccess_GetSceneObjects_args&);
  MSceneAccess_GetSceneObjects_args() {
  }

  virtual ~MSceneAccess_GetSceneObjects_args() noexcept;

  bool operator == (const MSceneAccess_GetSceneObjects_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSceneAccess_GetSceneObjects_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetSceneObjects_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetSceneObjects_pargs {
 public:


  virtual ~MSceneAccess_GetSceneObjects_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetSceneObjects_result__isset {
  _MSceneAccess_GetSceneObjects_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetSceneObjects_result__isset;

class MSceneAccess_GetSceneObjects_result {
 public:

  MSceneAccess_GetSceneObjects_result(const MSceneAccess_GetSceneObjects_result&);
  MSceneAccess_GetSceneObjects_result& operator=(const MSceneAccess_GetSceneObjects_result&);
  MSceneAccess_GetSceneObjects_result() {
  }

  virtual ~MSceneAccess_GetSceneObjects_result() noexcept;
  std::vector< ::MMIStandard::MSceneObject>  success;

  _MSceneAccess_GetSceneObjects_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MSceneObject> & val);

  bool operator == (const MSceneAccess_GetSceneObjects_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetSceneObjects_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetSceneObjects_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetSceneObjects_presult__isset {
  _MSceneAccess_GetSceneObjects_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetSceneObjects_presult__isset;

class MSceneAccess_GetSceneObjects_presult {
 public:


  virtual ~MSceneAccess_GetSceneObjects_presult() noexcept;
  std::vector< ::MMIStandard::MSceneObject> * success;

  _MSceneAccess_GetSceneObjects_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSceneAccess_GetSceneObjectByID_args__isset {
  _MSceneAccess_GetSceneObjectByID_args__isset() : id(false) {}
  bool id :1;
} _MSceneAccess_GetSceneObjectByID_args__isset;

class MSceneAccess_GetSceneObjectByID_args {
 public:

  MSceneAccess_GetSceneObjectByID_args(const MSceneAccess_GetSceneObjectByID_args&);
  MSceneAccess_GetSceneObjectByID_args& operator=(const MSceneAccess_GetSceneObjectByID_args&);
  MSceneAccess_GetSceneObjectByID_args() : id() {
  }

  virtual ~MSceneAccess_GetSceneObjectByID_args() noexcept;
  std::string id;

  _MSceneAccess_GetSceneObjectByID_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const MSceneAccess_GetSceneObjectByID_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetSceneObjectByID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetSceneObjectByID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetSceneObjectByID_pargs {
 public:


  virtual ~MSceneAccess_GetSceneObjectByID_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetSceneObjectByID_result__isset {
  _MSceneAccess_GetSceneObjectByID_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetSceneObjectByID_result__isset;

class MSceneAccess_GetSceneObjectByID_result {
 public:

  MSceneAccess_GetSceneObjectByID_result(const MSceneAccess_GetSceneObjectByID_result&);
  MSceneAccess_GetSceneObjectByID_result& operator=(const MSceneAccess_GetSceneObjectByID_result&);
  MSceneAccess_GetSceneObjectByID_result() {
  }

  virtual ~MSceneAccess_GetSceneObjectByID_result() noexcept;
   ::MMIStandard::MSceneObject success;

  _MSceneAccess_GetSceneObjectByID_result__isset __isset;

  void __set_success(const  ::MMIStandard::MSceneObject& val);

  bool operator == (const MSceneAccess_GetSceneObjectByID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetSceneObjectByID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetSceneObjectByID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetSceneObjectByID_presult__isset {
  _MSceneAccess_GetSceneObjectByID_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetSceneObjectByID_presult__isset;

class MSceneAccess_GetSceneObjectByID_presult {
 public:


  virtual ~MSceneAccess_GetSceneObjectByID_presult() noexcept;
   ::MMIStandard::MSceneObject* success;

  _MSceneAccess_GetSceneObjectByID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSceneAccess_GetSceneObjectByName_args__isset {
  _MSceneAccess_GetSceneObjectByName_args__isset() : name(false) {}
  bool name :1;
} _MSceneAccess_GetSceneObjectByName_args__isset;

class MSceneAccess_GetSceneObjectByName_args {
 public:

  MSceneAccess_GetSceneObjectByName_args(const MSceneAccess_GetSceneObjectByName_args&);
  MSceneAccess_GetSceneObjectByName_args& operator=(const MSceneAccess_GetSceneObjectByName_args&);
  MSceneAccess_GetSceneObjectByName_args() : name() {
  }

  virtual ~MSceneAccess_GetSceneObjectByName_args() noexcept;
  std::string name;

  _MSceneAccess_GetSceneObjectByName_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const MSceneAccess_GetSceneObjectByName_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetSceneObjectByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetSceneObjectByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetSceneObjectByName_pargs {
 public:


  virtual ~MSceneAccess_GetSceneObjectByName_pargs() noexcept;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetSceneObjectByName_result__isset {
  _MSceneAccess_GetSceneObjectByName_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetSceneObjectByName_result__isset;

class MSceneAccess_GetSceneObjectByName_result {
 public:

  MSceneAccess_GetSceneObjectByName_result(const MSceneAccess_GetSceneObjectByName_result&);
  MSceneAccess_GetSceneObjectByName_result& operator=(const MSceneAccess_GetSceneObjectByName_result&);
  MSceneAccess_GetSceneObjectByName_result() {
  }

  virtual ~MSceneAccess_GetSceneObjectByName_result() noexcept;
   ::MMIStandard::MSceneObject success;

  _MSceneAccess_GetSceneObjectByName_result__isset __isset;

  void __set_success(const  ::MMIStandard::MSceneObject& val);

  bool operator == (const MSceneAccess_GetSceneObjectByName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetSceneObjectByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetSceneObjectByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetSceneObjectByName_presult__isset {
  _MSceneAccess_GetSceneObjectByName_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetSceneObjectByName_presult__isset;

class MSceneAccess_GetSceneObjectByName_presult {
 public:


  virtual ~MSceneAccess_GetSceneObjectByName_presult() noexcept;
   ::MMIStandard::MSceneObject* success;

  _MSceneAccess_GetSceneObjectByName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSceneAccess_GetSceneObjectsInRange_args__isset {
  _MSceneAccess_GetSceneObjectsInRange_args__isset() : position(false), range(false) {}
  bool position :1;
  bool range :1;
} _MSceneAccess_GetSceneObjectsInRange_args__isset;

class MSceneAccess_GetSceneObjectsInRange_args {
 public:

  MSceneAccess_GetSceneObjectsInRange_args(const MSceneAccess_GetSceneObjectsInRange_args&);
  MSceneAccess_GetSceneObjectsInRange_args& operator=(const MSceneAccess_GetSceneObjectsInRange_args&);
  MSceneAccess_GetSceneObjectsInRange_args() : range(0) {
  }

  virtual ~MSceneAccess_GetSceneObjectsInRange_args() noexcept;
   ::MMIStandard::MVector3 position;
  double range;

  _MSceneAccess_GetSceneObjectsInRange_args__isset __isset;

  void __set_position(const  ::MMIStandard::MVector3& val);

  void __set_range(const double val);

  bool operator == (const MSceneAccess_GetSceneObjectsInRange_args & rhs) const
  {
    if (!(position == rhs.position))
      return false;
    if (!(range == rhs.range))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetSceneObjectsInRange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetSceneObjectsInRange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetSceneObjectsInRange_pargs {
 public:


  virtual ~MSceneAccess_GetSceneObjectsInRange_pargs() noexcept;
  const  ::MMIStandard::MVector3* position;
  const double* range;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetSceneObjectsInRange_result__isset {
  _MSceneAccess_GetSceneObjectsInRange_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetSceneObjectsInRange_result__isset;

class MSceneAccess_GetSceneObjectsInRange_result {
 public:

  MSceneAccess_GetSceneObjectsInRange_result(const MSceneAccess_GetSceneObjectsInRange_result&);
  MSceneAccess_GetSceneObjectsInRange_result& operator=(const MSceneAccess_GetSceneObjectsInRange_result&);
  MSceneAccess_GetSceneObjectsInRange_result() {
  }

  virtual ~MSceneAccess_GetSceneObjectsInRange_result() noexcept;
  std::vector< ::MMIStandard::MSceneObject>  success;

  _MSceneAccess_GetSceneObjectsInRange_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MSceneObject> & val);

  bool operator == (const MSceneAccess_GetSceneObjectsInRange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetSceneObjectsInRange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetSceneObjectsInRange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetSceneObjectsInRange_presult__isset {
  _MSceneAccess_GetSceneObjectsInRange_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetSceneObjectsInRange_presult__isset;

class MSceneAccess_GetSceneObjectsInRange_presult {
 public:


  virtual ~MSceneAccess_GetSceneObjectsInRange_presult() noexcept;
  std::vector< ::MMIStandard::MSceneObject> * success;

  _MSceneAccess_GetSceneObjectsInRange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MSceneAccess_GetColliders_args {
 public:

  MSceneAccess_GetColliders_args(const MSceneAccess_GetColliders_args&);
  MSceneAccess_GetColliders_args& operator=(const MSceneAccess_GetColliders_args&);
  MSceneAccess_GetColliders_args() {
  }

  virtual ~MSceneAccess_GetColliders_args() noexcept;

  bool operator == (const MSceneAccess_GetColliders_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSceneAccess_GetColliders_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetColliders_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetColliders_pargs {
 public:


  virtual ~MSceneAccess_GetColliders_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetColliders_result__isset {
  _MSceneAccess_GetColliders_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetColliders_result__isset;

class MSceneAccess_GetColliders_result {
 public:

  MSceneAccess_GetColliders_result(const MSceneAccess_GetColliders_result&);
  MSceneAccess_GetColliders_result& operator=(const MSceneAccess_GetColliders_result&);
  MSceneAccess_GetColliders_result() {
  }

  virtual ~MSceneAccess_GetColliders_result() noexcept;
  std::vector< ::MMIStandard::MCollider>  success;

  _MSceneAccess_GetColliders_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MCollider> & val);

  bool operator == (const MSceneAccess_GetColliders_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetColliders_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetColliders_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetColliders_presult__isset {
  _MSceneAccess_GetColliders_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetColliders_presult__isset;

class MSceneAccess_GetColliders_presult {
 public:


  virtual ~MSceneAccess_GetColliders_presult() noexcept;
  std::vector< ::MMIStandard::MCollider> * success;

  _MSceneAccess_GetColliders_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSceneAccess_GetColliderById_args__isset {
  _MSceneAccess_GetColliderById_args__isset() : id(false) {}
  bool id :1;
} _MSceneAccess_GetColliderById_args__isset;

class MSceneAccess_GetColliderById_args {
 public:

  MSceneAccess_GetColliderById_args(const MSceneAccess_GetColliderById_args&);
  MSceneAccess_GetColliderById_args& operator=(const MSceneAccess_GetColliderById_args&);
  MSceneAccess_GetColliderById_args() : id() {
  }

  virtual ~MSceneAccess_GetColliderById_args() noexcept;
  std::string id;

  _MSceneAccess_GetColliderById_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const MSceneAccess_GetColliderById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetColliderById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetColliderById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetColliderById_pargs {
 public:


  virtual ~MSceneAccess_GetColliderById_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetColliderById_result__isset {
  _MSceneAccess_GetColliderById_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetColliderById_result__isset;

class MSceneAccess_GetColliderById_result {
 public:

  MSceneAccess_GetColliderById_result(const MSceneAccess_GetColliderById_result&);
  MSceneAccess_GetColliderById_result& operator=(const MSceneAccess_GetColliderById_result&);
  MSceneAccess_GetColliderById_result() {
  }

  virtual ~MSceneAccess_GetColliderById_result() noexcept;
   ::MMIStandard::MCollider success;

  _MSceneAccess_GetColliderById_result__isset __isset;

  void __set_success(const  ::MMIStandard::MCollider& val);

  bool operator == (const MSceneAccess_GetColliderById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetColliderById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetColliderById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetColliderById_presult__isset {
  _MSceneAccess_GetColliderById_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetColliderById_presult__isset;

class MSceneAccess_GetColliderById_presult {
 public:


  virtual ~MSceneAccess_GetColliderById_presult() noexcept;
   ::MMIStandard::MCollider* success;

  _MSceneAccess_GetColliderById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSceneAccess_GetCollidersInRange_args__isset {
  _MSceneAccess_GetCollidersInRange_args__isset() : position(false), range(false) {}
  bool position :1;
  bool range :1;
} _MSceneAccess_GetCollidersInRange_args__isset;

class MSceneAccess_GetCollidersInRange_args {
 public:

  MSceneAccess_GetCollidersInRange_args(const MSceneAccess_GetCollidersInRange_args&);
  MSceneAccess_GetCollidersInRange_args& operator=(const MSceneAccess_GetCollidersInRange_args&);
  MSceneAccess_GetCollidersInRange_args() : range(0) {
  }

  virtual ~MSceneAccess_GetCollidersInRange_args() noexcept;
   ::MMIStandard::MVector3 position;
  double range;

  _MSceneAccess_GetCollidersInRange_args__isset __isset;

  void __set_position(const  ::MMIStandard::MVector3& val);

  void __set_range(const double val);

  bool operator == (const MSceneAccess_GetCollidersInRange_args & rhs) const
  {
    if (!(position == rhs.position))
      return false;
    if (!(range == rhs.range))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetCollidersInRange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetCollidersInRange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetCollidersInRange_pargs {
 public:


  virtual ~MSceneAccess_GetCollidersInRange_pargs() noexcept;
  const  ::MMIStandard::MVector3* position;
  const double* range;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetCollidersInRange_result__isset {
  _MSceneAccess_GetCollidersInRange_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetCollidersInRange_result__isset;

class MSceneAccess_GetCollidersInRange_result {
 public:

  MSceneAccess_GetCollidersInRange_result(const MSceneAccess_GetCollidersInRange_result&);
  MSceneAccess_GetCollidersInRange_result& operator=(const MSceneAccess_GetCollidersInRange_result&);
  MSceneAccess_GetCollidersInRange_result() {
  }

  virtual ~MSceneAccess_GetCollidersInRange_result() noexcept;
  std::vector< ::MMIStandard::MCollider>  success;

  _MSceneAccess_GetCollidersInRange_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MCollider> & val);

  bool operator == (const MSceneAccess_GetCollidersInRange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetCollidersInRange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetCollidersInRange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetCollidersInRange_presult__isset {
  _MSceneAccess_GetCollidersInRange_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetCollidersInRange_presult__isset;

class MSceneAccess_GetCollidersInRange_presult {
 public:


  virtual ~MSceneAccess_GetCollidersInRange_presult() noexcept;
  std::vector< ::MMIStandard::MCollider> * success;

  _MSceneAccess_GetCollidersInRange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MSceneAccess_GetMeshes_args {
 public:

  MSceneAccess_GetMeshes_args(const MSceneAccess_GetMeshes_args&);
  MSceneAccess_GetMeshes_args& operator=(const MSceneAccess_GetMeshes_args&);
  MSceneAccess_GetMeshes_args() {
  }

  virtual ~MSceneAccess_GetMeshes_args() noexcept;

  bool operator == (const MSceneAccess_GetMeshes_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSceneAccess_GetMeshes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetMeshes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetMeshes_pargs {
 public:


  virtual ~MSceneAccess_GetMeshes_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetMeshes_result__isset {
  _MSceneAccess_GetMeshes_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetMeshes_result__isset;

class MSceneAccess_GetMeshes_result {
 public:

  MSceneAccess_GetMeshes_result(const MSceneAccess_GetMeshes_result&);
  MSceneAccess_GetMeshes_result& operator=(const MSceneAccess_GetMeshes_result&);
  MSceneAccess_GetMeshes_result() {
  }

  virtual ~MSceneAccess_GetMeshes_result() noexcept;
  std::vector< ::MMIStandard::MMesh>  success;

  _MSceneAccess_GetMeshes_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MMesh> & val);

  bool operator == (const MSceneAccess_GetMeshes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetMeshes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetMeshes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetMeshes_presult__isset {
  _MSceneAccess_GetMeshes_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetMeshes_presult__isset;

class MSceneAccess_GetMeshes_presult {
 public:


  virtual ~MSceneAccess_GetMeshes_presult() noexcept;
  std::vector< ::MMIStandard::MMesh> * success;

  _MSceneAccess_GetMeshes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSceneAccess_GetMeshByID_args__isset {
  _MSceneAccess_GetMeshByID_args__isset() : id(false) {}
  bool id :1;
} _MSceneAccess_GetMeshByID_args__isset;

class MSceneAccess_GetMeshByID_args {
 public:

  MSceneAccess_GetMeshByID_args(const MSceneAccess_GetMeshByID_args&);
  MSceneAccess_GetMeshByID_args& operator=(const MSceneAccess_GetMeshByID_args&);
  MSceneAccess_GetMeshByID_args() : id() {
  }

  virtual ~MSceneAccess_GetMeshByID_args() noexcept;
  std::string id;

  _MSceneAccess_GetMeshByID_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const MSceneAccess_GetMeshByID_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetMeshByID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetMeshByID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetMeshByID_pargs {
 public:


  virtual ~MSceneAccess_GetMeshByID_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetMeshByID_result__isset {
  _MSceneAccess_GetMeshByID_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetMeshByID_result__isset;

class MSceneAccess_GetMeshByID_result {
 public:

  MSceneAccess_GetMeshByID_result(const MSceneAccess_GetMeshByID_result&);
  MSceneAccess_GetMeshByID_result& operator=(const MSceneAccess_GetMeshByID_result&);
  MSceneAccess_GetMeshByID_result() {
  }

  virtual ~MSceneAccess_GetMeshByID_result() noexcept;
   ::MMIStandard::MMesh success;

  _MSceneAccess_GetMeshByID_result__isset __isset;

  void __set_success(const  ::MMIStandard::MMesh& val);

  bool operator == (const MSceneAccess_GetMeshByID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetMeshByID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetMeshByID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetMeshByID_presult__isset {
  _MSceneAccess_GetMeshByID_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetMeshByID_presult__isset;

class MSceneAccess_GetMeshByID_presult {
 public:


  virtual ~MSceneAccess_GetMeshByID_presult() noexcept;
   ::MMIStandard::MMesh* success;

  _MSceneAccess_GetMeshByID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MSceneAccess_GetTransforms_args {
 public:

  MSceneAccess_GetTransforms_args(const MSceneAccess_GetTransforms_args&);
  MSceneAccess_GetTransforms_args& operator=(const MSceneAccess_GetTransforms_args&);
  MSceneAccess_GetTransforms_args() {
  }

  virtual ~MSceneAccess_GetTransforms_args() noexcept;

  bool operator == (const MSceneAccess_GetTransforms_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSceneAccess_GetTransforms_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetTransforms_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetTransforms_pargs {
 public:


  virtual ~MSceneAccess_GetTransforms_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetTransforms_result__isset {
  _MSceneAccess_GetTransforms_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetTransforms_result__isset;

class MSceneAccess_GetTransforms_result {
 public:

  MSceneAccess_GetTransforms_result(const MSceneAccess_GetTransforms_result&);
  MSceneAccess_GetTransforms_result& operator=(const MSceneAccess_GetTransforms_result&);
  MSceneAccess_GetTransforms_result() {
  }

  virtual ~MSceneAccess_GetTransforms_result() noexcept;
  std::vector< ::MMIStandard::MTransform>  success;

  _MSceneAccess_GetTransforms_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MTransform> & val);

  bool operator == (const MSceneAccess_GetTransforms_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetTransforms_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetTransforms_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetTransforms_presult__isset {
  _MSceneAccess_GetTransforms_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetTransforms_presult__isset;

class MSceneAccess_GetTransforms_presult {
 public:


  virtual ~MSceneAccess_GetTransforms_presult() noexcept;
  std::vector< ::MMIStandard::MTransform> * success;

  _MSceneAccess_GetTransforms_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSceneAccess_GetTransformByID_args__isset {
  _MSceneAccess_GetTransformByID_args__isset() : id(false) {}
  bool id :1;
} _MSceneAccess_GetTransformByID_args__isset;

class MSceneAccess_GetTransformByID_args {
 public:

  MSceneAccess_GetTransformByID_args(const MSceneAccess_GetTransformByID_args&);
  MSceneAccess_GetTransformByID_args& operator=(const MSceneAccess_GetTransformByID_args&);
  MSceneAccess_GetTransformByID_args() : id() {
  }

  virtual ~MSceneAccess_GetTransformByID_args() noexcept;
  std::string id;

  _MSceneAccess_GetTransformByID_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const MSceneAccess_GetTransformByID_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetTransformByID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetTransformByID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetTransformByID_pargs {
 public:


  virtual ~MSceneAccess_GetTransformByID_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetTransformByID_result__isset {
  _MSceneAccess_GetTransformByID_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetTransformByID_result__isset;

class MSceneAccess_GetTransformByID_result {
 public:

  MSceneAccess_GetTransformByID_result(const MSceneAccess_GetTransformByID_result&);
  MSceneAccess_GetTransformByID_result& operator=(const MSceneAccess_GetTransformByID_result&);
  MSceneAccess_GetTransformByID_result() {
  }

  virtual ~MSceneAccess_GetTransformByID_result() noexcept;
   ::MMIStandard::MTransform success;

  _MSceneAccess_GetTransformByID_result__isset __isset;

  void __set_success(const  ::MMIStandard::MTransform& val);

  bool operator == (const MSceneAccess_GetTransformByID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetTransformByID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetTransformByID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetTransformByID_presult__isset {
  _MSceneAccess_GetTransformByID_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetTransformByID_presult__isset;

class MSceneAccess_GetTransformByID_presult {
 public:


  virtual ~MSceneAccess_GetTransformByID_presult() noexcept;
   ::MMIStandard::MTransform* success;

  _MSceneAccess_GetTransformByID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MSceneAccess_GetAvatars_args {
 public:

  MSceneAccess_GetAvatars_args(const MSceneAccess_GetAvatars_args&);
  MSceneAccess_GetAvatars_args& operator=(const MSceneAccess_GetAvatars_args&);
  MSceneAccess_GetAvatars_args() {
  }

  virtual ~MSceneAccess_GetAvatars_args() noexcept;

  bool operator == (const MSceneAccess_GetAvatars_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSceneAccess_GetAvatars_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAvatars_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetAvatars_pargs {
 public:


  virtual ~MSceneAccess_GetAvatars_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAvatars_result__isset {
  _MSceneAccess_GetAvatars_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAvatars_result__isset;

class MSceneAccess_GetAvatars_result {
 public:

  MSceneAccess_GetAvatars_result(const MSceneAccess_GetAvatars_result&);
  MSceneAccess_GetAvatars_result& operator=(const MSceneAccess_GetAvatars_result&);
  MSceneAccess_GetAvatars_result() {
  }

  virtual ~MSceneAccess_GetAvatars_result() noexcept;
  std::vector< ::MMIStandard::MAvatar>  success;

  _MSceneAccess_GetAvatars_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MAvatar> & val);

  bool operator == (const MSceneAccess_GetAvatars_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetAvatars_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAvatars_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAvatars_presult__isset {
  _MSceneAccess_GetAvatars_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAvatars_presult__isset;

class MSceneAccess_GetAvatars_presult {
 public:


  virtual ~MSceneAccess_GetAvatars_presult() noexcept;
  std::vector< ::MMIStandard::MAvatar> * success;

  _MSceneAccess_GetAvatars_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSceneAccess_GetAvatarByID_args__isset {
  _MSceneAccess_GetAvatarByID_args__isset() : id(false) {}
  bool id :1;
} _MSceneAccess_GetAvatarByID_args__isset;

class MSceneAccess_GetAvatarByID_args {
 public:

  MSceneAccess_GetAvatarByID_args(const MSceneAccess_GetAvatarByID_args&);
  MSceneAccess_GetAvatarByID_args& operator=(const MSceneAccess_GetAvatarByID_args&);
  MSceneAccess_GetAvatarByID_args() : id() {
  }

  virtual ~MSceneAccess_GetAvatarByID_args() noexcept;
  std::string id;

  _MSceneAccess_GetAvatarByID_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const MSceneAccess_GetAvatarByID_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetAvatarByID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAvatarByID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetAvatarByID_pargs {
 public:


  virtual ~MSceneAccess_GetAvatarByID_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAvatarByID_result__isset {
  _MSceneAccess_GetAvatarByID_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAvatarByID_result__isset;

class MSceneAccess_GetAvatarByID_result {
 public:

  MSceneAccess_GetAvatarByID_result(const MSceneAccess_GetAvatarByID_result&);
  MSceneAccess_GetAvatarByID_result& operator=(const MSceneAccess_GetAvatarByID_result&);
  MSceneAccess_GetAvatarByID_result() {
  }

  virtual ~MSceneAccess_GetAvatarByID_result() noexcept;
   ::MMIStandard::MAvatar success;

  _MSceneAccess_GetAvatarByID_result__isset __isset;

  void __set_success(const  ::MMIStandard::MAvatar& val);

  bool operator == (const MSceneAccess_GetAvatarByID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetAvatarByID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAvatarByID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAvatarByID_presult__isset {
  _MSceneAccess_GetAvatarByID_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAvatarByID_presult__isset;

class MSceneAccess_GetAvatarByID_presult {
 public:


  virtual ~MSceneAccess_GetAvatarByID_presult() noexcept;
   ::MMIStandard::MAvatar* success;

  _MSceneAccess_GetAvatarByID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSceneAccess_GetAvatarByName_args__isset {
  _MSceneAccess_GetAvatarByName_args__isset() : name(false) {}
  bool name :1;
} _MSceneAccess_GetAvatarByName_args__isset;

class MSceneAccess_GetAvatarByName_args {
 public:

  MSceneAccess_GetAvatarByName_args(const MSceneAccess_GetAvatarByName_args&);
  MSceneAccess_GetAvatarByName_args& operator=(const MSceneAccess_GetAvatarByName_args&);
  MSceneAccess_GetAvatarByName_args() : name() {
  }

  virtual ~MSceneAccess_GetAvatarByName_args() noexcept;
  std::string name;

  _MSceneAccess_GetAvatarByName_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const MSceneAccess_GetAvatarByName_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetAvatarByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAvatarByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetAvatarByName_pargs {
 public:


  virtual ~MSceneAccess_GetAvatarByName_pargs() noexcept;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAvatarByName_result__isset {
  _MSceneAccess_GetAvatarByName_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAvatarByName_result__isset;

class MSceneAccess_GetAvatarByName_result {
 public:

  MSceneAccess_GetAvatarByName_result(const MSceneAccess_GetAvatarByName_result&);
  MSceneAccess_GetAvatarByName_result& operator=(const MSceneAccess_GetAvatarByName_result&);
  MSceneAccess_GetAvatarByName_result() {
  }

  virtual ~MSceneAccess_GetAvatarByName_result() noexcept;
   ::MMIStandard::MAvatar success;

  _MSceneAccess_GetAvatarByName_result__isset __isset;

  void __set_success(const  ::MMIStandard::MAvatar& val);

  bool operator == (const MSceneAccess_GetAvatarByName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetAvatarByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAvatarByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAvatarByName_presult__isset {
  _MSceneAccess_GetAvatarByName_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAvatarByName_presult__isset;

class MSceneAccess_GetAvatarByName_presult {
 public:


  virtual ~MSceneAccess_GetAvatarByName_presult() noexcept;
   ::MMIStandard::MAvatar* success;

  _MSceneAccess_GetAvatarByName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSceneAccess_GetAvatarsInRange_args__isset {
  _MSceneAccess_GetAvatarsInRange_args__isset() : position(false), distance(false) {}
  bool position :1;
  bool distance :1;
} _MSceneAccess_GetAvatarsInRange_args__isset;

class MSceneAccess_GetAvatarsInRange_args {
 public:

  MSceneAccess_GetAvatarsInRange_args(const MSceneAccess_GetAvatarsInRange_args&);
  MSceneAccess_GetAvatarsInRange_args& operator=(const MSceneAccess_GetAvatarsInRange_args&);
  MSceneAccess_GetAvatarsInRange_args() : distance(0) {
  }

  virtual ~MSceneAccess_GetAvatarsInRange_args() noexcept;
   ::MMIStandard::MVector3 position;
  double distance;

  _MSceneAccess_GetAvatarsInRange_args__isset __isset;

  void __set_position(const  ::MMIStandard::MVector3& val);

  void __set_distance(const double val);

  bool operator == (const MSceneAccess_GetAvatarsInRange_args & rhs) const
  {
    if (!(position == rhs.position))
      return false;
    if (!(distance == rhs.distance))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetAvatarsInRange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAvatarsInRange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetAvatarsInRange_pargs {
 public:


  virtual ~MSceneAccess_GetAvatarsInRange_pargs() noexcept;
  const  ::MMIStandard::MVector3* position;
  const double* distance;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAvatarsInRange_result__isset {
  _MSceneAccess_GetAvatarsInRange_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAvatarsInRange_result__isset;

class MSceneAccess_GetAvatarsInRange_result {
 public:

  MSceneAccess_GetAvatarsInRange_result(const MSceneAccess_GetAvatarsInRange_result&);
  MSceneAccess_GetAvatarsInRange_result& operator=(const MSceneAccess_GetAvatarsInRange_result&);
  MSceneAccess_GetAvatarsInRange_result() {
  }

  virtual ~MSceneAccess_GetAvatarsInRange_result() noexcept;
  std::vector< ::MMIStandard::MAvatar>  success;

  _MSceneAccess_GetAvatarsInRange_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MAvatar> & val);

  bool operator == (const MSceneAccess_GetAvatarsInRange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetAvatarsInRange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAvatarsInRange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAvatarsInRange_presult__isset {
  _MSceneAccess_GetAvatarsInRange_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAvatarsInRange_presult__isset;

class MSceneAccess_GetAvatarsInRange_presult {
 public:


  virtual ~MSceneAccess_GetAvatarsInRange_presult() noexcept;
  std::vector< ::MMIStandard::MAvatar> * success;

  _MSceneAccess_GetAvatarsInRange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MSceneAccess_GetSimulationTime_args {
 public:

  MSceneAccess_GetSimulationTime_args(const MSceneAccess_GetSimulationTime_args&);
  MSceneAccess_GetSimulationTime_args& operator=(const MSceneAccess_GetSimulationTime_args&);
  MSceneAccess_GetSimulationTime_args() {
  }

  virtual ~MSceneAccess_GetSimulationTime_args() noexcept;

  bool operator == (const MSceneAccess_GetSimulationTime_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSceneAccess_GetSimulationTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetSimulationTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetSimulationTime_pargs {
 public:


  virtual ~MSceneAccess_GetSimulationTime_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetSimulationTime_result__isset {
  _MSceneAccess_GetSimulationTime_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetSimulationTime_result__isset;

class MSceneAccess_GetSimulationTime_result {
 public:

  MSceneAccess_GetSimulationTime_result(const MSceneAccess_GetSimulationTime_result&);
  MSceneAccess_GetSimulationTime_result& operator=(const MSceneAccess_GetSimulationTime_result&);
  MSceneAccess_GetSimulationTime_result() : success(0) {
  }

  virtual ~MSceneAccess_GetSimulationTime_result() noexcept;
  double success;

  _MSceneAccess_GetSimulationTime_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const MSceneAccess_GetSimulationTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetSimulationTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetSimulationTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetSimulationTime_presult__isset {
  _MSceneAccess_GetSimulationTime_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetSimulationTime_presult__isset;

class MSceneAccess_GetSimulationTime_presult {
 public:


  virtual ~MSceneAccess_GetSimulationTime_presult() noexcept;
  double* success;

  _MSceneAccess_GetSimulationTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MSceneAccess_GetSceneChanges_args {
 public:

  MSceneAccess_GetSceneChanges_args(const MSceneAccess_GetSceneChanges_args&);
  MSceneAccess_GetSceneChanges_args& operator=(const MSceneAccess_GetSceneChanges_args&);
  MSceneAccess_GetSceneChanges_args() {
  }

  virtual ~MSceneAccess_GetSceneChanges_args() noexcept;

  bool operator == (const MSceneAccess_GetSceneChanges_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSceneAccess_GetSceneChanges_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetSceneChanges_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetSceneChanges_pargs {
 public:


  virtual ~MSceneAccess_GetSceneChanges_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetSceneChanges_result__isset {
  _MSceneAccess_GetSceneChanges_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetSceneChanges_result__isset;

class MSceneAccess_GetSceneChanges_result {
 public:

  MSceneAccess_GetSceneChanges_result(const MSceneAccess_GetSceneChanges_result&);
  MSceneAccess_GetSceneChanges_result& operator=(const MSceneAccess_GetSceneChanges_result&);
  MSceneAccess_GetSceneChanges_result() {
  }

  virtual ~MSceneAccess_GetSceneChanges_result() noexcept;
   ::MMIStandard::MSceneUpdate success;

  _MSceneAccess_GetSceneChanges_result__isset __isset;

  void __set_success(const  ::MMIStandard::MSceneUpdate& val);

  bool operator == (const MSceneAccess_GetSceneChanges_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetSceneChanges_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetSceneChanges_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetSceneChanges_presult__isset {
  _MSceneAccess_GetSceneChanges_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetSceneChanges_presult__isset;

class MSceneAccess_GetSceneChanges_presult {
 public:


  virtual ~MSceneAccess_GetSceneChanges_presult() noexcept;
   ::MMIStandard::MSceneUpdate* success;

  _MSceneAccess_GetSceneChanges_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MSceneAccess_GetFullScene_args {
 public:

  MSceneAccess_GetFullScene_args(const MSceneAccess_GetFullScene_args&);
  MSceneAccess_GetFullScene_args& operator=(const MSceneAccess_GetFullScene_args&);
  MSceneAccess_GetFullScene_args() {
  }

  virtual ~MSceneAccess_GetFullScene_args() noexcept;

  bool operator == (const MSceneAccess_GetFullScene_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSceneAccess_GetFullScene_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetFullScene_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetFullScene_pargs {
 public:


  virtual ~MSceneAccess_GetFullScene_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetFullScene_result__isset {
  _MSceneAccess_GetFullScene_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetFullScene_result__isset;

class MSceneAccess_GetFullScene_result {
 public:

  MSceneAccess_GetFullScene_result(const MSceneAccess_GetFullScene_result&);
  MSceneAccess_GetFullScene_result& operator=(const MSceneAccess_GetFullScene_result&);
  MSceneAccess_GetFullScene_result() {
  }

  virtual ~MSceneAccess_GetFullScene_result() noexcept;
   ::MMIStandard::MSceneUpdate success;

  _MSceneAccess_GetFullScene_result__isset __isset;

  void __set_success(const  ::MMIStandard::MSceneUpdate& val);

  bool operator == (const MSceneAccess_GetFullScene_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetFullScene_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetFullScene_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetFullScene_presult__isset {
  _MSceneAccess_GetFullScene_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetFullScene_presult__isset;

class MSceneAccess_GetFullScene_presult {
 public:


  virtual ~MSceneAccess_GetFullScene_presult() noexcept;
   ::MMIStandard::MSceneUpdate* success;

  _MSceneAccess_GetFullScene_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MSceneAccess_GetNavigationMesh_args {
 public:

  MSceneAccess_GetNavigationMesh_args(const MSceneAccess_GetNavigationMesh_args&);
  MSceneAccess_GetNavigationMesh_args& operator=(const MSceneAccess_GetNavigationMesh_args&);
  MSceneAccess_GetNavigationMesh_args() {
  }

  virtual ~MSceneAccess_GetNavigationMesh_args() noexcept;

  bool operator == (const MSceneAccess_GetNavigationMesh_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSceneAccess_GetNavigationMesh_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetNavigationMesh_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetNavigationMesh_pargs {
 public:


  virtual ~MSceneAccess_GetNavigationMesh_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetNavigationMesh_result__isset {
  _MSceneAccess_GetNavigationMesh_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetNavigationMesh_result__isset;

class MSceneAccess_GetNavigationMesh_result {
 public:

  MSceneAccess_GetNavigationMesh_result(const MSceneAccess_GetNavigationMesh_result&);
  MSceneAccess_GetNavigationMesh_result& operator=(const MSceneAccess_GetNavigationMesh_result&);
  MSceneAccess_GetNavigationMesh_result() {
  }

  virtual ~MSceneAccess_GetNavigationMesh_result() noexcept;
   ::MMIStandard::MNavigationMesh success;

  _MSceneAccess_GetNavigationMesh_result__isset __isset;

  void __set_success(const  ::MMIStandard::MNavigationMesh& val);

  bool operator == (const MSceneAccess_GetNavigationMesh_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetNavigationMesh_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetNavigationMesh_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetNavigationMesh_presult__isset {
  _MSceneAccess_GetNavigationMesh_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetNavigationMesh_presult__isset;

class MSceneAccess_GetNavigationMesh_presult {
 public:


  virtual ~MSceneAccess_GetNavigationMesh_presult() noexcept;
   ::MMIStandard::MNavigationMesh* success;

  _MSceneAccess_GetNavigationMesh_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSceneAccess_GetData_args__isset {
  _MSceneAccess_GetData_args__isset() : fileFormat(false), selection(false) {}
  bool fileFormat :1;
  bool selection :1;
} _MSceneAccess_GetData_args__isset;

class MSceneAccess_GetData_args {
 public:

  MSceneAccess_GetData_args(const MSceneAccess_GetData_args&);
  MSceneAccess_GetData_args& operator=(const MSceneAccess_GetData_args&);
  MSceneAccess_GetData_args() : fileFormat(), selection() {
  }

  virtual ~MSceneAccess_GetData_args() noexcept;
  std::string fileFormat;
  std::string selection;

  _MSceneAccess_GetData_args__isset __isset;

  void __set_fileFormat(const std::string& val);

  void __set_selection(const std::string& val);

  bool operator == (const MSceneAccess_GetData_args & rhs) const
  {
    if (!(fileFormat == rhs.fileFormat))
      return false;
    if (!(selection == rhs.selection))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetData_pargs {
 public:


  virtual ~MSceneAccess_GetData_pargs() noexcept;
  const std::string* fileFormat;
  const std::string* selection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetData_result__isset {
  _MSceneAccess_GetData_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetData_result__isset;

class MSceneAccess_GetData_result {
 public:

  MSceneAccess_GetData_result(const MSceneAccess_GetData_result&);
  MSceneAccess_GetData_result& operator=(const MSceneAccess_GetData_result&);
  MSceneAccess_GetData_result() : success() {
  }

  virtual ~MSceneAccess_GetData_result() noexcept;
  std::string success;

  _MSceneAccess_GetData_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MSceneAccess_GetData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetData_presult__isset {
  _MSceneAccess_GetData_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetData_presult__isset;

class MSceneAccess_GetData_presult {
 public:


  virtual ~MSceneAccess_GetData_presult() noexcept;
  std::string* success;

  _MSceneAccess_GetData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MSceneAccess_GetAttachments_args {
 public:

  MSceneAccess_GetAttachments_args(const MSceneAccess_GetAttachments_args&);
  MSceneAccess_GetAttachments_args& operator=(const MSceneAccess_GetAttachments_args&);
  MSceneAccess_GetAttachments_args() {
  }

  virtual ~MSceneAccess_GetAttachments_args() noexcept;

  bool operator == (const MSceneAccess_GetAttachments_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MSceneAccess_GetAttachments_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAttachments_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetAttachments_pargs {
 public:


  virtual ~MSceneAccess_GetAttachments_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAttachments_result__isset {
  _MSceneAccess_GetAttachments_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAttachments_result__isset;

class MSceneAccess_GetAttachments_result {
 public:

  MSceneAccess_GetAttachments_result(const MSceneAccess_GetAttachments_result&);
  MSceneAccess_GetAttachments_result& operator=(const MSceneAccess_GetAttachments_result&);
  MSceneAccess_GetAttachments_result() {
  }

  virtual ~MSceneAccess_GetAttachments_result() noexcept;
  std::vector< ::MMIStandard::MAttachment>  success;

  _MSceneAccess_GetAttachments_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MAttachment> & val);

  bool operator == (const MSceneAccess_GetAttachments_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetAttachments_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAttachments_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAttachments_presult__isset {
  _MSceneAccess_GetAttachments_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAttachments_presult__isset;

class MSceneAccess_GetAttachments_presult {
 public:


  virtual ~MSceneAccess_GetAttachments_presult() noexcept;
  std::vector< ::MMIStandard::MAttachment> * success;

  _MSceneAccess_GetAttachments_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSceneAccess_GetAttachmentsByID_args__isset {
  _MSceneAccess_GetAttachmentsByID_args__isset() : id(false) {}
  bool id :1;
} _MSceneAccess_GetAttachmentsByID_args__isset;

class MSceneAccess_GetAttachmentsByID_args {
 public:

  MSceneAccess_GetAttachmentsByID_args(const MSceneAccess_GetAttachmentsByID_args&);
  MSceneAccess_GetAttachmentsByID_args& operator=(const MSceneAccess_GetAttachmentsByID_args&);
  MSceneAccess_GetAttachmentsByID_args() : id() {
  }

  virtual ~MSceneAccess_GetAttachmentsByID_args() noexcept;
  std::string id;

  _MSceneAccess_GetAttachmentsByID_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const MSceneAccess_GetAttachmentsByID_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetAttachmentsByID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAttachmentsByID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetAttachmentsByID_pargs {
 public:


  virtual ~MSceneAccess_GetAttachmentsByID_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAttachmentsByID_result__isset {
  _MSceneAccess_GetAttachmentsByID_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAttachmentsByID_result__isset;

class MSceneAccess_GetAttachmentsByID_result {
 public:

  MSceneAccess_GetAttachmentsByID_result(const MSceneAccess_GetAttachmentsByID_result&);
  MSceneAccess_GetAttachmentsByID_result& operator=(const MSceneAccess_GetAttachmentsByID_result&);
  MSceneAccess_GetAttachmentsByID_result() {
  }

  virtual ~MSceneAccess_GetAttachmentsByID_result() noexcept;
  std::vector< ::MMIStandard::MAttachment>  success;

  _MSceneAccess_GetAttachmentsByID_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MAttachment> & val);

  bool operator == (const MSceneAccess_GetAttachmentsByID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetAttachmentsByID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAttachmentsByID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAttachmentsByID_presult__isset {
  _MSceneAccess_GetAttachmentsByID_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAttachmentsByID_presult__isset;

class MSceneAccess_GetAttachmentsByID_presult {
 public:


  virtual ~MSceneAccess_GetAttachmentsByID_presult() noexcept;
  std::vector< ::MMIStandard::MAttachment> * success;

  _MSceneAccess_GetAttachmentsByID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSceneAccess_GetAttachmentsByName_args__isset {
  _MSceneAccess_GetAttachmentsByName_args__isset() : name(false) {}
  bool name :1;
} _MSceneAccess_GetAttachmentsByName_args__isset;

class MSceneAccess_GetAttachmentsByName_args {
 public:

  MSceneAccess_GetAttachmentsByName_args(const MSceneAccess_GetAttachmentsByName_args&);
  MSceneAccess_GetAttachmentsByName_args& operator=(const MSceneAccess_GetAttachmentsByName_args&);
  MSceneAccess_GetAttachmentsByName_args() : name() {
  }

  virtual ~MSceneAccess_GetAttachmentsByName_args() noexcept;
  std::string name;

  _MSceneAccess_GetAttachmentsByName_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const MSceneAccess_GetAttachmentsByName_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetAttachmentsByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAttachmentsByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetAttachmentsByName_pargs {
 public:


  virtual ~MSceneAccess_GetAttachmentsByName_pargs() noexcept;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAttachmentsByName_result__isset {
  _MSceneAccess_GetAttachmentsByName_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAttachmentsByName_result__isset;

class MSceneAccess_GetAttachmentsByName_result {
 public:

  MSceneAccess_GetAttachmentsByName_result(const MSceneAccess_GetAttachmentsByName_result&);
  MSceneAccess_GetAttachmentsByName_result& operator=(const MSceneAccess_GetAttachmentsByName_result&);
  MSceneAccess_GetAttachmentsByName_result() {
  }

  virtual ~MSceneAccess_GetAttachmentsByName_result() noexcept;
  std::vector< ::MMIStandard::MAttachment>  success;

  _MSceneAccess_GetAttachmentsByName_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MAttachment> & val);

  bool operator == (const MSceneAccess_GetAttachmentsByName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetAttachmentsByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAttachmentsByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAttachmentsByName_presult__isset {
  _MSceneAccess_GetAttachmentsByName_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAttachmentsByName_presult__isset;

class MSceneAccess_GetAttachmentsByName_presult {
 public:


  virtual ~MSceneAccess_GetAttachmentsByName_presult() noexcept;
  std::vector< ::MMIStandard::MAttachment> * success;

  _MSceneAccess_GetAttachmentsByName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSceneAccess_GetAttachmentsChildrenRecursive_args__isset {
  _MSceneAccess_GetAttachmentsChildrenRecursive_args__isset() : id(false) {}
  bool id :1;
} _MSceneAccess_GetAttachmentsChildrenRecursive_args__isset;

class MSceneAccess_GetAttachmentsChildrenRecursive_args {
 public:

  MSceneAccess_GetAttachmentsChildrenRecursive_args(const MSceneAccess_GetAttachmentsChildrenRecursive_args&);
  MSceneAccess_GetAttachmentsChildrenRecursive_args& operator=(const MSceneAccess_GetAttachmentsChildrenRecursive_args&);
  MSceneAccess_GetAttachmentsChildrenRecursive_args() : id() {
  }

  virtual ~MSceneAccess_GetAttachmentsChildrenRecursive_args() noexcept;
  std::string id;

  _MSceneAccess_GetAttachmentsChildrenRecursive_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const MSceneAccess_GetAttachmentsChildrenRecursive_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetAttachmentsChildrenRecursive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAttachmentsChildrenRecursive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetAttachmentsChildrenRecursive_pargs {
 public:


  virtual ~MSceneAccess_GetAttachmentsChildrenRecursive_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAttachmentsChildrenRecursive_result__isset {
  _MSceneAccess_GetAttachmentsChildrenRecursive_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAttachmentsChildrenRecursive_result__isset;

class MSceneAccess_GetAttachmentsChildrenRecursive_result {
 public:

  MSceneAccess_GetAttachmentsChildrenRecursive_result(const MSceneAccess_GetAttachmentsChildrenRecursive_result&);
  MSceneAccess_GetAttachmentsChildrenRecursive_result& operator=(const MSceneAccess_GetAttachmentsChildrenRecursive_result&);
  MSceneAccess_GetAttachmentsChildrenRecursive_result() {
  }

  virtual ~MSceneAccess_GetAttachmentsChildrenRecursive_result() noexcept;
  std::vector< ::MMIStandard::MAttachment>  success;

  _MSceneAccess_GetAttachmentsChildrenRecursive_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MAttachment> & val);

  bool operator == (const MSceneAccess_GetAttachmentsChildrenRecursive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetAttachmentsChildrenRecursive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAttachmentsChildrenRecursive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAttachmentsChildrenRecursive_presult__isset {
  _MSceneAccess_GetAttachmentsChildrenRecursive_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAttachmentsChildrenRecursive_presult__isset;

class MSceneAccess_GetAttachmentsChildrenRecursive_presult {
 public:


  virtual ~MSceneAccess_GetAttachmentsChildrenRecursive_presult() noexcept;
  std::vector< ::MMIStandard::MAttachment> * success;

  _MSceneAccess_GetAttachmentsChildrenRecursive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MSceneAccess_GetAttachmentsParentsRecursive_args__isset {
  _MSceneAccess_GetAttachmentsParentsRecursive_args__isset() : id(false) {}
  bool id :1;
} _MSceneAccess_GetAttachmentsParentsRecursive_args__isset;

class MSceneAccess_GetAttachmentsParentsRecursive_args {
 public:

  MSceneAccess_GetAttachmentsParentsRecursive_args(const MSceneAccess_GetAttachmentsParentsRecursive_args&);
  MSceneAccess_GetAttachmentsParentsRecursive_args& operator=(const MSceneAccess_GetAttachmentsParentsRecursive_args&);
  MSceneAccess_GetAttachmentsParentsRecursive_args() : id() {
  }

  virtual ~MSceneAccess_GetAttachmentsParentsRecursive_args() noexcept;
  std::string id;

  _MSceneAccess_GetAttachmentsParentsRecursive_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const MSceneAccess_GetAttachmentsParentsRecursive_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetAttachmentsParentsRecursive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAttachmentsParentsRecursive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MSceneAccess_GetAttachmentsParentsRecursive_pargs {
 public:


  virtual ~MSceneAccess_GetAttachmentsParentsRecursive_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAttachmentsParentsRecursive_result__isset {
  _MSceneAccess_GetAttachmentsParentsRecursive_result__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAttachmentsParentsRecursive_result__isset;

class MSceneAccess_GetAttachmentsParentsRecursive_result {
 public:

  MSceneAccess_GetAttachmentsParentsRecursive_result(const MSceneAccess_GetAttachmentsParentsRecursive_result&);
  MSceneAccess_GetAttachmentsParentsRecursive_result& operator=(const MSceneAccess_GetAttachmentsParentsRecursive_result&);
  MSceneAccess_GetAttachmentsParentsRecursive_result() {
  }

  virtual ~MSceneAccess_GetAttachmentsParentsRecursive_result() noexcept;
  std::vector< ::MMIStandard::MAttachment>  success;

  _MSceneAccess_GetAttachmentsParentsRecursive_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MAttachment> & val);

  bool operator == (const MSceneAccess_GetAttachmentsParentsRecursive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MSceneAccess_GetAttachmentsParentsRecursive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneAccess_GetAttachmentsParentsRecursive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MSceneAccess_GetAttachmentsParentsRecursive_presult__isset {
  _MSceneAccess_GetAttachmentsParentsRecursive_presult__isset() : success(false) {}
  bool success :1;
} _MSceneAccess_GetAttachmentsParentsRecursive_presult__isset;

class MSceneAccess_GetAttachmentsParentsRecursive_presult {
 public:


  virtual ~MSceneAccess_GetAttachmentsParentsRecursive_presult() noexcept;
  std::vector< ::MMIStandard::MAttachment> * success;

  _MSceneAccess_GetAttachmentsParentsRecursive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MSceneAccessClient : virtual public MSceneAccessIf, public MMIServiceBaseClient {
 public:
  MSceneAccessClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    MMIServiceBaseClient(prot, prot) {}
  MSceneAccessClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    MMIServiceBaseClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetSceneObjects(std::vector< ::MMIStandard::MSceneObject> & _return);
  void send_GetSceneObjects();
  void recv_GetSceneObjects(std::vector< ::MMIStandard::MSceneObject> & _return);
  void GetSceneObjectByID( ::MMIStandard::MSceneObject& _return, const std::string& id);
  void send_GetSceneObjectByID(const std::string& id);
  void recv_GetSceneObjectByID( ::MMIStandard::MSceneObject& _return);
  void GetSceneObjectByName( ::MMIStandard::MSceneObject& _return, const std::string& name);
  void send_GetSceneObjectByName(const std::string& name);
  void recv_GetSceneObjectByName( ::MMIStandard::MSceneObject& _return);
  void GetSceneObjectsInRange(std::vector< ::MMIStandard::MSceneObject> & _return, const  ::MMIStandard::MVector3& position, const double range);
  void send_GetSceneObjectsInRange(const  ::MMIStandard::MVector3& position, const double range);
  void recv_GetSceneObjectsInRange(std::vector< ::MMIStandard::MSceneObject> & _return);
  void GetColliders(std::vector< ::MMIStandard::MCollider> & _return);
  void send_GetColliders();
  void recv_GetColliders(std::vector< ::MMIStandard::MCollider> & _return);
  void GetColliderById( ::MMIStandard::MCollider& _return, const std::string& id);
  void send_GetColliderById(const std::string& id);
  void recv_GetColliderById( ::MMIStandard::MCollider& _return);
  void GetCollidersInRange(std::vector< ::MMIStandard::MCollider> & _return, const  ::MMIStandard::MVector3& position, const double range);
  void send_GetCollidersInRange(const  ::MMIStandard::MVector3& position, const double range);
  void recv_GetCollidersInRange(std::vector< ::MMIStandard::MCollider> & _return);
  void GetMeshes(std::vector< ::MMIStandard::MMesh> & _return);
  void send_GetMeshes();
  void recv_GetMeshes(std::vector< ::MMIStandard::MMesh> & _return);
  void GetMeshByID( ::MMIStandard::MMesh& _return, const std::string& id);
  void send_GetMeshByID(const std::string& id);
  void recv_GetMeshByID( ::MMIStandard::MMesh& _return);
  void GetTransforms(std::vector< ::MMIStandard::MTransform> & _return);
  void send_GetTransforms();
  void recv_GetTransforms(std::vector< ::MMIStandard::MTransform> & _return);
  void GetTransformByID( ::MMIStandard::MTransform& _return, const std::string& id);
  void send_GetTransformByID(const std::string& id);
  void recv_GetTransformByID( ::MMIStandard::MTransform& _return);
  void GetAvatars(std::vector< ::MMIStandard::MAvatar> & _return);
  void send_GetAvatars();
  void recv_GetAvatars(std::vector< ::MMIStandard::MAvatar> & _return);
  void GetAvatarByID( ::MMIStandard::MAvatar& _return, const std::string& id);
  void send_GetAvatarByID(const std::string& id);
  void recv_GetAvatarByID( ::MMIStandard::MAvatar& _return);
  void GetAvatarByName( ::MMIStandard::MAvatar& _return, const std::string& name);
  void send_GetAvatarByName(const std::string& name);
  void recv_GetAvatarByName( ::MMIStandard::MAvatar& _return);
  void GetAvatarsInRange(std::vector< ::MMIStandard::MAvatar> & _return, const  ::MMIStandard::MVector3& position, const double distance);
  void send_GetAvatarsInRange(const  ::MMIStandard::MVector3& position, const double distance);
  void recv_GetAvatarsInRange(std::vector< ::MMIStandard::MAvatar> & _return);
  double GetSimulationTime();
  void send_GetSimulationTime();
  double recv_GetSimulationTime();
  void GetSceneChanges( ::MMIStandard::MSceneUpdate& _return);
  void send_GetSceneChanges();
  void recv_GetSceneChanges( ::MMIStandard::MSceneUpdate& _return);
  void GetFullScene( ::MMIStandard::MSceneUpdate& _return);
  void send_GetFullScene();
  void recv_GetFullScene( ::MMIStandard::MSceneUpdate& _return);
  void GetNavigationMesh( ::MMIStandard::MNavigationMesh& _return);
  void send_GetNavigationMesh();
  void recv_GetNavigationMesh( ::MMIStandard::MNavigationMesh& _return);
  void GetData(std::string& _return, const std::string& fileFormat, const std::string& selection);
  void send_GetData(const std::string& fileFormat, const std::string& selection);
  void recv_GetData(std::string& _return);
  void GetAttachments(std::vector< ::MMIStandard::MAttachment> & _return);
  void send_GetAttachments();
  void recv_GetAttachments(std::vector< ::MMIStandard::MAttachment> & _return);
  void GetAttachmentsByID(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& id);
  void send_GetAttachmentsByID(const std::string& id);
  void recv_GetAttachmentsByID(std::vector< ::MMIStandard::MAttachment> & _return);
  void GetAttachmentsByName(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& name);
  void send_GetAttachmentsByName(const std::string& name);
  void recv_GetAttachmentsByName(std::vector< ::MMIStandard::MAttachment> & _return);
  void GetAttachmentsChildrenRecursive(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& id);
  void send_GetAttachmentsChildrenRecursive(const std::string& id);
  void recv_GetAttachmentsChildrenRecursive(std::vector< ::MMIStandard::MAttachment> & _return);
  void GetAttachmentsParentsRecursive(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& id);
  void send_GetAttachmentsParentsRecursive(const std::string& id);
  void recv_GetAttachmentsParentsRecursive(std::vector< ::MMIStandard::MAttachment> & _return);
};

class MSceneAccessProcessor : public MMIServiceBaseProcessor {
 protected:
  ::std::shared_ptr<MSceneAccessIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MSceneAccessProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetSceneObjects(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSceneObjectByID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSceneObjectByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSceneObjectsInRange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetColliders(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetColliderById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCollidersInRange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMeshes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMeshByID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTransforms(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTransformByID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAvatars(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAvatarByID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAvatarByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAvatarsInRange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSimulationTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSceneChanges(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetFullScene(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNavigationMesh(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAttachments(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAttachmentsByID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAttachmentsByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAttachmentsChildrenRecursive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAttachmentsParentsRecursive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MSceneAccessProcessor(::std::shared_ptr<MSceneAccessIf> iface) :
    MMIServiceBaseProcessor(iface),
    iface_(iface) {
    processMap_["GetSceneObjects"] = &MSceneAccessProcessor::process_GetSceneObjects;
    processMap_["GetSceneObjectByID"] = &MSceneAccessProcessor::process_GetSceneObjectByID;
    processMap_["GetSceneObjectByName"] = &MSceneAccessProcessor::process_GetSceneObjectByName;
    processMap_["GetSceneObjectsInRange"] = &MSceneAccessProcessor::process_GetSceneObjectsInRange;
    processMap_["GetColliders"] = &MSceneAccessProcessor::process_GetColliders;
    processMap_["GetColliderById"] = &MSceneAccessProcessor::process_GetColliderById;
    processMap_["GetCollidersInRange"] = &MSceneAccessProcessor::process_GetCollidersInRange;
    processMap_["GetMeshes"] = &MSceneAccessProcessor::process_GetMeshes;
    processMap_["GetMeshByID"] = &MSceneAccessProcessor::process_GetMeshByID;
    processMap_["GetTransforms"] = &MSceneAccessProcessor::process_GetTransforms;
    processMap_["GetTransformByID"] = &MSceneAccessProcessor::process_GetTransformByID;
    processMap_["GetAvatars"] = &MSceneAccessProcessor::process_GetAvatars;
    processMap_["GetAvatarByID"] = &MSceneAccessProcessor::process_GetAvatarByID;
    processMap_["GetAvatarByName"] = &MSceneAccessProcessor::process_GetAvatarByName;
    processMap_["GetAvatarsInRange"] = &MSceneAccessProcessor::process_GetAvatarsInRange;
    processMap_["GetSimulationTime"] = &MSceneAccessProcessor::process_GetSimulationTime;
    processMap_["GetSceneChanges"] = &MSceneAccessProcessor::process_GetSceneChanges;
    processMap_["GetFullScene"] = &MSceneAccessProcessor::process_GetFullScene;
    processMap_["GetNavigationMesh"] = &MSceneAccessProcessor::process_GetNavigationMesh;
    processMap_["GetData"] = &MSceneAccessProcessor::process_GetData;
    processMap_["GetAttachments"] = &MSceneAccessProcessor::process_GetAttachments;
    processMap_["GetAttachmentsByID"] = &MSceneAccessProcessor::process_GetAttachmentsByID;
    processMap_["GetAttachmentsByName"] = &MSceneAccessProcessor::process_GetAttachmentsByName;
    processMap_["GetAttachmentsChildrenRecursive"] = &MSceneAccessProcessor::process_GetAttachmentsChildrenRecursive;
    processMap_["GetAttachmentsParentsRecursive"] = &MSceneAccessProcessor::process_GetAttachmentsParentsRecursive;
  }

  virtual ~MSceneAccessProcessor() {}
};

class MSceneAccessProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MSceneAccessProcessorFactory(const ::std::shared_ptr< MSceneAccessIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MSceneAccessIfFactory > handlerFactory_;
};

class MSceneAccessMultiface : virtual public MSceneAccessIf, public MMIServiceBaseMultiface {
 public:
  MSceneAccessMultiface(std::vector<std::shared_ptr<MSceneAccessIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<MSceneAccessIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      MMIServiceBaseMultiface::add(*iter);
    }
  }
  virtual ~MSceneAccessMultiface() {}
 protected:
  std::vector<std::shared_ptr<MSceneAccessIf> > ifaces_;
  MSceneAccessMultiface() {}
  void add(::std::shared_ptr<MSceneAccessIf> iface) {
    MMIServiceBaseMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void GetSceneObjects(std::vector< ::MMIStandard::MSceneObject> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSceneObjects(_return);
    }
    ifaces_[i]->GetSceneObjects(_return);
    return;
  }

  void GetSceneObjectByID( ::MMIStandard::MSceneObject& _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSceneObjectByID(_return, id);
    }
    ifaces_[i]->GetSceneObjectByID(_return, id);
    return;
  }

  void GetSceneObjectByName( ::MMIStandard::MSceneObject& _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSceneObjectByName(_return, name);
    }
    ifaces_[i]->GetSceneObjectByName(_return, name);
    return;
  }

  void GetSceneObjectsInRange(std::vector< ::MMIStandard::MSceneObject> & _return, const  ::MMIStandard::MVector3& position, const double range) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSceneObjectsInRange(_return, position, range);
    }
    ifaces_[i]->GetSceneObjectsInRange(_return, position, range);
    return;
  }

  void GetColliders(std::vector< ::MMIStandard::MCollider> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetColliders(_return);
    }
    ifaces_[i]->GetColliders(_return);
    return;
  }

  void GetColliderById( ::MMIStandard::MCollider& _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetColliderById(_return, id);
    }
    ifaces_[i]->GetColliderById(_return, id);
    return;
  }

  void GetCollidersInRange(std::vector< ::MMIStandard::MCollider> & _return, const  ::MMIStandard::MVector3& position, const double range) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCollidersInRange(_return, position, range);
    }
    ifaces_[i]->GetCollidersInRange(_return, position, range);
    return;
  }

  void GetMeshes(std::vector< ::MMIStandard::MMesh> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMeshes(_return);
    }
    ifaces_[i]->GetMeshes(_return);
    return;
  }

  void GetMeshByID( ::MMIStandard::MMesh& _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMeshByID(_return, id);
    }
    ifaces_[i]->GetMeshByID(_return, id);
    return;
  }

  void GetTransforms(std::vector< ::MMIStandard::MTransform> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTransforms(_return);
    }
    ifaces_[i]->GetTransforms(_return);
    return;
  }

  void GetTransformByID( ::MMIStandard::MTransform& _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTransformByID(_return, id);
    }
    ifaces_[i]->GetTransformByID(_return, id);
    return;
  }

  void GetAvatars(std::vector< ::MMIStandard::MAvatar> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAvatars(_return);
    }
    ifaces_[i]->GetAvatars(_return);
    return;
  }

  void GetAvatarByID( ::MMIStandard::MAvatar& _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAvatarByID(_return, id);
    }
    ifaces_[i]->GetAvatarByID(_return, id);
    return;
  }

  void GetAvatarByName( ::MMIStandard::MAvatar& _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAvatarByName(_return, name);
    }
    ifaces_[i]->GetAvatarByName(_return, name);
    return;
  }

  void GetAvatarsInRange(std::vector< ::MMIStandard::MAvatar> & _return, const  ::MMIStandard::MVector3& position, const double distance) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAvatarsInRange(_return, position, distance);
    }
    ifaces_[i]->GetAvatarsInRange(_return, position, distance);
    return;
  }

  double GetSimulationTime() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSimulationTime();
    }
    return ifaces_[i]->GetSimulationTime();
  }

  void GetSceneChanges( ::MMIStandard::MSceneUpdate& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSceneChanges(_return);
    }
    ifaces_[i]->GetSceneChanges(_return);
    return;
  }

  void GetFullScene( ::MMIStandard::MSceneUpdate& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetFullScene(_return);
    }
    ifaces_[i]->GetFullScene(_return);
    return;
  }

  void GetNavigationMesh( ::MMIStandard::MNavigationMesh& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetNavigationMesh(_return);
    }
    ifaces_[i]->GetNavigationMesh(_return);
    return;
  }

  void GetData(std::string& _return, const std::string& fileFormat, const std::string& selection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetData(_return, fileFormat, selection);
    }
    ifaces_[i]->GetData(_return, fileFormat, selection);
    return;
  }

  void GetAttachments(std::vector< ::MMIStandard::MAttachment> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAttachments(_return);
    }
    ifaces_[i]->GetAttachments(_return);
    return;
  }

  void GetAttachmentsByID(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAttachmentsByID(_return, id);
    }
    ifaces_[i]->GetAttachmentsByID(_return, id);
    return;
  }

  void GetAttachmentsByName(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAttachmentsByName(_return, name);
    }
    ifaces_[i]->GetAttachmentsByName(_return, name);
    return;
  }

  void GetAttachmentsChildrenRecursive(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAttachmentsChildrenRecursive(_return, id);
    }
    ifaces_[i]->GetAttachmentsChildrenRecursive(_return, id);
    return;
  }

  void GetAttachmentsParentsRecursive(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAttachmentsParentsRecursive(_return, id);
    }
    ifaces_[i]->GetAttachmentsParentsRecursive(_return, id);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MSceneAccessConcurrentClient : virtual public MSceneAccessIf, public MMIServiceBaseConcurrentClient {
 public:
  MSceneAccessConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
    MMIServiceBaseConcurrentClient(prot, prot, sync) {}
  MSceneAccessConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :    MMIServiceBaseConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetSceneObjects(std::vector< ::MMIStandard::MSceneObject> & _return);
  int32_t send_GetSceneObjects();
  void recv_GetSceneObjects(std::vector< ::MMIStandard::MSceneObject> & _return, const int32_t seqid);
  void GetSceneObjectByID( ::MMIStandard::MSceneObject& _return, const std::string& id);
  int32_t send_GetSceneObjectByID(const std::string& id);
  void recv_GetSceneObjectByID( ::MMIStandard::MSceneObject& _return, const int32_t seqid);
  void GetSceneObjectByName( ::MMIStandard::MSceneObject& _return, const std::string& name);
  int32_t send_GetSceneObjectByName(const std::string& name);
  void recv_GetSceneObjectByName( ::MMIStandard::MSceneObject& _return, const int32_t seqid);
  void GetSceneObjectsInRange(std::vector< ::MMIStandard::MSceneObject> & _return, const  ::MMIStandard::MVector3& position, const double range);
  int32_t send_GetSceneObjectsInRange(const  ::MMIStandard::MVector3& position, const double range);
  void recv_GetSceneObjectsInRange(std::vector< ::MMIStandard::MSceneObject> & _return, const int32_t seqid);
  void GetColliders(std::vector< ::MMIStandard::MCollider> & _return);
  int32_t send_GetColliders();
  void recv_GetColliders(std::vector< ::MMIStandard::MCollider> & _return, const int32_t seqid);
  void GetColliderById( ::MMIStandard::MCollider& _return, const std::string& id);
  int32_t send_GetColliderById(const std::string& id);
  void recv_GetColliderById( ::MMIStandard::MCollider& _return, const int32_t seqid);
  void GetCollidersInRange(std::vector< ::MMIStandard::MCollider> & _return, const  ::MMIStandard::MVector3& position, const double range);
  int32_t send_GetCollidersInRange(const  ::MMIStandard::MVector3& position, const double range);
  void recv_GetCollidersInRange(std::vector< ::MMIStandard::MCollider> & _return, const int32_t seqid);
  void GetMeshes(std::vector< ::MMIStandard::MMesh> & _return);
  int32_t send_GetMeshes();
  void recv_GetMeshes(std::vector< ::MMIStandard::MMesh> & _return, const int32_t seqid);
  void GetMeshByID( ::MMIStandard::MMesh& _return, const std::string& id);
  int32_t send_GetMeshByID(const std::string& id);
  void recv_GetMeshByID( ::MMIStandard::MMesh& _return, const int32_t seqid);
  void GetTransforms(std::vector< ::MMIStandard::MTransform> & _return);
  int32_t send_GetTransforms();
  void recv_GetTransforms(std::vector< ::MMIStandard::MTransform> & _return, const int32_t seqid);
  void GetTransformByID( ::MMIStandard::MTransform& _return, const std::string& id);
  int32_t send_GetTransformByID(const std::string& id);
  void recv_GetTransformByID( ::MMIStandard::MTransform& _return, const int32_t seqid);
  void GetAvatars(std::vector< ::MMIStandard::MAvatar> & _return);
  int32_t send_GetAvatars();
  void recv_GetAvatars(std::vector< ::MMIStandard::MAvatar> & _return, const int32_t seqid);
  void GetAvatarByID( ::MMIStandard::MAvatar& _return, const std::string& id);
  int32_t send_GetAvatarByID(const std::string& id);
  void recv_GetAvatarByID( ::MMIStandard::MAvatar& _return, const int32_t seqid);
  void GetAvatarByName( ::MMIStandard::MAvatar& _return, const std::string& name);
  int32_t send_GetAvatarByName(const std::string& name);
  void recv_GetAvatarByName( ::MMIStandard::MAvatar& _return, const int32_t seqid);
  void GetAvatarsInRange(std::vector< ::MMIStandard::MAvatar> & _return, const  ::MMIStandard::MVector3& position, const double distance);
  int32_t send_GetAvatarsInRange(const  ::MMIStandard::MVector3& position, const double distance);
  void recv_GetAvatarsInRange(std::vector< ::MMIStandard::MAvatar> & _return, const int32_t seqid);
  double GetSimulationTime();
  int32_t send_GetSimulationTime();
  double recv_GetSimulationTime(const int32_t seqid);
  void GetSceneChanges( ::MMIStandard::MSceneUpdate& _return);
  int32_t send_GetSceneChanges();
  void recv_GetSceneChanges( ::MMIStandard::MSceneUpdate& _return, const int32_t seqid);
  void GetFullScene( ::MMIStandard::MSceneUpdate& _return);
  int32_t send_GetFullScene();
  void recv_GetFullScene( ::MMIStandard::MSceneUpdate& _return, const int32_t seqid);
  void GetNavigationMesh( ::MMIStandard::MNavigationMesh& _return);
  int32_t send_GetNavigationMesh();
  void recv_GetNavigationMesh( ::MMIStandard::MNavigationMesh& _return, const int32_t seqid);
  void GetData(std::string& _return, const std::string& fileFormat, const std::string& selection);
  int32_t send_GetData(const std::string& fileFormat, const std::string& selection);
  void recv_GetData(std::string& _return, const int32_t seqid);
  void GetAttachments(std::vector< ::MMIStandard::MAttachment> & _return);
  int32_t send_GetAttachments();
  void recv_GetAttachments(std::vector< ::MMIStandard::MAttachment> & _return, const int32_t seqid);
  void GetAttachmentsByID(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& id);
  int32_t send_GetAttachmentsByID(const std::string& id);
  void recv_GetAttachmentsByID(std::vector< ::MMIStandard::MAttachment> & _return, const int32_t seqid);
  void GetAttachmentsByName(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& name);
  int32_t send_GetAttachmentsByName(const std::string& name);
  void recv_GetAttachmentsByName(std::vector< ::MMIStandard::MAttachment> & _return, const int32_t seqid);
  void GetAttachmentsChildrenRecursive(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& id);
  int32_t send_GetAttachmentsChildrenRecursive(const std::string& id);
  void recv_GetAttachmentsChildrenRecursive(std::vector< ::MMIStandard::MAttachment> & _return, const int32_t seqid);
  void GetAttachmentsParentsRecursive(std::vector< ::MMIStandard::MAttachment> & _return, const std::string& id);
  int32_t send_GetAttachmentsParentsRecursive(const std::string& id);
  void recv_GetAttachmentsParentsRecursive(std::vector< ::MMIStandard::MAttachment> & _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
