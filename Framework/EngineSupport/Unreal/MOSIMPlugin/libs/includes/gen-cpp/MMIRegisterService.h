/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MMIRegisterService_H
#define MMIRegisterService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "register_types.h"

namespace MMIStandard {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MMIRegisterServiceIf {
 public:
  virtual ~MMIRegisterServiceIf() {}
  virtual void GetRegisteredAdapters(std::vector<MAdapterDescription> & _return, const std::string& sessionID) = 0;
  virtual void GetRegisteredServices(std::vector< ::MMIStandard::MServiceDescription> & _return, const std::string& sessionID) = 0;
  virtual void GetAvailableMMUs(std::map< ::MMIStandard::MMUDescription, std::vector< ::MMIStandard::MIPAddress> > & _return, const std::string& sessionID) = 0;
  virtual void RegisterAdapter( ::MMIStandard::MBoolResponse& _return, const MAdapterDescription& adapterDescription) = 0;
  virtual void UnregisterAdapter( ::MMIStandard::MBoolResponse& _return, const MAdapterDescription& adapterDescription) = 0;
  virtual void RegisterService( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MServiceDescription& serviceDescription) = 0;
  virtual void UnregisterService( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MServiceDescription& serviceDescription) = 0;
  virtual void CreateSessionID(std::string& _return, const std::map<std::string, std::string> & properties) = 0;
};

class MMIRegisterServiceIfFactory {
 public:
  typedef MMIRegisterServiceIf Handler;

  virtual ~MMIRegisterServiceIfFactory() {}

  virtual MMIRegisterServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MMIRegisterServiceIf* /* handler */) = 0;
};

class MMIRegisterServiceIfSingletonFactory : virtual public MMIRegisterServiceIfFactory {
 public:
  MMIRegisterServiceIfSingletonFactory(const ::std::shared_ptr<MMIRegisterServiceIf>& iface) : iface_(iface) {}
  virtual ~MMIRegisterServiceIfSingletonFactory() {}

  virtual MMIRegisterServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MMIRegisterServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MMIRegisterServiceIf> iface_;
};

class MMIRegisterServiceNull : virtual public MMIRegisterServiceIf {
 public:
  virtual ~MMIRegisterServiceNull() {}
  void GetRegisteredAdapters(std::vector<MAdapterDescription> & /* _return */, const std::string& /* sessionID */) {
    return;
  }
  void GetRegisteredServices(std::vector< ::MMIStandard::MServiceDescription> & /* _return */, const std::string& /* sessionID */) {
    return;
  }
  void GetAvailableMMUs(std::map< ::MMIStandard::MMUDescription, std::vector< ::MMIStandard::MIPAddress> > & /* _return */, const std::string& /* sessionID */) {
    return;
  }
  void RegisterAdapter( ::MMIStandard::MBoolResponse& /* _return */, const MAdapterDescription& /* adapterDescription */) {
    return;
  }
  void UnregisterAdapter( ::MMIStandard::MBoolResponse& /* _return */, const MAdapterDescription& /* adapterDescription */) {
    return;
  }
  void RegisterService( ::MMIStandard::MBoolResponse& /* _return */, const  ::MMIStandard::MServiceDescription& /* serviceDescription */) {
    return;
  }
  void UnregisterService( ::MMIStandard::MBoolResponse& /* _return */, const  ::MMIStandard::MServiceDescription& /* serviceDescription */) {
    return;
  }
  void CreateSessionID(std::string& /* _return */, const std::map<std::string, std::string> & /* properties */) {
    return;
  }
};

typedef struct _MMIRegisterService_GetRegisteredAdapters_args__isset {
  _MMIRegisterService_GetRegisteredAdapters_args__isset() : sessionID(false) {}
  bool sessionID :1;
} _MMIRegisterService_GetRegisteredAdapters_args__isset;

class MMIRegisterService_GetRegisteredAdapters_args {
 public:

  MMIRegisterService_GetRegisteredAdapters_args(const MMIRegisterService_GetRegisteredAdapters_args&);
  MMIRegisterService_GetRegisteredAdapters_args& operator=(const MMIRegisterService_GetRegisteredAdapters_args&);
  MMIRegisterService_GetRegisteredAdapters_args() : sessionID() {
  }

  virtual ~MMIRegisterService_GetRegisteredAdapters_args() noexcept;
  std::string sessionID;

  _MMIRegisterService_GetRegisteredAdapters_args__isset __isset;

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIRegisterService_GetRegisteredAdapters_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIRegisterService_GetRegisteredAdapters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIRegisterService_GetRegisteredAdapters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIRegisterService_GetRegisteredAdapters_pargs {
 public:


  virtual ~MMIRegisterService_GetRegisteredAdapters_pargs() noexcept;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIRegisterService_GetRegisteredAdapters_result__isset {
  _MMIRegisterService_GetRegisteredAdapters_result__isset() : success(false) {}
  bool success :1;
} _MMIRegisterService_GetRegisteredAdapters_result__isset;

class MMIRegisterService_GetRegisteredAdapters_result {
 public:

  MMIRegisterService_GetRegisteredAdapters_result(const MMIRegisterService_GetRegisteredAdapters_result&);
  MMIRegisterService_GetRegisteredAdapters_result& operator=(const MMIRegisterService_GetRegisteredAdapters_result&);
  MMIRegisterService_GetRegisteredAdapters_result() {
  }

  virtual ~MMIRegisterService_GetRegisteredAdapters_result() noexcept;
  std::vector<MAdapterDescription>  success;

  _MMIRegisterService_GetRegisteredAdapters_result__isset __isset;

  void __set_success(const std::vector<MAdapterDescription> & val);

  bool operator == (const MMIRegisterService_GetRegisteredAdapters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIRegisterService_GetRegisteredAdapters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIRegisterService_GetRegisteredAdapters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIRegisterService_GetRegisteredAdapters_presult__isset {
  _MMIRegisterService_GetRegisteredAdapters_presult__isset() : success(false) {}
  bool success :1;
} _MMIRegisterService_GetRegisteredAdapters_presult__isset;

class MMIRegisterService_GetRegisteredAdapters_presult {
 public:


  virtual ~MMIRegisterService_GetRegisteredAdapters_presult() noexcept;
  std::vector<MAdapterDescription> * success;

  _MMIRegisterService_GetRegisteredAdapters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIRegisterService_GetRegisteredServices_args__isset {
  _MMIRegisterService_GetRegisteredServices_args__isset() : sessionID(false) {}
  bool sessionID :1;
} _MMIRegisterService_GetRegisteredServices_args__isset;

class MMIRegisterService_GetRegisteredServices_args {
 public:

  MMIRegisterService_GetRegisteredServices_args(const MMIRegisterService_GetRegisteredServices_args&);
  MMIRegisterService_GetRegisteredServices_args& operator=(const MMIRegisterService_GetRegisteredServices_args&);
  MMIRegisterService_GetRegisteredServices_args() : sessionID() {
  }

  virtual ~MMIRegisterService_GetRegisteredServices_args() noexcept;
  std::string sessionID;

  _MMIRegisterService_GetRegisteredServices_args__isset __isset;

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIRegisterService_GetRegisteredServices_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIRegisterService_GetRegisteredServices_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIRegisterService_GetRegisteredServices_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIRegisterService_GetRegisteredServices_pargs {
 public:


  virtual ~MMIRegisterService_GetRegisteredServices_pargs() noexcept;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIRegisterService_GetRegisteredServices_result__isset {
  _MMIRegisterService_GetRegisteredServices_result__isset() : success(false) {}
  bool success :1;
} _MMIRegisterService_GetRegisteredServices_result__isset;

class MMIRegisterService_GetRegisteredServices_result {
 public:

  MMIRegisterService_GetRegisteredServices_result(const MMIRegisterService_GetRegisteredServices_result&);
  MMIRegisterService_GetRegisteredServices_result& operator=(const MMIRegisterService_GetRegisteredServices_result&);
  MMIRegisterService_GetRegisteredServices_result() {
  }

  virtual ~MMIRegisterService_GetRegisteredServices_result() noexcept;
  std::vector< ::MMIStandard::MServiceDescription>  success;

  _MMIRegisterService_GetRegisteredServices_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MServiceDescription> & val);

  bool operator == (const MMIRegisterService_GetRegisteredServices_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIRegisterService_GetRegisteredServices_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIRegisterService_GetRegisteredServices_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIRegisterService_GetRegisteredServices_presult__isset {
  _MMIRegisterService_GetRegisteredServices_presult__isset() : success(false) {}
  bool success :1;
} _MMIRegisterService_GetRegisteredServices_presult__isset;

class MMIRegisterService_GetRegisteredServices_presult {
 public:


  virtual ~MMIRegisterService_GetRegisteredServices_presult() noexcept;
  std::vector< ::MMIStandard::MServiceDescription> * success;

  _MMIRegisterService_GetRegisteredServices_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIRegisterService_GetAvailableMMUs_args__isset {
  _MMIRegisterService_GetAvailableMMUs_args__isset() : sessionID(false) {}
  bool sessionID :1;
} _MMIRegisterService_GetAvailableMMUs_args__isset;

class MMIRegisterService_GetAvailableMMUs_args {
 public:

  MMIRegisterService_GetAvailableMMUs_args(const MMIRegisterService_GetAvailableMMUs_args&);
  MMIRegisterService_GetAvailableMMUs_args& operator=(const MMIRegisterService_GetAvailableMMUs_args&);
  MMIRegisterService_GetAvailableMMUs_args() : sessionID() {
  }

  virtual ~MMIRegisterService_GetAvailableMMUs_args() noexcept;
  std::string sessionID;

  _MMIRegisterService_GetAvailableMMUs_args__isset __isset;

  void __set_sessionID(const std::string& val);

  bool operator == (const MMIRegisterService_GetAvailableMMUs_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const MMIRegisterService_GetAvailableMMUs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIRegisterService_GetAvailableMMUs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIRegisterService_GetAvailableMMUs_pargs {
 public:


  virtual ~MMIRegisterService_GetAvailableMMUs_pargs() noexcept;
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIRegisterService_GetAvailableMMUs_result__isset {
  _MMIRegisterService_GetAvailableMMUs_result__isset() : success(false) {}
  bool success :1;
} _MMIRegisterService_GetAvailableMMUs_result__isset;

class MMIRegisterService_GetAvailableMMUs_result {
 public:

  MMIRegisterService_GetAvailableMMUs_result(const MMIRegisterService_GetAvailableMMUs_result&);
  MMIRegisterService_GetAvailableMMUs_result& operator=(const MMIRegisterService_GetAvailableMMUs_result&);
  MMIRegisterService_GetAvailableMMUs_result() {
  }

  virtual ~MMIRegisterService_GetAvailableMMUs_result() noexcept;
  std::map< ::MMIStandard::MMUDescription, std::vector< ::MMIStandard::MIPAddress> >  success;

  _MMIRegisterService_GetAvailableMMUs_result__isset __isset;

  void __set_success(const std::map< ::MMIStandard::MMUDescription, std::vector< ::MMIStandard::MIPAddress> > & val);

  bool operator == (const MMIRegisterService_GetAvailableMMUs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIRegisterService_GetAvailableMMUs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIRegisterService_GetAvailableMMUs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIRegisterService_GetAvailableMMUs_presult__isset {
  _MMIRegisterService_GetAvailableMMUs_presult__isset() : success(false) {}
  bool success :1;
} _MMIRegisterService_GetAvailableMMUs_presult__isset;

class MMIRegisterService_GetAvailableMMUs_presult {
 public:


  virtual ~MMIRegisterService_GetAvailableMMUs_presult() noexcept;
  std::map< ::MMIStandard::MMUDescription, std::vector< ::MMIStandard::MIPAddress> > * success;

  _MMIRegisterService_GetAvailableMMUs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIRegisterService_RegisterAdapter_args__isset {
  _MMIRegisterService_RegisterAdapter_args__isset() : adapterDescription(false) {}
  bool adapterDescription :1;
} _MMIRegisterService_RegisterAdapter_args__isset;

class MMIRegisterService_RegisterAdapter_args {
 public:

  MMIRegisterService_RegisterAdapter_args(const MMIRegisterService_RegisterAdapter_args&);
  MMIRegisterService_RegisterAdapter_args& operator=(const MMIRegisterService_RegisterAdapter_args&);
  MMIRegisterService_RegisterAdapter_args() {
  }

  virtual ~MMIRegisterService_RegisterAdapter_args() noexcept;
  MAdapterDescription adapterDescription;

  _MMIRegisterService_RegisterAdapter_args__isset __isset;

  void __set_adapterDescription(const MAdapterDescription& val);

  bool operator == (const MMIRegisterService_RegisterAdapter_args & rhs) const
  {
    if (!(adapterDescription == rhs.adapterDescription))
      return false;
    return true;
  }
  bool operator != (const MMIRegisterService_RegisterAdapter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIRegisterService_RegisterAdapter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIRegisterService_RegisterAdapter_pargs {
 public:


  virtual ~MMIRegisterService_RegisterAdapter_pargs() noexcept;
  const MAdapterDescription* adapterDescription;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIRegisterService_RegisterAdapter_result__isset {
  _MMIRegisterService_RegisterAdapter_result__isset() : success(false) {}
  bool success :1;
} _MMIRegisterService_RegisterAdapter_result__isset;

class MMIRegisterService_RegisterAdapter_result {
 public:

  MMIRegisterService_RegisterAdapter_result(const MMIRegisterService_RegisterAdapter_result&);
  MMIRegisterService_RegisterAdapter_result& operator=(const MMIRegisterService_RegisterAdapter_result&);
  MMIRegisterService_RegisterAdapter_result() {
  }

  virtual ~MMIRegisterService_RegisterAdapter_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MMIRegisterService_RegisterAdapter_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MMIRegisterService_RegisterAdapter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIRegisterService_RegisterAdapter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIRegisterService_RegisterAdapter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIRegisterService_RegisterAdapter_presult__isset {
  _MMIRegisterService_RegisterAdapter_presult__isset() : success(false) {}
  bool success :1;
} _MMIRegisterService_RegisterAdapter_presult__isset;

class MMIRegisterService_RegisterAdapter_presult {
 public:


  virtual ~MMIRegisterService_RegisterAdapter_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MMIRegisterService_RegisterAdapter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIRegisterService_UnregisterAdapter_args__isset {
  _MMIRegisterService_UnregisterAdapter_args__isset() : adapterDescription(false) {}
  bool adapterDescription :1;
} _MMIRegisterService_UnregisterAdapter_args__isset;

class MMIRegisterService_UnregisterAdapter_args {
 public:

  MMIRegisterService_UnregisterAdapter_args(const MMIRegisterService_UnregisterAdapter_args&);
  MMIRegisterService_UnregisterAdapter_args& operator=(const MMIRegisterService_UnregisterAdapter_args&);
  MMIRegisterService_UnregisterAdapter_args() {
  }

  virtual ~MMIRegisterService_UnregisterAdapter_args() noexcept;
  MAdapterDescription adapterDescription;

  _MMIRegisterService_UnregisterAdapter_args__isset __isset;

  void __set_adapterDescription(const MAdapterDescription& val);

  bool operator == (const MMIRegisterService_UnregisterAdapter_args & rhs) const
  {
    if (!(adapterDescription == rhs.adapterDescription))
      return false;
    return true;
  }
  bool operator != (const MMIRegisterService_UnregisterAdapter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIRegisterService_UnregisterAdapter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIRegisterService_UnregisterAdapter_pargs {
 public:


  virtual ~MMIRegisterService_UnregisterAdapter_pargs() noexcept;
  const MAdapterDescription* adapterDescription;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIRegisterService_UnregisterAdapter_result__isset {
  _MMIRegisterService_UnregisterAdapter_result__isset() : success(false) {}
  bool success :1;
} _MMIRegisterService_UnregisterAdapter_result__isset;

class MMIRegisterService_UnregisterAdapter_result {
 public:

  MMIRegisterService_UnregisterAdapter_result(const MMIRegisterService_UnregisterAdapter_result&);
  MMIRegisterService_UnregisterAdapter_result& operator=(const MMIRegisterService_UnregisterAdapter_result&);
  MMIRegisterService_UnregisterAdapter_result() {
  }

  virtual ~MMIRegisterService_UnregisterAdapter_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MMIRegisterService_UnregisterAdapter_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MMIRegisterService_UnregisterAdapter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIRegisterService_UnregisterAdapter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIRegisterService_UnregisterAdapter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIRegisterService_UnregisterAdapter_presult__isset {
  _MMIRegisterService_UnregisterAdapter_presult__isset() : success(false) {}
  bool success :1;
} _MMIRegisterService_UnregisterAdapter_presult__isset;

class MMIRegisterService_UnregisterAdapter_presult {
 public:


  virtual ~MMIRegisterService_UnregisterAdapter_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MMIRegisterService_UnregisterAdapter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIRegisterService_RegisterService_args__isset {
  _MMIRegisterService_RegisterService_args__isset() : serviceDescription(false) {}
  bool serviceDescription :1;
} _MMIRegisterService_RegisterService_args__isset;

class MMIRegisterService_RegisterService_args {
 public:

  MMIRegisterService_RegisterService_args(const MMIRegisterService_RegisterService_args&);
  MMIRegisterService_RegisterService_args& operator=(const MMIRegisterService_RegisterService_args&);
  MMIRegisterService_RegisterService_args() {
  }

  virtual ~MMIRegisterService_RegisterService_args() noexcept;
   ::MMIStandard::MServiceDescription serviceDescription;

  _MMIRegisterService_RegisterService_args__isset __isset;

  void __set_serviceDescription(const  ::MMIStandard::MServiceDescription& val);

  bool operator == (const MMIRegisterService_RegisterService_args & rhs) const
  {
    if (!(serviceDescription == rhs.serviceDescription))
      return false;
    return true;
  }
  bool operator != (const MMIRegisterService_RegisterService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIRegisterService_RegisterService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIRegisterService_RegisterService_pargs {
 public:


  virtual ~MMIRegisterService_RegisterService_pargs() noexcept;
  const  ::MMIStandard::MServiceDescription* serviceDescription;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIRegisterService_RegisterService_result__isset {
  _MMIRegisterService_RegisterService_result__isset() : success(false) {}
  bool success :1;
} _MMIRegisterService_RegisterService_result__isset;

class MMIRegisterService_RegisterService_result {
 public:

  MMIRegisterService_RegisterService_result(const MMIRegisterService_RegisterService_result&);
  MMIRegisterService_RegisterService_result& operator=(const MMIRegisterService_RegisterService_result&);
  MMIRegisterService_RegisterService_result() {
  }

  virtual ~MMIRegisterService_RegisterService_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MMIRegisterService_RegisterService_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MMIRegisterService_RegisterService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIRegisterService_RegisterService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIRegisterService_RegisterService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIRegisterService_RegisterService_presult__isset {
  _MMIRegisterService_RegisterService_presult__isset() : success(false) {}
  bool success :1;
} _MMIRegisterService_RegisterService_presult__isset;

class MMIRegisterService_RegisterService_presult {
 public:


  virtual ~MMIRegisterService_RegisterService_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MMIRegisterService_RegisterService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIRegisterService_UnregisterService_args__isset {
  _MMIRegisterService_UnregisterService_args__isset() : serviceDescription(false) {}
  bool serviceDescription :1;
} _MMIRegisterService_UnregisterService_args__isset;

class MMIRegisterService_UnregisterService_args {
 public:

  MMIRegisterService_UnregisterService_args(const MMIRegisterService_UnregisterService_args&);
  MMIRegisterService_UnregisterService_args& operator=(const MMIRegisterService_UnregisterService_args&);
  MMIRegisterService_UnregisterService_args() {
  }

  virtual ~MMIRegisterService_UnregisterService_args() noexcept;
   ::MMIStandard::MServiceDescription serviceDescription;

  _MMIRegisterService_UnregisterService_args__isset __isset;

  void __set_serviceDescription(const  ::MMIStandard::MServiceDescription& val);

  bool operator == (const MMIRegisterService_UnregisterService_args & rhs) const
  {
    if (!(serviceDescription == rhs.serviceDescription))
      return false;
    return true;
  }
  bool operator != (const MMIRegisterService_UnregisterService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIRegisterService_UnregisterService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIRegisterService_UnregisterService_pargs {
 public:


  virtual ~MMIRegisterService_UnregisterService_pargs() noexcept;
  const  ::MMIStandard::MServiceDescription* serviceDescription;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIRegisterService_UnregisterService_result__isset {
  _MMIRegisterService_UnregisterService_result__isset() : success(false) {}
  bool success :1;
} _MMIRegisterService_UnregisterService_result__isset;

class MMIRegisterService_UnregisterService_result {
 public:

  MMIRegisterService_UnregisterService_result(const MMIRegisterService_UnregisterService_result&);
  MMIRegisterService_UnregisterService_result& operator=(const MMIRegisterService_UnregisterService_result&);
  MMIRegisterService_UnregisterService_result() {
  }

  virtual ~MMIRegisterService_UnregisterService_result() noexcept;
   ::MMIStandard::MBoolResponse success;

  _MMIRegisterService_UnregisterService_result__isset __isset;

  void __set_success(const  ::MMIStandard::MBoolResponse& val);

  bool operator == (const MMIRegisterService_UnregisterService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIRegisterService_UnregisterService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIRegisterService_UnregisterService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIRegisterService_UnregisterService_presult__isset {
  _MMIRegisterService_UnregisterService_presult__isset() : success(false) {}
  bool success :1;
} _MMIRegisterService_UnregisterService_presult__isset;

class MMIRegisterService_UnregisterService_presult {
 public:


  virtual ~MMIRegisterService_UnregisterService_presult() noexcept;
   ::MMIStandard::MBoolResponse* success;

  _MMIRegisterService_UnregisterService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MMIRegisterService_CreateSessionID_args__isset {
  _MMIRegisterService_CreateSessionID_args__isset() : properties(false) {}
  bool properties :1;
} _MMIRegisterService_CreateSessionID_args__isset;

class MMIRegisterService_CreateSessionID_args {
 public:

  MMIRegisterService_CreateSessionID_args(const MMIRegisterService_CreateSessionID_args&);
  MMIRegisterService_CreateSessionID_args& operator=(const MMIRegisterService_CreateSessionID_args&);
  MMIRegisterService_CreateSessionID_args() {
  }

  virtual ~MMIRegisterService_CreateSessionID_args() noexcept;
  std::map<std::string, std::string>  properties;

  _MMIRegisterService_CreateSessionID_args__isset __isset;

  void __set_properties(const std::map<std::string, std::string> & val);

  bool operator == (const MMIRegisterService_CreateSessionID_args & rhs) const
  {
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const MMIRegisterService_CreateSessionID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIRegisterService_CreateSessionID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MMIRegisterService_CreateSessionID_pargs {
 public:


  virtual ~MMIRegisterService_CreateSessionID_pargs() noexcept;
  const std::map<std::string, std::string> * properties;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIRegisterService_CreateSessionID_result__isset {
  _MMIRegisterService_CreateSessionID_result__isset() : success(false) {}
  bool success :1;
} _MMIRegisterService_CreateSessionID_result__isset;

class MMIRegisterService_CreateSessionID_result {
 public:

  MMIRegisterService_CreateSessionID_result(const MMIRegisterService_CreateSessionID_result&);
  MMIRegisterService_CreateSessionID_result& operator=(const MMIRegisterService_CreateSessionID_result&);
  MMIRegisterService_CreateSessionID_result() : success() {
  }

  virtual ~MMIRegisterService_CreateSessionID_result() noexcept;
  std::string success;

  _MMIRegisterService_CreateSessionID_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MMIRegisterService_CreateSessionID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MMIRegisterService_CreateSessionID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMIRegisterService_CreateSessionID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MMIRegisterService_CreateSessionID_presult__isset {
  _MMIRegisterService_CreateSessionID_presult__isset() : success(false) {}
  bool success :1;
} _MMIRegisterService_CreateSessionID_presult__isset;

class MMIRegisterService_CreateSessionID_presult {
 public:


  virtual ~MMIRegisterService_CreateSessionID_presult() noexcept;
  std::string* success;

  _MMIRegisterService_CreateSessionID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MMIRegisterServiceClient : virtual public MMIRegisterServiceIf {
 public:
  MMIRegisterServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MMIRegisterServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetRegisteredAdapters(std::vector<MAdapterDescription> & _return, const std::string& sessionID);
  void send_GetRegisteredAdapters(const std::string& sessionID);
  void recv_GetRegisteredAdapters(std::vector<MAdapterDescription> & _return);
  void GetRegisteredServices(std::vector< ::MMIStandard::MServiceDescription> & _return, const std::string& sessionID);
  void send_GetRegisteredServices(const std::string& sessionID);
  void recv_GetRegisteredServices(std::vector< ::MMIStandard::MServiceDescription> & _return);
  void GetAvailableMMUs(std::map< ::MMIStandard::MMUDescription, std::vector< ::MMIStandard::MIPAddress> > & _return, const std::string& sessionID);
  void send_GetAvailableMMUs(const std::string& sessionID);
  void recv_GetAvailableMMUs(std::map< ::MMIStandard::MMUDescription, std::vector< ::MMIStandard::MIPAddress> > & _return);
  void RegisterAdapter( ::MMIStandard::MBoolResponse& _return, const MAdapterDescription& adapterDescription);
  void send_RegisterAdapter(const MAdapterDescription& adapterDescription);
  void recv_RegisterAdapter( ::MMIStandard::MBoolResponse& _return);
  void UnregisterAdapter( ::MMIStandard::MBoolResponse& _return, const MAdapterDescription& adapterDescription);
  void send_UnregisterAdapter(const MAdapterDescription& adapterDescription);
  void recv_UnregisterAdapter( ::MMIStandard::MBoolResponse& _return);
  void RegisterService( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MServiceDescription& serviceDescription);
  void send_RegisterService(const  ::MMIStandard::MServiceDescription& serviceDescription);
  void recv_RegisterService( ::MMIStandard::MBoolResponse& _return);
  void UnregisterService( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MServiceDescription& serviceDescription);
  void send_UnregisterService(const  ::MMIStandard::MServiceDescription& serviceDescription);
  void recv_UnregisterService( ::MMIStandard::MBoolResponse& _return);
  void CreateSessionID(std::string& _return, const std::map<std::string, std::string> & properties);
  void send_CreateSessionID(const std::map<std::string, std::string> & properties);
  void recv_CreateSessionID(std::string& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MMIRegisterServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<MMIRegisterServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MMIRegisterServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetRegisteredAdapters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRegisteredServices(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAvailableMMUs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RegisterAdapter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UnregisterAdapter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RegisterService(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UnregisterService(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateSessionID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MMIRegisterServiceProcessor(::std::shared_ptr<MMIRegisterServiceIf> iface) :
    iface_(iface) {
    processMap_["GetRegisteredAdapters"] = &MMIRegisterServiceProcessor::process_GetRegisteredAdapters;
    processMap_["GetRegisteredServices"] = &MMIRegisterServiceProcessor::process_GetRegisteredServices;
    processMap_["GetAvailableMMUs"] = &MMIRegisterServiceProcessor::process_GetAvailableMMUs;
    processMap_["RegisterAdapter"] = &MMIRegisterServiceProcessor::process_RegisterAdapter;
    processMap_["UnregisterAdapter"] = &MMIRegisterServiceProcessor::process_UnregisterAdapter;
    processMap_["RegisterService"] = &MMIRegisterServiceProcessor::process_RegisterService;
    processMap_["UnregisterService"] = &MMIRegisterServiceProcessor::process_UnregisterService;
    processMap_["CreateSessionID"] = &MMIRegisterServiceProcessor::process_CreateSessionID;
  }

  virtual ~MMIRegisterServiceProcessor() {}
};

class MMIRegisterServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MMIRegisterServiceProcessorFactory(const ::std::shared_ptr< MMIRegisterServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MMIRegisterServiceIfFactory > handlerFactory_;
};

class MMIRegisterServiceMultiface : virtual public MMIRegisterServiceIf {
 public:
  MMIRegisterServiceMultiface(std::vector<std::shared_ptr<MMIRegisterServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MMIRegisterServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<MMIRegisterServiceIf> > ifaces_;
  MMIRegisterServiceMultiface() {}
  void add(::std::shared_ptr<MMIRegisterServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetRegisteredAdapters(std::vector<MAdapterDescription> & _return, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRegisteredAdapters(_return, sessionID);
    }
    ifaces_[i]->GetRegisteredAdapters(_return, sessionID);
    return;
  }

  void GetRegisteredServices(std::vector< ::MMIStandard::MServiceDescription> & _return, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRegisteredServices(_return, sessionID);
    }
    ifaces_[i]->GetRegisteredServices(_return, sessionID);
    return;
  }

  void GetAvailableMMUs(std::map< ::MMIStandard::MMUDescription, std::vector< ::MMIStandard::MIPAddress> > & _return, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAvailableMMUs(_return, sessionID);
    }
    ifaces_[i]->GetAvailableMMUs(_return, sessionID);
    return;
  }

  void RegisterAdapter( ::MMIStandard::MBoolResponse& _return, const MAdapterDescription& adapterDescription) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegisterAdapter(_return, adapterDescription);
    }
    ifaces_[i]->RegisterAdapter(_return, adapterDescription);
    return;
  }

  void UnregisterAdapter( ::MMIStandard::MBoolResponse& _return, const MAdapterDescription& adapterDescription) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UnregisterAdapter(_return, adapterDescription);
    }
    ifaces_[i]->UnregisterAdapter(_return, adapterDescription);
    return;
  }

  void RegisterService( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MServiceDescription& serviceDescription) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegisterService(_return, serviceDescription);
    }
    ifaces_[i]->RegisterService(_return, serviceDescription);
    return;
  }

  void UnregisterService( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MServiceDescription& serviceDescription) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UnregisterService(_return, serviceDescription);
    }
    ifaces_[i]->UnregisterService(_return, serviceDescription);
    return;
  }

  void CreateSessionID(std::string& _return, const std::map<std::string, std::string> & properties) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateSessionID(_return, properties);
    }
    ifaces_[i]->CreateSessionID(_return, properties);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MMIRegisterServiceConcurrentClient : virtual public MMIRegisterServiceIf {
 public:
  MMIRegisterServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  MMIRegisterServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetRegisteredAdapters(std::vector<MAdapterDescription> & _return, const std::string& sessionID);
  int32_t send_GetRegisteredAdapters(const std::string& sessionID);
  void recv_GetRegisteredAdapters(std::vector<MAdapterDescription> & _return, const int32_t seqid);
  void GetRegisteredServices(std::vector< ::MMIStandard::MServiceDescription> & _return, const std::string& sessionID);
  int32_t send_GetRegisteredServices(const std::string& sessionID);
  void recv_GetRegisteredServices(std::vector< ::MMIStandard::MServiceDescription> & _return, const int32_t seqid);
  void GetAvailableMMUs(std::map< ::MMIStandard::MMUDescription, std::vector< ::MMIStandard::MIPAddress> > & _return, const std::string& sessionID);
  int32_t send_GetAvailableMMUs(const std::string& sessionID);
  void recv_GetAvailableMMUs(std::map< ::MMIStandard::MMUDescription, std::vector< ::MMIStandard::MIPAddress> > & _return, const int32_t seqid);
  void RegisterAdapter( ::MMIStandard::MBoolResponse& _return, const MAdapterDescription& adapterDescription);
  int32_t send_RegisterAdapter(const MAdapterDescription& adapterDescription);
  void recv_RegisterAdapter( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void UnregisterAdapter( ::MMIStandard::MBoolResponse& _return, const MAdapterDescription& adapterDescription);
  int32_t send_UnregisterAdapter(const MAdapterDescription& adapterDescription);
  void recv_UnregisterAdapter( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void RegisterService( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MServiceDescription& serviceDescription);
  int32_t send_RegisterService(const  ::MMIStandard::MServiceDescription& serviceDescription);
  void recv_RegisterService( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void UnregisterService( ::MMIStandard::MBoolResponse& _return, const  ::MMIStandard::MServiceDescription& serviceDescription);
  int32_t send_UnregisterService(const  ::MMIStandard::MServiceDescription& serviceDescription);
  void recv_UnregisterService( ::MMIStandard::MBoolResponse& _return, const int32_t seqid);
  void CreateSessionID(std::string& _return, const std::map<std::string, std::string> & properties);
  int32_t send_CreateSessionID(const std::map<std::string, std::string> & properties);
  void recv_CreateSessionID(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
