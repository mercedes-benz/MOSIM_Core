// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MSkeletonAccess.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::MMIStandard;

class MSkeletonAccessHandler : virtual public MSkeletonAccessIf {
 public:
  MSkeletonAccessHandler() {
    // Your initialization goes here
  }

  void InitializeAnthropometry(const  ::MMIStandard::MAvatarDescription& description) {
    // Your implementation goes here
    printf("InitializeAnthropometry\n");
  }

  void GetAvatarDescription( ::MMIStandard::MAvatarDescription& _return, const std::string& avatarID) {
    // Your implementation goes here
    printf("GetAvatarDescription\n");
  }

  void SetAnimatedJoints(const std::string& avatarID, const std::vector< ::MMIStandard::MJointType::type> & joints) {
    // Your implementation goes here
    printf("SetAnimatedJoints\n");
  }

  void SetChannelData(const  ::MMIStandard::MAvatarPostureValues& values) {
    // Your implementation goes here
    printf("SetChannelData\n");
  }

  void GetCurrentGlobalPosture( ::MMIStandard::MAvatarPosture& _return, const std::string& avatarID) {
    // Your implementation goes here
    printf("GetCurrentGlobalPosture\n");
  }

  void GetCurrentLocalPosture( ::MMIStandard::MAvatarPosture& _return, const std::string& avatarID) {
    // Your implementation goes here
    printf("GetCurrentLocalPosture\n");
  }

  void GetCurrentPostureValues( ::MMIStandard::MAvatarPostureValues& _return, const std::string& avatarID) {
    // Your implementation goes here
    printf("GetCurrentPostureValues\n");
  }

  void GetCurrentPostureValuesPartial( ::MMIStandard::MAvatarPostureValues& _return, const std::string& avatarID, const std::vector< ::MMIStandard::MJointType::type> & joints) {
    // Your implementation goes here
    printf("GetCurrentPostureValuesPartial\n");
  }

  void GetCurrentJointPositions(std::vector< ::MMIStandard::MVector3> & _return, const std::string& avatarID) {
    // Your implementation goes here
    printf("GetCurrentJointPositions\n");
  }

  void GetRootPosition( ::MMIStandard::MVector3& _return, const std::string& avatarID) {
    // Your implementation goes here
    printf("GetRootPosition\n");
  }

  void GetRootRotation( ::MMIStandard::MQuaternion& _return, const std::string& avatarID) {
    // Your implementation goes here
    printf("GetRootRotation\n");
  }

  void GetGlobalJointPosition( ::MMIStandard::MVector3& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint) {
    // Your implementation goes here
    printf("GetGlobalJointPosition\n");
  }

  void GetGlobalJointRotation( ::MMIStandard::MQuaternion& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint) {
    // Your implementation goes here
    printf("GetGlobalJointRotation\n");
  }

  void GetLocalJointPosition( ::MMIStandard::MVector3& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint) {
    // Your implementation goes here
    printf("GetLocalJointPosition\n");
  }

  void GetLocalJointRotation( ::MMIStandard::MQuaternion& _return, const std::string& avatarId, const  ::MMIStandard::MJointType::type joint) {
    // Your implementation goes here
    printf("GetLocalJointRotation\n");
  }

  void SetRootPosition(const std::string& avatarId, const  ::MMIStandard::MVector3& position) {
    // Your implementation goes here
    printf("SetRootPosition\n");
  }

  void SetRootRotation(const std::string& avatarId, const  ::MMIStandard::MQuaternion& rotation) {
    // Your implementation goes here
    printf("SetRootRotation\n");
  }

  void SetGlobalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MVector3& position) {
    // Your implementation goes here
    printf("SetGlobalJointPosition\n");
  }

  void SetGlobalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MQuaternion& rotation) {
    // Your implementation goes here
    printf("SetGlobalJointRotation\n");
  }

  void SetLocalJointPosition(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MVector3& position) {
    // Your implementation goes here
    printf("SetLocalJointPosition\n");
  }

  void SetLocalJointRotation(const std::string& avatarId, const  ::MMIStandard::MJointType::type joint, const  ::MMIStandard::MQuaternion& rotation) {
    // Your implementation goes here
    printf("SetLocalJointRotation\n");
  }

  void RecomputeCurrentPostureValues( ::MMIStandard::MAvatarPostureValues& _return, const std::string& avatarId) {
    // Your implementation goes here
    printf("RecomputeCurrentPostureValues\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<MSkeletonAccessHandler> handler(new MSkeletonAccessHandler());
  ::std::shared_ptr<TProcessor> processor(new MSkeletonAccessProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

