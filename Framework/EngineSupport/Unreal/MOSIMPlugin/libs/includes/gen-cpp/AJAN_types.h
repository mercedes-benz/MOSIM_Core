/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AJAN_TYPES_H
#define AJAN_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace MMIStandard {

class MRDFGraph;

typedef struct _MRDFGraph__isset {
  _MRDFGraph__isset() : ContentType(false), Graph(false) {}
  bool ContentType :1;
  bool Graph :1;
} _MRDFGraph__isset;

class MRDFGraph : public virtual ::apache::thrift::TBase {
 public:

  MRDFGraph(const MRDFGraph&);
  MRDFGraph& operator=(const MRDFGraph&);
  MRDFGraph() : ContentType(), Graph() {
  }

  virtual ~MRDFGraph() noexcept;
  std::string ContentType;
  std::string Graph;

  _MRDFGraph__isset __isset;

  void __set_ContentType(const std::string& val);

  void __set_Graph(const std::string& val);

  bool operator == (const MRDFGraph & rhs) const
  {
    if (!(ContentType == rhs.ContentType))
      return false;
    if (!(Graph == rhs.Graph))
      return false;
    return true;
  }
  bool operator != (const MRDFGraph &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MRDFGraph & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MRDFGraph &a, MRDFGraph &b);

std::ostream& operator<<(std::ostream& out, const MRDFGraph& obj);

} // namespace

#endif
