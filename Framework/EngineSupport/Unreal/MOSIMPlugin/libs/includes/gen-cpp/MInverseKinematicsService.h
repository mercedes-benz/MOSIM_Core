/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MInverseKinematicsService_H
#define MInverseKinematicsService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "services_types.h"
#include "MMIServiceBase.h"

namespace MMIStandard {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MInverseKinematicsServiceIf : virtual public MMIServiceBaseIf {
 public:
  virtual ~MInverseKinematicsServiceIf() {}
  virtual void ComputeIK( ::MMIStandard::MAvatarPostureValues& _return, const  ::MMIStandard::MAvatarPostureValues& postureValues, const std::vector<MIKProperty> & properties) = 0;
  virtual void CalculateIKPosture(MIKServiceResult& _return, const  ::MMIStandard::MAvatarPostureValues& postureValues, const std::vector< ::MMIStandard::MConstraint> & constraints, const std::map<std::string, std::string> & properties) = 0;
};

class MInverseKinematicsServiceIfFactory : virtual public MMIServiceBaseIfFactory {
 public:
  typedef MInverseKinematicsServiceIf Handler;

  virtual ~MInverseKinematicsServiceIfFactory() {}

  virtual MInverseKinematicsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) = 0;
};

class MInverseKinematicsServiceIfSingletonFactory : virtual public MInverseKinematicsServiceIfFactory {
 public:
  MInverseKinematicsServiceIfSingletonFactory(const ::std::shared_ptr<MInverseKinematicsServiceIf>& iface) : iface_(iface) {}
  virtual ~MInverseKinematicsServiceIfSingletonFactory() {}

  virtual MInverseKinematicsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MInverseKinematicsServiceIf> iface_;
};

class MInverseKinematicsServiceNull : virtual public MInverseKinematicsServiceIf , virtual public MMIServiceBaseNull {
 public:
  virtual ~MInverseKinematicsServiceNull() {}
  void ComputeIK( ::MMIStandard::MAvatarPostureValues& /* _return */, const  ::MMIStandard::MAvatarPostureValues& /* postureValues */, const std::vector<MIKProperty> & /* properties */) {
    return;
  }
  void CalculateIKPosture(MIKServiceResult& /* _return */, const  ::MMIStandard::MAvatarPostureValues& /* postureValues */, const std::vector< ::MMIStandard::MConstraint> & /* constraints */, const std::map<std::string, std::string> & /* properties */) {
    return;
  }
};

typedef struct _MInverseKinematicsService_ComputeIK_args__isset {
  _MInverseKinematicsService_ComputeIK_args__isset() : postureValues(false), properties(false) {}
  bool postureValues :1;
  bool properties :1;
} _MInverseKinematicsService_ComputeIK_args__isset;

class MInverseKinematicsService_ComputeIK_args {
 public:

  MInverseKinematicsService_ComputeIK_args(const MInverseKinematicsService_ComputeIK_args&);
  MInverseKinematicsService_ComputeIK_args& operator=(const MInverseKinematicsService_ComputeIK_args&);
  MInverseKinematicsService_ComputeIK_args() {
  }

  virtual ~MInverseKinematicsService_ComputeIK_args() noexcept;
   ::MMIStandard::MAvatarPostureValues postureValues;
  std::vector<MIKProperty>  properties;

  _MInverseKinematicsService_ComputeIK_args__isset __isset;

  void __set_postureValues(const  ::MMIStandard::MAvatarPostureValues& val);

  void __set_properties(const std::vector<MIKProperty> & val);

  bool operator == (const MInverseKinematicsService_ComputeIK_args & rhs) const
  {
    if (!(postureValues == rhs.postureValues))
      return false;
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const MInverseKinematicsService_ComputeIK_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MInverseKinematicsService_ComputeIK_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MInverseKinematicsService_ComputeIK_pargs {
 public:


  virtual ~MInverseKinematicsService_ComputeIK_pargs() noexcept;
  const  ::MMIStandard::MAvatarPostureValues* postureValues;
  const std::vector<MIKProperty> * properties;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MInverseKinematicsService_ComputeIK_result__isset {
  _MInverseKinematicsService_ComputeIK_result__isset() : success(false) {}
  bool success :1;
} _MInverseKinematicsService_ComputeIK_result__isset;

class MInverseKinematicsService_ComputeIK_result {
 public:

  MInverseKinematicsService_ComputeIK_result(const MInverseKinematicsService_ComputeIK_result&);
  MInverseKinematicsService_ComputeIK_result& operator=(const MInverseKinematicsService_ComputeIK_result&);
  MInverseKinematicsService_ComputeIK_result() {
  }

  virtual ~MInverseKinematicsService_ComputeIK_result() noexcept;
   ::MMIStandard::MAvatarPostureValues success;

  _MInverseKinematicsService_ComputeIK_result__isset __isset;

  void __set_success(const  ::MMIStandard::MAvatarPostureValues& val);

  bool operator == (const MInverseKinematicsService_ComputeIK_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MInverseKinematicsService_ComputeIK_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MInverseKinematicsService_ComputeIK_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MInverseKinematicsService_ComputeIK_presult__isset {
  _MInverseKinematicsService_ComputeIK_presult__isset() : success(false) {}
  bool success :1;
} _MInverseKinematicsService_ComputeIK_presult__isset;

class MInverseKinematicsService_ComputeIK_presult {
 public:


  virtual ~MInverseKinematicsService_ComputeIK_presult() noexcept;
   ::MMIStandard::MAvatarPostureValues* success;

  _MInverseKinematicsService_ComputeIK_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MInverseKinematicsService_CalculateIKPosture_args__isset {
  _MInverseKinematicsService_CalculateIKPosture_args__isset() : postureValues(false), constraints(false), properties(false) {}
  bool postureValues :1;
  bool constraints :1;
  bool properties :1;
} _MInverseKinematicsService_CalculateIKPosture_args__isset;

class MInverseKinematicsService_CalculateIKPosture_args {
 public:

  MInverseKinematicsService_CalculateIKPosture_args(const MInverseKinematicsService_CalculateIKPosture_args&);
  MInverseKinematicsService_CalculateIKPosture_args& operator=(const MInverseKinematicsService_CalculateIKPosture_args&);
  MInverseKinematicsService_CalculateIKPosture_args() {
  }

  virtual ~MInverseKinematicsService_CalculateIKPosture_args() noexcept;
   ::MMIStandard::MAvatarPostureValues postureValues;
  std::vector< ::MMIStandard::MConstraint>  constraints;
  std::map<std::string, std::string>  properties;

  _MInverseKinematicsService_CalculateIKPosture_args__isset __isset;

  void __set_postureValues(const  ::MMIStandard::MAvatarPostureValues& val);

  void __set_constraints(const std::vector< ::MMIStandard::MConstraint> & val);

  void __set_properties(const std::map<std::string, std::string> & val);

  bool operator == (const MInverseKinematicsService_CalculateIKPosture_args & rhs) const
  {
    if (!(postureValues == rhs.postureValues))
      return false;
    if (!(constraints == rhs.constraints))
      return false;
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const MInverseKinematicsService_CalculateIKPosture_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MInverseKinematicsService_CalculateIKPosture_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MInverseKinematicsService_CalculateIKPosture_pargs {
 public:


  virtual ~MInverseKinematicsService_CalculateIKPosture_pargs() noexcept;
  const  ::MMIStandard::MAvatarPostureValues* postureValues;
  const std::vector< ::MMIStandard::MConstraint> * constraints;
  const std::map<std::string, std::string> * properties;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MInverseKinematicsService_CalculateIKPosture_result__isset {
  _MInverseKinematicsService_CalculateIKPosture_result__isset() : success(false) {}
  bool success :1;
} _MInverseKinematicsService_CalculateIKPosture_result__isset;

class MInverseKinematicsService_CalculateIKPosture_result {
 public:

  MInverseKinematicsService_CalculateIKPosture_result(const MInverseKinematicsService_CalculateIKPosture_result&);
  MInverseKinematicsService_CalculateIKPosture_result& operator=(const MInverseKinematicsService_CalculateIKPosture_result&);
  MInverseKinematicsService_CalculateIKPosture_result() {
  }

  virtual ~MInverseKinematicsService_CalculateIKPosture_result() noexcept;
  MIKServiceResult success;

  _MInverseKinematicsService_CalculateIKPosture_result__isset __isset;

  void __set_success(const MIKServiceResult& val);

  bool operator == (const MInverseKinematicsService_CalculateIKPosture_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MInverseKinematicsService_CalculateIKPosture_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MInverseKinematicsService_CalculateIKPosture_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MInverseKinematicsService_CalculateIKPosture_presult__isset {
  _MInverseKinematicsService_CalculateIKPosture_presult__isset() : success(false) {}
  bool success :1;
} _MInverseKinematicsService_CalculateIKPosture_presult__isset;

class MInverseKinematicsService_CalculateIKPosture_presult {
 public:


  virtual ~MInverseKinematicsService_CalculateIKPosture_presult() noexcept;
  MIKServiceResult* success;

  _MInverseKinematicsService_CalculateIKPosture_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MInverseKinematicsServiceClient : virtual public MInverseKinematicsServiceIf, public MMIServiceBaseClient {
 public:
  MInverseKinematicsServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    MMIServiceBaseClient(prot, prot) {}
  MInverseKinematicsServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    MMIServiceBaseClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ComputeIK( ::MMIStandard::MAvatarPostureValues& _return, const  ::MMIStandard::MAvatarPostureValues& postureValues, const std::vector<MIKProperty> & properties);
  void send_ComputeIK(const  ::MMIStandard::MAvatarPostureValues& postureValues, const std::vector<MIKProperty> & properties);
  void recv_ComputeIK( ::MMIStandard::MAvatarPostureValues& _return);
  void CalculateIKPosture(MIKServiceResult& _return, const  ::MMIStandard::MAvatarPostureValues& postureValues, const std::vector< ::MMIStandard::MConstraint> & constraints, const std::map<std::string, std::string> & properties);
  void send_CalculateIKPosture(const  ::MMIStandard::MAvatarPostureValues& postureValues, const std::vector< ::MMIStandard::MConstraint> & constraints, const std::map<std::string, std::string> & properties);
  void recv_CalculateIKPosture(MIKServiceResult& _return);
};

class MInverseKinematicsServiceProcessor : public MMIServiceBaseProcessor {
 protected:
  ::std::shared_ptr<MInverseKinematicsServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MInverseKinematicsServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ComputeIK(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CalculateIKPosture(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MInverseKinematicsServiceProcessor(::std::shared_ptr<MInverseKinematicsServiceIf> iface) :
    MMIServiceBaseProcessor(iface),
    iface_(iface) {
    processMap_["ComputeIK"] = &MInverseKinematicsServiceProcessor::process_ComputeIK;
    processMap_["CalculateIKPosture"] = &MInverseKinematicsServiceProcessor::process_CalculateIKPosture;
  }

  virtual ~MInverseKinematicsServiceProcessor() {}
};

class MInverseKinematicsServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MInverseKinematicsServiceProcessorFactory(const ::std::shared_ptr< MInverseKinematicsServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MInverseKinematicsServiceIfFactory > handlerFactory_;
};

class MInverseKinematicsServiceMultiface : virtual public MInverseKinematicsServiceIf, public MMIServiceBaseMultiface {
 public:
  MInverseKinematicsServiceMultiface(std::vector<std::shared_ptr<MInverseKinematicsServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<MInverseKinematicsServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      MMIServiceBaseMultiface::add(*iter);
    }
  }
  virtual ~MInverseKinematicsServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<MInverseKinematicsServiceIf> > ifaces_;
  MInverseKinematicsServiceMultiface() {}
  void add(::std::shared_ptr<MInverseKinematicsServiceIf> iface) {
    MMIServiceBaseMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void ComputeIK( ::MMIStandard::MAvatarPostureValues& _return, const  ::MMIStandard::MAvatarPostureValues& postureValues, const std::vector<MIKProperty> & properties) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ComputeIK(_return, postureValues, properties);
    }
    ifaces_[i]->ComputeIK(_return, postureValues, properties);
    return;
  }

  void CalculateIKPosture(MIKServiceResult& _return, const  ::MMIStandard::MAvatarPostureValues& postureValues, const std::vector< ::MMIStandard::MConstraint> & constraints, const std::map<std::string, std::string> & properties) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CalculateIKPosture(_return, postureValues, constraints, properties);
    }
    ifaces_[i]->CalculateIKPosture(_return, postureValues, constraints, properties);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MInverseKinematicsServiceConcurrentClient : virtual public MInverseKinematicsServiceIf, public MMIServiceBaseConcurrentClient {
 public:
  MInverseKinematicsServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
    MMIServiceBaseConcurrentClient(prot, prot, sync) {}
  MInverseKinematicsServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :    MMIServiceBaseConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ComputeIK( ::MMIStandard::MAvatarPostureValues& _return, const  ::MMIStandard::MAvatarPostureValues& postureValues, const std::vector<MIKProperty> & properties);
  int32_t send_ComputeIK(const  ::MMIStandard::MAvatarPostureValues& postureValues, const std::vector<MIKProperty> & properties);
  void recv_ComputeIK( ::MMIStandard::MAvatarPostureValues& _return, const int32_t seqid);
  void CalculateIKPosture(MIKServiceResult& _return, const  ::MMIStandard::MAvatarPostureValues& postureValues, const std::vector< ::MMIStandard::MConstraint> & constraints, const std::map<std::string, std::string> & properties);
  int32_t send_CalculateIKPosture(const  ::MMIStandard::MAvatarPostureValues& postureValues, const std::vector< ::MMIStandard::MConstraint> & constraints, const std::map<std::string, std::string> & properties);
  void recv_CalculateIKPosture(MIKServiceResult& _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
