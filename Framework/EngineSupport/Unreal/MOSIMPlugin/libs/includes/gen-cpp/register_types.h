/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef register_TYPES_H
#define register_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "core_types.h"
#include "avatar_types.h"
#include "scene_types.h"
#include "mmu_types.h"
#include "constraints_types.h"


namespace MMIStandard {

class MAdapterDescription;

typedef struct _MAdapterDescription__isset {
  _MAdapterDescription__isset() : Properties(false), Parameters(false) {}
  bool Properties :1;
  bool Parameters :1;
} _MAdapterDescription__isset;

class MAdapterDescription : public virtual ::apache::thrift::TBase {
 public:

  MAdapterDescription(const MAdapterDescription&);
  MAdapterDescription& operator=(const MAdapterDescription&);
  MAdapterDescription() : Name(), ID(), Language() {
  }

  virtual ~MAdapterDescription() noexcept;
  std::string Name;
  std::string ID;
  std::string Language;
  std::vector< ::MMIStandard::MIPAddress>  Addresses;
  std::map<std::string, std::string>  Properties;
  std::vector< ::MMIStandard::MParameter>  Parameters;

  _MAdapterDescription__isset __isset;

  void __set_Name(const std::string& val);

  void __set_ID(const std::string& val);

  void __set_Language(const std::string& val);

  void __set_Addresses(const std::vector< ::MMIStandard::MIPAddress> & val);

  void __set_Properties(const std::map<std::string, std::string> & val);

  void __set_Parameters(const std::vector< ::MMIStandard::MParameter> & val);

  bool operator == (const MAdapterDescription & rhs) const
  {
    if (!(Name == rhs.Name))
      return false;
    if (!(ID == rhs.ID))
      return false;
    if (!(Language == rhs.Language))
      return false;
    if (!(Addresses == rhs.Addresses))
      return false;
    if (__isset.Properties != rhs.__isset.Properties)
      return false;
    else if (__isset.Properties && !(Properties == rhs.Properties))
      return false;
    if (__isset.Parameters != rhs.__isset.Parameters)
      return false;
    else if (__isset.Parameters && !(Parameters == rhs.Parameters))
      return false;
    return true;
  }
  bool operator != (const MAdapterDescription &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MAdapterDescription & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MAdapterDescription &a, MAdapterDescription &b);

std::ostream& operator<<(std::ostream& out, const MAdapterDescription& obj);

} // namespace

#endif
