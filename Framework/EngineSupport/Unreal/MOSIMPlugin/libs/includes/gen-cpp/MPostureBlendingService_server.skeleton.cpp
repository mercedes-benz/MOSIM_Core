// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MPostureBlendingService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::MMIStandard;

class MPostureBlendingServiceHandler : virtual public MPostureBlendingServiceIf {
 public:
  MPostureBlendingServiceHandler() {
    // Your initialization goes here
  }

  void Blend( ::MMIStandard::MAvatarPostureValues& _return, const  ::MMIStandard::MAvatarPostureValues& startPosture, const  ::MMIStandard::MAvatarPostureValues& targetPosture, const double weight, const std::map< ::MMIStandard::MJointType::type, double> & mask, const std::map<std::string, std::string> & properties) {
    // Your implementation goes here
    printf("Blend\n");
  }

  void BlendMany(std::vector< ::MMIStandard::MAvatarPostureValues> & _return, const  ::MMIStandard::MAvatarPostureValues& startPosture, const  ::MMIStandard::MAvatarPostureValues& targetPosture, const std::vector<double> & weights, const std::map< ::MMIStandard::MJointType::type, double> & mask, const std::map<std::string, std::string> & properties) {
    // Your implementation goes here
    printf("BlendMany\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<MPostureBlendingServiceHandler> handler(new MPostureBlendingServiceHandler());
  ::std::shared_ptr<TProcessor> processor(new MPostureBlendingServiceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

