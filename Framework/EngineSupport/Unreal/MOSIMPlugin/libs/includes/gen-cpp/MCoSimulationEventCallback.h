/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MCoSimulationEventCallback_H
#define MCoSimulationEventCallback_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "cosim_types.h"

namespace MMIStandard {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MCoSimulationEventCallbackIf {
 public:
  virtual ~MCoSimulationEventCallbackIf() {}
  virtual void OnEvent(const MCoSimulationEvents& event) = 0;
  virtual void OnFrameEnd(const  ::MMIStandard::MAvatarPostureValues& newPosture) = 0;
};

class MCoSimulationEventCallbackIfFactory {
 public:
  typedef MCoSimulationEventCallbackIf Handler;

  virtual ~MCoSimulationEventCallbackIfFactory() {}

  virtual MCoSimulationEventCallbackIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MCoSimulationEventCallbackIf* /* handler */) = 0;
};

class MCoSimulationEventCallbackIfSingletonFactory : virtual public MCoSimulationEventCallbackIfFactory {
 public:
  MCoSimulationEventCallbackIfSingletonFactory(const ::std::shared_ptr<MCoSimulationEventCallbackIf>& iface) : iface_(iface) {}
  virtual ~MCoSimulationEventCallbackIfSingletonFactory() {}

  virtual MCoSimulationEventCallbackIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MCoSimulationEventCallbackIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MCoSimulationEventCallbackIf> iface_;
};

class MCoSimulationEventCallbackNull : virtual public MCoSimulationEventCallbackIf {
 public:
  virtual ~MCoSimulationEventCallbackNull() {}
  void OnEvent(const MCoSimulationEvents& /* event */) {
    return;
  }
  void OnFrameEnd(const  ::MMIStandard::MAvatarPostureValues& /* newPosture */) {
    return;
  }
};

typedef struct _MCoSimulationEventCallback_OnEvent_args__isset {
  _MCoSimulationEventCallback_OnEvent_args__isset() : event(false) {}
  bool event :1;
} _MCoSimulationEventCallback_OnEvent_args__isset;

class MCoSimulationEventCallback_OnEvent_args {
 public:

  MCoSimulationEventCallback_OnEvent_args(const MCoSimulationEventCallback_OnEvent_args&);
  MCoSimulationEventCallback_OnEvent_args& operator=(const MCoSimulationEventCallback_OnEvent_args&);
  MCoSimulationEventCallback_OnEvent_args() {
  }

  virtual ~MCoSimulationEventCallback_OnEvent_args() noexcept;
  MCoSimulationEvents event;

  _MCoSimulationEventCallback_OnEvent_args__isset __isset;

  void __set_event(const MCoSimulationEvents& val);

  bool operator == (const MCoSimulationEventCallback_OnEvent_args & rhs) const
  {
    if (!(event == rhs.event))
      return false;
    return true;
  }
  bool operator != (const MCoSimulationEventCallback_OnEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoSimulationEventCallback_OnEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoSimulationEventCallback_OnEvent_pargs {
 public:


  virtual ~MCoSimulationEventCallback_OnEvent_pargs() noexcept;
  const MCoSimulationEvents* event;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoSimulationEventCallback_OnEvent_result {
 public:

  MCoSimulationEventCallback_OnEvent_result(const MCoSimulationEventCallback_OnEvent_result&);
  MCoSimulationEventCallback_OnEvent_result& operator=(const MCoSimulationEventCallback_OnEvent_result&);
  MCoSimulationEventCallback_OnEvent_result() {
  }

  virtual ~MCoSimulationEventCallback_OnEvent_result() noexcept;

  bool operator == (const MCoSimulationEventCallback_OnEvent_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MCoSimulationEventCallback_OnEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoSimulationEventCallback_OnEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoSimulationEventCallback_OnEvent_presult {
 public:


  virtual ~MCoSimulationEventCallback_OnEvent_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MCoSimulationEventCallback_OnFrameEnd_args__isset {
  _MCoSimulationEventCallback_OnFrameEnd_args__isset() : newPosture(false) {}
  bool newPosture :1;
} _MCoSimulationEventCallback_OnFrameEnd_args__isset;

class MCoSimulationEventCallback_OnFrameEnd_args {
 public:

  MCoSimulationEventCallback_OnFrameEnd_args(const MCoSimulationEventCallback_OnFrameEnd_args&);
  MCoSimulationEventCallback_OnFrameEnd_args& operator=(const MCoSimulationEventCallback_OnFrameEnd_args&);
  MCoSimulationEventCallback_OnFrameEnd_args() {
  }

  virtual ~MCoSimulationEventCallback_OnFrameEnd_args() noexcept;
   ::MMIStandard::MAvatarPostureValues newPosture;

  _MCoSimulationEventCallback_OnFrameEnd_args__isset __isset;

  void __set_newPosture(const  ::MMIStandard::MAvatarPostureValues& val);

  bool operator == (const MCoSimulationEventCallback_OnFrameEnd_args & rhs) const
  {
    if (!(newPosture == rhs.newPosture))
      return false;
    return true;
  }
  bool operator != (const MCoSimulationEventCallback_OnFrameEnd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoSimulationEventCallback_OnFrameEnd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoSimulationEventCallback_OnFrameEnd_pargs {
 public:


  virtual ~MCoSimulationEventCallback_OnFrameEnd_pargs() noexcept;
  const  ::MMIStandard::MAvatarPostureValues* newPosture;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoSimulationEventCallback_OnFrameEnd_result {
 public:

  MCoSimulationEventCallback_OnFrameEnd_result(const MCoSimulationEventCallback_OnFrameEnd_result&);
  MCoSimulationEventCallback_OnFrameEnd_result& operator=(const MCoSimulationEventCallback_OnFrameEnd_result&);
  MCoSimulationEventCallback_OnFrameEnd_result() {
  }

  virtual ~MCoSimulationEventCallback_OnFrameEnd_result() noexcept;

  bool operator == (const MCoSimulationEventCallback_OnFrameEnd_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MCoSimulationEventCallback_OnFrameEnd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCoSimulationEventCallback_OnFrameEnd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MCoSimulationEventCallback_OnFrameEnd_presult {
 public:


  virtual ~MCoSimulationEventCallback_OnFrameEnd_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MCoSimulationEventCallbackClient : virtual public MCoSimulationEventCallbackIf {
 public:
  MCoSimulationEventCallbackClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MCoSimulationEventCallbackClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void OnEvent(const MCoSimulationEvents& event);
  void send_OnEvent(const MCoSimulationEvents& event);
  void recv_OnEvent();
  void OnFrameEnd(const  ::MMIStandard::MAvatarPostureValues& newPosture);
  void send_OnFrameEnd(const  ::MMIStandard::MAvatarPostureValues& newPosture);
  void recv_OnFrameEnd();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MCoSimulationEventCallbackProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<MCoSimulationEventCallbackIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MCoSimulationEventCallbackProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_OnEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_OnFrameEnd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MCoSimulationEventCallbackProcessor(::std::shared_ptr<MCoSimulationEventCallbackIf> iface) :
    iface_(iface) {
    processMap_["OnEvent"] = &MCoSimulationEventCallbackProcessor::process_OnEvent;
    processMap_["OnFrameEnd"] = &MCoSimulationEventCallbackProcessor::process_OnFrameEnd;
  }

  virtual ~MCoSimulationEventCallbackProcessor() {}
};

class MCoSimulationEventCallbackProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MCoSimulationEventCallbackProcessorFactory(const ::std::shared_ptr< MCoSimulationEventCallbackIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MCoSimulationEventCallbackIfFactory > handlerFactory_;
};

class MCoSimulationEventCallbackMultiface : virtual public MCoSimulationEventCallbackIf {
 public:
  MCoSimulationEventCallbackMultiface(std::vector<std::shared_ptr<MCoSimulationEventCallbackIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MCoSimulationEventCallbackMultiface() {}
 protected:
  std::vector<std::shared_ptr<MCoSimulationEventCallbackIf> > ifaces_;
  MCoSimulationEventCallbackMultiface() {}
  void add(::std::shared_ptr<MCoSimulationEventCallbackIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void OnEvent(const MCoSimulationEvents& event) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->OnEvent(event);
    }
    ifaces_[i]->OnEvent(event);
  }

  void OnFrameEnd(const  ::MMIStandard::MAvatarPostureValues& newPosture) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->OnFrameEnd(newPosture);
    }
    ifaces_[i]->OnFrameEnd(newPosture);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MCoSimulationEventCallbackConcurrentClient : virtual public MCoSimulationEventCallbackIf {
 public:
  MCoSimulationEventCallbackConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  MCoSimulationEventCallbackConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void OnEvent(const MCoSimulationEvents& event);
  int32_t send_OnEvent(const MCoSimulationEvents& event);
  void recv_OnEvent(const int32_t seqid);
  void OnFrameEnd(const  ::MMIStandard::MAvatarPostureValues& newPosture);
  int32_t send_OnFrameEnd(const  ::MMIStandard::MAvatarPostureValues& newPosture);
  void recv_OnFrameEnd(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
