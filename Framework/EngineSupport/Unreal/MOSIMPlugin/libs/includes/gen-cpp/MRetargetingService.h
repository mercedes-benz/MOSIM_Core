/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MRetargetingService_H
#define MRetargetingService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "services_types.h"
#include "MMIServiceBase.h"

namespace MMIStandard {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MRetargetingServiceIf : virtual public MMIServiceBaseIf {
 public:
  virtual ~MRetargetingServiceIf() {}
  virtual void SetupRetargeting( ::MMIStandard::MAvatarDescription& _return, const  ::MMIStandard::MAvatarPosture& globalTarget) = 0;
  virtual void RetargetToIntermediate( ::MMIStandard::MAvatarPostureValues& _return, const  ::MMIStandard::MAvatarPosture& globalTarget) = 0;
  virtual void RetargetToTarget( ::MMIStandard::MAvatarPosture& _return, const  ::MMIStandard::MAvatarPostureValues& intermediatePostureValues) = 0;
};

class MRetargetingServiceIfFactory : virtual public MMIServiceBaseIfFactory {
 public:
  typedef MRetargetingServiceIf Handler;

  virtual ~MRetargetingServiceIfFactory() {}

  virtual MRetargetingServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) = 0;
};

class MRetargetingServiceIfSingletonFactory : virtual public MRetargetingServiceIfFactory {
 public:
  MRetargetingServiceIfSingletonFactory(const ::std::shared_ptr<MRetargetingServiceIf>& iface) : iface_(iface) {}
  virtual ~MRetargetingServiceIfSingletonFactory() {}

  virtual MRetargetingServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MRetargetingServiceIf> iface_;
};

class MRetargetingServiceNull : virtual public MRetargetingServiceIf , virtual public MMIServiceBaseNull {
 public:
  virtual ~MRetargetingServiceNull() {}
  void SetupRetargeting( ::MMIStandard::MAvatarDescription& /* _return */, const  ::MMIStandard::MAvatarPosture& /* globalTarget */) {
    return;
  }
  void RetargetToIntermediate( ::MMIStandard::MAvatarPostureValues& /* _return */, const  ::MMIStandard::MAvatarPosture& /* globalTarget */) {
    return;
  }
  void RetargetToTarget( ::MMIStandard::MAvatarPosture& /* _return */, const  ::MMIStandard::MAvatarPostureValues& /* intermediatePostureValues */) {
    return;
  }
};

typedef struct _MRetargetingService_SetupRetargeting_args__isset {
  _MRetargetingService_SetupRetargeting_args__isset() : globalTarget(false) {}
  bool globalTarget :1;
} _MRetargetingService_SetupRetargeting_args__isset;

class MRetargetingService_SetupRetargeting_args {
 public:

  MRetargetingService_SetupRetargeting_args(const MRetargetingService_SetupRetargeting_args&);
  MRetargetingService_SetupRetargeting_args& operator=(const MRetargetingService_SetupRetargeting_args&);
  MRetargetingService_SetupRetargeting_args() {
  }

  virtual ~MRetargetingService_SetupRetargeting_args() noexcept;
   ::MMIStandard::MAvatarPosture globalTarget;

  _MRetargetingService_SetupRetargeting_args__isset __isset;

  void __set_globalTarget(const  ::MMIStandard::MAvatarPosture& val);

  bool operator == (const MRetargetingService_SetupRetargeting_args & rhs) const
  {
    if (!(globalTarget == rhs.globalTarget))
      return false;
    return true;
  }
  bool operator != (const MRetargetingService_SetupRetargeting_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MRetargetingService_SetupRetargeting_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MRetargetingService_SetupRetargeting_pargs {
 public:


  virtual ~MRetargetingService_SetupRetargeting_pargs() noexcept;
  const  ::MMIStandard::MAvatarPosture* globalTarget;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MRetargetingService_SetupRetargeting_result__isset {
  _MRetargetingService_SetupRetargeting_result__isset() : success(false) {}
  bool success :1;
} _MRetargetingService_SetupRetargeting_result__isset;

class MRetargetingService_SetupRetargeting_result {
 public:

  MRetargetingService_SetupRetargeting_result(const MRetargetingService_SetupRetargeting_result&);
  MRetargetingService_SetupRetargeting_result& operator=(const MRetargetingService_SetupRetargeting_result&);
  MRetargetingService_SetupRetargeting_result() {
  }

  virtual ~MRetargetingService_SetupRetargeting_result() noexcept;
   ::MMIStandard::MAvatarDescription success;

  _MRetargetingService_SetupRetargeting_result__isset __isset;

  void __set_success(const  ::MMIStandard::MAvatarDescription& val);

  bool operator == (const MRetargetingService_SetupRetargeting_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MRetargetingService_SetupRetargeting_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MRetargetingService_SetupRetargeting_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MRetargetingService_SetupRetargeting_presult__isset {
  _MRetargetingService_SetupRetargeting_presult__isset() : success(false) {}
  bool success :1;
} _MRetargetingService_SetupRetargeting_presult__isset;

class MRetargetingService_SetupRetargeting_presult {
 public:


  virtual ~MRetargetingService_SetupRetargeting_presult() noexcept;
   ::MMIStandard::MAvatarDescription* success;

  _MRetargetingService_SetupRetargeting_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MRetargetingService_RetargetToIntermediate_args__isset {
  _MRetargetingService_RetargetToIntermediate_args__isset() : globalTarget(false) {}
  bool globalTarget :1;
} _MRetargetingService_RetargetToIntermediate_args__isset;

class MRetargetingService_RetargetToIntermediate_args {
 public:

  MRetargetingService_RetargetToIntermediate_args(const MRetargetingService_RetargetToIntermediate_args&);
  MRetargetingService_RetargetToIntermediate_args& operator=(const MRetargetingService_RetargetToIntermediate_args&);
  MRetargetingService_RetargetToIntermediate_args() {
  }

  virtual ~MRetargetingService_RetargetToIntermediate_args() noexcept;
   ::MMIStandard::MAvatarPosture globalTarget;

  _MRetargetingService_RetargetToIntermediate_args__isset __isset;

  void __set_globalTarget(const  ::MMIStandard::MAvatarPosture& val);

  bool operator == (const MRetargetingService_RetargetToIntermediate_args & rhs) const
  {
    if (!(globalTarget == rhs.globalTarget))
      return false;
    return true;
  }
  bool operator != (const MRetargetingService_RetargetToIntermediate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MRetargetingService_RetargetToIntermediate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MRetargetingService_RetargetToIntermediate_pargs {
 public:


  virtual ~MRetargetingService_RetargetToIntermediate_pargs() noexcept;
  const  ::MMIStandard::MAvatarPosture* globalTarget;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MRetargetingService_RetargetToIntermediate_result__isset {
  _MRetargetingService_RetargetToIntermediate_result__isset() : success(false) {}
  bool success :1;
} _MRetargetingService_RetargetToIntermediate_result__isset;

class MRetargetingService_RetargetToIntermediate_result {
 public:

  MRetargetingService_RetargetToIntermediate_result(const MRetargetingService_RetargetToIntermediate_result&);
  MRetargetingService_RetargetToIntermediate_result& operator=(const MRetargetingService_RetargetToIntermediate_result&);
  MRetargetingService_RetargetToIntermediate_result() {
  }

  virtual ~MRetargetingService_RetargetToIntermediate_result() noexcept;
   ::MMIStandard::MAvatarPostureValues success;

  _MRetargetingService_RetargetToIntermediate_result__isset __isset;

  void __set_success(const  ::MMIStandard::MAvatarPostureValues& val);

  bool operator == (const MRetargetingService_RetargetToIntermediate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MRetargetingService_RetargetToIntermediate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MRetargetingService_RetargetToIntermediate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MRetargetingService_RetargetToIntermediate_presult__isset {
  _MRetargetingService_RetargetToIntermediate_presult__isset() : success(false) {}
  bool success :1;
} _MRetargetingService_RetargetToIntermediate_presult__isset;

class MRetargetingService_RetargetToIntermediate_presult {
 public:


  virtual ~MRetargetingService_RetargetToIntermediate_presult() noexcept;
   ::MMIStandard::MAvatarPostureValues* success;

  _MRetargetingService_RetargetToIntermediate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MRetargetingService_RetargetToTarget_args__isset {
  _MRetargetingService_RetargetToTarget_args__isset() : intermediatePostureValues(false) {}
  bool intermediatePostureValues :1;
} _MRetargetingService_RetargetToTarget_args__isset;

class MRetargetingService_RetargetToTarget_args {
 public:

  MRetargetingService_RetargetToTarget_args(const MRetargetingService_RetargetToTarget_args&);
  MRetargetingService_RetargetToTarget_args& operator=(const MRetargetingService_RetargetToTarget_args&);
  MRetargetingService_RetargetToTarget_args() {
  }

  virtual ~MRetargetingService_RetargetToTarget_args() noexcept;
   ::MMIStandard::MAvatarPostureValues intermediatePostureValues;

  _MRetargetingService_RetargetToTarget_args__isset __isset;

  void __set_intermediatePostureValues(const  ::MMIStandard::MAvatarPostureValues& val);

  bool operator == (const MRetargetingService_RetargetToTarget_args & rhs) const
  {
    if (!(intermediatePostureValues == rhs.intermediatePostureValues))
      return false;
    return true;
  }
  bool operator != (const MRetargetingService_RetargetToTarget_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MRetargetingService_RetargetToTarget_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MRetargetingService_RetargetToTarget_pargs {
 public:


  virtual ~MRetargetingService_RetargetToTarget_pargs() noexcept;
  const  ::MMIStandard::MAvatarPostureValues* intermediatePostureValues;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MRetargetingService_RetargetToTarget_result__isset {
  _MRetargetingService_RetargetToTarget_result__isset() : success(false) {}
  bool success :1;
} _MRetargetingService_RetargetToTarget_result__isset;

class MRetargetingService_RetargetToTarget_result {
 public:

  MRetargetingService_RetargetToTarget_result(const MRetargetingService_RetargetToTarget_result&);
  MRetargetingService_RetargetToTarget_result& operator=(const MRetargetingService_RetargetToTarget_result&);
  MRetargetingService_RetargetToTarget_result() {
  }

  virtual ~MRetargetingService_RetargetToTarget_result() noexcept;
   ::MMIStandard::MAvatarPosture success;

  _MRetargetingService_RetargetToTarget_result__isset __isset;

  void __set_success(const  ::MMIStandard::MAvatarPosture& val);

  bool operator == (const MRetargetingService_RetargetToTarget_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MRetargetingService_RetargetToTarget_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MRetargetingService_RetargetToTarget_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MRetargetingService_RetargetToTarget_presult__isset {
  _MRetargetingService_RetargetToTarget_presult__isset() : success(false) {}
  bool success :1;
} _MRetargetingService_RetargetToTarget_presult__isset;

class MRetargetingService_RetargetToTarget_presult {
 public:


  virtual ~MRetargetingService_RetargetToTarget_presult() noexcept;
   ::MMIStandard::MAvatarPosture* success;

  _MRetargetingService_RetargetToTarget_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MRetargetingServiceClient : virtual public MRetargetingServiceIf, public MMIServiceBaseClient {
 public:
  MRetargetingServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    MMIServiceBaseClient(prot, prot) {}
  MRetargetingServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    MMIServiceBaseClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void SetupRetargeting( ::MMIStandard::MAvatarDescription& _return, const  ::MMIStandard::MAvatarPosture& globalTarget);
  void send_SetupRetargeting(const  ::MMIStandard::MAvatarPosture& globalTarget);
  void recv_SetupRetargeting( ::MMIStandard::MAvatarDescription& _return);
  void RetargetToIntermediate( ::MMIStandard::MAvatarPostureValues& _return, const  ::MMIStandard::MAvatarPosture& globalTarget);
  void send_RetargetToIntermediate(const  ::MMIStandard::MAvatarPosture& globalTarget);
  void recv_RetargetToIntermediate( ::MMIStandard::MAvatarPostureValues& _return);
  void RetargetToTarget( ::MMIStandard::MAvatarPosture& _return, const  ::MMIStandard::MAvatarPostureValues& intermediatePostureValues);
  void send_RetargetToTarget(const  ::MMIStandard::MAvatarPostureValues& intermediatePostureValues);
  void recv_RetargetToTarget( ::MMIStandard::MAvatarPosture& _return);
};

class MRetargetingServiceProcessor : public MMIServiceBaseProcessor {
 protected:
  ::std::shared_ptr<MRetargetingServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MRetargetingServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_SetupRetargeting(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RetargetToIntermediate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RetargetToTarget(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MRetargetingServiceProcessor(::std::shared_ptr<MRetargetingServiceIf> iface) :
    MMIServiceBaseProcessor(iface),
    iface_(iface) {
    processMap_["SetupRetargeting"] = &MRetargetingServiceProcessor::process_SetupRetargeting;
    processMap_["RetargetToIntermediate"] = &MRetargetingServiceProcessor::process_RetargetToIntermediate;
    processMap_["RetargetToTarget"] = &MRetargetingServiceProcessor::process_RetargetToTarget;
  }

  virtual ~MRetargetingServiceProcessor() {}
};

class MRetargetingServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MRetargetingServiceProcessorFactory(const ::std::shared_ptr< MRetargetingServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MRetargetingServiceIfFactory > handlerFactory_;
};

class MRetargetingServiceMultiface : virtual public MRetargetingServiceIf, public MMIServiceBaseMultiface {
 public:
  MRetargetingServiceMultiface(std::vector<std::shared_ptr<MRetargetingServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<MRetargetingServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      MMIServiceBaseMultiface::add(*iter);
    }
  }
  virtual ~MRetargetingServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<MRetargetingServiceIf> > ifaces_;
  MRetargetingServiceMultiface() {}
  void add(::std::shared_ptr<MRetargetingServiceIf> iface) {
    MMIServiceBaseMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void SetupRetargeting( ::MMIStandard::MAvatarDescription& _return, const  ::MMIStandard::MAvatarPosture& globalTarget) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetupRetargeting(_return, globalTarget);
    }
    ifaces_[i]->SetupRetargeting(_return, globalTarget);
    return;
  }

  void RetargetToIntermediate( ::MMIStandard::MAvatarPostureValues& _return, const  ::MMIStandard::MAvatarPosture& globalTarget) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RetargetToIntermediate(_return, globalTarget);
    }
    ifaces_[i]->RetargetToIntermediate(_return, globalTarget);
    return;
  }

  void RetargetToTarget( ::MMIStandard::MAvatarPosture& _return, const  ::MMIStandard::MAvatarPostureValues& intermediatePostureValues) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RetargetToTarget(_return, intermediatePostureValues);
    }
    ifaces_[i]->RetargetToTarget(_return, intermediatePostureValues);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MRetargetingServiceConcurrentClient : virtual public MRetargetingServiceIf, public MMIServiceBaseConcurrentClient {
 public:
  MRetargetingServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
    MMIServiceBaseConcurrentClient(prot, prot, sync) {}
  MRetargetingServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :    MMIServiceBaseConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void SetupRetargeting( ::MMIStandard::MAvatarDescription& _return, const  ::MMIStandard::MAvatarPosture& globalTarget);
  int32_t send_SetupRetargeting(const  ::MMIStandard::MAvatarPosture& globalTarget);
  void recv_SetupRetargeting( ::MMIStandard::MAvatarDescription& _return, const int32_t seqid);
  void RetargetToIntermediate( ::MMIStandard::MAvatarPostureValues& _return, const  ::MMIStandard::MAvatarPosture& globalTarget);
  int32_t send_RetargetToIntermediate(const  ::MMIStandard::MAvatarPosture& globalTarget);
  void recv_RetargetToIntermediate( ::MMIStandard::MAvatarPostureValues& _return, const int32_t seqid);
  void RetargetToTarget( ::MMIStandard::MAvatarPosture& _return, const  ::MMIStandard::MAvatarPostureValues& intermediatePostureValues);
  int32_t send_RetargetToTarget(const  ::MMIStandard::MAvatarPostureValues& intermediatePostureValues);
  void recv_RetargetToTarget( ::MMIStandard::MAvatarPosture& _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
