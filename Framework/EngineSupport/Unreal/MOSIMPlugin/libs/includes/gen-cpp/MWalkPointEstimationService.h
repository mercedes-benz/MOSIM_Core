/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MWalkPointEstimationService_H
#define MWalkPointEstimationService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "services_types.h"
#include "MMIServiceBase.h"

namespace MMIStandard {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MWalkPointEstimationServiceIf : virtual public MMIServiceBaseIf {
 public:
  virtual ~MWalkPointEstimationServiceIf() {}
  virtual void EstimateWalkPoints(std::vector<MWalkPoint> & _return, const std::vector< ::MMIStandard::MSceneObject> & sceneObjects, const  ::MMIStandard::MSceneObject& target, const int32_t amount, const std::map<std::string, std::string> & properties) = 0;
};

class MWalkPointEstimationServiceIfFactory : virtual public MMIServiceBaseIfFactory {
 public:
  typedef MWalkPointEstimationServiceIf Handler;

  virtual ~MWalkPointEstimationServiceIfFactory() {}

  virtual MWalkPointEstimationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) = 0;
};

class MWalkPointEstimationServiceIfSingletonFactory : virtual public MWalkPointEstimationServiceIfFactory {
 public:
  MWalkPointEstimationServiceIfSingletonFactory(const ::std::shared_ptr<MWalkPointEstimationServiceIf>& iface) : iface_(iface) {}
  virtual ~MWalkPointEstimationServiceIfSingletonFactory() {}

  virtual MWalkPointEstimationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MWalkPointEstimationServiceIf> iface_;
};

class MWalkPointEstimationServiceNull : virtual public MWalkPointEstimationServiceIf , virtual public MMIServiceBaseNull {
 public:
  virtual ~MWalkPointEstimationServiceNull() {}
  void EstimateWalkPoints(std::vector<MWalkPoint> & /* _return */, const std::vector< ::MMIStandard::MSceneObject> & /* sceneObjects */, const  ::MMIStandard::MSceneObject& /* target */, const int32_t /* amount */, const std::map<std::string, std::string> & /* properties */) {
    return;
  }
};

typedef struct _MWalkPointEstimationService_EstimateWalkPoints_args__isset {
  _MWalkPointEstimationService_EstimateWalkPoints_args__isset() : sceneObjects(false), target(false), amount(false), properties(false) {}
  bool sceneObjects :1;
  bool target :1;
  bool amount :1;
  bool properties :1;
} _MWalkPointEstimationService_EstimateWalkPoints_args__isset;

class MWalkPointEstimationService_EstimateWalkPoints_args {
 public:

  MWalkPointEstimationService_EstimateWalkPoints_args(const MWalkPointEstimationService_EstimateWalkPoints_args&);
  MWalkPointEstimationService_EstimateWalkPoints_args& operator=(const MWalkPointEstimationService_EstimateWalkPoints_args&);
  MWalkPointEstimationService_EstimateWalkPoints_args() : amount(0) {
  }

  virtual ~MWalkPointEstimationService_EstimateWalkPoints_args() noexcept;
  std::vector< ::MMIStandard::MSceneObject>  sceneObjects;
   ::MMIStandard::MSceneObject target;
  int32_t amount;
  std::map<std::string, std::string>  properties;

  _MWalkPointEstimationService_EstimateWalkPoints_args__isset __isset;

  void __set_sceneObjects(const std::vector< ::MMIStandard::MSceneObject> & val);

  void __set_target(const  ::MMIStandard::MSceneObject& val);

  void __set_amount(const int32_t val);

  void __set_properties(const std::map<std::string, std::string> & val);

  bool operator == (const MWalkPointEstimationService_EstimateWalkPoints_args & rhs) const
  {
    if (!(sceneObjects == rhs.sceneObjects))
      return false;
    if (!(target == rhs.target))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const MWalkPointEstimationService_EstimateWalkPoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MWalkPointEstimationService_EstimateWalkPoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MWalkPointEstimationService_EstimateWalkPoints_pargs {
 public:


  virtual ~MWalkPointEstimationService_EstimateWalkPoints_pargs() noexcept;
  const std::vector< ::MMIStandard::MSceneObject> * sceneObjects;
  const  ::MMIStandard::MSceneObject* target;
  const int32_t* amount;
  const std::map<std::string, std::string> * properties;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MWalkPointEstimationService_EstimateWalkPoints_result__isset {
  _MWalkPointEstimationService_EstimateWalkPoints_result__isset() : success(false) {}
  bool success :1;
} _MWalkPointEstimationService_EstimateWalkPoints_result__isset;

class MWalkPointEstimationService_EstimateWalkPoints_result {
 public:

  MWalkPointEstimationService_EstimateWalkPoints_result(const MWalkPointEstimationService_EstimateWalkPoints_result&);
  MWalkPointEstimationService_EstimateWalkPoints_result& operator=(const MWalkPointEstimationService_EstimateWalkPoints_result&);
  MWalkPointEstimationService_EstimateWalkPoints_result() {
  }

  virtual ~MWalkPointEstimationService_EstimateWalkPoints_result() noexcept;
  std::vector<MWalkPoint>  success;

  _MWalkPointEstimationService_EstimateWalkPoints_result__isset __isset;

  void __set_success(const std::vector<MWalkPoint> & val);

  bool operator == (const MWalkPointEstimationService_EstimateWalkPoints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MWalkPointEstimationService_EstimateWalkPoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MWalkPointEstimationService_EstimateWalkPoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MWalkPointEstimationService_EstimateWalkPoints_presult__isset {
  _MWalkPointEstimationService_EstimateWalkPoints_presult__isset() : success(false) {}
  bool success :1;
} _MWalkPointEstimationService_EstimateWalkPoints_presult__isset;

class MWalkPointEstimationService_EstimateWalkPoints_presult {
 public:


  virtual ~MWalkPointEstimationService_EstimateWalkPoints_presult() noexcept;
  std::vector<MWalkPoint> * success;

  _MWalkPointEstimationService_EstimateWalkPoints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MWalkPointEstimationServiceClient : virtual public MWalkPointEstimationServiceIf, public MMIServiceBaseClient {
 public:
  MWalkPointEstimationServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    MMIServiceBaseClient(prot, prot) {}
  MWalkPointEstimationServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    MMIServiceBaseClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void EstimateWalkPoints(std::vector<MWalkPoint> & _return, const std::vector< ::MMIStandard::MSceneObject> & sceneObjects, const  ::MMIStandard::MSceneObject& target, const int32_t amount, const std::map<std::string, std::string> & properties);
  void send_EstimateWalkPoints(const std::vector< ::MMIStandard::MSceneObject> & sceneObjects, const  ::MMIStandard::MSceneObject& target, const int32_t amount, const std::map<std::string, std::string> & properties);
  void recv_EstimateWalkPoints(std::vector<MWalkPoint> & _return);
};

class MWalkPointEstimationServiceProcessor : public MMIServiceBaseProcessor {
 protected:
  ::std::shared_ptr<MWalkPointEstimationServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MWalkPointEstimationServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_EstimateWalkPoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MWalkPointEstimationServiceProcessor(::std::shared_ptr<MWalkPointEstimationServiceIf> iface) :
    MMIServiceBaseProcessor(iface),
    iface_(iface) {
    processMap_["EstimateWalkPoints"] = &MWalkPointEstimationServiceProcessor::process_EstimateWalkPoints;
  }

  virtual ~MWalkPointEstimationServiceProcessor() {}
};

class MWalkPointEstimationServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MWalkPointEstimationServiceProcessorFactory(const ::std::shared_ptr< MWalkPointEstimationServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MWalkPointEstimationServiceIfFactory > handlerFactory_;
};

class MWalkPointEstimationServiceMultiface : virtual public MWalkPointEstimationServiceIf, public MMIServiceBaseMultiface {
 public:
  MWalkPointEstimationServiceMultiface(std::vector<std::shared_ptr<MWalkPointEstimationServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<MWalkPointEstimationServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      MMIServiceBaseMultiface::add(*iter);
    }
  }
  virtual ~MWalkPointEstimationServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<MWalkPointEstimationServiceIf> > ifaces_;
  MWalkPointEstimationServiceMultiface() {}
  void add(::std::shared_ptr<MWalkPointEstimationServiceIf> iface) {
    MMIServiceBaseMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void EstimateWalkPoints(std::vector<MWalkPoint> & _return, const std::vector< ::MMIStandard::MSceneObject> & sceneObjects, const  ::MMIStandard::MSceneObject& target, const int32_t amount, const std::map<std::string, std::string> & properties) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EstimateWalkPoints(_return, sceneObjects, target, amount, properties);
    }
    ifaces_[i]->EstimateWalkPoints(_return, sceneObjects, target, amount, properties);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MWalkPointEstimationServiceConcurrentClient : virtual public MWalkPointEstimationServiceIf, public MMIServiceBaseConcurrentClient {
 public:
  MWalkPointEstimationServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
    MMIServiceBaseConcurrentClient(prot, prot, sync) {}
  MWalkPointEstimationServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :    MMIServiceBaseConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void EstimateWalkPoints(std::vector<MWalkPoint> & _return, const std::vector< ::MMIStandard::MSceneObject> & sceneObjects, const  ::MMIStandard::MSceneObject& target, const int32_t amount, const std::map<std::string, std::string> & properties);
  int32_t send_EstimateWalkPoints(const std::vector< ::MMIStandard::MSceneObject> & sceneObjects, const  ::MMIStandard::MSceneObject& target, const int32_t amount, const std::map<std::string, std::string> & properties);
  void recv_EstimateWalkPoints(std::vector<MWalkPoint> & _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
