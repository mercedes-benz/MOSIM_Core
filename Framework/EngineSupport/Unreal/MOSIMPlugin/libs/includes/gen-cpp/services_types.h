/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef services_TYPES_H
#define services_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "core_types.h"
#include "scene_types.h"
#include "math_types.h"
#include "avatar_types.h"
#include "constraints_types.h"


namespace MMIStandard {

struct MDirection {
  enum type {
    Right = 0,
    Left = 1,
    Up = 2,
    Down = 3,
    Forward = 4,
    Backward = 5
  };
};

extern const std::map<int, const char*> _MDirection_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MDirection::type& val);

std::string to_string(const MDirection::type& val);

struct MIKOperationType {
  enum type {
    SetPosition = 0,
    SetRotation = 1
  };
};

extern const std::map<int, const char*> _MIKOperationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MIKOperationType::type& val);

std::string to_string(const MIKOperationType::type& val);

class MIKServiceResult;

class MWalkPoint;

class MIKProperty;


class MIKServiceResult : public virtual ::apache::thrift::TBase {
 public:

  MIKServiceResult(const MIKServiceResult&);
  MIKServiceResult& operator=(const MIKServiceResult&);
  MIKServiceResult() : Success(0) {
  }

  virtual ~MIKServiceResult() noexcept;
   ::MMIStandard::MAvatarPostureValues Posture;
  bool Success;
  std::vector<double>  Error;

  void __set_Posture(const  ::MMIStandard::MAvatarPostureValues& val);

  void __set_Success(const bool val);

  void __set_Error(const std::vector<double> & val);

  bool operator == (const MIKServiceResult & rhs) const
  {
    if (!(Posture == rhs.Posture))
      return false;
    if (!(Success == rhs.Success))
      return false;
    if (!(Error == rhs.Error))
      return false;
    return true;
  }
  bool operator != (const MIKServiceResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MIKServiceResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MIKServiceResult &a, MIKServiceResult &b);

std::ostream& operator<<(std::ostream& out, const MIKServiceResult& obj);


class MWalkPoint : public virtual ::apache::thrift::TBase {
 public:

  MWalkPoint(const MWalkPoint&);
  MWalkPoint& operator=(const MWalkPoint&);
  MWalkPoint() : Suitability(0) {
  }

  virtual ~MWalkPoint() noexcept;
   ::MMIStandard::MGeometryConstraint PositionConstraint;
  double Suitability;

  void __set_PositionConstraint(const  ::MMIStandard::MGeometryConstraint& val);

  void __set_Suitability(const double val);

  bool operator == (const MWalkPoint & rhs) const
  {
    if (!(PositionConstraint == rhs.PositionConstraint))
      return false;
    if (!(Suitability == rhs.Suitability))
      return false;
    return true;
  }
  bool operator != (const MWalkPoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MWalkPoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MWalkPoint &a, MWalkPoint &b);

std::ostream& operator<<(std::ostream& out, const MWalkPoint& obj);


class MIKProperty : public virtual ::apache::thrift::TBase {
 public:

  MIKProperty(const MIKProperty&);
  MIKProperty& operator=(const MIKProperty&);
  MIKProperty() : Weight(0), Target(( ::MMIStandard::MEndeffectorType::type)0), OperationType((MIKOperationType::type)0) {
  }

  virtual ~MIKProperty() noexcept;
  std::vector<double>  Values;
  double Weight;
   ::MMIStandard::MEndeffectorType::type Target;
  MIKOperationType::type OperationType;

  void __set_Values(const std::vector<double> & val);

  void __set_Weight(const double val);

  void __set_Target(const  ::MMIStandard::MEndeffectorType::type val);

  void __set_OperationType(const MIKOperationType::type val);

  bool operator == (const MIKProperty & rhs) const
  {
    if (!(Values == rhs.Values))
      return false;
    if (!(Weight == rhs.Weight))
      return false;
    if (!(Target == rhs.Target))
      return false;
    if (!(OperationType == rhs.OperationType))
      return false;
    return true;
  }
  bool operator != (const MIKProperty &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MIKProperty & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MIKProperty &a, MIKProperty &b);

std::ostream& operator<<(std::ostream& out, const MIKProperty& obj);

} // namespace

#endif
