/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MGraspPoseService_H
#define MGraspPoseService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "services_types.h"
#include "MMIServiceBase.h"

namespace MMIStandard {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MGraspPoseServiceIf : virtual public MMIServiceBaseIf {
 public:
  virtual ~MGraspPoseServiceIf() {}
  virtual void GetGraspPoses(std::vector< ::MMIStandard::MGeometryConstraint> & _return, const  ::MMIStandard::MAvatarPostureValues& posture, const  ::MMIStandard::MJointType::type handType, const  ::MMIStandard::MSceneObject& sceneObject, const bool repositionHand) = 0;
};

class MGraspPoseServiceIfFactory : virtual public MMIServiceBaseIfFactory {
 public:
  typedef MGraspPoseServiceIf Handler;

  virtual ~MGraspPoseServiceIfFactory() {}

  virtual MGraspPoseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) = 0;
};

class MGraspPoseServiceIfSingletonFactory : virtual public MGraspPoseServiceIfFactory {
 public:
  MGraspPoseServiceIfSingletonFactory(const ::std::shared_ptr<MGraspPoseServiceIf>& iface) : iface_(iface) {}
  virtual ~MGraspPoseServiceIfSingletonFactory() {}

  virtual MGraspPoseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MGraspPoseServiceIf> iface_;
};

class MGraspPoseServiceNull : virtual public MGraspPoseServiceIf , virtual public MMIServiceBaseNull {
 public:
  virtual ~MGraspPoseServiceNull() {}
  void GetGraspPoses(std::vector< ::MMIStandard::MGeometryConstraint> & /* _return */, const  ::MMIStandard::MAvatarPostureValues& /* posture */, const  ::MMIStandard::MJointType::type /* handType */, const  ::MMIStandard::MSceneObject& /* sceneObject */, const bool /* repositionHand */) {
    return;
  }
};

typedef struct _MGraspPoseService_GetGraspPoses_args__isset {
  _MGraspPoseService_GetGraspPoses_args__isset() : posture(false), handType(false), sceneObject(false), repositionHand(false) {}
  bool posture :1;
  bool handType :1;
  bool sceneObject :1;
  bool repositionHand :1;
} _MGraspPoseService_GetGraspPoses_args__isset;

class MGraspPoseService_GetGraspPoses_args {
 public:

  MGraspPoseService_GetGraspPoses_args(const MGraspPoseService_GetGraspPoses_args&);
  MGraspPoseService_GetGraspPoses_args& operator=(const MGraspPoseService_GetGraspPoses_args&);
  MGraspPoseService_GetGraspPoses_args() : handType(( ::MMIStandard::MJointType::type)0), repositionHand(0) {
  }

  virtual ~MGraspPoseService_GetGraspPoses_args() noexcept;
   ::MMIStandard::MAvatarPostureValues posture;
   ::MMIStandard::MJointType::type handType;
   ::MMIStandard::MSceneObject sceneObject;
  bool repositionHand;

  _MGraspPoseService_GetGraspPoses_args__isset __isset;

  void __set_posture(const  ::MMIStandard::MAvatarPostureValues& val);

  void __set_handType(const  ::MMIStandard::MJointType::type val);

  void __set_sceneObject(const  ::MMIStandard::MSceneObject& val);

  void __set_repositionHand(const bool val);

  bool operator == (const MGraspPoseService_GetGraspPoses_args & rhs) const
  {
    if (!(posture == rhs.posture))
      return false;
    if (!(handType == rhs.handType))
      return false;
    if (!(sceneObject == rhs.sceneObject))
      return false;
    if (!(repositionHand == rhs.repositionHand))
      return false;
    return true;
  }
  bool operator != (const MGraspPoseService_GetGraspPoses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MGraspPoseService_GetGraspPoses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MGraspPoseService_GetGraspPoses_pargs {
 public:


  virtual ~MGraspPoseService_GetGraspPoses_pargs() noexcept;
  const  ::MMIStandard::MAvatarPostureValues* posture;
  const  ::MMIStandard::MJointType::type* handType;
  const  ::MMIStandard::MSceneObject* sceneObject;
  const bool* repositionHand;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MGraspPoseService_GetGraspPoses_result__isset {
  _MGraspPoseService_GetGraspPoses_result__isset() : success(false) {}
  bool success :1;
} _MGraspPoseService_GetGraspPoses_result__isset;

class MGraspPoseService_GetGraspPoses_result {
 public:

  MGraspPoseService_GetGraspPoses_result(const MGraspPoseService_GetGraspPoses_result&);
  MGraspPoseService_GetGraspPoses_result& operator=(const MGraspPoseService_GetGraspPoses_result&);
  MGraspPoseService_GetGraspPoses_result() {
  }

  virtual ~MGraspPoseService_GetGraspPoses_result() noexcept;
  std::vector< ::MMIStandard::MGeometryConstraint>  success;

  _MGraspPoseService_GetGraspPoses_result__isset __isset;

  void __set_success(const std::vector< ::MMIStandard::MGeometryConstraint> & val);

  bool operator == (const MGraspPoseService_GetGraspPoses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MGraspPoseService_GetGraspPoses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MGraspPoseService_GetGraspPoses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MGraspPoseService_GetGraspPoses_presult__isset {
  _MGraspPoseService_GetGraspPoses_presult__isset() : success(false) {}
  bool success :1;
} _MGraspPoseService_GetGraspPoses_presult__isset;

class MGraspPoseService_GetGraspPoses_presult {
 public:


  virtual ~MGraspPoseService_GetGraspPoses_presult() noexcept;
  std::vector< ::MMIStandard::MGeometryConstraint> * success;

  _MGraspPoseService_GetGraspPoses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MGraspPoseServiceClient : virtual public MGraspPoseServiceIf, public MMIServiceBaseClient {
 public:
  MGraspPoseServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    MMIServiceBaseClient(prot, prot) {}
  MGraspPoseServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    MMIServiceBaseClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetGraspPoses(std::vector< ::MMIStandard::MGeometryConstraint> & _return, const  ::MMIStandard::MAvatarPostureValues& posture, const  ::MMIStandard::MJointType::type handType, const  ::MMIStandard::MSceneObject& sceneObject, const bool repositionHand);
  void send_GetGraspPoses(const  ::MMIStandard::MAvatarPostureValues& posture, const  ::MMIStandard::MJointType::type handType, const  ::MMIStandard::MSceneObject& sceneObject, const bool repositionHand);
  void recv_GetGraspPoses(std::vector< ::MMIStandard::MGeometryConstraint> & _return);
};

class MGraspPoseServiceProcessor : public MMIServiceBaseProcessor {
 protected:
  ::std::shared_ptr<MGraspPoseServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MGraspPoseServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetGraspPoses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MGraspPoseServiceProcessor(::std::shared_ptr<MGraspPoseServiceIf> iface) :
    MMIServiceBaseProcessor(iface),
    iface_(iface) {
    processMap_["GetGraspPoses"] = &MGraspPoseServiceProcessor::process_GetGraspPoses;
  }

  virtual ~MGraspPoseServiceProcessor() {}
};

class MGraspPoseServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MGraspPoseServiceProcessorFactory(const ::std::shared_ptr< MGraspPoseServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MGraspPoseServiceIfFactory > handlerFactory_;
};

class MGraspPoseServiceMultiface : virtual public MGraspPoseServiceIf, public MMIServiceBaseMultiface {
 public:
  MGraspPoseServiceMultiface(std::vector<std::shared_ptr<MGraspPoseServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<MGraspPoseServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      MMIServiceBaseMultiface::add(*iter);
    }
  }
  virtual ~MGraspPoseServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<MGraspPoseServiceIf> > ifaces_;
  MGraspPoseServiceMultiface() {}
  void add(::std::shared_ptr<MGraspPoseServiceIf> iface) {
    MMIServiceBaseMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void GetGraspPoses(std::vector< ::MMIStandard::MGeometryConstraint> & _return, const  ::MMIStandard::MAvatarPostureValues& posture, const  ::MMIStandard::MJointType::type handType, const  ::MMIStandard::MSceneObject& sceneObject, const bool repositionHand) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetGraspPoses(_return, posture, handType, sceneObject, repositionHand);
    }
    ifaces_[i]->GetGraspPoses(_return, posture, handType, sceneObject, repositionHand);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MGraspPoseServiceConcurrentClient : virtual public MGraspPoseServiceIf, public MMIServiceBaseConcurrentClient {
 public:
  MGraspPoseServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
    MMIServiceBaseConcurrentClient(prot, prot, sync) {}
  MGraspPoseServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :    MMIServiceBaseConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetGraspPoses(std::vector< ::MMIStandard::MGeometryConstraint> & _return, const  ::MMIStandard::MAvatarPostureValues& posture, const  ::MMIStandard::MJointType::type handType, const  ::MMIStandard::MSceneObject& sceneObject, const bool repositionHand);
  int32_t send_GetGraspPoses(const  ::MMIStandard::MAvatarPostureValues& posture, const  ::MMIStandard::MJointType::type handType, const  ::MMIStandard::MSceneObject& sceneObject, const bool repositionHand);
  void recv_GetGraspPoses(std::vector< ::MMIStandard::MGeometryConstraint> & _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
