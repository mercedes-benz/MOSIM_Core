/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef scene_TYPES_H
#define scene_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "math_types.h"
#include "core_types.h"
#include "avatar_types.h"
#include "constraints_types.h"


namespace MMIStandard {

struct MDrawingCallType {
  enum type {
    DrawLine2D = 0,
    DrawLine3D = 1,
    DrawPoint2D = 2,
    DrawPoint3D = 3,
    DrawText = 4,
    Custom = 5
  };
};

extern const std::map<int, const char*> _MDrawingCallType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MDrawingCallType::type& val);

std::string to_string(const MDrawingCallType::type& val);

struct MPhysicsInteractionType {
  enum type {
    AddForce = 0,
    AddTorque = 1,
    ChangeVelocity = 2,
    ChangeAngularVelocity = 3,
    ChangeMass = 4,
    ChangeCenterOfMass = 5,
    ChangeInertia = 6
  };
};

extern const std::map<int, const char*> _MPhysicsInteractionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MPhysicsInteractionType::type& val);

std::string to_string(const MPhysicsInteractionType::type& val);

struct MColliderType {
  enum type {
    Box = 0,
    Sphere = 1,
    Capsule = 2,
    Cone = 3,
    Cylinder = 4,
    Mesh = 5,
    Custom = 6
  };
};

extern const std::map<int, const char*> _MColliderType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MColliderType::type& val);

std::string to_string(const MColliderType::type& val);

class MAttachment;

class MAttachmentManipulation;

class MPropertyManipulation;

class MTransformUpdate;

class MPropertyUpdate;

class MPhysicsProperties;

class MSphereColliderProperties;

class MConeColliderProperties;

class MCylinderColliderProperties;

class MTransformManipulation;

class MBoxColliderProperties;

class MCapsuleColliderProperties;

class MMeshColliderProperties;

class MMesh;

class MNavigationMesh;

class MDrawingCall;

class MPhysicsInteraction;

class MSceneManipulation;

class MCollider;

class MSceneObject;

class MSceneObjectUpdate;

class MSceneUpdate;

class MAvatarUpdate;

typedef struct _MAttachment__isset {
  _MAttachment__isset() : Type(false) {}
  bool Type :1;
} _MAttachment__isset;

class MAttachment : public virtual ::apache::thrift::TBase {
 public:

  MAttachment(const MAttachment&);
  MAttachment& operator=(const MAttachment&);
  MAttachment() : Parent(), Child(), Type() {
  }

  virtual ~MAttachment() noexcept;
  std::string Parent;
  std::string Child;
  std::string Type;

  _MAttachment__isset __isset;

  void __set_Parent(const std::string& val);

  void __set_Child(const std::string& val);

  void __set_Type(const std::string& val);

  bool operator == (const MAttachment & rhs) const
  {
    if (!(Parent == rhs.Parent))
      return false;
    if (!(Child == rhs.Child))
      return false;
    if (__isset.Type != rhs.__isset.Type)
      return false;
    else if (__isset.Type && !(Type == rhs.Type))
      return false;
    return true;
  }
  bool operator != (const MAttachment &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MAttachment & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MAttachment &a, MAttachment &b);

std::ostream& operator<<(std::ostream& out, const MAttachment& obj);

typedef struct _MAttachmentManipulation__isset {
  _MAttachmentManipulation__isset() : Type(false) {}
  bool Type :1;
} _MAttachmentManipulation__isset;

class MAttachmentManipulation : public virtual ::apache::thrift::TBase {
 public:

  MAttachmentManipulation(const MAttachmentManipulation&);
  MAttachmentManipulation& operator=(const MAttachmentManipulation&);
  MAttachmentManipulation() : Parent(), Child(), AddRemove(0), Type() {
  }

  virtual ~MAttachmentManipulation() noexcept;
  std::string Parent;
  std::string Child;
  bool AddRemove;
  std::string Type;

  _MAttachmentManipulation__isset __isset;

  void __set_Parent(const std::string& val);

  void __set_Child(const std::string& val);

  void __set_AddRemove(const bool val);

  void __set_Type(const std::string& val);

  bool operator == (const MAttachmentManipulation & rhs) const
  {
    if (!(Parent == rhs.Parent))
      return false;
    if (!(Child == rhs.Child))
      return false;
    if (!(AddRemove == rhs.AddRemove))
      return false;
    if (__isset.Type != rhs.__isset.Type)
      return false;
    else if (__isset.Type && !(Type == rhs.Type))
      return false;
    return true;
  }
  bool operator != (const MAttachmentManipulation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MAttachmentManipulation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MAttachmentManipulation &a, MAttachmentManipulation &b);

std::ostream& operator<<(std::ostream& out, const MAttachmentManipulation& obj);

typedef struct _MPropertyManipulation__isset {
  _MPropertyManipulation__isset() : Value(false) {}
  bool Value :1;
} _MPropertyManipulation__isset;

class MPropertyManipulation : public virtual ::apache::thrift::TBase {
 public:

  MPropertyManipulation(const MPropertyManipulation&);
  MPropertyManipulation& operator=(const MPropertyManipulation&);
  MPropertyManipulation() : Target(), Key(), AddRemove(0), Value() {
  }

  virtual ~MPropertyManipulation() noexcept;
  std::string Target;
  std::string Key;
  bool AddRemove;
  std::string Value;

  _MPropertyManipulation__isset __isset;

  void __set_Target(const std::string& val);

  void __set_Key(const std::string& val);

  void __set_AddRemove(const bool val);

  void __set_Value(const std::string& val);

  bool operator == (const MPropertyManipulation & rhs) const
  {
    if (!(Target == rhs.Target))
      return false;
    if (!(Key == rhs.Key))
      return false;
    if (!(AddRemove == rhs.AddRemove))
      return false;
    if (__isset.Value != rhs.__isset.Value)
      return false;
    else if (__isset.Value && !(Value == rhs.Value))
      return false;
    return true;
  }
  bool operator != (const MPropertyManipulation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MPropertyManipulation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MPropertyManipulation &a, MPropertyManipulation &b);

std::ostream& operator<<(std::ostream& out, const MPropertyManipulation& obj);

typedef struct _MTransformUpdate__isset {
  _MTransformUpdate__isset() : Position(false), Rotation(false), Parent(false) {}
  bool Position :1;
  bool Rotation :1;
  bool Parent :1;
} _MTransformUpdate__isset;

class MTransformUpdate : public virtual ::apache::thrift::TBase {
 public:

  MTransformUpdate(const MTransformUpdate&);
  MTransformUpdate& operator=(const MTransformUpdate&);
  MTransformUpdate() : Parent() {
  }

  virtual ~MTransformUpdate() noexcept;
  std::vector<double>  Position;
  std::vector<double>  Rotation;
  std::string Parent;

  _MTransformUpdate__isset __isset;

  void __set_Position(const std::vector<double> & val);

  void __set_Rotation(const std::vector<double> & val);

  void __set_Parent(const std::string& val);

  bool operator == (const MTransformUpdate & rhs) const
  {
    if (__isset.Position != rhs.__isset.Position)
      return false;
    else if (__isset.Position && !(Position == rhs.Position))
      return false;
    if (__isset.Rotation != rhs.__isset.Rotation)
      return false;
    else if (__isset.Rotation && !(Rotation == rhs.Rotation))
      return false;
    if (__isset.Parent != rhs.__isset.Parent)
      return false;
    else if (__isset.Parent && !(Parent == rhs.Parent))
      return false;
    return true;
  }
  bool operator != (const MTransformUpdate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MTransformUpdate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MTransformUpdate &a, MTransformUpdate &b);

std::ostream& operator<<(std::ostream& out, const MTransformUpdate& obj);

typedef struct _MPropertyUpdate__isset {
  _MPropertyUpdate__isset() : Value(false) {}
  bool Value :1;
} _MPropertyUpdate__isset;

class MPropertyUpdate : public virtual ::apache::thrift::TBase {
 public:

  MPropertyUpdate(const MPropertyUpdate&);
  MPropertyUpdate& operator=(const MPropertyUpdate&);
  MPropertyUpdate() : Key(), Value() {
  }

  virtual ~MPropertyUpdate() noexcept;
  std::string Key;
  std::string Value;

  _MPropertyUpdate__isset __isset;

  void __set_Key(const std::string& val);

  void __set_Value(const std::string& val);

  bool operator == (const MPropertyUpdate & rhs) const
  {
    if (!(Key == rhs.Key))
      return false;
    if (__isset.Value != rhs.__isset.Value)
      return false;
    else if (__isset.Value && !(Value == rhs.Value))
      return false;
    return true;
  }
  bool operator != (const MPropertyUpdate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MPropertyUpdate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MPropertyUpdate &a, MPropertyUpdate &b);

std::ostream& operator<<(std::ostream& out, const MPropertyUpdate& obj);

typedef struct _MPhysicsProperties__isset {
  _MPhysicsProperties__isset() : Inertia(false), Velocity(false), AngularVelocity(false), NetForce(false), NetTorque(false), Mu1(false), Mu2(false), Bounciness(false), MuTorsion(false), TorsionSurfaceRadius(false) {}
  bool Inertia :1;
  bool Velocity :1;
  bool AngularVelocity :1;
  bool NetForce :1;
  bool NetTorque :1;
  bool Mu1 :1;
  bool Mu2 :1;
  bool Bounciness :1;
  bool MuTorsion :1;
  bool TorsionSurfaceRadius :1;
} _MPhysicsProperties__isset;

class MPhysicsProperties : public virtual ::apache::thrift::TBase {
 public:

  MPhysicsProperties(const MPhysicsProperties&);
  MPhysicsProperties& operator=(const MPhysicsProperties&);
  MPhysicsProperties() : Mass(0), Mu1(0), Mu2(0), Bounciness(0), MuTorsion(0), TorsionSurfaceRadius(0) {
  }

  virtual ~MPhysicsProperties() noexcept;
  double Mass;
  std::vector<double>  CenterOfMass;
  std::vector<double>  Inertia;
  std::vector<double>  Velocity;
  std::vector<double>  AngularVelocity;
  std::vector<double>  NetForce;
  std::vector<double>  NetTorque;
  double Mu1;
  double Mu2;
  double Bounciness;
  double MuTorsion;
  double TorsionSurfaceRadius;

  _MPhysicsProperties__isset __isset;

  void __set_Mass(const double val);

  void __set_CenterOfMass(const std::vector<double> & val);

  void __set_Inertia(const std::vector<double> & val);

  void __set_Velocity(const std::vector<double> & val);

  void __set_AngularVelocity(const std::vector<double> & val);

  void __set_NetForce(const std::vector<double> & val);

  void __set_NetTorque(const std::vector<double> & val);

  void __set_Mu1(const double val);

  void __set_Mu2(const double val);

  void __set_Bounciness(const double val);

  void __set_MuTorsion(const double val);

  void __set_TorsionSurfaceRadius(const double val);

  bool operator == (const MPhysicsProperties & rhs) const
  {
    if (!(Mass == rhs.Mass))
      return false;
    if (!(CenterOfMass == rhs.CenterOfMass))
      return false;
    if (__isset.Inertia != rhs.__isset.Inertia)
      return false;
    else if (__isset.Inertia && !(Inertia == rhs.Inertia))
      return false;
    if (__isset.Velocity != rhs.__isset.Velocity)
      return false;
    else if (__isset.Velocity && !(Velocity == rhs.Velocity))
      return false;
    if (__isset.AngularVelocity != rhs.__isset.AngularVelocity)
      return false;
    else if (__isset.AngularVelocity && !(AngularVelocity == rhs.AngularVelocity))
      return false;
    if (__isset.NetForce != rhs.__isset.NetForce)
      return false;
    else if (__isset.NetForce && !(NetForce == rhs.NetForce))
      return false;
    if (__isset.NetTorque != rhs.__isset.NetTorque)
      return false;
    else if (__isset.NetTorque && !(NetTorque == rhs.NetTorque))
      return false;
    if (__isset.Mu1 != rhs.__isset.Mu1)
      return false;
    else if (__isset.Mu1 && !(Mu1 == rhs.Mu1))
      return false;
    if (__isset.Mu2 != rhs.__isset.Mu2)
      return false;
    else if (__isset.Mu2 && !(Mu2 == rhs.Mu2))
      return false;
    if (__isset.Bounciness != rhs.__isset.Bounciness)
      return false;
    else if (__isset.Bounciness && !(Bounciness == rhs.Bounciness))
      return false;
    if (__isset.MuTorsion != rhs.__isset.MuTorsion)
      return false;
    else if (__isset.MuTorsion && !(MuTorsion == rhs.MuTorsion))
      return false;
    if (__isset.TorsionSurfaceRadius != rhs.__isset.TorsionSurfaceRadius)
      return false;
    else if (__isset.TorsionSurfaceRadius && !(TorsionSurfaceRadius == rhs.TorsionSurfaceRadius))
      return false;
    return true;
  }
  bool operator != (const MPhysicsProperties &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MPhysicsProperties & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MPhysicsProperties &a, MPhysicsProperties &b);

std::ostream& operator<<(std::ostream& out, const MPhysicsProperties& obj);


class MSphereColliderProperties : public virtual ::apache::thrift::TBase {
 public:

  MSphereColliderProperties(const MSphereColliderProperties&);
  MSphereColliderProperties& operator=(const MSphereColliderProperties&);
  MSphereColliderProperties() : Radius(0) {
  }

  virtual ~MSphereColliderProperties() noexcept;
  double Radius;

  void __set_Radius(const double val);

  bool operator == (const MSphereColliderProperties & rhs) const
  {
    if (!(Radius == rhs.Radius))
      return false;
    return true;
  }
  bool operator != (const MSphereColliderProperties &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSphereColliderProperties & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MSphereColliderProperties &a, MSphereColliderProperties &b);

std::ostream& operator<<(std::ostream& out, const MSphereColliderProperties& obj);


class MConeColliderProperties : public virtual ::apache::thrift::TBase {
 public:

  MConeColliderProperties(const MConeColliderProperties&);
  MConeColliderProperties& operator=(const MConeColliderProperties&);
  MConeColliderProperties() : Radius(0), Height(0) {
  }

  virtual ~MConeColliderProperties() noexcept;
  double Radius;
  double Height;

  void __set_Radius(const double val);

  void __set_Height(const double val);

  bool operator == (const MConeColliderProperties & rhs) const
  {
    if (!(Radius == rhs.Radius))
      return false;
    if (!(Height == rhs.Height))
      return false;
    return true;
  }
  bool operator != (const MConeColliderProperties &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MConeColliderProperties & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MConeColliderProperties &a, MConeColliderProperties &b);

std::ostream& operator<<(std::ostream& out, const MConeColliderProperties& obj);


class MCylinderColliderProperties : public virtual ::apache::thrift::TBase {
 public:

  MCylinderColliderProperties(const MCylinderColliderProperties&);
  MCylinderColliderProperties& operator=(const MCylinderColliderProperties&);
  MCylinderColliderProperties() : Radius(0), Height(0) {
  }

  virtual ~MCylinderColliderProperties() noexcept;
  double Radius;
  double Height;

  void __set_Radius(const double val);

  void __set_Height(const double val);

  bool operator == (const MCylinderColliderProperties & rhs) const
  {
    if (!(Radius == rhs.Radius))
      return false;
    if (!(Height == rhs.Height))
      return false;
    return true;
  }
  bool operator != (const MCylinderColliderProperties &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCylinderColliderProperties & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MCylinderColliderProperties &a, MCylinderColliderProperties &b);

std::ostream& operator<<(std::ostream& out, const MCylinderColliderProperties& obj);

typedef struct _MTransformManipulation__isset {
  _MTransformManipulation__isset() : Position(false), Rotation(false), Parent(false) {}
  bool Position :1;
  bool Rotation :1;
  bool Parent :1;
} _MTransformManipulation__isset;

class MTransformManipulation : public virtual ::apache::thrift::TBase {
 public:

  MTransformManipulation(const MTransformManipulation&);
  MTransformManipulation& operator=(const MTransformManipulation&);
  MTransformManipulation() : Target(), Parent() {
  }

  virtual ~MTransformManipulation() noexcept;
  std::string Target;
   ::MMIStandard::MVector3 Position;
   ::MMIStandard::MQuaternion Rotation;
  std::string Parent;

  _MTransformManipulation__isset __isset;

  void __set_Target(const std::string& val);

  void __set_Position(const  ::MMIStandard::MVector3& val);

  void __set_Rotation(const  ::MMIStandard::MQuaternion& val);

  void __set_Parent(const std::string& val);

  bool operator == (const MTransformManipulation & rhs) const
  {
    if (!(Target == rhs.Target))
      return false;
    if (__isset.Position != rhs.__isset.Position)
      return false;
    else if (__isset.Position && !(Position == rhs.Position))
      return false;
    if (__isset.Rotation != rhs.__isset.Rotation)
      return false;
    else if (__isset.Rotation && !(Rotation == rhs.Rotation))
      return false;
    if (__isset.Parent != rhs.__isset.Parent)
      return false;
    else if (__isset.Parent && !(Parent == rhs.Parent))
      return false;
    return true;
  }
  bool operator != (const MTransformManipulation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MTransformManipulation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MTransformManipulation &a, MTransformManipulation &b);

std::ostream& operator<<(std::ostream& out, const MTransformManipulation& obj);


class MBoxColliderProperties : public virtual ::apache::thrift::TBase {
 public:

  MBoxColliderProperties(const MBoxColliderProperties&);
  MBoxColliderProperties& operator=(const MBoxColliderProperties&);
  MBoxColliderProperties() {
  }

  virtual ~MBoxColliderProperties() noexcept;
   ::MMIStandard::MVector3 Size;

  void __set_Size(const  ::MMIStandard::MVector3& val);

  bool operator == (const MBoxColliderProperties & rhs) const
  {
    if (!(Size == rhs.Size))
      return false;
    return true;
  }
  bool operator != (const MBoxColliderProperties &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MBoxColliderProperties & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MBoxColliderProperties &a, MBoxColliderProperties &b);

std::ostream& operator<<(std::ostream& out, const MBoxColliderProperties& obj);

typedef struct _MCapsuleColliderProperties__isset {
  _MCapsuleColliderProperties__isset() : MainAxis(false) {}
  bool MainAxis :1;
} _MCapsuleColliderProperties__isset;

class MCapsuleColliderProperties : public virtual ::apache::thrift::TBase {
 public:

  MCapsuleColliderProperties(const MCapsuleColliderProperties&);
  MCapsuleColliderProperties& operator=(const MCapsuleColliderProperties&);
  MCapsuleColliderProperties() : Radius(0), Height(0) {
  }

  virtual ~MCapsuleColliderProperties() noexcept;
  double Radius;
  double Height;
   ::MMIStandard::MVector3 MainAxis;

  _MCapsuleColliderProperties__isset __isset;

  void __set_Radius(const double val);

  void __set_Height(const double val);

  void __set_MainAxis(const  ::MMIStandard::MVector3& val);

  bool operator == (const MCapsuleColliderProperties & rhs) const
  {
    if (!(Radius == rhs.Radius))
      return false;
    if (!(Height == rhs.Height))
      return false;
    if (__isset.MainAxis != rhs.__isset.MainAxis)
      return false;
    else if (__isset.MainAxis && !(MainAxis == rhs.MainAxis))
      return false;
    return true;
  }
  bool operator != (const MCapsuleColliderProperties &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCapsuleColliderProperties & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MCapsuleColliderProperties &a, MCapsuleColliderProperties &b);

std::ostream& operator<<(std::ostream& out, const MCapsuleColliderProperties& obj);


class MMeshColliderProperties : public virtual ::apache::thrift::TBase {
 public:

  MMeshColliderProperties(const MMeshColliderProperties&);
  MMeshColliderProperties& operator=(const MMeshColliderProperties&);
  MMeshColliderProperties() {
  }

  virtual ~MMeshColliderProperties() noexcept;
  std::vector< ::MMIStandard::MVector3>  Vertices;
  std::vector<int32_t>  Triangles;

  void __set_Vertices(const std::vector< ::MMIStandard::MVector3> & val);

  void __set_Triangles(const std::vector<int32_t> & val);

  bool operator == (const MMeshColliderProperties & rhs) const
  {
    if (!(Vertices == rhs.Vertices))
      return false;
    if (!(Triangles == rhs.Triangles))
      return false;
    return true;
  }
  bool operator != (const MMeshColliderProperties &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMeshColliderProperties & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MMeshColliderProperties &a, MMeshColliderProperties &b);

std::ostream& operator<<(std::ostream& out, const MMeshColliderProperties& obj);

typedef struct _MMesh__isset {
  _MMesh__isset() : UVCoordinates(false), Properties(false) {}
  bool UVCoordinates :1;
  bool Properties :1;
} _MMesh__isset;

class MMesh : public virtual ::apache::thrift::TBase {
 public:

  MMesh(const MMesh&);
  MMesh& operator=(const MMesh&);
  MMesh() : ID() {
  }

  virtual ~MMesh() noexcept;
  std::string ID;
  std::vector< ::MMIStandard::MVector3>  Vertices;
  std::vector<int32_t>  Triangles;
  std::vector< ::MMIStandard::MVector2>  UVCoordinates;
  std::map<std::string, std::string>  Properties;

  _MMesh__isset __isset;

  void __set_ID(const std::string& val);

  void __set_Vertices(const std::vector< ::MMIStandard::MVector3> & val);

  void __set_Triangles(const std::vector<int32_t> & val);

  void __set_UVCoordinates(const std::vector< ::MMIStandard::MVector2> & val);

  void __set_Properties(const std::map<std::string, std::string> & val);

  bool operator == (const MMesh & rhs) const
  {
    if (!(ID == rhs.ID))
      return false;
    if (!(Vertices == rhs.Vertices))
      return false;
    if (!(Triangles == rhs.Triangles))
      return false;
    if (__isset.UVCoordinates != rhs.__isset.UVCoordinates)
      return false;
    else if (__isset.UVCoordinates && !(UVCoordinates == rhs.UVCoordinates))
      return false;
    if (__isset.Properties != rhs.__isset.Properties)
      return false;
    else if (__isset.Properties && !(Properties == rhs.Properties))
      return false;
    return true;
  }
  bool operator != (const MMesh &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MMesh & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MMesh &a, MMesh &b);

std::ostream& operator<<(std::ostream& out, const MMesh& obj);

typedef struct _MNavigationMesh__isset {
  _MNavigationMesh__isset() : Properties(false) {}
  bool Properties :1;
} _MNavigationMesh__isset;

class MNavigationMesh : public virtual ::apache::thrift::TBase {
 public:

  MNavigationMesh(const MNavigationMesh&);
  MNavigationMesh& operator=(const MNavigationMesh&);
  MNavigationMesh() {
  }

  virtual ~MNavigationMesh() noexcept;
  std::vector< ::MMIStandard::MVector3>  Vertices;
  std::vector<int32_t>  Triangles;
  std::map<std::string, std::string>  Properties;

  _MNavigationMesh__isset __isset;

  void __set_Vertices(const std::vector< ::MMIStandard::MVector3> & val);

  void __set_Triangles(const std::vector<int32_t> & val);

  void __set_Properties(const std::map<std::string, std::string> & val);

  bool operator == (const MNavigationMesh & rhs) const
  {
    if (!(Vertices == rhs.Vertices))
      return false;
    if (!(Triangles == rhs.Triangles))
      return false;
    if (__isset.Properties != rhs.__isset.Properties)
      return false;
    else if (__isset.Properties && !(Properties == rhs.Properties))
      return false;
    return true;
  }
  bool operator != (const MNavigationMesh &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MNavigationMesh & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MNavigationMesh &a, MNavigationMesh &b);

std::ostream& operator<<(std::ostream& out, const MNavigationMesh& obj);

typedef struct _MDrawingCall__isset {
  _MDrawingCall__isset() : Data(false), Properties(false) {}
  bool Data :1;
  bool Properties :1;
} _MDrawingCall__isset;

class MDrawingCall : public virtual ::apache::thrift::TBase {
 public:

  MDrawingCall(const MDrawingCall&);
  MDrawingCall& operator=(const MDrawingCall&);
  MDrawingCall() : Type((MDrawingCallType::type)0) {
  }

  virtual ~MDrawingCall() noexcept;
  MDrawingCallType::type Type;
  std::vector<double>  Data;
  std::map<std::string, std::string>  Properties;

  _MDrawingCall__isset __isset;

  void __set_Type(const MDrawingCallType::type val);

  void __set_Data(const std::vector<double> & val);

  void __set_Properties(const std::map<std::string, std::string> & val);

  bool operator == (const MDrawingCall & rhs) const
  {
    if (!(Type == rhs.Type))
      return false;
    if (__isset.Data != rhs.__isset.Data)
      return false;
    else if (__isset.Data && !(Data == rhs.Data))
      return false;
    if (__isset.Properties != rhs.__isset.Properties)
      return false;
    else if (__isset.Properties && !(Properties == rhs.Properties))
      return false;
    return true;
  }
  bool operator != (const MDrawingCall &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MDrawingCall & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MDrawingCall &a, MDrawingCall &b);

std::ostream& operator<<(std::ostream& out, const MDrawingCall& obj);

typedef struct _MPhysicsInteraction__isset {
  _MPhysicsInteraction__isset() : Properties(false) {}
  bool Properties :1;
} _MPhysicsInteraction__isset;

class MPhysicsInteraction : public virtual ::apache::thrift::TBase {
 public:

  MPhysicsInteraction(const MPhysicsInteraction&);
  MPhysicsInteraction& operator=(const MPhysicsInteraction&);
  MPhysicsInteraction() : Target(), Type((MPhysicsInteractionType::type)0) {
  }

  virtual ~MPhysicsInteraction() noexcept;
  std::string Target;
  MPhysicsInteractionType::type Type;
  std::vector<double>  Values;
  std::map<std::string, std::string>  Properties;

  _MPhysicsInteraction__isset __isset;

  void __set_Target(const std::string& val);

  void __set_Type(const MPhysicsInteractionType::type val);

  void __set_Values(const std::vector<double> & val);

  void __set_Properties(const std::map<std::string, std::string> & val);

  bool operator == (const MPhysicsInteraction & rhs) const
  {
    if (!(Target == rhs.Target))
      return false;
    if (!(Type == rhs.Type))
      return false;
    if (!(Values == rhs.Values))
      return false;
    if (__isset.Properties != rhs.__isset.Properties)
      return false;
    else if (__isset.Properties && !(Properties == rhs.Properties))
      return false;
    return true;
  }
  bool operator != (const MPhysicsInteraction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MPhysicsInteraction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MPhysicsInteraction &a, MPhysicsInteraction &b);

std::ostream& operator<<(std::ostream& out, const MPhysicsInteraction& obj);

typedef struct _MSceneManipulation__isset {
  _MSceneManipulation__isset() : Transforms(false), PhysicsInteractions(false), Properties(false), Attachments(false) {}
  bool Transforms :1;
  bool PhysicsInteractions :1;
  bool Properties :1;
  bool Attachments :1;
} _MSceneManipulation__isset;

class MSceneManipulation : public virtual ::apache::thrift::TBase {
 public:

  MSceneManipulation(const MSceneManipulation&);
  MSceneManipulation& operator=(const MSceneManipulation&);
  MSceneManipulation() {
  }

  virtual ~MSceneManipulation() noexcept;
  std::vector<MTransformManipulation>  Transforms;
  std::vector<MPhysicsInteraction>  PhysicsInteractions;
  std::vector<MPropertyManipulation>  Properties;
  std::vector<MAttachmentManipulation>  Attachments;

  _MSceneManipulation__isset __isset;

  void __set_Transforms(const std::vector<MTransformManipulation> & val);

  void __set_PhysicsInteractions(const std::vector<MPhysicsInteraction> & val);

  void __set_Properties(const std::vector<MPropertyManipulation> & val);

  void __set_Attachments(const std::vector<MAttachmentManipulation> & val);

  bool operator == (const MSceneManipulation & rhs) const
  {
    if (__isset.Transforms != rhs.__isset.Transforms)
      return false;
    else if (__isset.Transforms && !(Transforms == rhs.Transforms))
      return false;
    if (__isset.PhysicsInteractions != rhs.__isset.PhysicsInteractions)
      return false;
    else if (__isset.PhysicsInteractions && !(PhysicsInteractions == rhs.PhysicsInteractions))
      return false;
    if (__isset.Properties != rhs.__isset.Properties)
      return false;
    else if (__isset.Properties && !(Properties == rhs.Properties))
      return false;
    if (__isset.Attachments != rhs.__isset.Attachments)
      return false;
    else if (__isset.Attachments && !(Attachments == rhs.Attachments))
      return false;
    return true;
  }
  bool operator != (const MSceneManipulation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneManipulation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MSceneManipulation &a, MSceneManipulation &b);

std::ostream& operator<<(std::ostream& out, const MSceneManipulation& obj);

typedef struct _MCollider__isset {
  _MCollider__isset() : BoxColliderProperties(false), SphereColliderProperties(false), CapsuleColliderProperties(false), ConeColliderProperties(false), CylinderColliderProperties(false), MeshColliderProperties(false), PositionOffset(false), RotationOffset(false), Colliders(false), Properties(false) {}
  bool BoxColliderProperties :1;
  bool SphereColliderProperties :1;
  bool CapsuleColliderProperties :1;
  bool ConeColliderProperties :1;
  bool CylinderColliderProperties :1;
  bool MeshColliderProperties :1;
  bool PositionOffset :1;
  bool RotationOffset :1;
  bool Colliders :1;
  bool Properties :1;
} _MCollider__isset;

class MCollider : public virtual ::apache::thrift::TBase {
 public:

  MCollider(const MCollider&);
  MCollider& operator=(const MCollider&);
  MCollider() : ID(), Type((MColliderType::type)0) {
  }

  virtual ~MCollider() noexcept;
  std::string ID;
  MColliderType::type Type;
  MBoxColliderProperties BoxColliderProperties;
  MSphereColliderProperties SphereColliderProperties;
  MCapsuleColliderProperties CapsuleColliderProperties;
  MConeColliderProperties ConeColliderProperties;
  MCylinderColliderProperties CylinderColliderProperties;
  MMeshColliderProperties MeshColliderProperties;
   ::MMIStandard::MVector3 PositionOffset;
   ::MMIStandard::MQuaternion RotationOffset;
  std::vector<MCollider>  Colliders;
  std::map<std::string, std::string>  Properties;

  _MCollider__isset __isset;

  void __set_ID(const std::string& val);

  void __set_Type(const MColliderType::type val);

  void __set_BoxColliderProperties(const MBoxColliderProperties& val);

  void __set_SphereColliderProperties(const MSphereColliderProperties& val);

  void __set_CapsuleColliderProperties(const MCapsuleColliderProperties& val);

  void __set_ConeColliderProperties(const MConeColliderProperties& val);

  void __set_CylinderColliderProperties(const MCylinderColliderProperties& val);

  void __set_MeshColliderProperties(const MMeshColliderProperties& val);

  void __set_PositionOffset(const  ::MMIStandard::MVector3& val);

  void __set_RotationOffset(const  ::MMIStandard::MQuaternion& val);

  void __set_Colliders(const std::vector<MCollider> & val);

  void __set_Properties(const std::map<std::string, std::string> & val);

  bool operator == (const MCollider & rhs) const
  {
    if (!(ID == rhs.ID))
      return false;
    if (!(Type == rhs.Type))
      return false;
    if (__isset.BoxColliderProperties != rhs.__isset.BoxColliderProperties)
      return false;
    else if (__isset.BoxColliderProperties && !(BoxColliderProperties == rhs.BoxColliderProperties))
      return false;
    if (__isset.SphereColliderProperties != rhs.__isset.SphereColliderProperties)
      return false;
    else if (__isset.SphereColliderProperties && !(SphereColliderProperties == rhs.SphereColliderProperties))
      return false;
    if (__isset.CapsuleColliderProperties != rhs.__isset.CapsuleColliderProperties)
      return false;
    else if (__isset.CapsuleColliderProperties && !(CapsuleColliderProperties == rhs.CapsuleColliderProperties))
      return false;
    if (__isset.ConeColliderProperties != rhs.__isset.ConeColliderProperties)
      return false;
    else if (__isset.ConeColliderProperties && !(ConeColliderProperties == rhs.ConeColliderProperties))
      return false;
    if (__isset.CylinderColliderProperties != rhs.__isset.CylinderColliderProperties)
      return false;
    else if (__isset.CylinderColliderProperties && !(CylinderColliderProperties == rhs.CylinderColliderProperties))
      return false;
    if (__isset.MeshColliderProperties != rhs.__isset.MeshColliderProperties)
      return false;
    else if (__isset.MeshColliderProperties && !(MeshColliderProperties == rhs.MeshColliderProperties))
      return false;
    if (__isset.PositionOffset != rhs.__isset.PositionOffset)
      return false;
    else if (__isset.PositionOffset && !(PositionOffset == rhs.PositionOffset))
      return false;
    if (__isset.RotationOffset != rhs.__isset.RotationOffset)
      return false;
    else if (__isset.RotationOffset && !(RotationOffset == rhs.RotationOffset))
      return false;
    if (__isset.Colliders != rhs.__isset.Colliders)
      return false;
    else if (__isset.Colliders && !(Colliders == rhs.Colliders))
      return false;
    if (__isset.Properties != rhs.__isset.Properties)
      return false;
    else if (__isset.Properties && !(Properties == rhs.Properties))
      return false;
    return true;
  }
  bool operator != (const MCollider &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MCollider & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MCollider &a, MCollider &b);

std::ostream& operator<<(std::ostream& out, const MCollider& obj);

typedef struct _MSceneObject__isset {
  _MSceneObject__isset() : Collider(false), Mesh(false), PhysicsProperties(false), Properties(false), Attachments(false), Constraints(false) {}
  bool Collider :1;
  bool Mesh :1;
  bool PhysicsProperties :1;
  bool Properties :1;
  bool Attachments :1;
  bool Constraints :1;
} _MSceneObject__isset;

class MSceneObject : public virtual ::apache::thrift::TBase {
 public:

  MSceneObject(const MSceneObject&);
  MSceneObject& operator=(const MSceneObject&);
  MSceneObject() : ID(), Name() {
  }

  virtual ~MSceneObject() noexcept;
  std::string ID;
  std::string Name;
   ::MMIStandard::MTransform Transform;
  MCollider Collider;
  MMesh Mesh;
  MPhysicsProperties PhysicsProperties;
  std::map<std::string, std::string>  Properties;
  std::vector<MAttachment>  Attachments;
  std::vector< ::MMIStandard::MConstraint>  Constraints;

  _MSceneObject__isset __isset;

  void __set_ID(const std::string& val);

  void __set_Name(const std::string& val);

  void __set_Transform(const  ::MMIStandard::MTransform& val);

  void __set_Collider(const MCollider& val);

  void __set_Mesh(const MMesh& val);

  void __set_PhysicsProperties(const MPhysicsProperties& val);

  void __set_Properties(const std::map<std::string, std::string> & val);

  void __set_Attachments(const std::vector<MAttachment> & val);

  void __set_Constraints(const std::vector< ::MMIStandard::MConstraint> & val);

  bool operator == (const MSceneObject & rhs) const
  {
    if (!(ID == rhs.ID))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Transform == rhs.Transform))
      return false;
    if (__isset.Collider != rhs.__isset.Collider)
      return false;
    else if (__isset.Collider && !(Collider == rhs.Collider))
      return false;
    if (__isset.Mesh != rhs.__isset.Mesh)
      return false;
    else if (__isset.Mesh && !(Mesh == rhs.Mesh))
      return false;
    if (__isset.PhysicsProperties != rhs.__isset.PhysicsProperties)
      return false;
    else if (__isset.PhysicsProperties && !(PhysicsProperties == rhs.PhysicsProperties))
      return false;
    if (__isset.Properties != rhs.__isset.Properties)
      return false;
    else if (__isset.Properties && !(Properties == rhs.Properties))
      return false;
    if (__isset.Attachments != rhs.__isset.Attachments)
      return false;
    else if (__isset.Attachments && !(Attachments == rhs.Attachments))
      return false;
    if (__isset.Constraints != rhs.__isset.Constraints)
      return false;
    else if (__isset.Constraints && !(Constraints == rhs.Constraints))
      return false;
    return true;
  }
  bool operator != (const MSceneObject &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneObject & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MSceneObject &a, MSceneObject &b);

std::ostream& operator<<(std::ostream& out, const MSceneObject& obj);

typedef struct _MSceneObjectUpdate__isset {
  _MSceneObjectUpdate__isset() : Name(false), Transform(false), Collider(false), Mesh(false), PhysicsProperties(false), HandPoses(false), Properties(false), Attachments(false), Constraints(false) {}
  bool Name :1;
  bool Transform :1;
  bool Collider :1;
  bool Mesh :1;
  bool PhysicsProperties :1;
  bool HandPoses :1;
  bool Properties :1;
  bool Attachments :1;
  bool Constraints :1;
} _MSceneObjectUpdate__isset;

class MSceneObjectUpdate : public virtual ::apache::thrift::TBase {
 public:

  MSceneObjectUpdate(const MSceneObjectUpdate&);
  MSceneObjectUpdate& operator=(const MSceneObjectUpdate&);
  MSceneObjectUpdate() : ID(), Name() {
  }

  virtual ~MSceneObjectUpdate() noexcept;
  std::string ID;
  std::string Name;
  MTransformUpdate Transform;
  MCollider Collider;
  MMesh Mesh;
  MPhysicsProperties PhysicsProperties;
  std::vector< ::MMIStandard::MHandPose>  HandPoses;
  std::vector<MPropertyUpdate>  Properties;
  std::vector<MAttachment>  Attachments;
  std::vector< ::MMIStandard::MConstraint>  Constraints;

  _MSceneObjectUpdate__isset __isset;

  void __set_ID(const std::string& val);

  void __set_Name(const std::string& val);

  void __set_Transform(const MTransformUpdate& val);

  void __set_Collider(const MCollider& val);

  void __set_Mesh(const MMesh& val);

  void __set_PhysicsProperties(const MPhysicsProperties& val);

  void __set_HandPoses(const std::vector< ::MMIStandard::MHandPose> & val);

  void __set_Properties(const std::vector<MPropertyUpdate> & val);

  void __set_Attachments(const std::vector<MAttachment> & val);

  void __set_Constraints(const std::vector< ::MMIStandard::MConstraint> & val);

  bool operator == (const MSceneObjectUpdate & rhs) const
  {
    if (!(ID == rhs.ID))
      return false;
    if (__isset.Name != rhs.__isset.Name)
      return false;
    else if (__isset.Name && !(Name == rhs.Name))
      return false;
    if (__isset.Transform != rhs.__isset.Transform)
      return false;
    else if (__isset.Transform && !(Transform == rhs.Transform))
      return false;
    if (__isset.Collider != rhs.__isset.Collider)
      return false;
    else if (__isset.Collider && !(Collider == rhs.Collider))
      return false;
    if (__isset.Mesh != rhs.__isset.Mesh)
      return false;
    else if (__isset.Mesh && !(Mesh == rhs.Mesh))
      return false;
    if (__isset.PhysicsProperties != rhs.__isset.PhysicsProperties)
      return false;
    else if (__isset.PhysicsProperties && !(PhysicsProperties == rhs.PhysicsProperties))
      return false;
    if (__isset.HandPoses != rhs.__isset.HandPoses)
      return false;
    else if (__isset.HandPoses && !(HandPoses == rhs.HandPoses))
      return false;
    if (__isset.Properties != rhs.__isset.Properties)
      return false;
    else if (__isset.Properties && !(Properties == rhs.Properties))
      return false;
    if (__isset.Attachments != rhs.__isset.Attachments)
      return false;
    else if (__isset.Attachments && !(Attachments == rhs.Attachments))
      return false;
    if (__isset.Constraints != rhs.__isset.Constraints)
      return false;
    else if (__isset.Constraints && !(Constraints == rhs.Constraints))
      return false;
    return true;
  }
  bool operator != (const MSceneObjectUpdate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneObjectUpdate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MSceneObjectUpdate &a, MSceneObjectUpdate &b);

std::ostream& operator<<(std::ostream& out, const MSceneObjectUpdate& obj);

typedef struct _MSceneUpdate__isset {
  _MSceneUpdate__isset() : AddedSceneObjects(false), ChangedSceneObjects(false), RemovedSceneObjects(false), AddedAvatars(false), ChangedAvatars(false), RemovedAvatars(false) {}
  bool AddedSceneObjects :1;
  bool ChangedSceneObjects :1;
  bool RemovedSceneObjects :1;
  bool AddedAvatars :1;
  bool ChangedAvatars :1;
  bool RemovedAvatars :1;
} _MSceneUpdate__isset;

class MSceneUpdate : public virtual ::apache::thrift::TBase {
 public:

  MSceneUpdate(const MSceneUpdate&);
  MSceneUpdate& operator=(const MSceneUpdate&);
  MSceneUpdate() {
  }

  virtual ~MSceneUpdate() noexcept;
  std::vector<MSceneObject>  AddedSceneObjects;
  std::vector<MSceneObjectUpdate>  ChangedSceneObjects;
  std::vector<std::string>  RemovedSceneObjects;
  std::vector< ::MMIStandard::MAvatar>  AddedAvatars;
  std::vector<MAvatarUpdate>  ChangedAvatars;
  std::vector<std::string>  RemovedAvatars;

  _MSceneUpdate__isset __isset;

  void __set_AddedSceneObjects(const std::vector<MSceneObject> & val);

  void __set_ChangedSceneObjects(const std::vector<MSceneObjectUpdate> & val);

  void __set_RemovedSceneObjects(const std::vector<std::string> & val);

  void __set_AddedAvatars(const std::vector< ::MMIStandard::MAvatar> & val);

  void __set_ChangedAvatars(const std::vector<MAvatarUpdate> & val);

  void __set_RemovedAvatars(const std::vector<std::string> & val);

  bool operator == (const MSceneUpdate & rhs) const
  {
    if (__isset.AddedSceneObjects != rhs.__isset.AddedSceneObjects)
      return false;
    else if (__isset.AddedSceneObjects && !(AddedSceneObjects == rhs.AddedSceneObjects))
      return false;
    if (__isset.ChangedSceneObjects != rhs.__isset.ChangedSceneObjects)
      return false;
    else if (__isset.ChangedSceneObjects && !(ChangedSceneObjects == rhs.ChangedSceneObjects))
      return false;
    if (__isset.RemovedSceneObjects != rhs.__isset.RemovedSceneObjects)
      return false;
    else if (__isset.RemovedSceneObjects && !(RemovedSceneObjects == rhs.RemovedSceneObjects))
      return false;
    if (__isset.AddedAvatars != rhs.__isset.AddedAvatars)
      return false;
    else if (__isset.AddedAvatars && !(AddedAvatars == rhs.AddedAvatars))
      return false;
    if (__isset.ChangedAvatars != rhs.__isset.ChangedAvatars)
      return false;
    else if (__isset.ChangedAvatars && !(ChangedAvatars == rhs.ChangedAvatars))
      return false;
    if (__isset.RemovedAvatars != rhs.__isset.RemovedAvatars)
      return false;
    else if (__isset.RemovedAvatars && !(RemovedAvatars == rhs.RemovedAvatars))
      return false;
    return true;
  }
  bool operator != (const MSceneUpdate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MSceneUpdate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MSceneUpdate &a, MSceneUpdate &b);

std::ostream& operator<<(std::ostream& out, const MSceneUpdate& obj);

typedef struct _MAvatarUpdate__isset {
  _MAvatarUpdate__isset() : PostureValues(false), SceneObjects(false), Description(false), Properties(false) {}
  bool PostureValues :1;
  bool SceneObjects :1;
  bool Description :1;
  bool Properties :1;
} _MAvatarUpdate__isset;

class MAvatarUpdate : public virtual ::apache::thrift::TBase {
 public:

  MAvatarUpdate(const MAvatarUpdate&);
  MAvatarUpdate& operator=(const MAvatarUpdate&);
  MAvatarUpdate() : ID() {
  }

  virtual ~MAvatarUpdate() noexcept;
  std::string ID;
   ::MMIStandard::MAvatarPostureValues PostureValues;
  std::vector<std::string>  SceneObjects;
   ::MMIStandard::MAvatarDescription Description;
  std::vector<MPropertyUpdate>  Properties;

  _MAvatarUpdate__isset __isset;

  void __set_ID(const std::string& val);

  void __set_PostureValues(const  ::MMIStandard::MAvatarPostureValues& val);

  void __set_SceneObjects(const std::vector<std::string> & val);

  void __set_Description(const  ::MMIStandard::MAvatarDescription& val);

  void __set_Properties(const std::vector<MPropertyUpdate> & val);

  bool operator == (const MAvatarUpdate & rhs) const
  {
    if (!(ID == rhs.ID))
      return false;
    if (__isset.PostureValues != rhs.__isset.PostureValues)
      return false;
    else if (__isset.PostureValues && !(PostureValues == rhs.PostureValues))
      return false;
    if (__isset.SceneObjects != rhs.__isset.SceneObjects)
      return false;
    else if (__isset.SceneObjects && !(SceneObjects == rhs.SceneObjects))
      return false;
    if (__isset.Description != rhs.__isset.Description)
      return false;
    else if (__isset.Description && !(Description == rhs.Description))
      return false;
    if (__isset.Properties != rhs.__isset.Properties)
      return false;
    else if (__isset.Properties && !(Properties == rhs.Properties))
      return false;
    return true;
  }
  bool operator != (const MAvatarUpdate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MAvatarUpdate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MAvatarUpdate &a, MAvatarUpdate &b);

std::ostream& operator<<(std::ostream& out, const MAvatarUpdate& obj);

} // namespace

#endif
