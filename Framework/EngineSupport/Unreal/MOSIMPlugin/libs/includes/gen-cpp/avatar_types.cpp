/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "avatar_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace MMIStandard {

int _kMJointTypeValues[] = {
  MJointType::Undefined,
  MJointType::LeftBallTip,
  MJointType::LeftBall,
  MJointType::LeftAnkle,
  MJointType::LeftKnee,
  MJointType::LeftHip,
  MJointType::RightBallTip,
  MJointType::RightBall,
  MJointType::RightAnkle,
  MJointType::RightKnee,
  MJointType::RightHip,
  MJointType::PelvisCentre,
  MJointType::S1L5Joint,
  MJointType::T12L1Joint,
  MJointType::T1T2Joint,
  MJointType::C4C5Joint,
  MJointType::HeadJoint,
  MJointType::HeadTip,
  MJointType::MidEye,
  MJointType::LeftShoulder,
  MJointType::LeftElbow,
  MJointType::LeftWrist,
  MJointType::RightShoulder,
  MJointType::RightElbow,
  MJointType::RightWrist,
  MJointType::LeftThumbMid,
  MJointType::LeftThumbMeta,
  MJointType::LeftThumbCarpal,
  MJointType::LeftThumbTip,
  MJointType::LeftIndexMeta,
  MJointType::LeftIndexProximal,
  MJointType::LeftIndexDistal,
  MJointType::LeftIndexTip,
  MJointType::LeftMiddleMeta,
  MJointType::LeftMiddleProximal,
  MJointType::LeftMiddleDistal,
  MJointType::LeftMiddleTip,
  MJointType::LeftRingMeta,
  MJointType::LeftRingProximal,
  MJointType::LeftRingDistal,
  MJointType::LeftRingTip,
  MJointType::LeftLittleMeta,
  MJointType::LeftLittleProximal,
  MJointType::LeftLittleDistal,
  MJointType::LeftLittleTip,
  MJointType::RightThumbMid,
  MJointType::RightThumbMeta,
  MJointType::RightThumbCarpal,
  MJointType::RightThumbTip,
  MJointType::RightIndexMeta,
  MJointType::RightIndexProximal,
  MJointType::RightIndexDistal,
  MJointType::RightIndexTip,
  MJointType::RightMiddleMeta,
  MJointType::RightMiddleProximal,
  MJointType::RightMiddleDistal,
  MJointType::RightMiddleTip,
  MJointType::RightRingMeta,
  MJointType::RightRingProximal,
  MJointType::RightRingDistal,
  MJointType::RightRingTip,
  MJointType::RightLittleMeta,
  MJointType::RightLittleProximal,
  MJointType::RightLittleDistal,
  MJointType::RightLittleTip,
  MJointType::Root
};
const char* _kMJointTypeNames[] = {
  "Undefined",
  "LeftBallTip",
  "LeftBall",
  "LeftAnkle",
  "LeftKnee",
  "LeftHip",
  "RightBallTip",
  "RightBall",
  "RightAnkle",
  "RightKnee",
  "RightHip",
  "PelvisCentre",
  "S1L5Joint",
  "T12L1Joint",
  "T1T2Joint",
  "C4C5Joint",
  "HeadJoint",
  "HeadTip",
  "MidEye",
  "LeftShoulder",
  "LeftElbow",
  "LeftWrist",
  "RightShoulder",
  "RightElbow",
  "RightWrist",
  "LeftThumbMid",
  "LeftThumbMeta",
  "LeftThumbCarpal",
  "LeftThumbTip",
  "LeftIndexMeta",
  "LeftIndexProximal",
  "LeftIndexDistal",
  "LeftIndexTip",
  "LeftMiddleMeta",
  "LeftMiddleProximal",
  "LeftMiddleDistal",
  "LeftMiddleTip",
  "LeftRingMeta",
  "LeftRingProximal",
  "LeftRingDistal",
  "LeftRingTip",
  "LeftLittleMeta",
  "LeftLittleProximal",
  "LeftLittleDistal",
  "LeftLittleTip",
  "RightThumbMid",
  "RightThumbMeta",
  "RightThumbCarpal",
  "RightThumbTip",
  "RightIndexMeta",
  "RightIndexProximal",
  "RightIndexDistal",
  "RightIndexTip",
  "RightMiddleMeta",
  "RightMiddleProximal",
  "RightMiddleDistal",
  "RightMiddleTip",
  "RightRingMeta",
  "RightRingProximal",
  "RightRingDistal",
  "RightRingTip",
  "RightLittleMeta",
  "RightLittleProximal",
  "RightLittleDistal",
  "RightLittleTip",
  "Root"
};
const std::map<int, const char*> _MJointType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(66, _kMJointTypeValues, _kMJointTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const MJointType::type& val) {
  std::map<int, const char*>::const_iterator it = _MJointType_VALUES_TO_NAMES.find(val);
  if (it != _MJointType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const MJointType::type& val) {
  std::map<int, const char*>::const_iterator it = _MJointType_VALUES_TO_NAMES.find(val);
  if (it != _MJointType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kMEndeffectorTypeValues[] = {
  MEndeffectorType::LeftHand,
  MEndeffectorType::LeftFoot,
  MEndeffectorType::RightHand,
  MEndeffectorType::RightFoot,
  MEndeffectorType::Root
};
const char* _kMEndeffectorTypeNames[] = {
  "LeftHand",
  "LeftFoot",
  "RightHand",
  "RightFoot",
  "Root"
};
const std::map<int, const char*> _MEndeffectorType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kMEndeffectorTypeValues, _kMEndeffectorTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const MEndeffectorType::type& val) {
  std::map<int, const char*>::const_iterator it = _MEndeffectorType_VALUES_TO_NAMES.find(val);
  if (it != _MEndeffectorType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const MEndeffectorType::type& val) {
  std::map<int, const char*>::const_iterator it = _MEndeffectorType_VALUES_TO_NAMES.find(val);
  if (it != _MEndeffectorType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kMChannelValues[] = {
  MChannel::XOffset,
  MChannel::YOffset,
  MChannel::ZOffset,
  MChannel::XRotation,
  MChannel::YRotation,
  MChannel::ZRotation,
  MChannel::WRotation
};
const char* _kMChannelNames[] = {
  "XOffset",
  "YOffset",
  "ZOffset",
  "XRotation",
  "YRotation",
  "ZRotation",
  "WRotation"
};
const std::map<int, const char*> _MChannel_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kMChannelValues, _kMChannelNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const MChannel::type& val) {
  std::map<int, const char*>::const_iterator it = _MChannel_VALUES_TO_NAMES.find(val);
  if (it != _MChannel_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const MChannel::type& val) {
  std::map<int, const char*>::const_iterator it = _MChannel_VALUES_TO_NAMES.find(val);
  if (it != _MChannel_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


MAvatarPostureValues::~MAvatarPostureValues() noexcept {
}


void MAvatarPostureValues::__set_AvatarID(const std::string& val) {
  this->AvatarID = val;
}

void MAvatarPostureValues::__set_PostureData(const std::vector<double> & val) {
  this->PostureData = val;
}

void MAvatarPostureValues::__set_PartialJointList(const std::vector<MJointType::type> & val) {
  this->PartialJointList = val;
__isset.PartialJointList = true;
}
std::ostream& operator<<(std::ostream& out, const MAvatarPostureValues& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MAvatarPostureValues::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_AvatarID = false;
  bool isset_PostureData = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->AvatarID);
          isset_AvatarID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->PostureData.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->PostureData.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readDouble(this->PostureData[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_PostureData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->PartialJointList.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->PartialJointList.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              int32_t ecast10;
              xfer += iprot->readI32(ecast10);
              this->PartialJointList[_i9] = (MJointType::type)ecast10;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.PartialJointList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_AvatarID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_PostureData)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MAvatarPostureValues::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MAvatarPostureValues");

  xfer += oprot->writeFieldBegin("AvatarID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->AvatarID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("PostureData", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->PostureData.size()));
    std::vector<double> ::const_iterator _iter11;
    for (_iter11 = this->PostureData.begin(); _iter11 != this->PostureData.end(); ++_iter11)
    {
      xfer += oprot->writeDouble((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.PartialJointList) {
    xfer += oprot->writeFieldBegin("PartialJointList", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->PartialJointList.size()));
      std::vector<MJointType::type> ::const_iterator _iter12;
      for (_iter12 = this->PartialJointList.begin(); _iter12 != this->PartialJointList.end(); ++_iter12)
      {
        xfer += oprot->writeI32((int32_t)(*_iter12));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MAvatarPostureValues &a, MAvatarPostureValues &b) {
  using ::std::swap;
  swap(a.AvatarID, b.AvatarID);
  swap(a.PostureData, b.PostureData);
  swap(a.PartialJointList, b.PartialJointList);
  swap(a.__isset, b.__isset);
}

MAvatarPostureValues::MAvatarPostureValues(const MAvatarPostureValues& other13) {
  AvatarID = other13.AvatarID;
  PostureData = other13.PostureData;
  PartialJointList = other13.PartialJointList;
  __isset = other13.__isset;
}
MAvatarPostureValues& MAvatarPostureValues::operator=(const MAvatarPostureValues& other14) {
  AvatarID = other14.AvatarID;
  PostureData = other14.PostureData;
  PartialJointList = other14.PartialJointList;
  __isset = other14.__isset;
  return *this;
}
void MAvatarPostureValues::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MAvatarPostureValues(";
  out << "AvatarID=" << to_string(AvatarID);
  out << ", " << "PostureData=" << to_string(PostureData);
  out << ", " << "PartialJointList="; (__isset.PartialJointList ? (out << to_string(PartialJointList)) : (out << "<null>"));
  out << ")";
}


MJoint::~MJoint() noexcept {
}


void MJoint::__set_ID(const std::string& val) {
  this->ID = val;
}

void MJoint::__set_Type(const MJointType::type val) {
  this->Type = val;
}

void MJoint::__set_Position(const  ::MMIStandard::MVector3& val) {
  this->Position = val;
}

void MJoint::__set_Rotation(const  ::MMIStandard::MQuaternion& val) {
  this->Rotation = val;
}

void MJoint::__set_Channels(const std::vector<MChannel::type> & val) {
  this->Channels = val;
__isset.Channels = true;
}

void MJoint::__set_Parent(const std::string& val) {
  this->Parent = val;
__isset.Parent = true;
}
std::ostream& operator<<(std::ostream& out, const MJoint& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MJoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ID = false;
  bool isset_Type = false;
  bool isset_Position = false;
  bool isset_Rotation = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ID);
          isset_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast15;
          xfer += iprot->readI32(ecast15);
          this->Type = (MJointType::type)ecast15;
          isset_Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Position.read(iprot);
          isset_Position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Rotation.read(iprot);
          isset_Rotation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Channels.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readListBegin(_etype19, _size16);
            this->Channels.resize(_size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              int32_t ecast21;
              xfer += iprot->readI32(ecast21);
              this->Channels[_i20] = (MChannel::type)ecast21;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Channels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Parent);
          this->__isset.Parent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Position)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Rotation)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MJoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MJoint");

  xfer += oprot->writeFieldBegin("ID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Position", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->Position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Rotation", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->Rotation.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.Channels) {
    xfer += oprot->writeFieldBegin("Channels", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->Channels.size()));
      std::vector<MChannel::type> ::const_iterator _iter22;
      for (_iter22 = this->Channels.begin(); _iter22 != this->Channels.end(); ++_iter22)
      {
        xfer += oprot->writeI32((int32_t)(*_iter22));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Parent) {
    xfer += oprot->writeFieldBegin("Parent", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->Parent);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MJoint &a, MJoint &b) {
  using ::std::swap;
  swap(a.ID, b.ID);
  swap(a.Type, b.Type);
  swap(a.Position, b.Position);
  swap(a.Rotation, b.Rotation);
  swap(a.Channels, b.Channels);
  swap(a.Parent, b.Parent);
  swap(a.__isset, b.__isset);
}

MJoint::MJoint(const MJoint& other23) {
  ID = other23.ID;
  Type = other23.Type;
  Position = other23.Position;
  Rotation = other23.Rotation;
  Channels = other23.Channels;
  Parent = other23.Parent;
  __isset = other23.__isset;
}
MJoint& MJoint::operator=(const MJoint& other24) {
  ID = other24.ID;
  Type = other24.Type;
  Position = other24.Position;
  Rotation = other24.Rotation;
  Channels = other24.Channels;
  Parent = other24.Parent;
  __isset = other24.__isset;
  return *this;
}
void MJoint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MJoint(";
  out << "ID=" << to_string(ID);
  out << ", " << "Type=" << to_string(Type);
  out << ", " << "Position=" << to_string(Position);
  out << ", " << "Rotation=" << to_string(Rotation);
  out << ", " << "Channels="; (__isset.Channels ? (out << to_string(Channels)) : (out << "<null>"));
  out << ", " << "Parent="; (__isset.Parent ? (out << to_string(Parent)) : (out << "<null>"));
  out << ")";
}


MAvatarPosture::~MAvatarPosture() noexcept {
}


void MAvatarPosture::__set_AvatarID(const std::string& val) {
  this->AvatarID = val;
}

void MAvatarPosture::__set_Joints(const std::vector<MJoint> & val) {
  this->Joints = val;
}
std::ostream& operator<<(std::ostream& out, const MAvatarPosture& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MAvatarPosture::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_AvatarID = false;
  bool isset_Joints = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->AvatarID);
          isset_AvatarID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Joints.clear();
            uint32_t _size25;
            ::apache::thrift::protocol::TType _etype28;
            xfer += iprot->readListBegin(_etype28, _size25);
            this->Joints.resize(_size25);
            uint32_t _i29;
            for (_i29 = 0; _i29 < _size25; ++_i29)
            {
              xfer += this->Joints[_i29].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_Joints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_AvatarID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Joints)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MAvatarPosture::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MAvatarPosture");

  xfer += oprot->writeFieldBegin("AvatarID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->AvatarID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Joints", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Joints.size()));
    std::vector<MJoint> ::const_iterator _iter30;
    for (_iter30 = this->Joints.begin(); _iter30 != this->Joints.end(); ++_iter30)
    {
      xfer += (*_iter30).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MAvatarPosture &a, MAvatarPosture &b) {
  using ::std::swap;
  swap(a.AvatarID, b.AvatarID);
  swap(a.Joints, b.Joints);
}

MAvatarPosture::MAvatarPosture(const MAvatarPosture& other31) {
  AvatarID = other31.AvatarID;
  Joints = other31.Joints;
}
MAvatarPosture& MAvatarPosture::operator=(const MAvatarPosture& other32) {
  AvatarID = other32.AvatarID;
  Joints = other32.Joints;
  return *this;
}
void MAvatarPosture::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MAvatarPosture(";
  out << "AvatarID=" << to_string(AvatarID);
  out << ", " << "Joints=" << to_string(Joints);
  out << ")";
}


MHandPose::~MHandPose() noexcept {
}


void MHandPose::__set_Joints(const std::vector<MJoint> & val) {
  this->Joints = val;
}

void MHandPose::__set_Properties(const std::map<std::string, std::string> & val) {
  this->Properties = val;
__isset.Properties = true;
}
std::ostream& operator<<(std::ostream& out, const MHandPose& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MHandPose::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_Joints = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Joints.clear();
            uint32_t _size33;
            ::apache::thrift::protocol::TType _etype36;
            xfer += iprot->readListBegin(_etype36, _size33);
            this->Joints.resize(_size33);
            uint32_t _i37;
            for (_i37 = 0; _i37 < _size33; ++_i37)
            {
              xfer += this->Joints[_i37].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_Joints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->Properties.clear();
            uint32_t _size38;
            ::apache::thrift::protocol::TType _ktype39;
            ::apache::thrift::protocol::TType _vtype40;
            xfer += iprot->readMapBegin(_ktype39, _vtype40, _size38);
            uint32_t _i42;
            for (_i42 = 0; _i42 < _size38; ++_i42)
            {
              std::string _key43;
              xfer += iprot->readString(_key43);
              std::string& _val44 = this->Properties[_key43];
              xfer += iprot->readString(_val44);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.Properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_Joints)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MHandPose::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MHandPose");

  xfer += oprot->writeFieldBegin("Joints", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Joints.size()));
    std::vector<MJoint> ::const_iterator _iter45;
    for (_iter45 = this->Joints.begin(); _iter45 != this->Joints.end(); ++_iter45)
    {
      xfer += (*_iter45).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.Properties) {
    xfer += oprot->writeFieldBegin("Properties", ::apache::thrift::protocol::T_MAP, 2);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->Properties.size()));
      std::map<std::string, std::string> ::const_iterator _iter46;
      for (_iter46 = this->Properties.begin(); _iter46 != this->Properties.end(); ++_iter46)
      {
        xfer += oprot->writeString(_iter46->first);
        xfer += oprot->writeString(_iter46->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MHandPose &a, MHandPose &b) {
  using ::std::swap;
  swap(a.Joints, b.Joints);
  swap(a.Properties, b.Properties);
  swap(a.__isset, b.__isset);
}

MHandPose::MHandPose(const MHandPose& other47) {
  Joints = other47.Joints;
  Properties = other47.Properties;
  __isset = other47.__isset;
}
MHandPose& MHandPose::operator=(const MHandPose& other48) {
  Joints = other48.Joints;
  Properties = other48.Properties;
  __isset = other48.__isset;
  return *this;
}
void MHandPose::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MHandPose(";
  out << "Joints=" << to_string(Joints);
  out << ", " << "Properties="; (__isset.Properties ? (out << to_string(Properties)) : (out << "<null>"));
  out << ")";
}


MAvatarDescription::~MAvatarDescription() noexcept {
}


void MAvatarDescription::__set_AvatarID(const std::string& val) {
  this->AvatarID = val;
}

void MAvatarDescription::__set_ZeroPosture(const MAvatarPosture& val) {
  this->ZeroPosture = val;
}

void MAvatarDescription::__set_Properties(const std::map<std::string, std::string> & val) {
  this->Properties = val;
__isset.Properties = true;
}
std::ostream& operator<<(std::ostream& out, const MAvatarDescription& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MAvatarDescription::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_AvatarID = false;
  bool isset_ZeroPosture = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->AvatarID);
          isset_AvatarID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ZeroPosture.read(iprot);
          isset_ZeroPosture = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->Properties.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _ktype50;
            ::apache::thrift::protocol::TType _vtype51;
            xfer += iprot->readMapBegin(_ktype50, _vtype51, _size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              std::string _key54;
              xfer += iprot->readString(_key54);
              std::string& _val55 = this->Properties[_key54];
              xfer += iprot->readString(_val55);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.Properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_AvatarID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ZeroPosture)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MAvatarDescription::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MAvatarDescription");

  xfer += oprot->writeFieldBegin("AvatarID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->AvatarID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ZeroPosture", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ZeroPosture.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.Properties) {
    xfer += oprot->writeFieldBegin("Properties", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->Properties.size()));
      std::map<std::string, std::string> ::const_iterator _iter56;
      for (_iter56 = this->Properties.begin(); _iter56 != this->Properties.end(); ++_iter56)
      {
        xfer += oprot->writeString(_iter56->first);
        xfer += oprot->writeString(_iter56->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MAvatarDescription &a, MAvatarDescription &b) {
  using ::std::swap;
  swap(a.AvatarID, b.AvatarID);
  swap(a.ZeroPosture, b.ZeroPosture);
  swap(a.Properties, b.Properties);
  swap(a.__isset, b.__isset);
}

MAvatarDescription::MAvatarDescription(const MAvatarDescription& other57) {
  AvatarID = other57.AvatarID;
  ZeroPosture = other57.ZeroPosture;
  Properties = other57.Properties;
  __isset = other57.__isset;
}
MAvatarDescription& MAvatarDescription::operator=(const MAvatarDescription& other58) {
  AvatarID = other58.AvatarID;
  ZeroPosture = other58.ZeroPosture;
  Properties = other58.Properties;
  __isset = other58.__isset;
  return *this;
}
void MAvatarDescription::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MAvatarDescription(";
  out << "AvatarID=" << to_string(AvatarID);
  out << ", " << "ZeroPosture=" << to_string(ZeroPosture);
  out << ", " << "Properties="; (__isset.Properties ? (out << to_string(Properties)) : (out << "<null>"));
  out << ")";
}


MAvatar::~MAvatar() noexcept {
}


void MAvatar::__set_ID(const std::string& val) {
  this->ID = val;
}

void MAvatar::__set_Name(const std::string& val) {
  this->Name = val;
}

void MAvatar::__set_Description(const MAvatarDescription& val) {
  this->Description = val;
}

void MAvatar::__set_PostureValues(const MAvatarPostureValues& val) {
  this->PostureValues = val;
}

void MAvatar::__set_SceneObjects(const std::vector<std::string> & val) {
  this->SceneObjects = val;
__isset.SceneObjects = true;
}

void MAvatar::__set_Properties(const std::map<std::string, std::string> & val) {
  this->Properties = val;
__isset.Properties = true;
}
std::ostream& operator<<(std::ostream& out, const MAvatar& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MAvatar::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ID = false;
  bool isset_Name = false;
  bool isset_Description = false;
  bool isset_PostureValues = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ID);
          isset_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          isset_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Description.read(iprot);
          isset_Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->PostureValues.read(iprot);
          isset_PostureValues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SceneObjects.clear();
            uint32_t _size59;
            ::apache::thrift::protocol::TType _etype62;
            xfer += iprot->readListBegin(_etype62, _size59);
            this->SceneObjects.resize(_size59);
            uint32_t _i63;
            for (_i63 = 0; _i63 < _size59; ++_i63)
            {
              xfer += iprot->readString(this->SceneObjects[_i63]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SceneObjects = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->Properties.clear();
            uint32_t _size64;
            ::apache::thrift::protocol::TType _ktype65;
            ::apache::thrift::protocol::TType _vtype66;
            xfer += iprot->readMapBegin(_ktype65, _vtype66, _size64);
            uint32_t _i68;
            for (_i68 = 0; _i68 < _size64; ++_i68)
            {
              std::string _key69;
              xfer += iprot->readString(_key69);
              std::string& _val70 = this->Properties[_key69];
              xfer += iprot->readString(_val70);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.Properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Description)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_PostureValues)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MAvatar::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MAvatar");

  xfer += oprot->writeFieldBegin("ID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->Description.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("PostureValues", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->PostureValues.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.SceneObjects) {
    xfer += oprot->writeFieldBegin("SceneObjects", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->SceneObjects.size()));
      std::vector<std::string> ::const_iterator _iter71;
      for (_iter71 = this->SceneObjects.begin(); _iter71 != this->SceneObjects.end(); ++_iter71)
      {
        xfer += oprot->writeString((*_iter71));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Properties) {
    xfer += oprot->writeFieldBegin("Properties", ::apache::thrift::protocol::T_MAP, 6);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->Properties.size()));
      std::map<std::string, std::string> ::const_iterator _iter72;
      for (_iter72 = this->Properties.begin(); _iter72 != this->Properties.end(); ++_iter72)
      {
        xfer += oprot->writeString(_iter72->first);
        xfer += oprot->writeString(_iter72->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MAvatar &a, MAvatar &b) {
  using ::std::swap;
  swap(a.ID, b.ID);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.PostureValues, b.PostureValues);
  swap(a.SceneObjects, b.SceneObjects);
  swap(a.Properties, b.Properties);
  swap(a.__isset, b.__isset);
}

MAvatar::MAvatar(const MAvatar& other73) {
  ID = other73.ID;
  Name = other73.Name;
  Description = other73.Description;
  PostureValues = other73.PostureValues;
  SceneObjects = other73.SceneObjects;
  Properties = other73.Properties;
  __isset = other73.__isset;
}
MAvatar& MAvatar::operator=(const MAvatar& other74) {
  ID = other74.ID;
  Name = other74.Name;
  Description = other74.Description;
  PostureValues = other74.PostureValues;
  SceneObjects = other74.SceneObjects;
  Properties = other74.Properties;
  __isset = other74.__isset;
  return *this;
}
void MAvatar::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MAvatar(";
  out << "ID=" << to_string(ID);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "PostureValues=" << to_string(PostureValues);
  out << ", " << "SceneObjects="; (__isset.SceneObjects ? (out << to_string(SceneObjects)) : (out << "<null>"));
  out << ", " << "Properties="; (__isset.Properties ? (out << to_string(Properties)) : (out << "<null>"));
  out << ")";
}

} // namespace
