/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MPathPlanningService_H
#define MPathPlanningService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "services_types.h"
#include "MMIServiceBase.h"

namespace MMIStandard {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MPathPlanningServiceIf : virtual public MMIServiceBaseIf {
 public:
  virtual ~MPathPlanningServiceIf() {}
  virtual void ComputePath( ::MMIStandard::MPathConstraint& _return, const  ::MMIStandard::MVector& start, const  ::MMIStandard::MVector& goal, const std::vector< ::MMIStandard::MSceneObject> & sceneObjects, const std::map<std::string, std::string> & properties) = 0;
};

class MPathPlanningServiceIfFactory : virtual public MMIServiceBaseIfFactory {
 public:
  typedef MPathPlanningServiceIf Handler;

  virtual ~MPathPlanningServiceIfFactory() {}

  virtual MPathPlanningServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) = 0;
};

class MPathPlanningServiceIfSingletonFactory : virtual public MPathPlanningServiceIfFactory {
 public:
  MPathPlanningServiceIfSingletonFactory(const ::std::shared_ptr<MPathPlanningServiceIf>& iface) : iface_(iface) {}
  virtual ~MPathPlanningServiceIfSingletonFactory() {}

  virtual MPathPlanningServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MMIServiceBaseIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MPathPlanningServiceIf> iface_;
};

class MPathPlanningServiceNull : virtual public MPathPlanningServiceIf , virtual public MMIServiceBaseNull {
 public:
  virtual ~MPathPlanningServiceNull() {}
  void ComputePath( ::MMIStandard::MPathConstraint& /* _return */, const  ::MMIStandard::MVector& /* start */, const  ::MMIStandard::MVector& /* goal */, const std::vector< ::MMIStandard::MSceneObject> & /* sceneObjects */, const std::map<std::string, std::string> & /* properties */) {
    return;
  }
};

typedef struct _MPathPlanningService_ComputePath_args__isset {
  _MPathPlanningService_ComputePath_args__isset() : start(false), goal(false), sceneObjects(false), properties(false) {}
  bool start :1;
  bool goal :1;
  bool sceneObjects :1;
  bool properties :1;
} _MPathPlanningService_ComputePath_args__isset;

class MPathPlanningService_ComputePath_args {
 public:

  MPathPlanningService_ComputePath_args(const MPathPlanningService_ComputePath_args&);
  MPathPlanningService_ComputePath_args& operator=(const MPathPlanningService_ComputePath_args&);
  MPathPlanningService_ComputePath_args() {
  }

  virtual ~MPathPlanningService_ComputePath_args() noexcept;
   ::MMIStandard::MVector start;
   ::MMIStandard::MVector goal;
  std::vector< ::MMIStandard::MSceneObject>  sceneObjects;
  std::map<std::string, std::string>  properties;

  _MPathPlanningService_ComputePath_args__isset __isset;

  void __set_start(const  ::MMIStandard::MVector& val);

  void __set_goal(const  ::MMIStandard::MVector& val);

  void __set_sceneObjects(const std::vector< ::MMIStandard::MSceneObject> & val);

  void __set_properties(const std::map<std::string, std::string> & val);

  bool operator == (const MPathPlanningService_ComputePath_args & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(goal == rhs.goal))
      return false;
    if (!(sceneObjects == rhs.sceneObjects))
      return false;
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const MPathPlanningService_ComputePath_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MPathPlanningService_ComputePath_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MPathPlanningService_ComputePath_pargs {
 public:


  virtual ~MPathPlanningService_ComputePath_pargs() noexcept;
  const  ::MMIStandard::MVector* start;
  const  ::MMIStandard::MVector* goal;
  const std::vector< ::MMIStandard::MSceneObject> * sceneObjects;
  const std::map<std::string, std::string> * properties;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MPathPlanningService_ComputePath_result__isset {
  _MPathPlanningService_ComputePath_result__isset() : success(false) {}
  bool success :1;
} _MPathPlanningService_ComputePath_result__isset;

class MPathPlanningService_ComputePath_result {
 public:

  MPathPlanningService_ComputePath_result(const MPathPlanningService_ComputePath_result&);
  MPathPlanningService_ComputePath_result& operator=(const MPathPlanningService_ComputePath_result&);
  MPathPlanningService_ComputePath_result() {
  }

  virtual ~MPathPlanningService_ComputePath_result() noexcept;
   ::MMIStandard::MPathConstraint success;

  _MPathPlanningService_ComputePath_result__isset __isset;

  void __set_success(const  ::MMIStandard::MPathConstraint& val);

  bool operator == (const MPathPlanningService_ComputePath_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MPathPlanningService_ComputePath_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MPathPlanningService_ComputePath_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MPathPlanningService_ComputePath_presult__isset {
  _MPathPlanningService_ComputePath_presult__isset() : success(false) {}
  bool success :1;
} _MPathPlanningService_ComputePath_presult__isset;

class MPathPlanningService_ComputePath_presult {
 public:


  virtual ~MPathPlanningService_ComputePath_presult() noexcept;
   ::MMIStandard::MPathConstraint* success;

  _MPathPlanningService_ComputePath_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MPathPlanningServiceClient : virtual public MPathPlanningServiceIf, public MMIServiceBaseClient {
 public:
  MPathPlanningServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    MMIServiceBaseClient(prot, prot) {}
  MPathPlanningServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    MMIServiceBaseClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ComputePath( ::MMIStandard::MPathConstraint& _return, const  ::MMIStandard::MVector& start, const  ::MMIStandard::MVector& goal, const std::vector< ::MMIStandard::MSceneObject> & sceneObjects, const std::map<std::string, std::string> & properties);
  void send_ComputePath(const  ::MMIStandard::MVector& start, const  ::MMIStandard::MVector& goal, const std::vector< ::MMIStandard::MSceneObject> & sceneObjects, const std::map<std::string, std::string> & properties);
  void recv_ComputePath( ::MMIStandard::MPathConstraint& _return);
};

class MPathPlanningServiceProcessor : public MMIServiceBaseProcessor {
 protected:
  ::std::shared_ptr<MPathPlanningServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MPathPlanningServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ComputePath(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MPathPlanningServiceProcessor(::std::shared_ptr<MPathPlanningServiceIf> iface) :
    MMIServiceBaseProcessor(iface),
    iface_(iface) {
    processMap_["ComputePath"] = &MPathPlanningServiceProcessor::process_ComputePath;
  }

  virtual ~MPathPlanningServiceProcessor() {}
};

class MPathPlanningServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MPathPlanningServiceProcessorFactory(const ::std::shared_ptr< MPathPlanningServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MPathPlanningServiceIfFactory > handlerFactory_;
};

class MPathPlanningServiceMultiface : virtual public MPathPlanningServiceIf, public MMIServiceBaseMultiface {
 public:
  MPathPlanningServiceMultiface(std::vector<std::shared_ptr<MPathPlanningServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<MPathPlanningServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      MMIServiceBaseMultiface::add(*iter);
    }
  }
  virtual ~MPathPlanningServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<MPathPlanningServiceIf> > ifaces_;
  MPathPlanningServiceMultiface() {}
  void add(::std::shared_ptr<MPathPlanningServiceIf> iface) {
    MMIServiceBaseMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void ComputePath( ::MMIStandard::MPathConstraint& _return, const  ::MMIStandard::MVector& start, const  ::MMIStandard::MVector& goal, const std::vector< ::MMIStandard::MSceneObject> & sceneObjects, const std::map<std::string, std::string> & properties) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ComputePath(_return, start, goal, sceneObjects, properties);
    }
    ifaces_[i]->ComputePath(_return, start, goal, sceneObjects, properties);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MPathPlanningServiceConcurrentClient : virtual public MPathPlanningServiceIf, public MMIServiceBaseConcurrentClient {
 public:
  MPathPlanningServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
    MMIServiceBaseConcurrentClient(prot, prot, sync) {}
  MPathPlanningServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :    MMIServiceBaseConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ComputePath( ::MMIStandard::MPathConstraint& _return, const  ::MMIStandard::MVector& start, const  ::MMIStandard::MVector& goal, const std::vector< ::MMIStandard::MSceneObject> & sceneObjects, const std::map<std::string, std::string> & properties);
  int32_t send_ComputePath(const  ::MMIStandard::MVector& start, const  ::MMIStandard::MVector& goal, const std::vector< ::MMIStandard::MSceneObject> & sceneObjects, const std::map<std::string, std::string> & properties);
  void recv_ComputePath( ::MMIStandard::MPathConstraint& _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
